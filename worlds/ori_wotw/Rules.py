"""
File generated with `extract_rules.py` with an `areas.wotw` file.

You can find such a file at https://github.com/ori-community/wotw-seedgen/tree/main/wotw_seedgen .

Do not edit manually.
"""

from worlds.generic.Rules import add_rule


def set_moki_rules(world, player):
    """Moki (or easy, default) rules."""
    add_rule(world.get_location("DepthsLight", player), lambda state: state.has_any(("UpperDepths.ForestsEyes", "Flash"), player))
    add_rule(world.get_location("SkipKwolok", player), lambda state: state.can_reach_region("HeaderStates", player) and state.has("Impossible", player))
    add_rule(world.get_location("SkipMora1", player), lambda state: state.can_reach_region("HeaderStates", player) and state.has("Impossible", player))
    add_rule(world.get_location("SkipMora2", player), lambda state: state.can_reach_region("HeaderStates", player) and state.has("Impossible", player))
    add_rule(world.get_entrance("Teleporters_to_MidnightBurrows.Teleporter", player), lambda state: state.has("BurrowsTP", player) and state.has("Bash", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_entrance("Teleporters_to_MarshSpawn.Main", player), lambda state: state.has("MarshTP", player))
    add_rule(world.get_entrance("Teleporters_to_HowlsDen.Teleporter", player), lambda state: state.has("DenTP", player))
    add_rule(world.get_entrance("Teleporters_to_EastHollow.Teleporter", player), lambda state: state.has("HollowTP", player))
    add_rule(world.get_entrance("Teleporters_to_GladesTown.Teleporter", player), lambda state: state.has("GladesTP", player))
    add_rule(world.get_entrance("Teleporters_to_InnerWellspring.Teleporter", player), lambda state: state.has("WellspringTP", player))
    add_rule(world.get_entrance("Teleporters_to_WoodsEntry.Teleporter", player), lambda state: state.has("WestWoodsTP", player))
    add_rule(world.get_entrance("Teleporters_to_WoodsMain.Teleporter", player), lambda state: state.has("EastWoodsTP", player))
    add_rule(world.get_entrance("Teleporters_to_LowerReach.Teleporter", player), lambda state: state.has("ReachTP", player) and state.has("Flap", player))
    add_rule(world.get_entrance("Teleporters_to_UpperDepths.Teleporter", player), lambda state: state.has("DepthsTP", player) and state.has("Glide", player))
    add_rule(world.get_entrance("Teleporters_to_EastPools.Teleporter", player), lambda state: state.has("EastPoolsTP", player) and state.has("Water", player))
    add_rule(world.get_entrance("Teleporters_to_WestPools.Teleporter", player), lambda state: state.has("WestPoolsTP", player) and state.has("Water", player))
    add_rule(world.get_entrance("Teleporters_to_LowerWastes.WestTP", player), lambda state: state.has("WestWastesTP", player))
    add_rule(world.get_entrance("Teleporters_to_LowerWastes.EastTP", player), lambda state: state.has("EastWastesTP", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("Teleporters_to_UpperWastes.NorthTP", player), lambda state: state.has("OuterRuinsTP", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("Teleporters_to_WindtornRuins.RuinsTP", player), lambda state: state.has("InnerRuinsTP", player) and state.has("Burrow", player) and state.has("EastHollow.ForestsVoice", player) and state.has("LowerReach.ForestsMemory", player) and state.has("UpperDepths.ForestsEyes", player) and state.has("WestPools.ForestsStrength", player))
    add_rule(world.get_entrance("Teleporters_to_WillowsEnd.InnerTP", player), lambda state: state.has("WillowTP", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("Teleporters_to_WillowsEnd.Upper", player), lambda state: state.has("ShriekTP", player) and state.has("Burrow", player))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda state: state.can_reach_region("MarshSpawn.Main", player))
    add_rule(world.get_location("MarshSpawn.FirstPickupEX", player), lambda state: state.can_reach_region("MarshSpawn.Main", player))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda state: state.can_reach_region("MarshSpawn.Main", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_location("MarshSpawn.BridgeEX", player), lambda state: state.can_reach_region("MarshSpawn.Main", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("MarshSpawn.BridgeEX", player), lambda state: state.can_reach_region("MarshSpawn.Main", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("MarshSpawn.Main_to_Teleporters", player), True)
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.LeftSpawnSignpost", player), True)
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.OpherBarrier", player), True)
    add_rule(world.get_location("MarshSpawn.ToOpherBarrier", player), lambda state: state.can_reach_region("MarshSpawn.OpherBarrier", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("MarshSpawn.LogBroken", player), lambda state: state.can_reach_region("MarshSpawn.OpherBarrier", player))
    add_rule(world.get_location("MarshSpawn.BridgeEX", player), lambda state: state.can_reach_region("MarshSpawn.OpherBarrier", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshPastOpher.MillView", player), lambda state: state.has("MarshSpawn.ToOpherBarrier", player))
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.BrokenBridge", player), lambda state: state.has("MarshSpawn.LogBroken", player))
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda state: (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("MarshSpawn.ResilienceShard", player), lambda state: state.can_reach_region("MarshSpawn.BrokenBridge", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("MarshSpawn.ResilienceOre", player), lambda state: state.can_reach_region("MarshSpawn.BrokenBridge", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Water", player))
    add_rule(world.get_location("MarshSpawn.BashEC", player), lambda state: state.can_reach_region("MarshSpawn.BrokenBridge", player) and (state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("MarshSpawn.PreLupoEX", player), lambda state: state.can_reach_region("MarshSpawn.BrokenBridge", player))
    add_rule(world.get_location("MarshSpawn.LupoMap", player), lambda state: state.can_reach_region("MarshSpawn.BrokenBridge", player) and state.count("SpiritLight", player) >= 2)
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.CaveEntrance", player), True)
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda state: state.has("MarshSpawn.LogBroken", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda state: state.has("MarshSpawn.LogBroken", player) and state.has("Bash", player) and (state.has("HowlsDen.RainLifted", player) or state.has("Grenade", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_location("MarshSpawn.KeystoneDoor", player), lambda state: state.can_reach_region("MarshSpawn.CaveEntrance", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_location("MarshSpawn.TokkBarrier", player), lambda state: state.can_reach_region("MarshSpawn.CaveEntrance", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda state: state.can_reach_region("MarshSpawn.CaveEntrance", player) and state.has("Grapple", player) and state.has("DoubleJump", player) and state.has("Bash", player))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda state: state.can_reach_region("MarshSpawn.CaveEntrance", player) and state.has("Launch", player) and state.has("Bash", player))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda state: state.can_reach_region("MarshSpawn.CaveEntrance", player) and state.has("Grapple", player) and state.has("Launch", player))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda state: state.can_reach_region("MarshSpawn.CaveEntrance", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player))
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.RegenDoor", player), lambda state: state.has("MarshSpawn.KeystoneDoor", player))
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda state: (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.Cave", player), lambda state: state.has("MarshSpawn.TokkBarrier", player))
    add_rule(world.get_location("MarshSpawn.CaveFight", player), lambda state: state.can_reach_region("MarshSpawn.Cave", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("MarshSpawn.CaveKS", player), lambda state: state.can_reach_region("MarshSpawn.Cave", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Grapple", player)))
    add_rule(world.get_location("MarshSpawn.CaveKS", player), lambda state: state.can_reach_region("MarshSpawn.Cave", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Grapple", player)))
    add_rule(world.get_location("MarshSpawn.CaveKS", player), lambda state: state.can_reach_region("MarshSpawn.Cave", player) and state.has("Launch", player))
    add_rule(world.get_location("MarshSpawn.CaveKS", player), lambda state: state.can_reach_region("MarshSpawn.Cave", player) and state.has("MarshSpawn.CaveFight", player))
    add_rule(world.get_location("MarshSpawn.TokkKeystoneQuest", player), lambda state: state.can_reach_region("MarshSpawn.Cave", player) and state.has("MarshSpawn.CaveKS", player))
    add_rule(world.get_location("MarshSpawn.LeftTokkEX", player), lambda state: state.can_reach_region("MarshSpawn.Cave", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("MarshSpawn.FightRoomEX", player), lambda state: state.can_reach_region("MarshSpawn.Cave", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_Tokk", player), True)
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.CaveEntrance", player), lambda state: state.has("MarshSpawn.TokkBarrier", player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda state: state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Grapple", player)))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("Glide", player) or state.has("Grapple", player)))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda state: state.has("MarshSpawn.CaveFight", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda state: state.has("MarshSpawn.CaveFight", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("MarshSpawn.BurrowArena", player), lambda state: state.can_reach_region("MarshSpawn.BurrowFightArena", player) and state.has("Regenerate", player) and state.count("Health", player) >= 3 and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) and state.has("Bash", player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("Bow", "Spear"), player) and state.has("Burrow", player))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda state: state.can_reach_region("MarshSpawn.BurrowFightArena", player) and state.has("Burrow", player) and state.has("DoubleJump", player) and state.has("Bash", player) and (state.has("Dash", player) or state.has("Glide", player) or state.has("Grenade", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda state: state.can_reach_region("MarshSpawn.BurrowFightArena", player) and state.has("Burrow", player) and state.has("Bash", player) and state.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LifepactLedge", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda state: state.has("Water", player) and state.has("Burrow", player) and state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda state: state.has("Water", player) and state.has("Burrow", player) and state.has("Bash", player) and state.has("Launch", player))
    add_rule(world.get_location("MarshSpawn.LifepactShard", player), lambda state: state.can_reach_region("MarshSpawn.LifepactLedge", player) and state.has("MarshSpawn.BurrowArena", player))
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda state: state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda state: state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("MarshSpawn.CaveKS", player), lambda state: state.can_reach_region("MarshSpawn.PoolsBurrowsSignpost", player))
    add_rule(world.get_location("MarshSpawn.CaveOre", player), lambda state: state.can_reach_region("MarshSpawn.PoolsBurrowsSignpost", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_location("MarshSpawn.CaveOre", player), lambda state: state.can_reach_region("MarshSpawn.PoolsBurrowsSignpost", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("MarshSpawn.BurrowsApproachLedgeEX", player), lambda state: state.can_reach_region("MarshSpawn.PoolsBurrowsSignpost", player) and state.has("Bash", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.Cave", player), True)
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_location("MarshSpawn.CrusherSwimEX", player), lambda state: state.can_reach_region("MarshSpawn.BeforeBurrows", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("MarshSpawn.BurrowsApproachLedgeEX", player), lambda state: state.can_reach_region("MarshSpawn.BeforeBurrows", player) and state.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda state: state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda state: state.has("Water", player) and state.has("WaterDash", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda state: state.has("Water", player) and state.has("WaterDash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda state: state.has("Bash", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda state: state.has("Launch", player) and state.has("Bash", player))
    add_rule(world.get_location("MarshSpawn.BurrowsOpen", player), lambda state: state.can_reach_region("MarshSpawn.BurrowsEntry", player) and state.has("Bash", player) and state.has("DoubleJump", player) and state.has("Glide", player))
    add_rule(world.get_location("MarshSpawn.BurrowsOpen", player), lambda state: state.can_reach_region("MarshSpawn.BurrowsEntry", player) and state.has("Bash", player) and state.has("Launch", player))
    add_rule(world.get_location("MarshSpawn.DamageTreeOpen", player), lambda state: state.can_reach_region("MarshSpawn.BurrowsEntry", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("MarshSpawn.TokkTabletQuest", player), lambda state: state.can_reach_region("MarshSpawn.BurrowsEntry", player) and state.has("MidnightBurrows.TabletQI", player))
    add_rule(world.get_location("MarshSpawn.DamageTree", player), lambda state: state.can_reach_region("MarshSpawn.BurrowsEntry", player) and state.has("MarshSpawn.DamageTreeOpen", player))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_Tokk", player), True)
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MidnightBurrows.Teleporter", player), lambda state: state.has("MarshSpawn.BurrowsOpen", player))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda state: (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda state: state.has("Water", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda state: state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("MarshSpawn.RockHC", player), lambda state: state.can_reach_region("MarshSpawn.LeftSpawnSignpost", player))
    add_rule(world.get_location("MarshSpawn.LongSwimEX", player), lambda state: state.can_reach_region("MarshSpawn.LeftSpawnSignpost", player) and state.has("Water", player))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda state: state.can_reach_region("MarshSpawn.LeftSpawnSignpost", player) and state.has("Water", player) and state.has("Burrow", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Glide", player)))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda state: state.can_reach_region("MarshSpawn.LeftSpawnSignpost", player) and state.has("Water", player) and state.has("Burrow", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Dash", player))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.Main", player), True)
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda state: state.has("Bash", player) and state.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda state: state.has("Water", player) and state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda state: state.has("Water", player) and state.has("Burrow", player) and state.has("Dash", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("PoolsApproach.WheelFreed", player), lambda state: state.can_reach_region("MarshSpawn.PoolsPath", player) and state.has("Water", player) and state.has("WaterBreath", player) and state.has("Bash", player))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda state: state.can_reach_region("MarshSpawn.PoolsPath", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Glide", player))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda state: state.can_reach_region("MarshSpawn.PoolsPath", player) and state.has("Bash", player) and state.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda state: state.has("Water", player) and (state.has("WaterBreath", player) or state.has("WaterDash", player)) and (state.has("PoolsApproach.WheelFreed", player) or state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda state: state.has("Water", player) and (state.has("WaterBreath", player) or state.has("WaterDash", player)) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda state: state.has("Water", player) and (state.has("WaterDash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda state: state.has("Glide", player) and (state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("MarshSpawn.KeystoneDoor", player), lambda state: state.can_reach_region("MarshSpawn.RegenDoor", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_location("MarshSpawn.RegenTree", player), lambda state: state.can_reach_region("MarshSpawn.RegenDoor", player))
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.CaveEntrance", player), lambda state: state.has("MarshSpawn.KeystoneDoor", player))
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda state: (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda state: state.has("WaterDash", player))
    add_rule(world.get_location("MarshSpawn.HowlBurnt", player), lambda state: state.can_reach_region("MarshSpawn.HowlApproach", player))
    add_rule(world.get_location("MarshSpawn.RegenTree", player), lambda state: state.can_reach_region("MarshSpawn.HowlApproach", player))
    add_rule(world.get_location("MarshSpawn.RecklessShard", player), lambda state: state.can_reach_region("MarshSpawn.HowlApproach", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda state: (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.MokkTheBrave", player), lambda state: state.has("MarshSpawn.HowlBurnt", player))
    add_rule(world.get_location("MarshSpawn.HowlBurnt", player), lambda state: state.can_reach_region("MarshSpawn.MokkTheBrave", player))
    add_rule(world.get_location("MarshSpawn.MokkFangQuest", player), lambda state: state.can_reach_region("MarshSpawn.MokkTheBrave", player) and state.has("MarshSpawn.HowlBurnt", player) and state.has("MarshSpawn.FangQI", player))
    add_rule(world.get_location("MarshSpawn.RecklessShard", player), lambda state: state.can_reach_region("MarshSpawn.MokkTheBrave", player) and state.has("MarshSpawn.HowlBurnt", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlsDenEntrance", player), lambda state: state.has("MarshSpawn.HowlBurnt", player))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda state: state.has("MarshSpawn.HowlBurnt", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda state: state.has("MarshSpawn.HowlBurnt", player) and state.has("HowlsDen.RainLifted", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda state: state.has("MarshSpawn.HowlBurnt", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda state: state.has("HowlsDen.RainLifted", player) and (state.has("DoubleJump", player) or state.has("Bash", player)))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda state: state.can_reach_region("MarshSpawn.AboveHowlArena", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda state: state.can_reach_region("MarshSpawn.AboveHowlArena", player) and state.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.MokkTheBrave", player), True)
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda state: (state.has("Launch", player) or state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("MarshSpawn.FangQI", player), lambda state: state.can_reach_region("MarshSpawn.FangPlatform", player))
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda state: (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_location("MarshSpawn.MokkEX", player), lambda state: state.can_reach_region("MarshSpawn.HowlsDenEntrance", player))
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance_to_HowlsDen.AboveBoneBridge", player), True)
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance_to_MarshSpawn.MokkTheBrave", player), lambda state: state.has("MarshSpawn.HowlBurnt", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player) or state.has("Glide", player)))
    add_rule(world.get_location("HowlsDen.UpperLoopExitBarrier", player), lambda state: state.can_reach_region("HowlsDen.UpperLoopExit", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("HowlsDen.RightHC", player), lambda state: state.can_reach_region("HowlsDen.UpperLoopExit", player) and state.has_any(("Sword", "Hammer"), player) and (state.has_any(("Sword", "Hammer"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_MarshSpawn.HowlsDenEntrance", player), lambda state: state.has("HowlsDen.UpperLoopExitBarrier", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_HowlsDen.AboveBoneBridge", player), lambda state: state.has("HowlsDen.UpperLoopExitBarrier", player))
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_HowlsDen.UpperLoopEntrance", player), True)
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("HowlsDen.UpperLoopEntranceBarrier", player), lambda state: state.can_reach_region("HowlsDen.UpperLoopEntrance", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("HowlsDen.RightHC", player), lambda state: state.can_reach_region("HowlsDen.UpperLoopEntrance", player) and state.has("HowlsDen.UpperLoopEntranceBarrier", player) and state.has_any(("Sword", "Hammer"), player) and (state.has_any(("Sword", "Hammer"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.BoneBridge", player), True)
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.AboveBoneBridge", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.AboveBoneBridge", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda state: state.has("HowlsDen.UpperLoopEntranceBarrier", player) and state.has_any(("Sword", "Hammer"), player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda state: state.has("HowlsDen.UpperLoopEntranceBarrier", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("HowlsDen.KeystoneDoor", player), lambda state: state.can_reach_region("HowlsDen.BoneBridge", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_location("HowlsDen.RainLifted", player), lambda state: state.can_reach_region("HowlsDen.BoneBridge", player) and state.has("HowlsDen.SwordTree", player))
    add_rule(world.get_location("HowlsDen.BoneBarrier", player), lambda state: state.can_reach_region("HowlsDen.BoneBridge", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("HowlsDen.SwordTree", player), lambda state: state.can_reach_region("HowlsDen.BoneBridge", player))
    add_rule(world.get_location("HowlsDen.BoneOre", player), lambda state: state.can_reach_region("HowlsDen.BoneBridge", player) and state.has("Hammer", player))
    add_rule(world.get_location("HowlsDen.BoneOre", player), lambda state: state.can_reach_region("HowlsDen.BoneBridge", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Spear", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("HowlsDen.AboveDoorKS", player), lambda state: state.can_reach_region("HowlsDen.BoneBridge", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_location("HowlsDen.MagnetShard", player), lambda state: state.can_reach_region("HowlsDen.BoneBridge", player) and state.has_any(("Sword", "Hammer"), player) and (state.has_any(("Sword", "Hammer"), player) or state.has("Launch", player)))
    add_rule(world.get_location("HowlsDen.AboveTPEX", player), lambda state: state.can_reach_region("HowlsDen.BoneBridge", player) and state.has("HowlsDen.BoneBarrier", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.BoneBridgeDoor", player), lambda state: state.has("HowlsDen.KeystoneDoor", player))
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveTeleporter", player), lambda state: state.has("HowlsDen.BoneBarrier", player))
    add_rule(world.get_location("HowlsDen.KeystoneDoor", player), lambda state: state.can_reach_region("HowlsDen.BoneBridgeDoor", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor_to_HowlsDen.BoneBridge", player), lambda state: state.has("HowlsDen.KeystoneDoor", player))
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor_to_HowlsDen.OutsideSecretRoom", player), lambda state: (state.has("Water", player) or state.has("Launch", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("HowlsDen.SecretRoomWall", player), lambda state: state.can_reach_region("HowlsDen.OutsideSecretRoom", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.SecretRoom", player), lambda state: state.has("HowlsDen.SecretRoomWall", player))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.BoneBridgeDoor", player), lambda state: (state.has("Water", player) or state.has("Launch", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("Grenade", player) and state.count("Energy", player) >= 4 or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.OutsideSecretRoom", player), True)
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Launch", player))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("DoubleJump", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("Bash", player)))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Dash", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("Bash", player)))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Glide", player))
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda state: state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.OutsideSecretRoom", player), lambda state: state.has("HowlsDen.SecretRoomWall", player))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda state: state.can_reach_region("HowlsDen.LeftSecretRoom", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda state: state.can_reach_region("HowlsDen.LeftSecretRoom", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda state: state.can_reach_region("HowlsDen.LeftSecretRoom", player) and state.has("Launch", player))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda state: state.has("DoubleJump", player) and (state.has("Bash", player) or state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player)))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("HowlsDen.AboveTPEX", player), lambda state: state.can_reach_region("HowlsDen.AboveTeleporter", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter_to_HowlsDen.Teleporter", player), True)
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter_to_HowlsDen.BoneBridge", player), lambda state: state.has("HowlsDen.BoneBarrier", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("DoubleJump", player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda state: state.can_reach_region("HowlsDen.Teleporter", player))
    add_rule(world.get_location("HowlsDen.LaserKS", player), lambda state: state.can_reach_region("HowlsDen.Teleporter", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_location("HowlsDen.LaserKS", player), lambda state: state.can_reach_region("HowlsDen.Teleporter", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_Teleporters", player), True)
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_DenShrine", player), lambda state: (state.has("Hammer", player) or state.has("Spear", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda state: (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda state: state.has("Glide", player) and state.has("Dash", player))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda state: (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("HowlsDen.DoubleJumpTreeCombat", player), lambda state: state.can_reach_region("HowlsDen.DoubleJumpApproach", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("HowlsDen.DoubleJumpEX", player), lambda state: state.can_reach_region("HowlsDen.DoubleJumpApproach", player) and state.has("HowlsDen.DoubleJumpTreeCombat", player))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeLedge", player), lambda state: (state.has("HowlsDen.DoubleJumpTreeCombat", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.Teleporter", player), True)
    add_rule(world.get_location("HowlsDen.DoubleJumpEX", player), lambda state: state.can_reach_region("HowlsDen.DoubleJumpTreeLedge", player) and state.has("Launch", player))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpTreeArea", player), True)
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpApproach", player), lambda state: (state.has("DoubleJump", player) or state.has("Launch", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("HowlsDen.DoubleJumpTree", player), lambda state: state.can_reach_region("HowlsDen.DoubleJumpTreeArea", player))
    add_rule(world.get_location("HowlsDen.StickyShard", player), lambda state: state.can_reach_region("HowlsDen.DoubleJumpTreeArea", player))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda state: (state.has("DoubleJump", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_MidnightBurrows.DenConnection", player), lambda state: state.has("MidnightBurrows.HowlsDenShortcut", player))
    add_rule(world.get_location("HowlsDen.CombatShrineCompleted", player), lambda state: state.can_reach_region("DenShrine", player) and state.has("Regenerate", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.count("Health", player) >= 7)
    add_rule(world.get_location("HowlsDen.CombatShrineCompleted", player), lambda state: state.can_reach_region("DenShrine", player) and state.has("Regenerate", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.count("Health", player) >= 3 and (state.has("Dash", player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("HowlsDen.CombatShrine", player), lambda state: state.can_reach_region("DenShrine", player) and state.has("HowlsDen.CombatShrineCompleted", player))
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_OpherShop", player), True)
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.TrialStart", player), True)
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshSpawn.OpherBarrier", player), lambda state: state.has("MarshSpawn.ToOpherBarrier", player))
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.MillView", player), True)
    add_rule(world.get_location("MarshPastOpher.TrunkWall", player), lambda state: state.can_reach_region("MarshPastOpher.TrialStart", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("MarshPastOpher.SpiritTrial", player), lambda state: state.can_reach_region("MarshPastOpher.TrialStart", player) and state.has("MarshPastOpher.TrialActivation", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("MarshPastOpher.TrialStart_to_MarshPastOpher.UnderTrunk", player), lambda state: state.has("MarshPastOpher.TrunkWall", player))
    add_rule(world.get_entrance("MarshPastOpher.TrialStart_to_MarshPastOpher.BowPath", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("MarshPastOpher.TrialLeftEX", player), lambda state: state.can_reach_region("MarshPastOpher.UnderTrunk", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk_to_MarshPastOpher.TrialArea", player), True)
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk_to_MarshPastOpher.TrialStart", player), lambda state: state.has("MarshPastOpher.TrunkWall", player))
    add_rule(world.get_location("MarshPastOpher.TrialActivation", player), lambda state: state.can_reach_region("MarshPastOpher.TrialArea", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has("Grapple", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("MarshPastOpher.TrialActivation", player), lambda state: state.can_reach_region("MarshPastOpher.TrialArea", player) and state.has("Bash", player) and state.has("Grapple", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("MarshPastOpher.TrialOre", player), lambda state: state.can_reach_region("MarshPastOpher.TrialArea", player))
    add_rule(world.get_location("MarshPastOpher.TrialEC", player), lambda state: state.can_reach_region("MarshPastOpher.TrialArea", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("MarshPastOpher.TrialHC", player), lambda state: state.can_reach_region("MarshPastOpher.TrialArea", player) and (state.has("Hammer", player) or state.has("Spear", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_location("MarshPastOpher.TrialRightEX", player), lambda state: state.can_reach_region("MarshPastOpher.TrialArea", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshShrine", player), True)
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda state: state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda state: state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda state: (state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_location("MarshPastOpher.CombatShrineCompleted", player), lambda state: state.can_reach_region("MarshShrine", player) and state.has("Regenerate", player) and state.count("Health", player) >= 0 and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("MarshPastOpher.CombatShrine", player), lambda state: state.can_reach_region("MarshShrine", player) and state.has("MarshPastOpher.CombatShrineCompleted", player))
    add_rule(world.get_location("MarshPastOpher.SwingPoleEX", player), lambda state: state.can_reach_region("MarshPastOpher.BowPath", player) and state.count("Health", player) >= 0 and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("MarshPastOpher.SwingPoleEX", player), lambda state: state.can_reach_region("MarshPastOpher.BowPath", player) and state.count("Health", player) >= 0 and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda state: (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.TrialStart", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("MarshPastOpher.SwingPoleEX", player), lambda state: state.can_reach_region("MarshPastOpher.BowApproach", player) and state.count("Health", player) >= 0)
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowPath", player), True)
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.MillView", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda state: state.has("Bow", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Bash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda state: state.has("Bow", player) and state.count("Energy", player) >= 4 and state.has("Bash", player) and state.has("Launch", player))
    add_rule(world.get_location("MarshPastOpher.EyestoneDoor", player), lambda state: state.can_reach_region("MarshPastOpher.BowArea", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_location("MarshPastOpher.BowEC", player), lambda state: state.can_reach_region("MarshPastOpher.BowArea", player))
    add_rule(world.get_location("MarshPastOpher.BowTree", player), lambda state: state.can_reach_region("MarshPastOpher.BowArea", player))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("Bow", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_WestHollow.Entrance", player), lambda state: state.has("MarshPastOpher.EyestoneDoor", player))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("Bow", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("MarshPastOpher.LeftEyestone", player), lambda state: state.can_reach_region("MarshPastOpher.UpperBowArea", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("Bow", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("MarshPastOpher.RightEyestone", player), lambda state: state.can_reach_region("MarshPastOpher.UpperBowArea", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("Bow", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea_to_MarshPastOpher.BowArea", player), True)
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea_to_MarshPastOpher.BowApproach", player), True)
    add_rule(world.get_location("MarshPastOpher.CeilingEX", player), lambda state: state.can_reach_region("MarshPastOpher.PoolsPathEast", player) and state.has("Bash", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("MarshPastOpher.CeilingEX", player), lambda state: state.can_reach_region("MarshPastOpher.PoolsPathEast", player) and state.has("Launch", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.OpherSkipBranch", player), True)
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda state: state.can_reach_region("MarshPastOpher.PoolsPathMiddle", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda state: state.can_reach_region("MarshPastOpher.PoolsPathMiddle", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Grenade", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda state: state.can_reach_region("MarshPastOpher.PoolsPathMiddle", player) and state.has("Launch", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda state: state.has("Launch", player) and state.has("Water", player) and (state.has("Hammer", player) or state.has("Spear", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda state: state.has("Bash", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathMiddle", player), lambda state: state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda state: (state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEX", player), lambda state: state.can_reach_region("MarshPastOpher.PoolsPathWest", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda state: state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Bash", player) or state.has("Glide", player)))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda state: state.can_reach_region("MidnightBurrows.Teleporter", player))
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_Teleporters", player), True)
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MidnightBurrows.BelowLupo", player), lambda state: (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has("Bash", player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("Bow", "Spear"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda state: state.has("MarshSpawn.BurrowsOpen", player) and state.has("Launch", player))
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda state: state.has("MarshSpawn.BurrowsOpen", player) and state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("MidnightBurrows.LeftKS", player), lambda state: state.can_reach_region("MidnightBurrows.BelowLupo", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Teleporter", player), lambda state: (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has("Bash", player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("Bow", "Spear"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player))
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("MidnightBurrows.LupoMap", player), lambda state: state.can_reach_region("MidnightBurrows.Central", player) and state.count("SpiritLight", player) >= 0 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("MidnightBurrows.DeflectorShard", player), lambda state: state.can_reach_region("MidnightBurrows.Central", player) and state.has("Launch", player))
    add_rule(world.get_location("MidnightBurrows.DeflectorShard", player), lambda state: state.can_reach_region("MidnightBurrows.Central", player) and state.has("MidnightBurrows.Lever", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.BelowLupo", player), True)
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.PortalRoom", player), lambda state: (state.has("Launch", player) or state.has("Glide", player) or state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("MidnightBurrows.KeystoneDoor", player), lambda state: state.can_reach_region("MidnightBurrows.TabletRoom", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_location("MidnightBurrows.TabletQI", player), lambda state: state.can_reach_region("MidnightBurrows.TabletRoom", player) and state.has("MidnightBurrows.KeystoneDoor", player))
    add_rule(world.get_entrance("MidnightBurrows.TabletRoom_to_MidnightBurrows.Central", player), True)
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda state: state.has("Glide", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Bash", player)))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda state: state.has("MidnightBurrows.Lever", player) and state.has("Launch", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda state: state.has("MidnightBurrows.Lever", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.Central", player), lambda state: state.has("MidnightBurrows.Lever", player))
    add_rule(world.get_location("MidnightBurrows.Lever", player), lambda state: state.can_reach_region("MidnightBurrows.LeverRoom", player))
    add_rule(world.get_location("MidnightBurrows.LowerKS", player), lambda state: state.can_reach_region("MidnightBurrows.LeverRoom", player) and (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("MidnightBurrows.LowerKS", player), lambda state: state.can_reach_region("MidnightBurrows.LeverRoom", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda state: state.has("Bash", player) and state.has("Launch", player))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda state: state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda state: state.has("Bash", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("MidnightBurrows.East_to_MidnightBurrows.DenConnection", player), lambda state: (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Bow", "Spear"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("MidnightBurrows.HowlsDenShortcut", player), lambda state: state.can_reach_region("MidnightBurrows.DenConnection", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("MidnightBurrows.RightKS", player), lambda state: state.can_reach_region("MidnightBurrows.DenConnection", player))
    add_rule(world.get_entrance("MidnightBurrows.DenConnection_to_MidnightBurrows.PortalCorridor", player), lambda state: (state.has_any(("Sword", "Hammer"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MidnightBurrows.DenConnection_to_HowlsDen.DoubleJumpTreeArea", player), lambda state: state.has("MidnightBurrows.HowlsDenShortcut", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.DenConnection", player), True)
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda state: state.has("DoubleJump", player) and state.has("Glide", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player) and state.count("Health", player) >= 0)
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda state: state.has("Launch", player) and state.has("Glide", player) and state.count("Health", player) >= 0)
    add_rule(world.get_location("MidnightBurrows.UpperKS", player), lambda state: state.can_reach_region("MidnightBurrows.BelowUpperKS", player) and (state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("Bow", "Spear"), player) or state.has("Bash", player)))
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS_to_MidnightBurrows.PortalRoom", player), True)
    add_rule(world.get_location("MarshPastOpher.EyestoneDoor", player), lambda state: state.can_reach_region("WestHollow.Entrance", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda state: state.can_reach_region("WestHollow.Entrance", player) and state.has("Bow", player) and state.count("Energy", player) >= 4 and (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda state: state.can_reach_region("WestHollow.Entrance", player) and state.has("Bow", player) and state.count("Energy", player) >= 4 and (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)) and state.has("Launch", player))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda state: state.can_reach_region("WestHollow.Entrance", player) and state.has("Bow", player) and state.count("Energy", player) >= 4 and (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("WestHollow.CrusherHC", player), lambda state: state.can_reach_region("WestHollow.Entrance", player))
    add_rule(world.get_entrance("WestHollow.Entrance_to_TwillenShop", player), True)
    add_rule(world.get_entrance("WestHollow.Entrance_to_MarshPastOpher.BowArea", player), lambda state: state.has("MarshPastOpher.EyestoneDoor", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WestHollow.Entrance_to_MarshPastOpher.BowArea", player), lambda state: state.has("MarshPastOpher.EyestoneDoor", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda state: (state.has("Launch", player) or state.has("Bash", player)))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Bow", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda state: state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.HollowDrainMiddle", player), lambda state: (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)))
    add_rule(world.get_location("WestHollow.UpperDrainLeverPulled", player), lambda state: state.can_reach_region("WestHollow.MokiByTwillen", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) and state.has("Bow", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("WestHollow.UpperDrainLeverPulled", player), lambda state: state.can_reach_region("WestHollow.MokiByTwillen", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("WestHollow.UpperDrainLeverPulled", player), lambda state: state.can_reach_region("WestHollow.MokiByTwillen", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.Entrance", player), True)
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda state: (state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda state: (state.has("Launch", player) or state.has("Bash", player)))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda state: state.has("Bow", player) and state.count("Energy", player) >= 4 and (state.has_any(("Sword", "Hammer"), player) or state.has("Bash", player)))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.Entrance", player), lambda state: state.has_any(("Sword", "Hammer"), player) and (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.Entrance", player), lambda state: state.has("Bash", player) and (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.HollowDrainMiddle", player), lambda state: (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_EastHollow.Teleporter", player), lambda state: state.has("WestHollow.PurpleDoorOpen", player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoorEnemyPaths_to_WestHollow.InFrontPurpleDoor", player), True)
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.HollowDrainMiddle", player), lambda state: (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)))
    add_rule(world.get_location("WestHollow.UpperTongueExtended", player), lambda state: state.can_reach_region("WestHollow.HollowDrainMiddle", player) and state.has("Bow", player) and state.count("Energy", player) >= 4 and (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda state: (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)) and state.has("WestHollow.UpperTongueExtended", player) and state.has("Bow", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda state: (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda state: (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)) and (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.SubmergedPlatform", player), lambda state: state.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda state: (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda state: (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.Entrance", player), lambda state: (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)))
    add_rule(world.get_location("WestHollow.RockPuzzleSolved", player), lambda state: state.can_reach_region("WestHollow.RockPuzzle", player) and (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("Bow", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("WestHollow.RockPuzzleSolved", player), lambda state: state.can_reach_region("WestHollow.RockPuzzle", player) and (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)) and state.has("Bow", player) and state.count("Energy", player) >= 4 and (state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("WestHollow.RockPuzzleEX", player), lambda state: state.can_reach_region("WestHollow.RockPuzzle", player) and state.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda state: state.has("WestHollow.RockPuzzleSolved", player) and (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("Bow", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda state: state.has("WestHollow.RockPuzzleSolved", player) and (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)) and (state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.SubmergedPlatform", player), lambda state: state.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.Entrance", player), lambda state: (state.has("WestHollow.UpperDrainLeverPulled", player) or state.has("WestHollow.FullyDrained", player)))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda state: state.can_reach_region("WestHollow.FarLeftRoom", player) and state.has("WestHollow.UpperDrainLeverPulled", player) and state.has("Bow", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda state: state.can_reach_region("WestHollow.FarLeftRoom", player) and state.has("WestHollow.UpperDrainLeverPulled", player) and state.has("Launch", player))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda state: state.can_reach_region("WestHollow.FarLeftRoom", player) and state.has("WestHollow.FullyDrained", player) and (state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda state: state.can_reach_region("WestHollow.FarLeftRoom", player) and state.has("WestHollow.FullyDrained", player) and state.has("Bow", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda state: state.can_reach_region("WestHollow.SubmergedPlatform", player) and state.has("WestHollow.FullyDrained", player))
    add_rule(world.get_location("WestHollow.UpperTongueExtended", player), lambda state: state.can_reach_region("WestHollow.SubmergedPlatform", player) and state.has("WestHollow.FullyDrained", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) and state.has("Bow", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("WestHollow.UpperTongueRetracted", player), lambda state: state.can_reach_region("WestHollow.SubmergedPlatform", player) and state.has("WestHollow.FullyDrained", player) and state.has("WestHollow.LowerTongueExtended", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) and state.has("Bow", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("WestHollow.LowerTongueExtended", player), lambda state: state.can_reach_region("WestHollow.SubmergedPlatform", player) and state.has("WestHollow.FullyDrained", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) and state.has("Bow", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda state: state.has("WestHollow.FullyDrained", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda state: state.has("WestHollow.FullyDrained", player) and state.has("WestHollow.UpperTongueExtended", player) and state.has("WestHollow.LowerTongueExtended", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda state: state.has("WestHollow.FullyDrained", player) and state.has("WestHollow.UpperTongueRetracted", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda state: state.has("WestHollow.FullyDrained", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.AboveJumppad", player), lambda state: state.has("WestHollow.FullyDrained", player) and (state.has("WestHollow.LowerTongueExtended", player) or state.has("Launch", player) or state.has("Glide", player) or state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.AboveJumppad", player), lambda state: state.has("WestHollow.FullyDrained", player))
    add_rule(world.get_location("WestHollow.LowerTongueExtended", player), lambda state: state.can_reach_region("WestHollow.AboveJumppad", player) and state.has("WestHollow.FullyDrained", player) and state.has("Bow", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("WestHollow.HiddenEC", player), lambda state: state.can_reach_region("WestHollow.AboveJumppad", player) and state.has("WestHollow.FullyDrained", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.HollowDrainLower", player), lambda state: state.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda state: state.has("WestHollow.FullyDrained", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda state: state.has("WestHollow.FullyDrained", player) and state.has("WestHollow.LowerTongueExtended", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("WestHollow.QuickshotShard", player), lambda state: state.can_reach_region("WestHollow.HollowDrainLower", player) and state.has("WestHollow.FullyDrained", player) and state.has("DoubleJump", player) and state.has("Bow", player) and state.count("Energy", player) >= 4 and state.has("Dash", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) or state.has("Bash", player)))
    add_rule(world.get_location("WestHollow.QuickshotShard", player), lambda state: state.can_reach_region("WestHollow.HollowDrainLower", player) and state.has("WestHollow.FullyDrained", player) and state.has("DoubleJump", player) and state.has("Bow", player) and state.count("Energy", player) >= 4 and state.has("Launch", player))
    add_rule(world.get_location("WestHollow.SwimEC", player), lambda state: state.can_reach_region("WestHollow.HollowDrainLower", player) and state.has("Water", player))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda state: state.can_reach_region("WestHollow.HollowDrainLower", player) and state.count("SpiritLight", player) >= 1 and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda state: state.can_reach_region("WestHollow.HollowDrainLower", player) and state.count("SpiritLight", player) >= 1 and state.has("Bash", player))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda state: state.can_reach_region("WestHollow.HollowDrainLower", player) and state.count("SpiritLight", player) >= 1 and state.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda state: state.has("WestHollow.FullyDrained", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda state: state.has("WestHollow.FullyDrained", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda state: state.has("WestHollow.FullyDrained", player) and state.has("Bash", player) and state.count("Health", player) >= 0 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda state: state.has("WestHollow.FullyDrained", player) and state.has("Water", player) and state.has("WaterDash", player) and state.has_any(("Sword", "Hammer"), player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) or state.has("DoubleJump", player)))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda state: state.has("WestHollow.FullyDrained", player) and state.has("Water", player) and state.has("WaterDash", player) and state.has("Bash", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda state: state.has("WestHollow.FullyDrained", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.PolesPound", player), lambda state: (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) or state.has("DoubleJump", player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.AboveJumppad", player), lambda state: (state.has_any(("Sword", "Hammer"), player) or state.has("Bash", player)))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.HollowDrainLower", player), lambda state: state.has("WestHollow.FullyDrained", player))
    add_rule(world.get_location("WestHollow.TrialHC", player), lambda state: state.can_reach_region("WestHollow.TrialStart", player))
    add_rule(world.get_location("WestHollow.SpiritTrial", player), lambda state: state.can_reach_region("WestHollow.TrialStart", player) and state.has("WestHollow.TrialActivation", player) and state.has("WestHollow.FullyDrained", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("WestHollow.TrialStart_to_WestHollow.TrialApproach", player), True)
    add_rule(world.get_location("WestHollow.BelowLupoEX", player), lambda state: state.can_reach_region("WestHollow.PolesPound", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("WestHollow.BelowLupoEX", player), lambda state: state.can_reach_region("WestHollow.PolesPound", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.DashApproach", player), lambda state: (state.has("DoubleJump", player) or state.has("Bash", player) or state.has("Launch", player) or state.has("Glide", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda state: state.has_any(("Sword", "Hammer"), player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("WestHollow.TrialActivation", player), lambda state: state.can_reach_region("WestHollow.DashApproach", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("WestHollow.DoorLever", player), lambda state: state.can_reach_region("WestHollow.DashApproach", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("WestHollow.DoorLever", player), lambda state: state.can_reach_region("WestHollow.DashApproach", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Grenade", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_location("WestHollow.DoorLever", player), lambda state: state.can_reach_region("WestHollow.DashApproach", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.DashArea", player), lambda state: state.has("WestHollow.DoorLever", player))
    add_rule(world.get_location("WestHollow.DashTree", player), lambda state: state.can_reach_region("WestHollow.DashArea", player))
    add_rule(world.get_entrance("WestHollow.DashArea_to_WestHollow.DashApproach", player), lambda state: state.has("WestHollow.DoorLever", player))
    add_rule(world.get_entrance("WestHollow.DashArea_to_WestHollow.DashCrushers", player), lambda state: (state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_location("WestHollow.CrusherEX", player), lambda state: state.can_reach_region("WestHollow.DashCrushers", player) and state.has("Dash", player))
    add_rule(world.get_location("WestHollow.DashTree", player), lambda state: state.can_reach_region("WestHollow.DashCrushers", player) and (state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashArea", player), lambda state: state.has("Dash", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda state: state.can_reach_region("WestHollow.DashRoomTopRight", player) and state.has("DoubleJump", player) and state.has("Dash", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("Bash", player)))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda state: state.can_reach_region("WestHollow.DashRoomTopRight", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashCrushers", player), lambda state: (state.has("Bash", player) or state.has("Glide", player) or state.has("Launch", player) or state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda state: state.has("Glide", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) and state.has_any(("DoubleJump", "Launch"), player) or state.has("Bash", player)))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda state: state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("WestHollow.AboveDashEX", player), lambda state: state.can_reach_region("WestHollow.AboveDashSemisolid", player))
    add_rule(world.get_entrance("WestHollow.AboveDashSemisolid_to_WestHollow.DashArea", player), True)
    add_rule(world.get_location("EastHollow.VoiceDoorOpen", player), lambda state: state.can_reach_region("EastHollow.Teleporter", player) and state.has("EastHollow.ForestsVoice", player))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda state: state.can_reach_region("EastHollow.Teleporter", player))
    add_rule(world.get_entrance("EastHollow.Teleporter_to_Teleporters", player), True)
    add_rule(world.get_entrance("EastHollow.Teleporter_to_BeetleFight", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.AfterBeetleFight", player), lambda state: state.has("EastHollow.BeetleDefeated", player) and (state.has("DoubleJump", player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("EastHollow.Teleporter_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda state: state.has("WestHollow.PurpleDoorOpen", player))
    add_rule(world.get_location("EastHollow.BeetleDefeated", player), lambda state: state.can_reach_region("BeetleFight", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Regenerate", player) and state.count("Health", player) >= 4 and state.has("Dash", player))
    add_rule(world.get_location("EastHollow.VoiceDoorOpen", player), lambda state: state.can_reach_region("EastHollow.VoiceDoorPlatform", player) and state.has("EastHollow.ForestsVoice", player))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda state: state.can_reach_region("EastHollow.VoiceDoorPlatform", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Bash", player))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda state: state.can_reach_region("EastHollow.VoiceDoorPlatform", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda state: state.can_reach_region("EastHollow.VoiceDoorPlatform", player) and state.has("Launch", player))
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.MapMoki", player), lambda state: state.has("EastHollow.VoiceDoorOpen", player))
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.Teleporter", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.AfterBeetleFight", player), lambda state: state.has("EastHollow.BeetleDefeated", player) and state.has("Glide", player))
    add_rule(world.get_location("EastHollow.HandToHandMap", player), lambda state: state.can_reach_region("EastHollow.MapMoki", player))
    add_rule(world.get_location("EastHollow.GladesApproachOre", player), lambda state: state.can_reach_region("EastHollow.MapMoki", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.VoiceDoorPlatform", player), lambda state: state.has("EastHollow.VoiceDoorOpen", player))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("GladesTown.GromsWall", player), lambda state: state.can_reach_region("EastHollow.OutsideGlades", player) and state.has("Bash", player))
    add_rule(world.get_entrance("EastHollow.OutsideGlades_to_GladesTown.Teleporter", player), lambda state: state.has("GladesTown.GromsWall", player))
    add_rule(world.get_entrance("EastHollow.OutsideGlades_to_EastHollow.MapMoki", player), True)
    add_rule(world.get_location("EastHollow.VoiceDoorOpen", player), lambda state: state.can_reach_region("EastHollow.AfterBeetleFight", player) and state.has("EastHollow.ForestsVoice", player))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda state: state.can_reach_region("EastHollow.AfterBeetleFight", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda state: state.can_reach_region("EastHollow.AfterBeetleFight", player) and (state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda state: state.can_reach_region("EastHollow.AfterBeetleFight", player) and state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("EastHollow.MortarEX", player), lambda state: state.can_reach_region("EastHollow.AfterBeetleFight", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("EastHollow.MortarEX", player), lambda state: state.can_reach_region("EastHollow.AfterBeetleFight", player) and state.has("Launch", player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_BeetleFight", player), True)
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.AboveBash", player), True)
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda state: state.has("EastHollow.BeetleDefeated", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda state: state.has("EastHollow.BeetleDefeated", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda state: state.has("EastHollow.BeetleDefeated", player) and state.has("Glide", player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.VoiceDoorPlatform", player), lambda state: state.has("EastHollow.BeetleDefeated", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.VoiceDoorPlatform", player), lambda state: state.has("EastHollow.BeetleDefeated", player) and state.has("Launch", player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda state: state.has("Launch", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda state: state.has("Launch", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_location("EastHollow.DepthsLever", player), lambda state: state.can_reach_region("EastHollow.AboveBash", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda state: state.can_reach_region("EastHollow.AboveBash", player) and state.has("Bash", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda state: state.can_reach_region("EastHollow.AboveBash", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("EastHollow.BashEC", player), lambda state: state.can_reach_region("EastHollow.AboveBash", player) and state.has("Launch", player))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashTreeCheckpoint", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashTreeCheckpoint", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashTreeCheckpoint", player), lambda state: (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AboveDepths", player), lambda state: state.has("EastHollow.DepthsLever", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AboveDepths", player), lambda state: state.has("EastHollow.DepthsLever", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AboveDepths", player), lambda state: state.has("EastHollow.DepthsLever", player) and (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AfterBeetleFight", player), lambda state: (state.has("Launch", player) or state.has("Bash", player)))
    add_rule(world.get_location("EastHollow.BashTree", player), lambda state: state.can_reach_region("EastHollow.BashTreeCheckpoint", player))
    add_rule(world.get_location("EastHollow.BashEX", player), lambda state: state.can_reach_region("EastHollow.BashTreeCheckpoint", player) and state.has("DoubleJump", player) and state.has("Bash", player))
    add_rule(world.get_location("EastHollow.BashEX", player), lambda state: state.can_reach_region("EastHollow.BashTreeCheckpoint", player) and state.has("Launch", player))
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda state: state.has("Launch", player) and (state.has("Bash", player) or state.has("Hammer", player) or state.has("Spear", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda state: state.has("Bash", player) and (state.has("Dash", player) or state.has("DoubleJump", player) or state.has("Glide", player)))
    add_rule(world.get_location("EastHollow.ForestsVoice", player), lambda state: state.can_reach_region("EastHollow.Kwolok", player))
    add_rule(world.get_location("EastHollow.KwolokAmuletQuest", player), lambda state: state.can_reach_region("EastHollow.Kwolok", player) and state.has("EastPools.KwolokAmuletQI", player) and state.has("WestPools.ForestsStrength", player))
    add_rule(world.get_location("GladesTown.TuleySpawned", player), lambda state: state.can_reach_region("EastHollow.Kwolok", player) and state.has("InnerWellspring.WaterEscape", player))
    add_rule(world.get_location("EastHollow.RightKwolokEX", player), lambda state: state.can_reach_region("EastHollow.Kwolok", player) and (state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("EastHollow.SilentSwimEC", player), lambda state: state.can_reach_region("EastHollow.Kwolok", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Water", player) and (state.has("WaterDash", player) or state.has("Launch", player)))
    add_rule(world.get_location("EastHollow.KwolokSwimOre", player), lambda state: state.can_reach_region("EastHollow.Kwolok", player) and state.has("Water", player) and (state.has("Bash", player) or state.count("Health", player) >= 0))
    add_rule(world.get_location("EastHollow.KwolokSwimLeftEX", player), lambda state: state.can_reach_region("EastHollow.Kwolok", player) and state.has("Water", player) and (state.has("WaterDash", player) or state.has("Launch", player)))
    add_rule(world.get_location("EastHollow.KwolokSwimRightEX", player), lambda state: state.can_reach_region("EastHollow.Kwolok", player) and state.has("Water", player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda state: state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda state: state.has("Dash", player) and state.has("Glide", player) and state.count("Health", player) >= 0)
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Water", player) and state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Water", player) and state.has("Grapple", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Water", player) and state.has("Launch", player))
    add_rule(world.get_location("EastHollow.DepthsOpen", player), lambda state: state.can_reach_region("EastHollow.AboveDepths", player) and state.has("Glide", player))
    add_rule(world.get_location("EastHollow.BashHC", player), lambda state: state.can_reach_region("EastHollow.AboveDepths", player) and (state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("EastHollow.SplinterShard", player), lambda state: state.can_reach_region("EastHollow.AboveDepths", player))
    add_rule(world.get_location("EastHollow.DepthsExteriorEX", player), lambda state: state.can_reach_region("EastHollow.AboveDepths", player) and state.has("Glide", player) and state.has("Launch", player))
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_UpperDepths.Entry", player), lambda state: state.has("EastHollow.DepthsOpen", player))
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.BashTreeCheckpoint", player), lambda state: state.has("EastHollow.DepthsLever", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) or state.has("DoubleJump", player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("GladesTown.BuildHuts", player), lambda state: state.can_reach_region("GladesTown.Teleporter", player) and state.count("Ore", player) >= 15)
    add_rule(world.get_location("GladesTown.RoofsOverHeads", player), lambda state: state.can_reach_region("GladesTown.Teleporter", player) and state.has("GladesTown.BuildHuts", player) and state.count("Ore", player) >= 21)
    add_rule(world.get_location("GladesTown.OnwardsAndUpwards", player), lambda state: state.can_reach_region("GladesTown.Teleporter", player) and state.has("GladesTown.RoofsOverHeads", player) and state.count("Ore", player) >= 29)
    add_rule(world.get_location("GladesTown.ClearThorns", player), lambda state: state.can_reach_region("GladesTown.Teleporter", player) and state.count("Ore", player) >= 23)
    add_rule(world.get_location("GladesTown.CaveEntrance", player), lambda state: state.can_reach_region("GladesTown.Teleporter", player) and state.has("GladesTown.ClearThorns", player) and state.count("Ore", player) >= 29)
    add_rule(world.get_location("GladesTown.RebuildTheGlades", player), lambda state: state.can_reach_region("GladesTown.Teleporter", player) and state.count("Ore", player) >= 40)
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda state: state.can_reach_region("GladesTown.Teleporter", player) and state.has("GladesTown.ClearThorns", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda state: state.can_reach_region("GladesTown.Teleporter", player) and state.has("GladesTown.ClearThorns", player) and state.has("Launch", player))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda state: state.can_reach_region("GladesTown.Teleporter", player) and state.has("GladesTown.ClearThorns", player) and state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("GladesTown.LupoSwimMiddleEX", player), lambda state: state.can_reach_region("GladesTown.Teleporter", player) and state.has("Water", player) and (state.has("WaterDash", player) or state.has("Launch", player)))
    add_rule(world.get_location("GladesTown.LupoSwimLeftEX", player), lambda state: state.can_reach_region("GladesTown.Teleporter", player) and state.has("GladesTown.ClearThorns", player) and state.has("Water", player) and (state.has("WaterDash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_Teleporters", player), True)
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.TwillenHome", player), True)
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda state: state.has("TuleyShop.BlueMoon", player) and state.has("Grapple", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda state: state.has("TuleyShop.BlueMoon", player) and state.has("Grapple", player) and state.has("Launch", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda state: state.has("TuleyShop.BlueMoon", player) and state.has("Grapple", player) and state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda state: state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda state: state.has("TuleyShop.Lightcatchers", player) and state.has("TuleyShop.StickyGrass", player) and state.has("Bash", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda state: (state.has("Launch", player) or state.has("TuleyShop.SpringPlants", player)))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda state: state.has("Flap", player) and state.has("Glide", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LeftAboveCoals", player), lambda state: state.has("TuleyShop.BlueMoon", player) and state.has("Grapple", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LeftAboveCoals", player), lambda state: state.has("TuleyShop.BlueMoon", player) and state.has("TuleyShop.Lightcatchers", player) and state.has("Grapple", player) and state.has("Bash", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoHouse", player), lambda state: (state.has("Burrow", player) or state.has("Water", player)))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_OpherShop", player), True)
    add_rule(world.get_entrance("GladesTown.Teleporter_to_Tokk", player), True)
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda state: state.has("GladesTown.TuleySpawned", player) and (state.has("DoubleJump", player) or state.has("Launch", player) or state.has("TuleyShop.SpringPlants", player)))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda state: state.has("GladesTown.TuleySpawned", player) and state.has("Flap", player) and state.has("Glide", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda state: state.has("GladesTown.TuleySpawned", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("GladesTown.Teleporter_to_EastHollow.OutsideGlades", player), lambda state: state.has("GladesTown.GromsWall", player))
    add_rule(world.get_location("GladesTown.HandToHandLantern", player), lambda state: state.can_reach_region("GladesTown.TwillenHome", player) and state.has("LowerReach.HandToHandHat", player))
    add_rule(world.get_location("GladesTown.FamilyReunionKey", player), lambda state: state.can_reach_region("GladesTown.TwillenHome", player) and state.has("GladesTown.BuildHuts", player))
    add_rule(world.get_location("GladesTown.LowerOre", player), lambda state: state.can_reach_region("GladesTown.TwillenHome", player) and (state.has("Hammer", player) or state.has("Spear", player) and state.count("Energy", player) >= 4) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("GladesTown.LowerOre", player), lambda state: state.can_reach_region("GladesTown.TwillenHome", player) and (state.has("Hammer", player) or state.has("Spear", player) and state.count("Energy", player) >= 4) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("GladesTown.AboveCaveEX", player), lambda state: state.can_reach_region("GladesTown.TwillenHome", player) and state.has("GladesTown.ClearThorns", player))
    add_rule(world.get_location("GladesTown.KeyMokiHutEX", player), lambda state: state.can_reach_region("GladesTown.TwillenHome", player) and state.has("GladesTown.BuildHuts", player) and state.has("WoodsEntry.DollQI", player))
    add_rule(world.get_location("GladesTown.DamageTree", player), lambda state: state.can_reach_region("GladesTown.TwillenHome", player) and state.has("TuleyShop.LastTree", player))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_TwillenShop", player), True)
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.AcornMoki", player), lambda state: state.has("GladesTown.ClearThorns", player))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda state: (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda state: state.has("TuleyShop.StickyGrass", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda state: (state.has("GladesTown.ClearThorns", player) or state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_location("GladesTown.HandToHandCanteen", player), lambda state: state.can_reach_region("GladesTown.West", player) and state.has("EastPools.HandToHandSpyglass", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda state: state.can_reach_region("GladesTown.West", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Launch", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda state: state.can_reach_region("GladesTown.West", player) and state.has("Launch", player) and state.has("DoubleJump", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda state: state.can_reach_region("GladesTown.West", player) and state.has("TuleyShop.StickyGrass", player) and (state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda state: state.can_reach_region("GladesTown.West", player) and state.has("TuleyShop.StickyGrass", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda state: state.can_reach_region("GladesTown.West", player) and state.has("TuleyShop.StickyGrass", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda state: state.can_reach_region("GladesTown.West", player) and state.has("TuleyShop.StickyGrass", player) and state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda state: state.can_reach_region("GladesTown.West", player) and state.has("TuleyShop.StickyGrass", player) and state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player) and state.has("Glide", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda state: state.can_reach_region("GladesTown.West", player) and state.has("GladesTown.BuildHuts", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda state: state.can_reach_region("GladesTown.West", player) and state.has("GladesTown.BuildHuts", player) and state.has("TuleyShop.StickyGrass", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda state: state.can_reach_region("GladesTown.West", player) and state.has("GladesTown.BuildHuts", player) and state.has("TuleyShop.StickyGrass", player) and state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda state: state.can_reach_region("GladesTown.West", player) and state.has("GladesTown.BuildHuts", player) and state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda state: state.has("GladesTown.BuildHuts", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda state: state.has("GladesTown.BuildHuts", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda state: state.has("GladesTown.BuildHuts", player) and state.has("Launch", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda state: state.has("GladesTown.BuildHuts", player) and state.has("Grapple", player) and (state.has("TuleyShop.StickyGrass", player) or state.has("TuleyShop.BlueMoon", player)))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda state: state.has("GladesTown.BuildHuts", player) and state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.TwillenHome", player), True)
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.Teleporter", player), lambda state: state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.Teleporter", player), lambda state: state.has("TuleyShop.BlueMoon", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.Teleporter", player), lambda state: state.has("TuleyShop.StickyGrass", player) and state.has("Grapple", player) and state.has("Glide", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda state: state.has("TuleyShop.StickyGrass", player) and state.has("Launch", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda state: state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda state: state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player) and state.has("Launch", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda state: state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player) and state.has("TuleyShop.StickyGrass", player) and state.has("Grapple", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda state: state.has("TuleyShop.BlueMoon", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("GladesTown.MotayHutEX", player), lambda state: state.can_reach_region("GladesTown.MotayHut", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda state: state.can_reach_region("GladesTown.MotayHut", player) and state.has("GladesTown.BuildHuts", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda state: state.can_reach_region("GladesTown.MotayHut", player) and state.has("GladesTown.BuildHuts", player) and state.has("Launch", player))
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.West", player), True)
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda state: state.has("GladesTown.BuildHuts", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Dash", player))
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda state: state.has("GladesTown.BuildHuts", player) and state.has("Launch", player))
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda state: state.has("GladesTown.BuildHuts", player) and state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player) and state.has("DoubleJump", player))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda state: state.can_reach_region("GladesTown.UpperWest", player) and state.has("GladesTown.ClearThorns", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda state: state.can_reach_region("GladesTown.UpperWest", player) and state.has("GladesTown.ClearThorns", player) and state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda state: state.can_reach_region("GladesTown.UpperWest", player) and state.has("GladesTown.ClearThorns", player) and state.has("TuleyShop.BlueMoon", player) and state.has("Grapple", player))
    add_rule(world.get_location("GladesTown.BraveMokiHutEX", player), lambda state: state.can_reach_region("GladesTown.UpperWest", player) and state.has("GladesTown.OnwardsAndUpwards", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_location("GladesTown.UpperLeftEX", player), lambda state: state.can_reach_region("GladesTown.UpperWest", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("GladesTown.UpperLeftEX", player), lambda state: state.can_reach_region("GladesTown.UpperWest", player) and state.has("Launch", player))
    add_rule(world.get_location("GladesTown.UpperLeftEX", player), lambda state: state.can_reach_region("GladesTown.UpperWest", player) and state.has("DoubleJump", player) and state.has("Grapple", player) and (state.has("TuleyShop.StickyGrass", player) or state.has("TuleyShop.BlueMoon", player)))
    add_rule(world.get_location("GladesTown.AboveGromHC", player), lambda state: state.can_reach_region("GladesTown.UpperWest", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("GladesTown.AboveGromHC", player), lambda state: state.can_reach_region("GladesTown.UpperWest", player) and state.has("Launch", player))
    add_rule(world.get_location("GladesTown.AboveGromHC", player), lambda state: state.can_reach_region("GladesTown.UpperWest", player) and state.has("TuleyShop.StickyGrass", player) and state.has("Grapple", player))
    add_rule(world.get_location("GladesTown.AboveGromHC", player), lambda state: state.can_reach_region("GladesTown.UpperWest", player) and state.has("TuleyShop.BlueMoon", player) and state.has("Grapple", player) and (state.has("Dash", player) or state.has("DoubleJump", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.MotayHut", player), lambda state: state.has("GladesTown.BuildHuts", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.MotayHut", player), lambda state: state.has("GladesTown.BuildHuts", player) and state.has("TuleyShop.BlueMoon", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.West", player), lambda state: (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.West", player), lambda state: state.has("TuleyShop.BlueMoon", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.TwillenHome", player), True)
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.Teleporter", player), lambda state: (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.Teleporter", player), lambda state: state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.Teleporter", player), lambda state: state.has("TuleyShop.BlueMoon", player) and state.has("Grapple", player))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda state: state.can_reach_region("GladesTown.AcornMoki", player) and state.has("GladesTown.CaveEntrance", player) and state.has("Flash", player) and state.has("Water", player) and state.has("Glide", player))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda state: state.can_reach_region("GladesTown.AcornMoki", player) and state.has("GladesTown.CaveEntrance", player) and state.has("Flash", player) and state.has("Water", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda state: state.can_reach_region("GladesTown.AcornMoki", player) and state.has("GladesTown.CaveEntrance", player) and state.has("Flash", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda state: state.can_reach_region("GladesTown.AcornMoki", player) and state.has("GladesTown.CaveEntrance", player) and state.has("Flash", player) and state.has("Launch", player))
    add_rule(world.get_location("GladesTown.MokiAcornQuest", player), lambda state: state.can_reach_region("GladesTown.AcornMoki", player) and state.has("GladesTown.AcornQI", player))
    add_rule(world.get_location("GladesTown.AboveCaveEX", player), lambda state: state.can_reach_region("GladesTown.AcornMoki", player) and (state.has("Launch", player) or state.has("DoubleJump", player)))
    add_rule(world.get_location("GladesTown.AboveCaveEX", player), lambda state: state.can_reach_region("GladesTown.AcornMoki", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("GladesTown.AboveCaveEX", player), lambda state: state.can_reach_region("GladesTown.AcornMoki", player) and state.has("TuleyShop.SpringPlants", player) and state.count("Health", player) >= 0)
    add_rule(world.get_location("GladesTown.CaveBurrowEX", player), lambda state: state.can_reach_region("GladesTown.AcornMoki", player) and state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda state: state.has("GladesTown.ClearThorns", player) and (state.has("Launch", player) or state.has("DoubleJump", player)))
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda state: state.has("GladesTown.ClearThorns", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Dash", player))
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda state: state.has("GladesTown.ClearThorns", player) and state.has("TuleyShop.SpringPlants", player))
    add_rule(world.get_location("GladesTown.AboveTpEX", player), lambda state: state.can_reach_region("GladesTown.BelowBountyShard", player))
    add_rule(world.get_location("GladesTown.BountyShard", player), lambda state: state.can_reach_region("GladesTown.BelowBountyShard", player) and state.has("Launch", player))
    add_rule(world.get_location("GladesTown.BountyShard", player), lambda state: state.can_reach_region("GladesTown.BelowBountyShard", player) and state.has("Bash", player) and (state.has("Grenade", player) and state.count("Energy", player) >= 4 or state.has("TuleyShop.Lightcatchers", player)))
    add_rule(world.get_location("GladesTown.BountyShard", player), lambda state: state.can_reach_region("GladesTown.BelowBountyShard", player) and state.has("TuleyShop.StickyGrass", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.Teleporter", player), True)
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.LeftAboveCoals", player), lambda state: state.has("Glide", player))
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.LeftAboveCoals", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.LeftAboveCoals", player), lambda state: state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda state: state.can_reach_region("GladesTown.LeftAboveCoals", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda state: state.can_reach_region("GladesTown.LeftAboveCoals", player) and state.has("Flap", player) and state.has("Glide", player))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda state: state.can_reach_region("GladesTown.LeftAboveCoals", player) and state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player) and (state.has("Glide", player) or state.has("Dash", player)))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda state: state.can_reach_region("GladesTown.LeftAboveCoals", player) and state.has("TuleyShop.SpringPlants", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.Teleporter", player), True)
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.BelowBountyShard", player), lambda state: state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.AboveOpher", player), lambda state: state.has("DoubleJump", player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.LeftAboveCoals", player), True)
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda state: state.has("Flap", player) and state.has("Glide", player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda state: state.has("TuleyShop.Lightcatchers", player) and state.has("Bash", player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda state: state.has("TuleyShop.SpringPlants", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda state: state.has("GladesTown.RoofsOverHeads", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_TuleyShop", player), lambda state: state.has("Glide", player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_TuleyShop", player), lambda state: state.has("GladesTown.RoofsOverHeads", player) and state.has("Dash", player))
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda state: (state.has("TuleyShop.SpringPlants", player) or state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda state: state.has("TuleyShop.BlueMoon", player) and state.has("Grapple", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.AboveOpher", player), True)
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_TuleyShop", player), lambda state: state.has("GladesTown.TuleySpawned", player) and state.has("Dash", player))
    add_rule(world.get_location("GladesTown.LupoSoupEX", player), lambda state: state.can_reach_region("GladesTown.LupoHouse", player))
    add_rule(world.get_location("LupoShop.HCMapIcon", player), lambda state: state.can_reach_region("GladesTown.LupoHouse", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("LupoShop.ECMapIcon", player), lambda state: state.can_reach_region("GladesTown.LupoHouse", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("LupoShop.ShardMapIcon", player), lambda state: state.can_reach_region("GladesTown.LupoHouse", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("GladesTown.LupoSwimHC", player), lambda state: state.can_reach_region("GladesTown.LupoHouse", player) and state.has("Water", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("GladesTown.LupoHouse_to_GladesTown.Teleporter", player), lambda state: (state.has("Water", player) or state.has("Burrow", player)))
    add_rule(world.get_location("GladesTown.BelowHoleHutEX", player), lambda state: state.can_reach_region("GladesTown.HoleHut", player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.HoleHutEntrance", player), lambda state: state.has("GladesTown.RoofsOverHeads", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.HoleHutEntrance", player), lambda state: state.has("GladesTown.RoofsOverHeads", player) and (state.has("TuleyShop.SpringPlants", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda state: state.has("Launch", player) and state.has("Grapple", player) and (state.has("TuleyShop.BlueMoon", player) or state.has("TuleyShop.StickyGrass", player)))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda state: state.has("TuleyShop.SpringPlants", player) and state.has("Launch", player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda state: state.has("TuleyShop.BlueMoon", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda state: state.has("TuleyShop.StickyGrass", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda state: state.has("TuleyShop.Lightcatchers", player) and state.has("TuleyShop.BlueMoon", player) and state.has("Bash", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda state: state.has("TuleyShop.Lightcatchers", player) and state.has("TuleyShop.StickyGrass", player) and state.has("Bash", player) and state.has("Grapple", player) and state.has("Glide", player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.PlayfulMoki", player), True)
    add_rule(world.get_location("GladesTown.HoleHutEX", player), lambda state: state.can_reach_region("GladesTown.HoleHutEntrance", player) and state.has("GladesTown.RoofsOverHeads", player))
    add_rule(world.get_location("GladesTown.HoleHutEC", player), lambda state: state.can_reach_region("GladesTown.HoleHutEntrance", player) and state.has("GladesTown.RoofsOverHeads", player))
    add_rule(world.get_entrance("GladesTown.HoleHutEntrance_to_GladesTown.HoleHut", player), True)
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda state: state.can_reach_region("WestGlades.PastTown", player) and (state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda state: state.can_reach_region("WestGlades.PastTown", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda state: state.can_reach_region("WestGlades.PastTown", player) and state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda state: state.can_reach_region("WestGlades.PastTown", player) and state.has("Bash", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda state: state.can_reach_region("WestGlades.PastTown", player) and state.has("Water", player) and state.has("Bash", player))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda state: state.can_reach_region("WestGlades.PastTown", player) and state.has("Launch", player))
    add_rule(world.get_location("WestGlades.LowerPoolEX", player), lambda state: state.can_reach_region("WestGlades.PastTown", player) and state.has("Water", player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda state: (state.has("Water", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda state: state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda state: state.can_reach_region("WestGlades.LowerPool", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("WestGlades.SwimEC", player), lambda state: state.can_reach_region("WestGlades.LowerPool", player) and state.has("Water", player))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda state: state.has("Bash", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda state: (state.has("Water", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda state: state.can_reach_region("WestGlades.Center", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda state: state.can_reach_region("WestGlades.Center", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Grenade", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.LowerPool", player), lambda state: (state.has("Water", player) or state.has("Launch", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Bash", player)))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda state: state.can_reach_region("WestGlades.Upper", player) and state.has("Flap", player))
    add_rule(world.get_location("WestGlades.UpperPoolEX", player), lambda state: state.can_reach_region("WestGlades.Upper", player) and state.has("Water", player))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda state: state.can_reach_region("WestGlades.Upper", player) and state.has("Glide", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda state: state.can_reach_region("WestGlades.Upper", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.Center", player), True)
    add_rule(world.get_entrance("WestGlades.Upper_to_LowerReach.Entry", player), lambda state: state.has("LowerReach.BearSneezed", player))
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda state: state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda state: (state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda state: state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("OuterWellspring.SwimOre", player), lambda state: state.can_reach_region("WestGlades.MillApproach", player) and state.has("Water", player) and (state.has("Grapple", player) or state.has("WaterDash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda state: state.has("Grapple", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda state: state.has("Grapple", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda state: state.has("Launch", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Grapple", player)))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Grenade", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda state: state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda state: state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda state: (state.has("Launch", player) or state.has("Water", player)))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda state: state.has("DoubleJump", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda state: state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda state: state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda state: state.has("Water", player) and state.count("Health", player) >= 0 and state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda state: state.has("Water", player) and state.has("Grapple", player) and (state.has("WaterDash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda state: state.has("Water", player) and state.has("Launch", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda state: state.has("Water", player) and state.has("Launch", player) and state.has("Glide", player))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda state: state.can_reach_region("WestGlades.ShrineArea", player) and state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda state: state.can_reach_region("WestGlades.ShrineArea", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda state: state.can_reach_region("WestGlades.ShrineArea", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_GladesShrine", player), True)
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.MillApproach", player), True)
    add_rule(world.get_location("WestGlades.CombatShrineCompleted", player), lambda state: state.can_reach_region("GladesShrine", player) and state.has("Regenerate", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) and state.has_any(("Bow", "Spear"), player) and state.count("Health", player) >= 8)
    add_rule(world.get_location("WestGlades.CombatShrineCompleted", player), lambda state: state.can_reach_region("GladesShrine", player) and state.has("Regenerate", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) and state.has_any(("Bow", "Spear"), player) and state.count("Health", player) >= 6 and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("WestGlades.CombatShrineCompleted", player), lambda state: state.can_reach_region("GladesShrine", player) and state.has("Regenerate", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) and state.has_any(("Bow", "Spear"), player) and state.count("Health", player) >= 1 and state.has("Launch", player))
    add_rule(world.get_location("WestGlades.CombatShrine", player), lambda state: state.can_reach_region("GladesShrine", player) and state.has("WestGlades.CombatShrineCompleted", player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestWallBroken", player), lambda state: state.can_reach_region("OuterWellspring.EntranceDoor", player) and state.has_any(("Sword", "Hammer"), player) and state.has("DoubleJump", player) and (state.has("Bash", player) or state.has_any(("Sword", "Hammer"), player)))
    add_rule(world.get_location("OuterWellspring.LifeHarvestWallBroken", player), lambda state: state.can_reach_region("OuterWellspring.EntranceDoor", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Launch", player))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda state: state.can_reach_region("OuterWellspring.EntranceDoor", player) and state.has("DoubleJump", player) and state.has("Grapple", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda state: state.can_reach_region("OuterWellspring.EntranceDoor", player) and state.has("Grapple", player) and state.has("Launch", player))
    add_rule(world.get_location("OuterWellspring.WheelEX", player), lambda state: state.can_reach_region("OuterWellspring.EntranceDoor", player) and state.has("OuterWellspring.EntranceDoorOpen", player))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda state: state.can_reach_region("OuterWellspring.EntranceDoor", player) and state.has("OuterWellspring.EntranceDoorOpen", player))
    add_rule(world.get_location("OuterWellspring.SwimEX", player), lambda state: state.can_reach_region("OuterWellspring.EntranceDoor", player) and state.has("Water", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestEntry", player), lambda state: state.has("OuterWellspring.LifeHarvestWallBroken", player) and state.has("DoubleJump", player) and (state.has("Bash", player) or state.has_any(("Sword", "Hammer"), player)))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestEntry", player), lambda state: state.has("OuterWellspring.LifeHarvestWallBroken", player) and state.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_InnerWellspring.EntranceDoor", player), lambda state: state.has("OuterWellspring.EntranceDoorOpen", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda state: state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda state: state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda state: state.has("Grapple", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda state: state.has("Grapple", player) and state.has("Glide", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda state: state.has("DoubleJump", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda state: (state.has("Water", player) or state.has("Launch", player)))
    add_rule(world.get_location("OuterWellspring.LifeHarvestLeverPulled", player), lambda state: state.can_reach_region("OuterWellspring.LifeHarvestEntry", player) and state.has("DoubleJump", player) and state.has("Bash", player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestLeverPulled", player), lambda state: state.can_reach_region("OuterWellspring.LifeHarvestEntry", player) and state.has("Launch", player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda state: state.can_reach_region("OuterWellspring.LifeHarvestEntry", player) and state.has("OuterWellspring.LifeHarvestLeverPulled", player) and state.has("DoubleJump", player) and state.has("Bash", player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda state: state.can_reach_region("OuterWellspring.LifeHarvestEntry", player) and state.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.EntranceDoor", player), lambda state: state.has("OuterWellspring.LifeHarvestWallBroken", player) and (state.has("Launch", player) or state.has("Bash", player) or state.has_any(("Sword", "Hammer"), player)))
    add_rule(world.get_location("OuterWellspring.EntranceDoorOpen", player), lambda state: state.can_reach_region("OuterWellspring.Basement", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda state: state.can_reach_region("OuterWellspring.Basement", player) and state.has("Water", player))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda state: state.has("Launch", player) and (state.has("OuterWellspring.EntranceDoorOpen", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Bash", player) or state.has("Grapple", player)))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda state: state.has("OuterWellspring.EntranceDoorOpen", player) and state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Grapple", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda state: state.has("OuterWellspring.EntranceDoorOpen", player) and state.has("Water", player) and state.has("Grapple", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("Bash", player)))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda state: state.has("OuterWellspring.EntranceDoorOpen", player) and state.has("Water", player) and state.has("WaterDash", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("Bash", player)))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda state: state.can_reach_region("OuterWellspring.AboveEntranceDoor", player) and state.has("DoubleJump", player) and state.has("Launch", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda state: state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda state: state.has("Grapple", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda state: state.has("Grapple", player) and state.has("Glide", player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda state: state.has("Grapple", player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EntranceDoor", player), True)
    add_rule(world.get_location("OuterWellspring.WestDoorBlueMoonFree", player), lambda state: state.can_reach_region("OuterWellspring.WestDoor", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Launch", player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda state: state.can_reach_region("OuterWellspring.WestDoor", player) and state.has("OuterWellspring.WestDoorBlueMoonFree", player) and state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda state: state.can_reach_region("OuterWellspring.WestDoor", player) and state.has("OuterWellspring.WestDoorBlueMoonFree", player) and state.has("Grapple", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda state: state.can_reach_region("OuterWellspring.WestDoor", player) and state.has("OuterWellspring.WestDoorBlueMoonFree", player) and state.has("Grapple", player) and state.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_InnerWellspring.WestDoor", player), lambda state: state.has("InnerWellspring.MiddleDoorsOpen", player))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EastDoor", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda state: state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EntranceDoor", player), True)
    add_rule(world.get_location("OuterWellspring.WestDoorBlueMoonFree", player), lambda state: state.can_reach_region("OuterWellspring.EastDoor", player) and state.has_any(("Sword", "Hammer"), player) and (state.has("Bow", player) or state.has("Spear", player) or state.has("Grenade", player)) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("OuterWellspring.WestDoorBlueMoonFree", player), lambda state: state.can_reach_region("OuterWellspring.EastDoor", player) and state.has_any(("Sword", "Hammer"), player) and (state.has("Bow", player) or state.has("Spear", player) or state.has("Grenade", player)) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("OuterWellspring.WestDoorBlueMoonFree", player), lambda state: state.can_reach_region("OuterWellspring.EastDoor", player) and state.has_any(("Sword", "Hammer"), player) and (state.has("Bow", player) or state.has("Spear", player) or state.has("Grenade", player)) and state.has("InnerWellspring.TopDoorOpen", player) and state.has("Grapple", player))
    add_rule(world.get_location("OuterWellspring.TheLostCompass", player), lambda state: state.can_reach_region("OuterWellspring.EastDoor", player) and state.has("InnerWellspring.NeedleQI", player))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda state: state.can_reach_region("OuterWellspring.EastDoor", player) and state.has_any(("Sword", "Hammer"), player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda state: state.can_reach_region("OuterWellspring.EastDoor", player) and state.has_any(("Sword", "Hammer"), player) and (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda state: state.can_reach_region("OuterWellspring.EastDoor", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda state: state.can_reach_region("OuterWellspring.EastDoor", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Grapple", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_InnerWellspring.EastDoor", player), lambda state: state.has("InnerWellspring.MiddleDoorsOpen", player))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda state: state.has("InnerWellspring.TopDoorOpen", player) and (state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda state: state.has("InnerWellspring.TopDoorOpen", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.WestDoor", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda state: (state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallMidpoint", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveEntranceDoor", player), True)
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda state: state.can_reach_region("OuterWellspring.AboveWestDoor", player) and state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda state: state.can_reach_region("OuterWellspring.AboveWestDoor", player) and state.has("Grapple", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda state: state.can_reach_region("OuterWellspring.AboveWestDoor", player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Grapple", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda state: (state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.WestDoor", player), lambda state: (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Grapple", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda state: state.has("Glide", player))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.AboveEntranceDoor", player), True)
    add_rule(world.get_location("OuterWellspring.TrialActivation", player), lambda state: state.can_reach_region("OuterWellspring.TopDoor", player) and state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda state: state.can_reach_region("OuterWellspring.TopDoor", player) and state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda state: state.can_reach_region("OuterWellspring.TopDoor", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda state: state.can_reach_region("OuterWellspring.TopDoor", player) and state.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_InnerWellspring.Teleporter", player), lambda state: state.has("InnerWellspring.TopDoorOpen", player))
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.EastDoor", player), True)
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.AboveWestDoor", player), True)
    add_rule(world.get_location("OuterWellspring.RightWallOre", player), lambda state: state.can_reach_region("OuterWellspring.RightWallMidpoint", player))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_WestGlades.MillApproach", player), lambda state: (state.has("Grapple", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EntranceDoor", player), lambda state: (state.has("Water", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda state: state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("OuterWellspring.RightWallEX", player), lambda state: state.can_reach_region("OuterWellspring.TrialApproach", player) and state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("OuterWellspring.RightWallEX", player), lambda state: state.can_reach_region("OuterWellspring.TrialApproach", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("OuterWellspring.RightWallEX", player), lambda state: state.can_reach_region("OuterWellspring.TrialApproach", player) and state.has("Launch", player))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda state: state.can_reach_region("OuterWellspring.TrialApproach", player) and state.has_any(("Sword", "Hammer"), player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda state: state.can_reach_region("OuterWellspring.TrialApproach", player) and state.has_any(("Sword", "Hammer"), player) and (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda state: state.can_reach_region("OuterWellspring.TrialApproach", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.TrialRoom", player), lambda state: state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.TrialRoom", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda state: state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.AboveEntranceDoor", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallMidpoint", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialStart", player), lambda state: state.has("Grapple", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialStart", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialApproach", player), True)
    add_rule(world.get_location("OuterWellspring.TrialOre", player), lambda state: state.can_reach_region("OuterWellspring.TrialStart", player))
    add_rule(world.get_location("OuterWellspring.SpiritTrial", player), lambda state: state.can_reach_region("OuterWellspring.TrialStart", player) and state.has("OuterWellspring.TrialActivation", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda state: state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda state: state.has("Grapple", player) and state.has("Glide", player))
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.ThreeWheels", player), lambda state: state.can_reach_region("InnerWellspring.EntranceDoor", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.ThreeWheelsEX", player), lambda state: state.can_reach_region("InnerWellspring.EntranceDoor", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("InnerWellspring.ThreeWheelsEX", player), lambda state: state.can_reach_region("InnerWellspring.EntranceDoor", player) and state.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.ThreeWheelsEX", player), lambda state: state.can_reach_region("InnerWellspring.EntranceDoor", player) and state.has("InnerWellspring.ThreeWheels", player))
    add_rule(world.get_location("InnerWellspring.WaterSwitchEX", player), lambda state: state.can_reach_region("InnerWellspring.EntranceDoor", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_OuterWellspring.EntranceDoor", player), True)
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda state: state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda state: state.has("InnerWellspring.ThreeWheels", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda state: state.has("InnerWellspring.ThreeWheels", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda state: state.has("InnerWellspring.ThreeWheels", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda state: state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.ThornShard", player), lambda state: state.can_reach_region("InnerWellspring.ThornShardArea", player))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda state: state.can_reach_region("InnerWellspring.ThornShardArea", player) and state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda state: state.can_reach_region("InnerWellspring.ThornShardArea", player) and state.has("Launch", player))
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.EntranceDoor", player), True)
    add_rule(world.get_location("InnerWellspring.ShortCutWheel", player), lambda state: state.can_reach_region("InnerWellspring.ShortcutLever", player))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.EntranceDoor", player), lambda state: (state.has("Grapple", player) or state.has("Launch", player) or state.has("DoubleJump", player)))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda state: state.has("InnerWellspring.ShortCutWheel", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda state: state.has("InnerWellspring.ShortCutWheel", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda state: state.has("InnerWellspring.ShortCutWheel", player) and state.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.DrainRoomBottomWheel", player), lambda state: state.can_reach_region("InnerWellspring.DrainRoom", player) and state.has("InnerWellspring.ThreeWheels", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.EntranceDoor", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Grapple", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.EntranceDoor", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda state: state.has("DoubleJump", player) and state.has("Glide", player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda state: (state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda state: state.has("Glide", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda state: state.has("InnerWellspring.DrainRoomBottomWheel", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda state: state.has("InnerWellspring.DrainRoomBottomWheel", player) and state.has("Dash", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda state: state.has("Water", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda state: state.has("Water", player) and state.has("WaterDash", player) and state.has("Dash", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaEntrance", player), lambda state: state.has("InnerWellspring.DrainLever", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Grapple", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda state: state.can_reach_region("InnerWellspring.DrainAreaEntrance", player) and (state.has("Water", player) or state.has("DoubleJump", player) or state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda state: state.can_reach_region("InnerWellspring.DrainAreaEntrance", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda state: state.has("DoubleJump", player) and (state.has("Water", player) or state.has("Bash", player)))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda state: state.has("Dash", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda state: state.has("Water", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("Grapple", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.DrainEX", player), lambda state: state.can_reach_region("InnerWellspring.DrainAreaEX", player))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda state: state.can_reach_region("InnerWellspring.DrainAreaEX", player) and (state.has("Water", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainAreaExit", player), lambda state: state.has_any(("Sword", "Hammer"), player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainAreaExit", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainAreaEX", player), True)
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda state: (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda state: state.has("Dash", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda state: state.has("Dash", player) and state.has("Glide", player) and state.has("Water", player))
    add_rule(world.get_location("InnerWellspring.DrainRoomTopWheel", player), lambda state: state.can_reach_region("InnerWellspring.DrainRoomCenter", player) and state.has_any(("Sword", "Hammer"), player) and (state.has("Bow", player) or state.has("Grenade", player) or state.has("Spear", player)))
    add_rule(world.get_location("InnerWellspring.DrainRoomTopWheel", player), lambda state: state.can_reach_region("InnerWellspring.DrainRoomCenter", player) and state.has("Launch", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda state: (state.has("Grapple", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainAreaEntrance", player), lambda state: state.has("InnerWellspring.DrainLever", player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoomTop", player), lambda state: (state.has("InnerWellspring.DrainRoomTopWheel", player) or state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_location("InnerWellspring.LaserOre", player), lambda state: state.can_reach_region("InnerWellspring.DrainRoomTop", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("InnerWellspring.LaserOre", player), lambda state: state.can_reach_region("InnerWellspring.DrainRoomTop", player) and state.has("Dash", player) and state.has("Glide", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) or state.has("Bash", player)))
    add_rule(world.get_location("InnerWellspring.LaserOre", player), lambda state: state.can_reach_region("InnerWellspring.DrainRoomTop", player) and state.has("Launch", player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.DrainRoomCenter", player), True)
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda state: state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda state: state.has("InnerWellspring.DrainRoomTopWheel", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.DrainLever", player), lambda state: state.can_reach_region("InnerWellspring.BelowDrainLever", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("InnerWellspring.DrainLever", player), lambda state: state.can_reach_region("InnerWellspring.BelowDrainLever", player) and state.has("InnerWellspring.UpperCorruption", player) and state.has("DoubleJump", player))
    add_rule(world.get_location("InnerWellspring.DrainLever", player), lambda state: state.can_reach_region("InnerWellspring.BelowDrainLever", player) and state.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda state: state.can_reach_region("InnerWellspring.BelowDrainLever", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda state: state.can_reach_region("InnerWellspring.BelowDrainLever", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda state: state.can_reach_region("InnerWellspring.BelowDrainLever", player) and state.has("InnerWellspring.UpperCorruption", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda state: state.can_reach_region("InnerWellspring.BelowDrainLever", player) and state.has("InnerWellspring.UpperCorruption", player) and state.has("DoubleJump", player) and state.has("Grapple", player))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda state: state.can_reach_region("InnerWellspring.BelowDrainLever", player) and state.has("Launch", player))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.AbovePole", player), lambda state: state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.AbovePole", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda state: (state.has("InnerWellspring.UpperCorruption", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.DrainRoomTop", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.DrainRoomCenter", player), True)
    add_rule(world.get_location("InnerWellspring.UpperCorruption", player), lambda state: state.can_reach_region("InnerWellspring.AbovePole", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.LupoEX", player), lambda state: state.can_reach_region("InnerWellspring.AbovePole", player))
    add_rule(world.get_entrance("InnerWellspring.AbovePole_to_InnerWellspring.BelowDrainLever", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("InnerWellspring.MiddleDoorsOpen", player), lambda state: state.can_reach_region("InnerWellspring.WestDoor", player) and state.has("Grapple", player))
    add_rule(world.get_location("InnerWellspring.MiddleDoorsOpen", player), lambda state: state.can_reach_region("InnerWellspring.WestDoor", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.ShortcutWheelEX", player), lambda state: state.can_reach_region("InnerWellspring.WestDoor", player) and state.has("InnerWellspring.ShortCutWheel", player))
    add_rule(world.get_location("InnerWellspring.LupoMap", player), lambda state: state.can_reach_region("InnerWellspring.WestDoor", player) and state.count("SpiritLight", player) >= 1 and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("InnerWellspring.LupoMap", player), lambda state: state.can_reach_region("InnerWellspring.WestDoor", player) and state.count("SpiritLight", player) >= 1 and state.has("Bash", player))
    add_rule(world.get_location("InnerWellspring.LupoMap", player), lambda state: state.can_reach_region("InnerWellspring.WestDoor", player) and state.count("SpiritLight", player) >= 1 and state.has("InnerWellspring.UpperCorruption", player))
    add_rule(world.get_location("InnerWellspring.GrappleTreeEX", player), lambda state: state.can_reach_region("InnerWellspring.WestDoor", player) and state.has("DoubleJump", player) and state.has("Grapple", player))
    add_rule(world.get_location("InnerWellspring.GrappleTreeEX", player), lambda state: state.can_reach_region("InnerWellspring.WestDoor", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("InnerWellspring.GrappleTreeEX", player), lambda state: state.can_reach_region("InnerWellspring.WestDoor", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Grapple", player)))
    add_rule(world.get_location("InnerWellspring.GrappleTreeEX", player), lambda state: state.can_reach_region("InnerWellspring.WestDoor", player) and state.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.GrappleTree", player), lambda state: state.can_reach_region("InnerWellspring.WestDoor", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_location("InnerWellspring.GrappleTree", player), lambda state: state.can_reach_region("InnerWellspring.WestDoor", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_OuterWellspring.WestDoor", player), lambda state: state.has("InnerWellspring.MiddleDoorsOpen", player))
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.BelowDrainLever", player), True)
    add_rule(world.get_location("InnerWellspring.SpinArena", player), lambda state: state.can_reach_region("InnerWellspring.EastDoor", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("InnerWellspring.SpinningRoomOpen", player), lambda state: state.can_reach_region("InnerWellspring.EastDoor", player) and state.has("InnerWellspring.SpinArena", player) and state.has_any(("Sword", "Hammer"), player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("InnerWellspring.HandToHandHerbs", player), lambda state: state.can_reach_region("InnerWellspring.EastDoor", player) and state.has("GladesTown.HandToHandPouch", player))
    add_rule(world.get_location("InnerWellspring.AboveSpinArenaEX", player), lambda state: state.can_reach_region("InnerWellspring.EastDoor", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("InnerWellspring.AboveSpinArenaEX", player), lambda state: state.can_reach_region("InnerWellspring.EastDoor", player) and state.has("Launch", player))
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_OuterWellspring.EastDoor", player), True)
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.SpinPuzzle", player), lambda state: state.has("InnerWellspring.SpinningRoomOpen", player))
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda state: state.has("InnerWellspring.TopDoorOpen", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda state: state.has("InnerWellspring.TopDoorOpen", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda state: state.has("InnerWellspring.TopDoorOpen", player) and state.has("Launch", player) and state.has("DoubleJump", player))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda state: state.can_reach_region("InnerWellspring.SpinPuzzle", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda state: state.can_reach_region("InnerWellspring.SpinPuzzle", player) and state.has("Grapple", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda state: state.can_reach_region("InnerWellspring.SpinPuzzle", player) and state.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.RotateRoomEX", player), lambda state: state.can_reach_region("InnerWellspring.SpinPuzzle", player) and state.has("InnerWellspring.SpinPuzzleSolved", player))
    add_rule(world.get_location("InnerWellspring.RotateRoomOre", player), lambda state: state.can_reach_region("InnerWellspring.SpinPuzzle", player) and state.has("InnerWellspring.SpinPuzzleSolved", player))
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.PastSpinPuzzle", player), lambda state: state.has("InnerWellspring.SpinPuzzleSolved", player) and (state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.EastDoor", player), lambda state: state.has("InnerWellspring.SpinningRoomOpen", player) and (state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.EastDoor", player), lambda state: state.has("InnerWellspring.SpinningRoomOpen", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda state: state.has("Grapple", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda state: state.has("Grapple", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzle", player), lambda state: state.has("InnerWellspring.SpinPuzzleSolved", player) and (state.has("DoubleJump", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzle", player), lambda state: state.has("InnerWellspring.SpinPuzzleSolved", player) and state.has("Grapple", player) and state.has("Dash", player))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda state: state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda state: state.has("Grapple", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda state: state.has("Grapple", player) and state.has("Launch", player))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.PastSpinPuzzle", player), lambda state: state.has("Glide", player) and state.has_any(("Sword", "Hammer"), player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.PastSpinPuzzle", player), lambda state: state.has("Glide", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_location("InnerWellspring.TopDoorOpen", player), lambda state: state.can_reach_region("InnerWellspring.TopSecondRoom", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.NeedleQI", player), lambda state: state.can_reach_region("InnerWellspring.TopSecondRoom", player) and state.has("InnerWellspring.TopDoorOpen", player))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.EastDoor", player), lambda state: state.has("InnerWellspring.TopDoorOpen", player))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda state: (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) or state.has("Bash", player)) and state.has("Glide", player) and (state.has("Water", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda state: (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) or state.has("Bash", player)) and state.has("Grapple", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda state: state.has("Launch", player) and state.has("Water", player))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda state: state.can_reach_region("InnerWellspring.Teleporter", player))
    add_rule(world.get_location("InnerWellspring.BlueMoonSeed", player), lambda state: state.can_reach_region("InnerWellspring.Teleporter", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("InnerWellspring.BlueMoonSeed", player), lambda state: state.can_reach_region("InnerWellspring.Teleporter", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("InnerWellspring.BlueMoonSeed", player), lambda state: state.can_reach_region("InnerWellspring.Teleporter", player) and state.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.LibraryEX", player), lambda state: state.can_reach_region("InnerWellspring.Teleporter", player))
    add_rule(world.get_location("InnerWellspring.AboveTpEX", player), lambda state: state.can_reach_region("InnerWellspring.Teleporter", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("InnerWellspring.AboveTpEX", player), lambda state: state.can_reach_region("InnerWellspring.Teleporter", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("InnerWellspring.AboveTpEX", player), lambda state: state.can_reach_region("InnerWellspring.Teleporter", player) and state.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.SwimOre", player), lambda state: state.can_reach_region("InnerWellspring.Teleporter", player) and state.has("Water", player))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_Teleporters", player), True)
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_OuterWellspring.TopDoor", player), True)
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_OpherShop", player), True)
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Grapple", player))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda state: state.can_reach_region("InnerWellspring.EscapeSequence", player) and state.has("Bash", player) and state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda state: state.can_reach_region("InnerWellspring.EscapeSequence", player) and state.has("Bash", player) and state.has("Grapple", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda state: state.can_reach_region("InnerWellspring.EscapeSequence", player) and state.has("Grapple", player) and state.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.EscapeRevisitEX", player), lambda state: state.can_reach_region("InnerWellspring.EscapeSequence", player) and state.has("InnerWellspring.WaterEscape", player))
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_WoodsEntry.FirstMud", player), lambda state: state.has_any(("Sword", "Hammer"), player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("WoodsEntry.MudPitEX", player), lambda state: state.can_reach_region("WoodsEntry.FirstMud", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("WoodsEntry.MudPitEX", player), lambda state: state.can_reach_region("WoodsEntry.FirstMud", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.ShriekMeet", player), lambda state: state.has_any(("Sword", "Hammer"), player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.FirstMud", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda state: state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.TwoKeystoneRoom", player), lambda state: state.has_any(("Sword", "Hammer"), player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda state: state.can_reach_region("WoodsEntry.Teleporter", player))
    add_rule(world.get_location("WoodsEntry.LastTreeBranch", player), lambda state: state.can_reach_region("WoodsEntry.Teleporter", player))
    add_rule(world.get_location("WoodsEntry.DollQI", player), lambda state: state.can_reach_region("WoodsEntry.Teleporter", player) and state.has("GladesTown.FamilyReunionKey", player))
    add_rule(world.get_location("WoodsEntry.TreeSeed", player), lambda state: state.can_reach_region("WoodsEntry.Teleporter", player) and state.has("TuleyShop.LastTreeBranchRejected", player))
    add_rule(world.get_location("WoodsEntry.TpEX", player), lambda state: state.can_reach_region("WoodsEntry.Teleporter", player))
    add_rule(world.get_location("WoodsEntry.LeafPileEX", player), lambda state: state.can_reach_region("WoodsEntry.Teleporter", player) and state.has("Flap", player))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda state: state.can_reach_region("WoodsEntry.Teleporter", player) and state.has("Glide", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda state: state.can_reach_region("WoodsEntry.Teleporter", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda state: state.can_reach_region("WoodsEntry.Teleporter", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_Teleporters", player), True)
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.FirstMud", player), True)
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.BelowTeleporter", player), True)
    add_rule(world.get_location("WoodsEntry.KeystoneDoor", player), lambda state: state.can_reach_region("WoodsEntry.TwoKeystoneRoom", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_location("WoodsEntry.LowerKS", player), lambda state: state.can_reach_region("WoodsEntry.TwoKeystoneRoom", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("WoodsEntry.UpperKS", player), lambda state: state.can_reach_region("WoodsEntry.TwoKeystoneRoom", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda state: state.has("WoodsEntry.KeystoneDoor", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("Bow", "Spear"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.BelowTeleporter", player), lambda state: state.has_any(("Sword", "Hammer"), player) and (state.has("DoubleJump", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("WoodsEntry.KeystoneDoor", player), lambda state: state.can_reach_region("WoodsMain.AfterKuMeet", player) and state.count("Keystone", player) >= 12 and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("Bow", "Spear"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda state: (state.has("Bash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsEntry.TwoKeystoneRoom", player), lambda state: state.has("WoodsEntry.KeystoneDoor", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("Bow", "Spear"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("WoodsMain.LowerLeafPileEX", player), lambda state: state.can_reach_region("WoodsMain.BelowFourKeystoneRoom", player) and state.has("Flap", player))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.FourKeystoneRoom", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Flap", player) and state.has("Glide", player))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Launch", player))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.count("Health", player) >= 0)
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.count("Health", player) >= 0 and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Bash", player) or state.has("Glide", player)))
    add_rule(world.get_location("WoodsMain.BehindWallOre", player), lambda state: state.can_reach_region("WoodsMain.WallOreLedge", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WoodsMain.BelowKeystonesEX", player), lambda state: state.can_reach_region("WoodsMain.WallOreLedge", player) and state.has("Glide", player) and state.has("DoubleJump", player))
    add_rule(world.get_location("WoodsMain.BelowKeystonesEX", player), lambda state: state.can_reach_region("WoodsMain.WallOreLedge", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.BelowFourKeystoneRoom", player), True)
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("WoodsMain.KeystoneDoor", player), lambda state: state.can_reach_region("WoodsMain.FourKeystoneRoom", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_location("WoodsMain.KSRoomYellowBarrierBroken", player), lambda state: state.can_reach_region("WoodsMain.FourKeystoneRoom", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("Flap", player) and (state.has("DoubleJump", player) or state.has("Glide", player)))
    add_rule(world.get_location("WoodsMain.KSRoomYellowBarrierBroken", player), lambda state: state.can_reach_region("WoodsMain.FourKeystoneRoom", player) and state.has("Bash", player) and state.has("Flap", player) and (state.has("DoubleJump", player) or state.has("Glide", player)))
    add_rule(world.get_location("WoodsMain.MiddleLeafPileEX", player), lambda state: state.can_reach_region("WoodsMain.FourKeystoneRoom", player) and state.has("Flap", player))
    add_rule(world.get_location("WoodsMain.RightKS", player), lambda state: state.can_reach_region("WoodsMain.FourKeystoneRoom", player) and (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("WoodsMain.RightKS", player), lambda state: state.can_reach_region("WoodsMain.FourKeystoneRoom", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("WoodsMain.UpperKS", player), lambda state: state.can_reach_region("WoodsMain.FourKeystoneRoom", player) and state.has_any(("Sword", "Hammer"), player) and (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("WoodsMain.UpperKS", player), lambda state: state.can_reach_region("WoodsMain.FourKeystoneRoom", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("WoodsMain.LeftKS", player), lambda state: state.can_reach_region("WoodsMain.FourKeystoneRoom", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Glide", player))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda state: state.can_reach_region("WoodsMain.FourKeystoneRoom", player) and state.has("WoodsMain.KSRoomYellowBarrierBroken", player) and (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda state: state.can_reach_region("WoodsMain.FourKeystoneRoom", player) and state.has("WoodsMain.KSRoomYellowBarrierBroken", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda state: state.can_reach_region("WoodsMain.FourKeystoneRoom", player) and state.has("WoodsMain.KSRoomYellowBarrierBroken", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.GiantSkull", player), lambda state: state.has("WoodsMain.KeystoneDoor", player))
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.BelowFourKeystoneRoom", player), True)
    add_rule(world.get_location("WoodsMain.KeystoneDoor", player), lambda state: state.can_reach_region("WoodsMain.GiantSkull", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_location("WoodsMain.UpperLeafPileEX", player), lambda state: state.can_reach_region("WoodsMain.GiantSkull", player) and state.has("Flap", player))
    add_rule(world.get_location("WoodsMain.BehindDoorRoofEX", player), lambda state: state.can_reach_region("WoodsMain.GiantSkull", player) and state.has_any(("Sword", "Hammer"), player) and (state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("WoodsMain.BehindDoorRoofEX", player), lambda state: state.can_reach_region("WoodsMain.GiantSkull", player) and state.has_any(("Sword", "Hammer"), player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.FourKeystoneRoom", player), lambda state: state.has("WoodsMain.KeystoneDoor", player))
    add_rule(world.get_location("WoodsMain.BalloonLureBlobDestroyed", player), lambda state: state.can_reach_region("WoodsMain.BalloonLure", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Glide", player))
    add_rule(world.get_location("WoodsMain.BalloonLureYellowBarrierBroken", player), lambda state: state.can_reach_region("WoodsMain.BalloonLure", player) and state.has("WoodsMain.BalloonLureBlobDestroyed", player) and state.has("Flap", player) and state.has("Glide", player))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda state: state.has("WoodsMain.BalloonLureBlobDestroyed", player) and state.has("Glide", player))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda state: (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("WoodsMain.BalloonLureBlobDestroyed", player), lambda state: state.can_reach_region("WoodsMain.BelowHiddenOre", player) and (state.has("Sword", player) or state.has("Hammer", player)))
    add_rule(world.get_location("WoodsMain.BalloonLureBlobDestroyed", player), lambda state: state.can_reach_region("WoodsMain.BelowHiddenOre", player) and state.has_any(("Sword", "Hammer"), player) and (state.has("Grenade", player) or state.has("Blaze", player)))
    add_rule(world.get_location("WoodsMain.HiddenOre", player), lambda state: state.can_reach_region("WoodsMain.BelowHiddenOre", player) and state.has("Flap", player) and state.has("Glide", player))
    add_rule(world.get_location("WoodsMain.YellowWallEX", player), lambda state: state.can_reach_region("WoodsMain.BelowHiddenOre", player) and state.has("WoodsMain.BalloonLureYellowBarrierBroken", player))
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.PetrifiedHowl", player), lambda state: state.has("Glide", player))
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.BalloonLure", player), lambda state: state.has("WoodsMain.BalloonLureBlobDestroyed", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) or state.has("Bash", player)))
    add_rule(world.get_location("WoodsMain.PetrifiedHowlEX", player), lambda state: state.can_reach_region("WoodsMain.PetrifiedHowl", player))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.AboveHowl", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Bash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BrokenOwl", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda state: state.has("Glide", player))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda state: (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.TrialStart", player), lambda state: (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.TrialStart", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("WoodsMain.SpiritTrial", player), lambda state: state.can_reach_region("WoodsMain.TrialStart", player) and state.has("WoodsMain.TrialActivation", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Bash", player) and state.has("Grapple", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.BrokenOwl", player), True)
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grapple", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda state: state.has("Launch", player) and state.has("Grapple", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Burrow", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda state: state.has("Launch", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("WoodsMain.TrialActivation", player), lambda state: state.can_reach_region("WoodsMain.TrialEnd", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("WoodsMain.OverflowShard", player), lambda state: state.can_reach_region("WoodsMain.TrialEnd", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("WoodsMain.OverflowShard", player), lambda state: state.can_reach_region("WoodsMain.TrialEnd", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.BeforeLog", player), lambda state: state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Bash", player) or state.has("Glide", player)))
    add_rule(world.get_location("WoodsMain.HiddenEX", player), lambda state: state.can_reach_region("WoodsMain.AboveHowl", player))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.PetrifiedHowl", player), True)
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BrokenOwl", player), True)
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("WoodsMain.LogBlobDestroyed", player), lambda state: state.can_reach_region("WoodsMain.BeforeLog", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.Teleporter", player), lambda state: state.has("WoodsMain.LogBlobDestroyed", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.AboveHowl", player), True)
    add_rule(world.get_location("NonGladesTeleporter", player), lambda state: state.can_reach_region("WoodsMain.Teleporter", player))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_Teleporters", player), True)
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda state: state.has("Glide", player))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.AbovePit", player), lambda state: (state.has("Bash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.BeforeLog", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda state: (state.has("Bash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda state: state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Bash", player)))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda state: (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsShrine", player), lambda state: (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsShrine", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda state: state.has("Grapple", player) and state.has("Glide", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda state: state.has("WindtornRuins.Seir", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Grapple", player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda state: state.has("WindtornRuins.Seir", player) and state.has("Grapple", player) and state.has("Glide", player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda state: state.has("WindtornRuins.Seir", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda state: state.has("WindtornRuins.Seir", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("WoodsMain.CombatShrineCompleted", player), lambda state: state.can_reach_region("WoodsShrine", player) and state.has("Regenerate", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("Bash", player) and state.has_any(("Bow", "Spear"), player) and state.count("Health", player) >= 11)
    add_rule(world.get_location("WoodsMain.CombatShrineCompleted", player), lambda state: state.can_reach_region("WoodsShrine", player) and state.has("Regenerate", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("Bash", player) and state.has_any(("Bow", "Spear"), player) and state.count("Health", player) >= 8 and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("WoodsMain.CombatShrineCompleted", player), lambda state: state.can_reach_region("WoodsShrine", player) and state.has("Regenerate", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("Bash", player) and state.has_any(("Bow", "Spear"), player) and state.count("Health", player) >= 5 and state.has("Launch", player))
    add_rule(world.get_location("WoodsMain.ShrineEX", player), lambda state: state.can_reach_region("WoodsShrine", player))
    add_rule(world.get_location("WoodsMain.CombatShrine", player), lambda state: state.can_reach_region("WoodsShrine", player) and state.has("WoodsMain.CombatShrineCompleted", player))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda state: state.can_reach_region("LowerReach.Entry", player) and state.has("Flap", player))
    add_rule(world.get_location("LowerReach.ThawBaurFurnace", player), lambda state: state.can_reach_region("LowerReach.Entry", player) and state.has("LowerReach.BearSneezed", player) and state.has("LowerReach.BearBridgeBroken", player) and state.has("Bash", player) and state.has("Flap", player))
    add_rule(world.get_location("LowerReach.ThawBaurFurnace", player), lambda state: state.can_reach_region("LowerReach.Entry", player) and state.has("LowerReach.BearSneezed", player) and state.has("LowerReach.BearBridgeBroken", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("LowerReach.FreezeBaurFurnace", player), lambda state: state.can_reach_region("LowerReach.Entry", player) and state.has("LowerReach.BearSneezed", player) and state.has("LowerReach.BearBridgeBroken", player) and state.has("Flap", player))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda state: state.can_reach_region("LowerReach.Entry", player) and state.has("LowerReach.BearSneezed", player) and state.has("LowerReach.BearBridgeBroken", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Bash", player) and state.has("Flap", player))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda state: state.can_reach_region("LowerReach.Entry", player) and state.has("LowerReach.BearSneezed", player) and state.has("LowerReach.BearBridgeBroken", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda state: state.can_reach_region("LowerReach.Entry", player) and state.has("LowerReach.BearSneezed", player) and state.has("LowerReach.BearBridgeBroken", player) and state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda state: state.has("DoubleJump", player) and state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Launch", player) or state.has("Grenade", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_entrance("LowerReach.Entry_to_WestGlades.Upper", player), lambda state: state.has("LowerReach.BearSneezed", player))
    add_rule(world.get_location("LowerReach.Lever", player), lambda state: state.can_reach_region("LowerReach.AboveEntry", player) and state.has("Launch", player))
    add_rule(world.get_location("LowerReach.Lever", player), lambda state: state.can_reach_region("LowerReach.AboveEntry", player) and state.has("LowerReach.ThawBaurFurnace", player) and state.has("DoubleJump", player))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda state: state.can_reach_region("LowerReach.AboveEntry", player) and state.has("Launch", player))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda state: state.can_reach_region("LowerReach.AboveEntry", player) and state.has("LowerReach.FreezeBaurFurnace", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda state: state.can_reach_region("LowerReach.AboveEntry", player) and state.has("DoubleJump", player) and state.has("Bash", player) and (state.has("LowerReach.ThawBaurFurnace", player) or state.has("Grenade", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_location("LowerReach.AboveBaurUpperEX", player), lambda state: state.can_reach_region("LowerReach.AboveEntry", player) and state.has("LowerReach.ThawBaurFurnace", player) and state.has("Launch", player))
    add_rule(world.get_location("LowerReach.AboveBaurUpperEX", player), lambda state: state.can_reach_region("LowerReach.AboveEntry", player) and state.has("LowerReach.ThawBaurFurnace", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Bash", player))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Icefall", player), lambda state: (state.has("LowerReach.ThawBaurFurnace", player) or state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda state: state.has("LowerReach.Lever", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda state: state.has("LowerReach.Lever", player) and state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Entry", player), True)
    add_rule(world.get_location("LowerReach.BearBridgeBroken", player), lambda state: state.can_reach_region("LowerReach.Icefall", player) and state.has("LowerReach.BearSneezed", player))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda state: state.can_reach_region("LowerReach.Icefall", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda state: state.can_reach_region("LowerReach.Icefall", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda state: state.can_reach_region("LowerReach.Icefall", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Launch", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) or state.has("Bash", player)))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda state: state.can_reach_region("LowerReach.Icefall", player) and state.has("LowerReach.LeftFurnace", player) and state.has("Bash", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda state: state.can_reach_region("LowerReach.Icefall", player) and state.has("LowerReach.LeftFurnace", player) and state.has("Bash", player) and state.has("Launch", player))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda state: state.can_reach_region("LowerReach.Icefall", player) and state.has("LowerReach.LeftFurnace", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda state: state.can_reach_region("LowerReach.Icefall", player) and state.has("LowerReach.LeftFurnace", player) and state.has("DoubleJump", player) and state.has("Bash", player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda state: state.can_reach_region("LowerReach.Icefall", player) and state.has("LowerReach.LeftFurnace", player) and state.has("DoubleJump", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda state: state.can_reach_region("LowerReach.Icefall", player) and state.has("LowerReach.LeftFurnace", player) and state.has("DoubleJump", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("Grapple", player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda state: state.can_reach_region("LowerReach.Icefall", player) and state.has("LowerReach.LeftFurnace", player) and state.has("Launch", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) or state.has("Bash", player)))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda state: state.can_reach_region("LowerReach.Icefall", player) and state.has("LowerReach.LeftFurnace", player) and state.has("Launch", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.AboveEntry", player), lambda state: (state.has("LowerReach.ThawBaurFurnace", player) or state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.Entry", player), True)
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.Central", player), True)
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda state: state.can_reach_region("LowerReach.Central", player) and state.has("Launch", player))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda state: state.can_reach_region("LowerReach.Central", player) and state.has("LowerReach.ThawCentralFurnace", player) and state.has("DoubleJump", player) and state.has("Dash", player) and (state.has("Hammer", player) or state.has("Spear", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda state: state.can_reach_region("LowerReach.Central", player) and state.count("SpiritLight", player) >= 1 and state.has("Launch", player))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda state: state.can_reach_region("LowerReach.Central", player) and state.count("SpiritLight", player) >= 1 and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda state: state.can_reach_region("LowerReach.Central", player) and state.count("SpiritLight", player) >= 1 and state.has("LowerReach.ThawCentralFurnace", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda state: state.can_reach_region("LowerReach.Central", player) and state.has("LowerReach.ThawCentralFurnace", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.SecondSoup", player), True)
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda state: state.has("LowerReach.ThawCentralFurnace", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Bash", player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda state: state.has("LowerReach.ThawCentralFurnace", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda state: state.has("LowerReach.Lever", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda state: state.has("LowerReach.Lever", player) and state.has("Launch", player))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda state: state.can_reach_region("LowerReach.OutsideTPRoom", player) and (state.has("Bash", player) or state.has("Hammer", player) or state.has("Spear", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda state: state.can_reach_region("LowerReach.OutsideTPRoom", player) and state.count("SpiritLight", player) >= 1 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda state: state.can_reach_region("LowerReach.OutsideTPRoom", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda state: state.can_reach_region("LowerReach.OutsideTPRoom", player) and state.has("Launch", player))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda state: state.can_reach_region("LowerReach.OutsideTPRoom", player) and state.has("Launch", player))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda state: state.can_reach_region("LowerReach.OutsideTPRoom", player) and state.has("LowerReach.ThawCentralFurnace", player) and state.has("DoubleJump", player) and state.has("Bash", player) and (state.has("Dash", player) or state.has("Glide", player) or state.has("Grenade", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.SecondSoup", player), True)
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.CentralEnemyPaths", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Bash", player) or state.has("Glide", player) or state.has("Launch", player) or state.has("Hammer", player) or state.has("Spear", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.Teleporter", player), lambda state: state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Bash", player))
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_LowerReach.OutsideTPRoom", player), True)
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Bash", player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda state: state.has("Burrow", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Bash", player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda state: state.has("Burrow", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda state: state.has("Burrow", player) and state.has("Launch", player))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda state: state.can_reach_region("LowerReach.Teleporter", player))
    add_rule(world.get_entrance("LowerReach.Teleporter_to_Teleporters", player), True)
    add_rule(world.get_entrance("LowerReach.Teleporter_to_LowerReach.OutsideTPRoom", player), lambda state: state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerReach.Teleporter_to_LowerReach.EastEnemyPaths", player), lambda state: state.has("LowerReach.TPLantern", player))
    add_rule(world.get_location("LowerReach.ThawCentralFurnace", player), lambda state: state.can_reach_region("LowerReach.SecondSoup", player) and state.has("Flap", player) and state.has("Bash", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("LowerReach.MeltIceEX", player), lambda state: state.can_reach_region("LowerReach.SecondSoup", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("LowerReach.BurrowEX", player), lambda state: state.can_reach_region("LowerReach.SecondSoup", player) and state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player) and (state.has("Flap", player) or state.has("Grenade", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda state: state.has("DoubleJump", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda state: (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) or state.has("Bash", player) or state.has("Burrow", player) or state.has("Launch", player)))
    add_rule(world.get_location("LowerReach.ThawCentralFurnace", player), lambda state: state.can_reach_region("LowerReach.BelowLupo", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("LowerReach.FreezeCentralFurnace", player), lambda state: state.can_reach_region("LowerReach.BelowLupo", player) and state.has("Flap", player))
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda state: state.can_reach_region("LowerReach.BelowLupo", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda state: state.can_reach_region("LowerReach.BelowLupo", player) and state.has("Launch", player))
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda state: state.can_reach_region("LowerReach.BelowLupo", player) and state.has("LowerReach.ThawCentralFurnace", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.SecondSoup", player), lambda state: (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.CentralFurnacePedestal", player), lambda state: (state.has("LowerReach.ThawCentralFurnace", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerReach.ThawCentralFurnace", player), lambda state: state.can_reach_region("LowerReach.CentralFurnacePedestal", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("LowerReach.FreezeCentralFurnace", player), lambda state: state.can_reach_region("LowerReach.CentralFurnacePedestal", player) and state.has("Flap", player))
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.BelowLupo", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.BelowLupo", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.WindChannel", player), lambda state: (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("LowerReach.WindLantern", player), lambda state: state.can_reach_region("LowerReach.WindChannel", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("LowerReach.BreakWallEX", player), lambda state: state.can_reach_region("LowerReach.WindChannel", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.WindBottomEX", player), lambda state: state.can_reach_region("LowerReach.WindChannel", player) and state.has("LowerReach.WindLantern", player) and state.has("Glide", player))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda state: state.can_reach_region("LowerReach.WindChannel", player) and state.has("LowerReach.WindLantern", player) and state.has("Glide", player))
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.CentralFurnacePedestal", player), lambda state: (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda state: state.has("LowerReach.WindLantern", player) and state.has("Glide", player))
    add_rule(world.get_location("LowerReach.HandToHandHat", player), lambda state: state.can_reach_region("LowerReach.SoupMoki", player) and state.has("LowerReach.HandToHandSoup", player))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindChannel", player), lambda state: state.has("Glide", player))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.EastEnemyPaths_to_LowerReach.East", player), True)
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.Teleporter", player), lambda state: state.has("LowerReach.TPLantern", player))
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SoupMoki", player), True)
    add_rule(world.get_entrance("LowerReach.SnowballEnemyPaths_to_LowerReach.Snowball", player), True)
    add_rule(world.get_location("LowerReach.TPLantern", player), lambda state: state.can_reach_region("LowerReach.Snowball", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has_any(("Sword", "Hammer"), player) or state.has("Bash", player)))
    add_rule(world.get_location("LowerReach.RolledSnowball", player), lambda state: state.can_reach_region("LowerReach.Snowball", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has_any(("Sword", "Hammer"), player) or state.has("Bash", player)))
    add_rule(world.get_location("LowerReach.SnowballHC", player), lambda state: state.can_reach_region("LowerReach.Snowball", player) and state.has("LowerReach.RolledSnowball", player) and state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player) or state.count("Health", player) >= 0))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.EastEnemyPaths", player), lambda state: state.has_any(("Sword", "Hammer"), player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.EastEnemyPaths", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.EastEnemyPaths", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.SoupMoki", player), True)
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda state: state.has("LowerReach.RolledSnowball", player) and (state.has("DoubleJump", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda state: state.has("LowerReach.RolledSnowball", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Dash", player))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda state: state.has("LowerReach.RolledSnowball", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda state: state.can_reach_region("LowerReach.PastSnowball", player) and state.has("Launch", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda state: state.can_reach_region("LowerReach.PastSnowball", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.IceCavern", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.IceCavern", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda state: state.has("LowerReach.RolledSnowball", player) and state.has("LowerReach.ThawCentralFurnace", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("Bash", player)))
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda state: state.has("LowerReach.RolledSnowball", player) and state.has("Launch", player))
    add_rule(world.get_location("LowerReach.RoofRightEX", player), lambda state: state.can_reach_region("LowerReach.IceCavern", player) and state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.PastSnowball", player), True)
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("LowerReach.EastDoorLantern", player), lambda state: state.can_reach_region("LowerReach.HalfwayIceCavern", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_location("LowerReach.EastDoorLantern", player), lambda state: state.can_reach_region("LowerReach.HalfwayIceCavern", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.SwimmingPool", player), lambda state: state.has("Glide", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.SwimmingPool", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda state: state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerReach.FractureShard", player), lambda state: state.can_reach_region("LowerReach.SwimmingPool", player) and state.has("LowerReach.ThawEastFurnace", player) and state.has("Water", player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda state: state.has("LowerReach.EastDoorLantern", player) and state.has("LowerReach.FreezeEastFurnace", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda state: state.has("LowerReach.EastDoorLantern", player) and state.has("Launch", player) and (state.has("LowerReach.FreezeEastFurnace", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("LowerReach.ThawEastFurnace", player), lambda state: state.can_reach_region("LowerReach.EastFurnace", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("LowerReach.FreezeEastFurnace", player), lambda state: state.can_reach_region("LowerReach.EastFurnace", player) and state.has("Flap", player))
    add_rule(world.get_entrance("LowerReach.EastFurnace_to_LowerReach.PastSnowball", player), lambda state: state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.EastFurnace_to_LowerReach.SwimmingPool", player), True)
    add_rule(world.get_location("LowerReach.ArenaBeaten", player), lambda state: state.can_reach_region("LowerReach.ArenaArea", player) and state.has("Regenerate", player) and state.count("Health", player) >= 3 and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) and state.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.TrialStart", player), lambda state: state.has("LowerReach.ArenaBeaten", player))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.WindSpinners", player), lambda state: state.has("LowerReach.ArenaBeaten", player) and state.has("Glide", player))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda state: state.has("LowerReach.EastDoorLantern", player) and (state.has("LowerReach.FreezeEastFurnace", player) or state.has("Water", player)))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda state: state.has("LowerReach.EastDoorLantern", player) and state.has("Launch", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda state: state.has("Glide", player) and (state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda state: state.has("Glide", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.ArenaArea", player), lambda state: state.has("Glide", player) and state.has("LowerReach.ArenaBeaten", player))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda state: state.has("Bash", player) and (state.has("Grenade", player) and state.count("Energy", player) >= 4 or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.WindSpinners", player), lambda state: state.has("Glide", player))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Glide", player) and (state.has("DoubleJump", player) or state.has("Grapple", player)))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda state: state.has("Glide", player) and state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.WispPathCheckpoint", player), lambda state: state.has("Bash", player))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.WispPathCheckpoint", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda state: state.can_reach_region("LowerReach.SnowEscape", player) and state.has("Dash", player) and state.has("Bash", player) and state.has("Grapple", player) and state.has("Glide", player) and (state.has("Water", player) or state.has("DoubleJump", player)))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda state: state.can_reach_region("LowerReach.SnowEscape", player) and state.has("Bash", player) and state.has("Glide", player) and state.has("Launch", player))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda state: state.can_reach_region("LowerReach.SnowEscape", player) and state.has("Dash", player) and state.has("Bash", player) and state.has("Grapple", player) and state.has("Glide", player) and (state.has("Water", player) or state.has("DoubleJump", player)))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda state: state.can_reach_region("LowerReach.SnowEscape", player) and state.has("Bash", player) and state.has("Glide", player) and state.has("Launch", player))
    add_rule(world.get_location("LowerReach.EscapeRevisitEX", player), lambda state: state.can_reach_region("LowerReach.SnowEscape", player) and state.has("LowerReach.ForestsMemory", player))
    add_rule(world.get_location("LowerReach.HandToHandSoup", player), lambda state: state.can_reach_region("LowerReach.VeralHome", player) and state.has("InnerWellspring.HandToHandHerbs", player))
    add_rule(world.get_location("GladesTown.LeafPileEX", player), lambda state: state.can_reach_region("LowerReach.VeralHome", player) and state.has("Flap", player))
    add_rule(world.get_location("LowerReach.CatalystShard", player), lambda state: state.can_reach_region("LowerReach.VeralHome", player) and state.has("Water", player) and state.has("Bash", player) and state.has("Flap", player))
    add_rule(world.get_location("LowerReach.CatalystShard", player), lambda state: state.can_reach_region("LowerReach.VeralHome", player) and state.has("Water", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerReach.VeralHome_to_GladesTown.HoleHut", player), lambda state: (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("LowerReach.VeralHome_to_GladesTown.PlayfulMoki", player), True)
    add_rule(world.get_entrance("LowerReach.VeralHome_to_TuleyShop", player), lambda state: state.has("GladesTown.TuleySpawned", player))
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda state: state.has("Bash", player) and (state.has("Flap", player) or state.has("Grenade", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.VeralHome", player), True)
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda state: state.has("Glide", player))
    add_rule(world.get_location("LowerReach.KeystoneDoor", player), lambda state: state.can_reach_region("LowerReach.TrialStart", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_location("LowerReach.TrialActivation", player), lambda state: state.can_reach_region("LowerReach.TrialStart", player) and state.has("LowerReach.KeystoneDoor", player))
    add_rule(world.get_location("LowerReach.SpiritTrial", player), lambda state: state.can_reach_region("LowerReach.TrialStart", player) and state.has("LowerReach.TrialActivation", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_location("LowerReach.RightKS", player), lambda state: state.can_reach_region("LowerReach.TrialStart", player) and state.has("Glide", player))
    add_rule(world.get_location("LowerReach.RightKS", player), lambda state: state.can_reach_region("LowerReach.TrialStart", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("LowerReach.RightKS", player), lambda state: state.can_reach_region("LowerReach.TrialStart", player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.count("Health", player) >= 0))
    add_rule(world.get_location("LowerReach.UpperLeftKS", player), lambda state: state.can_reach_region("LowerReach.TrialStart", player) and state.has("Glide", player))
    add_rule(world.get_location("LowerReach.MiddleLeftKS", player), lambda state: state.can_reach_region("LowerReach.TrialStart", player) and state.has("Glide", player))
    add_rule(world.get_location("LowerReach.BottomLeftKS", player), lambda state: state.can_reach_region("LowerReach.TrialStart", player) and state.has("Glide", player))
    add_rule(world.get_location("LowerReach.TrialEX", player), lambda state: state.can_reach_region("LowerReach.TrialStart", player) and state.has("Glide", player))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda state: state.has("Glide", player))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.ArenaArea", player), lambda state: state.has("LowerReach.ArenaBeaten", player) and state.has("Glide", player))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda state: state.can_reach_region("UpperReach.BurrowArea", player) and state.has("Burrow", player) and state.has("Launch", player) and state.has("Bash", player))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda state: state.can_reach_region("UpperReach.BurrowArea", player) and state.has("Burrow", player) and state.has("Launch", player) and state.has("Bash", player))
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_LowerReach.BelowTokk", player), lambda state: state.has("Burrow", player))
    add_rule(world.get_location("UpperReach.ThawFurnace", player), lambda state: state.can_reach_region("UpperReach.KeystoneRoom", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("UpperReach.ThawFurnace", player), lambda state: state.can_reach_region("UpperReach.KeystoneRoom", player) and state.has("Flap", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_location("UpperReach.FreezeFurnace", player), lambda state: state.can_reach_region("UpperReach.KeystoneRoom", player) and state.has("Flap", player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda state: state.can_reach_region("UpperReach.KeystoneRoom", player) and state.has("UpperReach.ThawFurnace", player) and state.has("DoubleJump", player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda state: state.can_reach_region("UpperReach.KeystoneRoom", player) and state.has("UpperReach.ThawFurnace", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda state: state.can_reach_region("UpperReach.KeystoneRoom", player) and state.has("UpperReach.ThawFurnace", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda state: state.can_reach_region("UpperReach.KeystoneRoom", player) and state.has("Launch", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_Tokk", player), True)
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda state: state.has("Water", player) and state.has("DoubleJump", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda state: state.has("Water", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Glide", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grapple", player) and state.has("Dash", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupFrozen", player), lambda state: state.has("UpperReach.FreezeFurnace", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupFrozen", player), lambda state: state.has("UpperReach.FreezeFurnace", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda state: state.has("UpperReach.ThawFurnace", player) and state.has("Water", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) or state.has("DoubleJump", player) or state.has("Bash", player)))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda state: state.has("UpperReach.ThawFurnace", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda state: state.has("UpperReach.ThawFurnace", player) and state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Grapple", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda state: state.has("UpperReach.ThawFurnace", player) and state.has("Bash", player) and state.has("Water", player) and state.has("WaterDash", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda state: state.has("UpperReach.ThawFurnace", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda state: state.has("UpperReach.ThawFurnace", player) and state.has("Bash", player) and state.has("Launch", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_LowerReach.BelowTokk", player), True)
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.KeystoneSnapPlantPaths", player), True)
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.KeystoneSnapPlantThawedPaths", player), lambda state: state.has("UpperReach.ThawFurnace", player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda state: (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.KeystoneSnapPlantPaths", player), True)
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.KeystoneSnapPlantThawedPaths", player), True)
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda state: (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("UpperReach.MiddleLeftKS", player), lambda state: state.can_reach_region("UpperReach.KeystoneSnapPlantPaths", player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths_to_UpperReach.KeystoneRoom", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda state: state.can_reach_region("UpperReach.KeystoneSnapPlantThawedPaths", player) and state.has("Glide", player))
    add_rule(world.get_entrance("UpperReach.UpperSoup_to_UpperReach.UpperSoupPaths", player), True)
    add_rule(world.get_entrance("UpperReach.UpperSoup_to_UpperReach.UpperSoupFrozenPaths", player), lambda state: state.has("UpperReach.FreezeFurnace", player))
    add_rule(world.get_entrance("UpperReach.UpperSoup_to_UpperReach.UpperSoupThawedPaths", player), lambda state: state.has("UpperReach.ThawFurnace", player))
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozen_to_UpperReach.UpperSoupPaths", player), True)
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozen_to_UpperReach.UpperSoupFrozenPaths", player), True)
    add_rule(world.get_entrance("UpperReach.UpperSoupThawed_to_UpperReach.UpperSoupPaths", player), True)
    add_rule(world.get_entrance("UpperReach.UpperSoupThawed_to_UpperReach.UpperSoupThawedPaths", player), True)
    add_rule(world.get_location("UpperReach.SoupOre", player), lambda state: state.can_reach_region("UpperReach.UpperSoupPaths", player))
    add_rule(world.get_location("UpperReach.UpperKS", player), lambda state: state.can_reach_region("UpperReach.UpperSoupPaths", player) and state.has("DoubleJump", player) and state.has("Bash", player))
    add_rule(world.get_location("UpperReach.UpperKS", player), lambda state: state.can_reach_region("UpperReach.UpperSoupPaths", player) and state.has("Launch", player))
    add_rule(world.get_location("UpperReach.SwingPoleEX", player), lambda state: state.can_reach_region("UpperReach.UpperSoupPaths", player) and state.has("DoubleJump", player))
    add_rule(world.get_location("UpperReach.SwingPoleEX", player), lambda state: state.can_reach_region("UpperReach.UpperSoupPaths", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("UpperReach.SwingPoleEX", player), lambda state: state.can_reach_region("UpperReach.UpperSoupPaths", player) and state.has("Launch", player))
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneRoom", player), True)
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda state: state.can_reach_region("UpperReach.UpperSoupThawedPaths", player) and state.has("Glide", player))
    add_rule(world.get_location("UpperReach.MiddleRightKS", player), lambda state: state.can_reach_region("UpperReach.UpperSoupThawedPaths", player) and state.has("DoubleJump", player))
    add_rule(world.get_location("UpperReach.MiddleRightKS", player), lambda state: state.can_reach_region("UpperReach.UpperSoupThawedPaths", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("UpperReach.MiddleRightKS", player), lambda state: state.can_reach_region("UpperReach.UpperSoupThawedPaths", player) and state.has("Launch", player))
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_UpperReach.OutsideTreeRoom", player), True)
    add_rule(world.get_location("UpperReach.KeystoneDoor", player), lambda state: state.can_reach_region("UpperReach.OutsideTreeRoom", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_location("UpperReach.SwimEX", player), lambda state: state.can_reach_region("UpperReach.OutsideTreeRoom", player) and state.has("UpperReach.ThawFurnace", player) and state.has("Water", player))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda state: state.has("UpperReach.ThawFurnace", player) and state.has("Grapple", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda state: state.has("UpperReach.ThawFurnace", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.TreeRoomLedge", player), lambda state: state.has("UpperReach.KeystoneDoor", player))
    add_rule(world.get_location("UpperReach.KeystoneDoor", player), lambda state: state.can_reach_region("UpperReach.TreeRoomLedge", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda state: state.can_reach_region("UpperReach.TreeRoomLedge", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda state: state.can_reach_region("UpperReach.TreeRoomLedge", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda state: state.can_reach_region("UpperReach.TreeRoomLedge", player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeRoom", player), True)
    add_rule(world.get_location("UpperReach.SpringSeed", player), lambda state: state.can_reach_region("UpperReach.TreeRoom", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("UpperReach.LightBurstTree", player), lambda state: state.can_reach_region("UpperReach.TreeRoom", player))
    add_rule(world.get_location("UpperReach.WellEX", player), lambda state: state.can_reach_region("UpperReach.TreeRoom", player))
    add_rule(world.get_location("UpperReach.HiddenEX", player), lambda state: state.can_reach_region("UpperReach.TreeRoom", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("UpperDepths.EntrySpikesEX", player), lambda state: state.can_reach_region("UpperDepths.Entry", player) and state.has("Glide", player))
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda state: state.has("Glide", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) and state.has("Bash", player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player))
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda state: state.has("Glide", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) and state.has("Bash", player))
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda state: state.has("EastHollow.DepthsOpen", player) and state.has("Glide", player))
    add_rule(world.get_location("UpperDepths.EntryRoofEX", player), lambda state: state.can_reach_region("UpperDepths.FirstFirefly", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("UpperDepths.EntryRoofEX", player), lambda state: state.can_reach_region("UpperDepths.FirstFirefly", player) and state.has("Grapple", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("UpperDepths.EntryRoofEX", player), lambda state: state.can_reach_region("UpperDepths.FirstFirefly", player) and state.has("Launch", player))
    add_rule(world.get_location("UpperDepths.EntryOre", player), lambda state: state.can_reach_region("UpperDepths.FirstFirefly", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("Bow", "Spear"), player) and state.has("Grapple", player) and state.has("DoubleJump", player))
    add_rule(world.get_location("UpperDepths.EntryOre", player), lambda state: state.can_reach_region("UpperDepths.FirstFirefly", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Grapple", player)))
    add_rule(world.get_location("UpperDepths.EntryOre", player), lambda state: state.can_reach_region("UpperDepths.FirstFirefly", player) and state.has("Launch", player))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda state: state.can_reach_region("UpperDepths.FirstFirefly", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("Sword", "Hammer"), player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda state: state.can_reach_region("UpperDepths.FirstFirefly", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda state: state.can_reach_region("UpperDepths.FirstFirefly", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Launch", player))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda state: state.can_reach_region("UpperDepths.FirstFirefly", player) and state.has("Bow", player) and state.count("Energy", player) >= 4 and (state.has_any(("Sword", "Hammer"), player) or state.has("DoubleJump", player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda state: state.can_reach_region("UpperDepths.FirstFirefly", player) and state.has("Spear", player) and state.count("Energy", player) >= 4 and (state.has_any(("Sword", "Hammer"), player) or state.has("DoubleJump", player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.Entry", player), lambda state: state.has("Glide", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) and state.has("Bash", player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player))
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.Entry", player), lambda state: state.has("Glide", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) and state.has("Bash", player))
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.FirstKSRoom", player), True)
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda state: state.can_reach_region("UpperDepths.FirstKSRoom", player) and state.has("DepthsLight", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("DoubleJump", player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("UpperDepths.SwimEC", player), lambda state: state.can_reach_region("UpperDepths.FirstKSRoom", player) and state.has("Flash", player) and state.count("Energy", player) >= 4 and state.has("Water", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("DoubleJump", player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("UpperDepths.SwimEC", player), lambda state: state.can_reach_region("UpperDepths.FirstKSRoom", player) and state.has("UpperDepths.ForestsEyes", player) and state.has("Water", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("DoubleJump", player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda state: state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("Bash", player)))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Grapple", player)))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda state: state.has("DoubleJump", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Grapple", player)))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("UpperDepths.LightPuzzle", player), lambda state: state.can_reach_region("UpperDepths.KeydoorLedge", player) and state.has("UpperDepths.EntryKeystoneDoor", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("Sword", "Hammer"), player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grapple", player))
    add_rule(world.get_location("UpperDepths.LightPuzzle", player), lambda state: state.can_reach_region("UpperDepths.KeydoorLedge", player) and state.has("UpperDepths.EntryKeystoneDoor", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has("Launch", player))
    add_rule(world.get_location("UpperDepths.EntryKeystoneDoor", player), lambda state: state.can_reach_region("UpperDepths.KeydoorLedge", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.FirstKSRoom", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Grapple", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda state: state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda state: (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda state: state.has("UpperDepths.EntryKeystoneDoor", player) and state.has("UpperDepths.LightPuzzle", player) and state.has("Bash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda state: state.has("UpperDepths.EntryKeystoneDoor", player) and (state.has("UpperDepths.LightPuzzle", player) or state.has("DepthsLight", player)) and state.has("Launch", player))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda state: state.has("UpperDepths.EntryKeystoneDoor", player) and (state.has("UpperDepths.LightPuzzle", player) or state.has("DepthsLight", player)) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda state: state.has("UpperDepths.EntryKeystoneDoor", player) and (state.has("UpperDepths.LightPuzzle", player) or state.has("DepthsLight", player)) and state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("Bow", "Spear"), player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("UpperDepths.RightEntryKS", player), lambda state: state.can_reach_region("UpperDepths.RightKeystonePath", player) and state.has("Grapple", player) and state.has("DoubleJump", player))
    add_rule(world.get_location("UpperDepths.RightEntryKS", player), lambda state: state.can_reach_region("UpperDepths.RightKeystonePath", player) and state.has("Launch", player))
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda state: state.has("Grapple", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperDepths.EntryKeystoneDoor", player), lambda state: state.can_reach_region("UpperDepths.BelowHive", player) and state.count("Keystone", player) >= 12 and state.has("DepthsLight", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("UpperDepths.HiveEX", player), lambda state: state.can_reach_region("UpperDepths.BelowHive", player) and (state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.KeydoorLedge", player), lambda state: state.has("UpperDepths.EntryKeystoneDoor", player) and state.has("DepthsLight", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Teleporter", player), lambda state: (state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Teleporter", player), lambda state: state.has("DepthsLight", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Central", player), lambda state: state.has("DepthsLight", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.LowerConnection", player), lambda state: state.has("DepthsLight", player))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda state: state.can_reach_region("UpperDepths.Teleporter", player))
    add_rule(world.get_location("UpperDepths.TeleporterEX", player), lambda state: state.can_reach_region("UpperDepths.Teleporter", player))
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_Teleporters", player), True)
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda state: state.has_any(("Sword", "Hammer"), player) and (state.has("Bow", player) or state.has("Spear", player)))
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Launch", player))
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda state: state.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.Central", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Bow", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.Central", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Spear", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.Central", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Launch", player))
    add_rule(world.get_location("UpperDepths.CentralKeystoneDoor", player), lambda state: state.can_reach_region("UpperDepths.Central", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.SecondKSRoom", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.SecondKSRoom", player), lambda state: state.has("Bash", player) and (state.has("DepthsLight", player) or state.has_any(("Sword", "Hammer"), player)))
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.LowerConnection", player), lambda state: state.has("UpperDepths.CentralKeystoneDoor", player))
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.BelowHive", player), lambda state: state.has("DepthsLight", player) and state.has("Launch", player))
    add_rule(world.get_location("UpperDepths.RightHealthKS", player), lambda state: state.can_reach_region("UpperDepths.SecondKSRoom", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("DepthsLight", player)))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda state: state.can_reach_region("UpperDepths.SecondKSRoom", player) and state.has_any(("Sword", "Hammer"), player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda state: state.can_reach_region("UpperDepths.SecondKSRoom", player) and state.has("DepthsLight", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda state: state.can_reach_region("UpperDepths.SecondKSRoom", player) and state.has("DepthsLight", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda state: state.can_reach_region("UpperDepths.SecondKSRoom", player) and state.has("Launch", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("DepthsLight", player)))
    add_rule(world.get_location("UpperDepths.KeystoneHC", player), lambda state: state.can_reach_region("UpperDepths.SecondKSRoom", player) and state.has_any(("Sword", "Hammer"), player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_location("UpperDepths.KeystoneHC", player), lambda state: state.can_reach_region("UpperDepths.SecondKSRoom", player) and state.has("DepthsLight", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperDepths.KeystoneHC", player), lambda state: state.can_reach_region("UpperDepths.SecondKSRoom", player) and state.has("Launch", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("DepthsLight", player)))
    add_rule(world.get_location("UpperDepths.BossPathEX", player), lambda state: state.can_reach_region("UpperDepths.SecondKSRoom", player) and state.has("DepthsLight", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("UpperDepths.BossPathEX", player), lambda state: state.can_reach_region("UpperDepths.SecondKSRoom", player) and state.has("DepthsLight", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("UpperDepths.BossPathEX", player), lambda state: state.can_reach_region("UpperDepths.SecondKSRoom", player) and state.has("DepthsLight", player) and state.has("Launch", player))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.Central", player), lambda state: state.has_any(("Sword", "Hammer"), player) and (state.has("DepthsLight", player) or state.has_any(("Sword", "Hammer"), player)))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.Central", player), lambda state: state.has("Bash", player) and (state.has("DepthsLight", player) or state.has_any(("Sword", "Hammer"), player)))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda state: state.has("DepthsLight", player) and state.has("DoubleJump", player) and state.has("Grapple", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda state: state.has("DepthsLight", player) and state.has("Launch", player))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda state: state.can_reach_region("UpperDepths.MoraPath", player) and state.has("DepthsLight", player) and state.has("Grapple", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda state: state.can_reach_region("UpperDepths.MoraPath", player) and state.has("DepthsLight", player) and state.has_any(("Sword", "Hammer"), player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda state: state.can_reach_region("UpperDepths.MoraPath", player) and state.has("DepthsLight", player) and state.has("Launch", player))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda state: state.has("DepthsLight", player) and state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda state: state.has("DepthsLight", player) and state.has("Grapple", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda state: state.has("DepthsLight", player) and state.has("Launch", player))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.SecondKSRoom", player), lambda state: state.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_MoraFirstPhase", player), True)
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.Teleporter", player), lambda state: state.has_any(("Sword", "Hammer"), player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.Teleporter", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.MoraPath", player), lambda state: state.has("DepthsLight", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("MoraFirstPhase_to_MoraEscape", player), lambda state: state.has("SkipMora1", player))
    add_rule(world.get_entrance("MoraFirstPhase_to_MoraEscape", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Regenerate", player) and state.count("Health", player) >= 5 and state.has("Bash", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda state: state.has("Bash", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_location("UpperDepths.ForestsEyes", player), lambda state: state.can_reach_region("MoraSecondPhase", player) and state.has("SkipMora2", player))
    add_rule(world.get_location("UpperDepths.ForestsEyes", player), lambda state: state.can_reach_region("MoraSecondPhase", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Regenerate", player) and state.count("Health", player) >= 7 and state.has("Bash", player) and state.has("Flash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_location("UpperDepths.CentralKeystoneDoor", player), lambda state: state.can_reach_region("UpperDepths.LowerConnection", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_location("LowerDepths.BelowDoorOre", player), lambda state: state.can_reach_region("UpperDepths.LowerConnection", player) and state.has("DepthsLight", player))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda state: state.can_reach_region("UpperDepths.LowerConnection", player) and state.has("Glide", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("DepthsLight", player)))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda state: state.can_reach_region("UpperDepths.LowerConnection", player) and state.has("Launch", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("DepthsLight", player)))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda state: state.can_reach_region("UpperDepths.LowerConnection", player) and state.has("DoubleJump", player) and state.has("Dash", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("DepthsLight", player)))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda state: state.has("DoubleJump", player) and state.has("Grapple", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("DepthsLight", player)))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda state: state.has("Launch", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("DepthsLight", player)))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda state: state.has("DepthsLight", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.Central", player), lambda state: state.has("UpperDepths.CentralKeystoneDoor", player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Dash", player) and (state.has("DoubleJump", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda state: state.has("DepthsLight", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda state: state.has("DepthsLight", player) and state.has("Glide", player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda state: state.has("Launch", player) and (state.has_any(("Sword", "Hammer"), player) or state.has("DepthsLight", player)))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Bash", player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda state: state.has("DepthsLight", player) and state.has("DoubleJump", player) and state.has("Dash", player) and (state.has("Bash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda state: state.has("DepthsLight", player) and state.has("Bash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda state: state.has("DepthsLight", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda state: state.has("DepthsLight", player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Bash", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerDepths.HandToHandSilk", player), lambda state: state.can_reach_region("LowerDepths.West", player) and state.has("GladesTown.HandToHandLantern", player))
    add_rule(world.get_location("LowerDepths.SwimEC", player), lambda state: state.can_reach_region("LowerDepths.West", player) and state.has("Water", player) and state.has("Bash", player) and (state.has("UpperDepths.ForestsEyes", player) or state.has("Flash", player)))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda state: state.can_reach_region("LowerDepths.West", player) and state.has("DepthsLight", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda state: state.can_reach_region("LowerDepths.West", player) and state.has_any(("Sword", "Hammer"), player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda state: state.has("Water", player) and state.has("DoubleJump", player) and state.has("Bash", player) and (state.has("UpperDepths.ForestsEyes", player) or state.has("Flash", player)))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda state: state.has("Water", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Dash", player) and (state.has("UpperDepths.ForestsEyes", player) or state.has("Flash", player)))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda state: state.has("Water", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Glide", player) and (state.has("UpperDepths.ForestsEyes", player) or state.has("Flash", player)))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda state: state.has("Water", player) and state.has("Launch", player) and (state.has("UpperDepths.ForestsEyes", player) or state.has("Flash", player)))
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda state: state.has("DepthsLight", player) and state.has("Launch", player))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda state: (state.has_any(("Sword", "Hammer"), player) or state.has("DepthsLight", player)) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Dash", player))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda state: (state.has_any(("Sword", "Hammer"), player) or state.has("DepthsLight", player)) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerDepths.CombatShrineCompleted", player), lambda state: state.can_reach_region("DepthsShrine", player) and state.has("Regenerate", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("Bow", "Spear"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.count("Health", player) >= 8)
    add_rule(world.get_location("LowerDepths.CombatShrineCompleted", player), lambda state: state.can_reach_region("DepthsShrine", player) and state.has("Regenerate", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("Bow", "Spear"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.count("Health", player) >= 7 and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("LowerDepths.CombatShrineCompleted", player), lambda state: state.can_reach_region("DepthsShrine", player) and state.has("Regenerate", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has_any(("DoubleJump", "Launch"), player) and state.has_any(("Bow", "Spear"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.count("Health", player) >= 5 and state.has("Launch", player))
    add_rule(world.get_location("LowerDepths.CombatShrine", player), lambda state: state.can_reach_region("DepthsShrine", player) and state.has("LowerDepths.CombatShrineCompleted", player))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda state: state.can_reach_region("LowerDepths.Central", player) and state.has("DoubleJump", player) and state.has("Grapple", player) and (state.has("Dash", player) or state.has("DepthsLight", player)))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda state: state.can_reach_region("LowerDepths.Central", player) and state.has("Launch", player))
    add_rule(world.get_location("LowerDepths.SpiritTrial", player), lambda state: state.can_reach_region("LowerDepths.Central", player) and state.has("LowerDepths.TrialActivation", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Bash", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda state: state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Bash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda state: state.has("DepthsLight", player) and state.has("Launch", player) and state.has("Bash", player))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda state: state.has("DepthsLight", player) and state.has("Bash", player) and state.has("DoubleJump", player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda state: state.can_reach_region("LowerDepths.East", player) and state.has("DoubleJump", player) and state.has("Grapple", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda state: state.can_reach_region("LowerDepths.East", player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Grapple", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda state: state.can_reach_region("LowerDepths.East", player) and state.count("SpiritLight", player) >= 1 and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda state: state.can_reach_region("LowerDepths.East", player) and state.count("SpiritLight", player) >= 1 and state.has("Launch", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda state: state.can_reach_region("LowerDepths.East", player) and state.count("SpiritLight", player) >= 1 and state.has("Launch", player) and state.has("Glide", player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda state: state.can_reach_region("LowerDepths.East", player) and state.count("SpiritLight", player) >= 1 and state.has("DepthsLight", player) and state.has("Glide", player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda state: state.can_reach_region("LowerDepths.East", player) and state.count("SpiritLight", player) >= 1 and state.has("DepthsLight", player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("DepthsLight", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("DepthsLight", player) and state.has("Launch", player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda state: state.has("Bash", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda state: state.has("Launch", player) and (state.has("Bash", player) or state.has("Grapple", player)))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda state: state.has("DepthsLight", player) and state.has("Launch", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerDepths.TrialActivation", player), lambda state: state.can_reach_region("LowerDepths.BeforeTree", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grapple", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda state: state.has("Glide", player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda state: state.has("DoubleJump", player) and (state.has("Bash", player) or state.has("Grapple", player)))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda state: state.has("Dash", player) and (state.has("Bash", player) or state.has("Grapple", player)))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Bash", player) or state.has("Grapple", player)))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda state: state.has("DepthsLight", player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grapple", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Launch", player) and state.has("Bash", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Launch", player) and state.has("Bash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Launch", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Bash", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerDepths.FlashTree", player), lambda state: state.can_reach_region("LowerDepths.TreeArea", player))
    add_rule(world.get_location("LowerDepths.RightEX", player), lambda state: state.can_reach_region("LowerDepths.TreeArea", player) and (state.has("DepthsLight", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_LowerDepths.BeforeTree", player), lambda state: state.has("DepthsLight", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda state: state.has("Water", player) and state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda state: state.has("Water", player) and state.has("Grapple", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda state: state.has("Water", player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Grapple", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda state: state.count("Health", player) >= 0 and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda state: state.count("Health", player) >= 0 and state.has("Bash", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda state: state.count("Health", player) >= 0 and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Grapple", player) or state.has("Bash", player)))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda state: state.can_reach_region("PoolsApproach.MillPath", player) and state.has("Water", player))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda state: state.can_reach_region("PoolsApproach.MillPath", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda state: state.can_reach_region("PoolsApproach.MillPath", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Bow", "Spear"), player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda state: state.can_reach_region("PoolsApproach.MillPath", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Bow", "Spear"), player) and state.has("DoubleJump", player) and state.has("Grapple", player) and state.has("Glide", player))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda state: state.can_reach_region("PoolsApproach.MillPath", player) and state.has("Launch", player))
    add_rule(world.get_location("PoolsApproach.MillPathEC", player), lambda state: state.can_reach_region("PoolsApproach.MillPath", player) and state.has("Water", player))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda state: state.count("Health", player) >= 0 and state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda state: state.count("Health", player) >= 0 and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda state: state.count("Health", player) >= 0 and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda state: state.count("Health", player) >= 0 and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("DoubleJump", player) and state.has("Grapple", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda state: state.count("Health", player) >= 0 and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Bash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda state: state.has("PoolsApproach.UnderwaterWallBroken", player) and state.has("Water", player) and state.has("Launch", player))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda state: state.has("PoolsApproach.UnderwaterWallBroken", player) and state.has("Water", player) and state.has("Grapple", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) or state.has("DoubleJump", player) or state.has("Bash", player)))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda state: state.has("PoolsApproach.UnderwaterWallBroken", player) and state.has("Water", player) and state.has("PoolsApproach.WheelFreed", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) or state.has("DoubleJump", player) or state.has("Bash", player)))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda state: state.can_reach_region("PoolsApproach.MarshBreakableWall", player) and state.has("Water", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("WaterDash", player) and state.count("Health", player) >= 0)
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda state: state.can_reach_region("PoolsApproach.MarshBreakableWall", player) and state.has("Water", player) and state.has("DoubleJump", player) and state.has("Launch", player))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_MarshPastOpher.PoolsPathWest", player), lambda state: state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda state: state.has("Water", player) and state.has("Grapple", player) and state.has("Launch", player))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda state: state.has("Water", player) and state.has("Launch", player) and state.has("Glide", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda state: state.has("Water", player) and state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("PoolsApproach.WheelFreed", player), lambda state: state.can_reach_region("PoolsApproach.OnTopOfWheel", player) and state.has("Water", player) and state.has("Bash", player))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda state: state.can_reach_region("PoolsApproach.OnTopOfWheel", player) and state.has("Water", player) and state.has("Bash", player))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda state: state.can_reach_region("PoolsApproach.OnTopOfWheel", player) and state.has("Launch", player))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda state: state.can_reach_region("PoolsApproach.OnTopOfWheel", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda state: state.can_reach_region("PoolsApproach.OnTopOfWheel", player) and state.has("PoolsApproach.WheelFreed", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("PoolsApproach.MarshPathCurrentEX", player), lambda state: state.can_reach_region("PoolsApproach.OnTopOfWheel", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("PoolsApproach.MillPathEC", player), lambda state: state.can_reach_region("PoolsApproach.OnTopOfWheel", player) and state.has("PoolsApproach.UnderwaterWallBroken", player) and state.has("Water", player) and state.has("Bash", player) and state.count("Health", player) >= 0)
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda state: state.can_reach_region("PoolsApproach.OnTopOfWheel", player) and state.has("Water", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("WaterDash", player) and state.has("Grapple", player))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda state: state.can_reach_region("PoolsApproach.OnTopOfWheel", player) and state.has("Water", player) and state.has("DoubleJump", player) and state.has("Grapple", player) and state.has("Launch", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda state: state.has("Water", player) and state.has("WaterDash", player) and state.has("DoubleJump", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda state: state.has("Water", player) and state.has("Grapple", player) and state.has("Launch", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda state: state.has("Launch", player) and (state.has("Glide", player) or state.has("Water", player)))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Launch", player) and state.count("Health", player) >= 0)
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda state: state.has("PoolsApproach.WheelFreed", player) and state.has("DoubleJump", player) and state.has("Glide", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda state: state.has("PoolsApproach.UnderwaterWallBroken", player) and state.has("Water", player) and state.has("Bash", player) and state.count("Health", player) >= 0 and state.has("Grapple", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda state: state.has("PoolsApproach.UnderwaterWallBroken", player) and state.has("Water", player) and state.has("Bash", player) and state.has("WaterDash", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda state: state.has("PoolsApproach.UnderwaterWallBroken", player) and state.has("Water", player) and state.has("Bash", player) and state.count("Health", player) >= 0 and state.has("Launch", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_MarshSpawn.PoolsPath", player), lambda state: state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda state: state.can_reach_region("EastPools.LeverRoom", player) and state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda state: state.can_reach_region("EastPools.LeverRoom", player) and state.has("Bash", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda state: state.can_reach_region("EastPools.LeverRoom", player) and state.has("Launch", player))
    add_rule(world.get_location("EastPools.BelowEntryLeverBubble", player), lambda state: state.can_reach_region("EastPools.LeverRoom", player) and (state.has("Hammer", player) or state.has("Spear", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_location("PoolsApproach.WheelFreed", player), lambda state: state.can_reach_region("EastPools.LeverRoom", player) and state.has("Water", player) and state.has("Bash", player))
    add_rule(world.get_location("EastPools.KwolokAmuletQI", player), lambda state: state.can_reach_region("EastPools.LeverRoom", player))
    add_rule(world.get_location("EastPools.TwoCrushersEX", player), lambda state: state.can_reach_region("EastPools.LeverRoom", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("EastPools.RightOre", player), lambda state: state.can_reach_region("EastPools.LeverRoom", player) and state.has("DoubleJump", player) and state.has("Grapple", player) and state.has("Flap", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("EastPools.RightOre", player), lambda state: state.can_reach_region("EastPools.LeverRoom", player) and state.has("Launch", player) and state.has("Grapple", player))
    add_rule(world.get_location("EastPools.BubbleCurrentEX", player), lambda state: state.can_reach_region("EastPools.LeverRoom", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("EastPools.BelowLeverEX", player), lambda state: state.can_reach_region("EastPools.LeverRoom", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("EastPools.BelowLeverEX", player), lambda state: state.can_reach_region("EastPools.LeverRoom", player) and state.has("EastPools.BelowEntryLeverBubble", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("EastPools.BelowLeverEX", player), lambda state: state.can_reach_region("EastPools.LeverRoom", player) and state.has("Launch", player))
    add_rule(world.get_location("PoolsApproach.MarshPathCurrentEX", player), lambda state: state.can_reach_region("EastPools.LeverRoom", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BehindEntryDoor", player), lambda state: state.has("EastPools.EntryLever", player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda state: state.has("Water", player) and (state.has("PoolsApproach.WheelFreed", player) or state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda state: state.has("Water", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Glide", player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Glide", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda state: state.has("Glide", player) and state.has("Launch", player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Launch", player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_MarshSpawn.PoolsPath", player), lambda state: state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("EastPools.BelowEntryLeverBubble", player), lambda state: state.can_reach_region("EastPools.BehindEntryDoor", player) and state.has("EastPools.EntryLever", player) and (state.has("Hammer", player) or state.has("Spear", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda state: state.can_reach_region("EastPools.BehindEntryDoor", player) and state.has("Launch", player))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda state: state.can_reach_region("EastPools.BehindEntryDoor", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda state: state.can_reach_region("EastPools.BehindEntryDoor", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Grapple", player)))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda state: state.can_reach_region("EastPools.BehindEntryDoor", player) and state.has("EastPools.TokkBubbleFree", player) and state.has("EastPools.TokkBubblePurpleWall", player) and state.has("Grapple", player) and state.has("Flap", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TokkBubble", player), lambda state: (state.has("Launch", player) or state.has("Water", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TokkBubble", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TokkBubble", player), lambda state: state.has("EastPools.TokkBubbleFree", player) and state.has("EastPools.TokkBubblePurpleWall", player) and (state.has("Bash", player) or state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player)))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Grapple", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.LeverRoom", player), lambda state: state.has("EastPools.EntryLever", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) or state.has("Bash", player) or state.has("Launch", player) or state.has("EastPools.BelowEntryLeverBubble", player)))
    add_rule(world.get_location("EastPools.TokkBubbleFree", player), lambda state: state.can_reach_region("EastPools.TokkBubble", player) and state.has("Water", player) and state.has("Bash", player))
    add_rule(world.get_location("EastPools.TokkBubbleFree", player), lambda state: state.can_reach_region("EastPools.TokkBubble", player) and state.has("Water", player) and state.has("WaterDash", player) and (state.has("EastPools.TokkBubblePurpleWall", player) or state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player)))
    add_rule(world.get_location("EastPools.TokkBubblePurpleWall", player), lambda state: state.can_reach_region("EastPools.TokkBubble", player) and state.has("Water", player) and state.has("Bash", player))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda state: state.can_reach_region("EastPools.TokkBubble", player) and state.has("EastPools.TokkBubbleFree", player) and state.has("EastPools.TokkBubblePurpleWall", player) and state.has("Grapple", player) and state.has("Flap", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda state: state.has("EastPools.TokkBubbleFree", player) and state.has("EastPools.TokkBubblePurpleWall", player) and state.has("Flap", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda state: state.has("EastPools.TokkBubbleFree", player) and state.has("EastPools.TokkBubblePurpleWall", player) and state.has("Flap", player) and state.has("Bash", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda state: state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Bash", player) or state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player)))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda state: state.has("Bash", player) and (state.has("Grenade", player) and state.count("Energy", player) >= 4 or state.has("DoubleJump", player)))
    add_rule(world.get_location("EastPools.LowerWaterDrained", player), lambda state: state.can_reach_region("EastPools.TPArea", player) and state.has("Water", player) and state.has("WaterBreath", player))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda state: state.can_reach_region("EastPools.TPArea", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.Teleporter", player), lambda state: state.has("EastPools.LowerWaterDrained", player))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda state: state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.WaterdashArena", player), lambda state: state.has("EastPools.ArenaWall", player) and state.has("Water", player))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.NextToLupoOre", player), lambda state: state.has("Water", player))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.TokkBubble", player), lambda state: (state.has("Launch", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("EastPools.LowerWaterDrained", player), lambda state: state.can_reach_region("EastPools.Teleporter", player))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda state: state.can_reach_region("EastPools.Teleporter", player))
    add_rule(world.get_location("EastPools.ArenaWall", player), lambda state: state.can_reach_region("EastPools.Teleporter", player) and state.has("EastPools.LowerWaterDrained", player) and state.has("Water", player) and state.has("Bash", player))
    add_rule(world.get_location("EastPools.UltraBashShard", player), lambda state: state.can_reach_region("EastPools.Teleporter", player) and state.has("EastPools.LowerWaterDrained", player) and state.has("Water", player) and state.has("WaterBreath", player) and state.has("Bash", player))
    add_rule(world.get_entrance("EastPools.Teleporter_to_Teleporters", player), lambda state: state.has("EastPools.LowerWaterDrained", player))
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.TPArea", player), lambda state: (state.has("EastPools.LowerWaterDrained", player) or state.has("Water", player)))
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.WaterdashArena", player), lambda state: state.has("EastPools.ArenaWall", player) and state.has("EastPools.LowerWaterDrained", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("EastPools.HandToHandSpyglass", player), lambda state: state.can_reach_region("EastPools.FishingPool", player) and state.has("LowerDepths.HandToHandSilk", player))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda state: state.has("Water", player) and state.has("WaterDash", player) and state.has("DoubleJump", player) and state.has("Dash", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) or state.has("Bash", player)))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda state: state.has("Water", player) and state.has("WaterDash", player) and state.has("DoubleJump", player) and state.has("Glide", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("Bow", "Spear"), player) or state.has("Bash", player)))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.TPArea", player), True)
    add_rule(world.get_location("EastPools.AboveTpEX", player), lambda state: state.can_reach_region("EastPools.AboveFishingPool", player) and state.has("Water", player))
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_EastPools.FishingPool", player), True)
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda state: state.has("UpperPools.UpperWaterDrained", player) and state.has("Launch", player))
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda state: state.has("UpperPools.UpperWaterDrained", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player))
    add_rule(world.get_location("EastPools.LupoOre", player), lambda state: state.can_reach_region("EastPools.NextToLupoOre", player))
    add_rule(world.get_location("EastPools.UltraBashShard", player), lambda state: state.can_reach_region("EastPools.NextToLupoOre", player) and state.has("EastPools.LowerWaterDrained", player) and state.has("Water", player) and state.has("WaterBreath", player) and state.has("Bash", player))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.Teleporter", player), lambda state: state.has("EastPools.LowerWaterDrained", player) and state.has("Water", player))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.TPArea", player), lambda state: state.has("Water", player))
    add_rule(world.get_location("EastPools.LupoEX", player), lambda state: state.can_reach_region("EastPools.LupoArea", player) and (state.has("Launch", player) or state.has("DoubleJump", player)))
    add_rule(world.get_location("EastPools.LupoEX", player), lambda state: state.can_reach_region("EastPools.LupoArea", player) and state.has("EastPools.LupoPurpleFloor", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("EastPools.LupoMap", player), lambda state: state.can_reach_region("EastPools.LupoArea", player) and state.count("SpiritLight", player) >= 1)
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.NextToLupoOre", player), lambda state: state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.MissilePuzzle", player), lambda state: state.has("EastPools.LupoPurpleFloor", player) and state.has("Water", player))
    add_rule(world.get_location("EastPools.FightArenas", player), lambda state: state.can_reach_region("EastPools.WaterdashArena", player) and state.has("Regenerate", player) and state.count("Health", player) >= 0 and state.has("Water", player) and state.has("WaterBreath", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Bow", "Spear"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("Bash", player))
    add_rule(world.get_location("EastPools.FightRoomHC", player), lambda state: state.can_reach_region("EastPools.WaterdashArena", player) and state.has("EastPools.FightArenas", player) and state.has("WaterDash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Grapple", player)))
    add_rule(world.get_location("EastPools.FightRoomHC", player), lambda state: state.can_reach_region("EastPools.WaterdashArena", player) and state.has("EastPools.FightArenas", player) and state.has("WaterDash", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("EastPools.FightRoomHC", player), lambda state: state.can_reach_region("EastPools.WaterdashArena", player) and state.has("EastPools.FightArenas", player) and state.has("WaterDash", player) and state.has("Launch", player))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.TPArea", player), lambda state: state.has("EastPools.ArenaWall", player) and state.has("Water", player))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.Teleporter", player), lambda state: state.has("EastPools.ArenaWall", player) and state.has("EastPools.LowerWaterDrained", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.MissilePuzzle", player), lambda state: state.has("EastPools.FightArenas", player) and (state.has("Water", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("EastPools.CentralRoomPurpleWall", player), lambda state: state.can_reach_region("EastPools.MissilePuzzle", player) and state.has("Water", player) and state.has("WaterBreath", player) and state.has("Bash", player))
    add_rule(world.get_location("EastPools.LupoPurpleFloor", player), lambda state: state.can_reach_region("EastPools.MissilePuzzle", player) and state.has("Water", player) and state.has("WaterBreath", player) and state.has("Bash", player))
    add_rule(world.get_location("EastPools.EnergyHarvestShard", player), lambda state: state.can_reach_region("EastPools.MissilePuzzle", player) and state.has("Water", player) and state.has("WaterDash", player) and state.has("DoubleJump", player))
    add_rule(world.get_location("EastPools.EnergyHarvestShard", player), lambda state: state.can_reach_region("EastPools.MissilePuzzle", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("EastPools.EnergyHarvestShard", player), lambda state: state.can_reach_region("EastPools.MissilePuzzle", player) and state.has("Launch", player))
    add_rule(world.get_location("EastPools.BehindCrusherEX", player), lambda state: state.can_reach_region("EastPools.MissilePuzzle", player) and state.has("Water", player) and state.has("WaterBreath", player))
    add_rule(world.get_location("EastPools.SpiritTrial", player), lambda state: state.can_reach_region("EastPools.MissilePuzzle", player) and state.has("UpperPools.TrialActivation", player) and state.has("EastPools.CentralRoomPurpleWall", player) and state.has("Water", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Glide", player) and state.has("Grapple", player) and state.has("WaterDash", player))
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.CentralRoom", player), lambda state: state.has("EastPools.CentralRoomPurpleWall", player) and state.has("Water", player))
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.WaterdashArena", player), lambda state: state.has("EastPools.FightArenas", player) and (state.has("Water", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.LupoArea", player), lambda state: state.has("EastPools.LupoPurpleFloor", player) and state.has("Water", player))
    add_rule(world.get_location("EastPools.CentralRoomBubbleFree", player), lambda state: state.can_reach_region("EastPools.CentralRoom", player) and state.has("Water", player) and (state.has("Bash", player) or state.has("WaterDash", player)))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda state: state.can_reach_region("EastPools.CentralRoom", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda state: state.can_reach_region("EastPools.CentralRoom", player) and state.has("EastPools.CentralRoomBubbleFree", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda state: state.can_reach_region("EastPools.CentralRoom", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda state: state.can_reach_region("EastPools.CentralRoom", player) and state.has("Launch", player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda state: state.has("EastPools.CentralRoomBubbleFree", player) and state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda state: state.has("EastPools.CentralRoomBubbleFree", player) and state.has("Bash", player) and state.has("Launch", player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda state: state.has("Water", player) and state.has("WaterBreath", player) and state.has("WaterDash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.MissilePuzzle", player), lambda state: state.has("EastPools.CentralRoomPurpleWall", player) and state.has("Water", player))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda state: state.can_reach_region("UpperPools.KeystoneRoomEntrance", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda state: state.can_reach_region("UpperPools.KeystoneRoomEntrance", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda state: state.can_reach_region("UpperPools.KeystoneRoomEntrance", player) and state.has("Water", player) and state.has("DoubleJump", player) and state.has("Bash", player))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda state: state.can_reach_region("UpperPools.KeystoneRoomEntrance", player) and state.has("Water", player) and (state.has("WaterDash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.CentralRoom", player), lambda state: (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.CentralRoom", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda state: (state.has("Water", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda state: state.has("DoubleJump", player) and state.has("Glide", player))
    add_rule(world.get_location("UpperPools.KeystoneRoomBubbleFree", player), lambda state: state.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner", player) and state.has("Water", player) and (state.has("WaterDash", player) or state.has("Bash", player)))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda state: state.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner", player) and state.has("UpperPools.KeystoneRoomBubbleFree", player) and state.has("Flap", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda state: (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Dash", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.RightBubbleSpamRoom", player), lambda state: state.has("UpperPools.KeystoneRoomBubbleFree", player) and state.has("Flap", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomEntrance", player), lambda state: state.has("Water", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomEntrance", player), lambda state: state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda state: state.can_reach_region("UpperPools.KeystoneRoom", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda state: state.can_reach_region("UpperPools.KeystoneRoom", player) and state.has("Launch", player))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda state: state.can_reach_region("UpperPools.KeystoneRoom", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("Water", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda state: state.can_reach_region("UpperPools.KeystoneRoom", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda state: state.can_reach_region("UpperPools.KeystoneRoom", player) and state.has("Water", player) and state.has("WaterDash", player) and state.has("DoubleJump", player))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda state: state.can_reach_region("UpperPools.KeystoneRoom", player) and state.has("Launch", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.KeystoneRoomEntrance", player), True)
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.KeystoneRoomBubbleSpawner", player), True)
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda state: state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda state: state.has("Water", player) and state.has("Grapple", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("Water", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("UpperPools.KeystoneDoor", player), lambda state: state.can_reach_region("UpperPools.BeforeKeystoneDoor", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_location("UpperPools.TrialActivation", player), lambda state: state.can_reach_region("UpperPools.BeforeKeystoneDoor", player) and state.has("Grapple", player))
    add_rule(world.get_location("UpperPools.UpperMidKS", player), lambda state: state.can_reach_region("UpperPools.BeforeKeystoneDoor", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.TreeRoomEntrance", player), lambda state: state.has("UpperPools.KeystoneDoor", player))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.KeystoneRoom", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("UpperPools.KeystoneDoor", player), lambda state: state.can_reach_region("UpperPools.TreeRoomEntrance", player) and state.count("Keystone", player) >= 12)
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.BeforeKeystoneDoor", player), lambda state: state.has("UpperPools.KeystoneDoor", player))
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.TreeRoom", player), lambda state: (state.has("Water", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda state: state.has("UpperPools.TreeRoomLeftBubbleFree", player) and state.has("Flap", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda state: state.has("UpperPools.TreeRoomLeftBubbleFree", player) and state.has("Launch", player))
    add_rule(world.get_location("UpperPools.TreeRoomLeftBubbleFree", player), lambda state: state.can_reach_region("UpperPools.TreeRoom", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("UpperPools.TreeRoomRightBubbleFree", player), lambda state: state.can_reach_region("UpperPools.TreeRoom", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("UpperPools.ButtonDoorAboveTree", player), lambda state: state.can_reach_region("UpperPools.TreeRoom", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("UpperPools.SwimDashTree", player), lambda state: state.can_reach_region("UpperPools.TreeRoom", player))
    add_rule(world.get_location("UpperPools.SwimDashCurrentEX", player), lambda state: state.can_reach_region("UpperPools.TreeRoom", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda state: state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda state: state.has("UpperPools.ButtonDoorAboveTree", player) and state.has("UpperPools.TreeRoomRightBubbleFree", player) and state.has("Water", player) and state.has("WaterDash", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda state: state.has("UpperPools.ButtonDoorAboveTree", player) and state.has("UpperPools.TreeRoomRightBubbleFree", player) and state.has("Launch", player))
    add_rule(world.get_location("UpperPools.RoofEX", player), lambda state: state.can_reach_region("UpperPools.AboveTree", player) and state.has("Launch", player))
    add_rule(world.get_location("UpperPools.RoofEX", player), lambda state: state.can_reach_region("UpperPools.AboveTree", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("UpperPools.RoofEX", player), lambda state: state.can_reach_region("UpperPools.AboveTree", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.TreeRoom", player), True)
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.TreeRoomEntrance", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda state: state.can_reach_region("UpperPools.DrainPuzzleEntrance", player) and state.has("Water", player) and state.has("WaterDash", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda state: state.can_reach_region("UpperPools.DrainPuzzleEntrance", player) and state.has("Water", player) and state.has("WaterDash", player) and state.has("Launch", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda state: state.can_reach_region("UpperPools.DrainPuzzleEntrance", player) and state.has("Water", player) and state.has("Launch", player) and state.has("Grapple", player))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda state: state.can_reach_region("UpperPools.DrainPuzzleEntrance", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Grapple", player))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda state: state.can_reach_region("UpperPools.DrainPuzzleEntrance", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Grapple", player) and state.has("Glide", player))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda state: state.can_reach_region("UpperPools.DrainPuzzleEntrance", player) and state.has("Launch", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.TreeRoom", player), lambda state: state.has("UpperPools.ButtonDoorAboveTree", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Launch", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Grapple", player) or state.has("UpperPools.DrainRoomPurpleWall", player)))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda state: state.has("UpperPools.DrainRoomPurpleWall", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda state: state.has("UpperPools.UpperWaterDrained", player) and state.has("UpperPools.DrainRoomPurpleWall", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda state: state.has("UpperPools.UpperWaterDrained", player) and state.has("UpperPools.DrainRoomPurpleWall", player) and state.has("Water", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("UpperPools.DrainRoomPurpleWall", player), lambda state: state.can_reach_region("UpperPools.DrainPuzzleRight", player) and state.has("Bash", player) and state.has("Water", player) and (state.has("WaterDash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleExit", player), lambda state: state.has("UpperPools.UpperWaterDrained", player) and (state.has("Water", player) or state.has("Glide", player) or state.has("DoubleJump", player) or state.has("Launch", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda state: state.has("Launch", player) and (state.has("Grapple", player) or state.has("UpperPools.DrainRoomPurpleWall", player)))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda state: state.has("Launch", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda state: state.has("Launch", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda state: state.has("Launch", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Grapple", player) and (state.has("Dash", player) or state.has("Glide", player) or state.has("DoubleJump", player)))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and state.has("Glide", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda state: state.has("UpperPools.DrainRoomPurpleWall", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("UpperPools.DrainRoomPurpleWall", player), lambda state: state.can_reach_region("UpperPools.DrainPuzzleExit", player) and state.has("Bash", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda state: state.can_reach_region("UpperPools.DrainPuzzleExit", player) and state.has("UpperPools.UpperWaterDrained", player) and state.has("Water", player) and state.has("Bash", player) and (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda state: state.can_reach_region("UpperPools.DrainPuzzleExit", player) and state.has("UpperPools.UpperWaterDrained", player) and state.has("Water", player) and state.has("Bash", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_EastPools.AboveFishingPool", player), True)
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda state: state.has("Water", player) and state.has("Launch", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda state: state.has("Water", player) and state.has("WaterDash", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda state: state.can_reach_region("UpperPools.RightBubbleSpamRoom", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Launch"), player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda state: state.can_reach_region("UpperPools.RightBubbleSpamRoom", player) and state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda state: state.can_reach_region("UpperPools.RightBubbleSpamRoom", player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperPools.FishPoolEX", player), lambda state: state.can_reach_region("UpperPools.RightBubbleSpamRoom", player) and state.has("Water", player) and (state.has("Bash", player) or state.has("WaterDash", player) or state.count("Health", player) >= 0))
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda state: state.can_reach_region("UpperPools.RightBubbleSpamRoom", player) and state.has("DoubleJump", player) and state.has("Bash", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda state: state.can_reach_region("UpperPools.RightBubbleSpamRoom", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda state: state.can_reach_region("UpperPools.RightBubbleSpamRoom", player) and state.has("Launch", player))
    add_rule(world.get_location("UpperPools.RightBubblesEX", player), lambda state: state.can_reach_region("UpperPools.RightBubbleSpamRoom", player) and state.has("Water", player) and state.has("WaterDash", player))
    add_rule(world.get_location("UpperPools.BubblesEC", player), lambda state: state.can_reach_region("UpperPools.RightBubbleSpamRoom", player) and state.has("UpperPools.BubbleSpamLever", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BeforeKeystoneDoor", player), True)
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.LeftBubbleSpamRoom", player), lambda state: state.has("Water", player))
    add_rule(world.get_location("UpperPools.LeftBubblesEX", player), lambda state: state.can_reach_region("UpperPools.LeftBubbleSpamRoom", player) and state.has("Water", player))
    add_rule(world.get_location("UpperPools.RightBubblesEX", player), lambda state: state.can_reach_region("UpperPools.LeftBubbleSpamRoom", player) and state.has("Water", player) and state.has("Bash", player) and state.has("WaterBreath", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda state: state.has("Water", player) and state.has("Bash", player) and state.has("WaterBreath", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda state: state.has("Water", player) and state.has("Bash", player) and state.has("WaterDash", player))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda state: state.can_reach_region("WestPools.Teleporter", player))
    add_rule(world.get_location("WestPools.TpEX", player), lambda state: state.can_reach_region("WestPools.Teleporter", player) and state.has("Water", player) and state.has("WaterDash", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("WestPools.TpEX", player), lambda state: state.can_reach_region("WestPools.Teleporter", player) and state.has("Launch", player))
    add_rule(world.get_location("WestPools.BurrowEX", player), lambda state: state.can_reach_region("WestPools.Teleporter", player) and state.has("Water", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("WestPools.Teleporter_to_Teleporters", player), True)
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda state: state.has("Water", player) and state.has("WaterBreath", player) and state.has("WaterDash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda state: state.has("Water", player) and state.has("WaterBreath", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WestPools.Teleporter_to_EastPools.CentralRoom", player), lambda state: state.has("Water", player) and state.has("WaterBreath", player) and state.has("WaterDash", player))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_EastPools.CentralRoom", player), lambda state: state.has("WestPools.ForestsStrength", player))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_KwolokEscape", player), True)
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.Teleporter", player), lambda state: state.has("Water", player) and state.has("WaterBreath", player) and (state.has("Bash", player) or state.has("WaterDash", player)))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda state: state.has("WestPools.ForestsStrength", player) and (state.has("Bash", player) or state.has("Launch", player) or state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player)))
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda state: state.has("WestPools.ForestsStrength", player))
    add_rule(world.get_location("WestPools.EscapeRevisitEX", player), lambda state: state.can_reach_region("WestPools.RightKwolokPlatform", player) and state.has("Water", player))
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_KwolokEscape", player), True)
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.LeftKwolokPlatform", player), lambda state: state.has("WestPools.ForestsStrength", player) and (state.has("Bash", player) or state.has("Launch", player) or state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player)))
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_UpperPools.KeystoneRoomEntrance", player), lambda state: state.has("Water", player) and state.has("WaterBreath", player) and state.has("WaterDash", player))
    add_rule(world.get_entrance("KwolokEscape_to_UpperPools.KeystoneRoomEntrance", player), lambda state: state.has("WestPools.ForestsStrength", player))
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda state: state.has("Water", player) and state.has("WaterDash", player) and state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda state: state.has("Water", player) and state.has("WaterDash", player) and state.has("Dash", player) and state.has("Launch", player))
    add_rule(world.get_location("WestPools.ForestsStrength", player), lambda state: state.can_reach_region("KwolokFight", player) and state.has("SkipKwolok", player))
    add_rule(world.get_location("WestPools.ForestsStrength", player), lambda state: state.can_reach_region("KwolokFight", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Regenerate", player) and state.count("Health", player) >= 12 and state.has("Water", player) and state.has("WaterDash", player) and state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Launch", player) or state.has("Dash", player)))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda state: state.can_reach_region("LowerWastes.WestTP", player))
    add_rule(world.get_location("LowerWastes.WestTPOre", player), lambda state: state.can_reach_region("LowerWastes.WestTP", player) and state.has("Burrow", player))
    add_rule(world.get_location("WoodsMain.FeedingGroundsEX", player), lambda state: state.can_reach_region("LowerWastes.WestTP", player) and state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_Teleporters", player), True)
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda state: state.has("DoubleJump", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda state: state.has("DoubleJump", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WoodsMain.FeedingGrounds", player), lambda state: state.has("WindtornRuins.Seir", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda state: state.has("Burrow", player) and state.has("WindtornRuins.Seir", player) and state.has("DoubleJump", player) and state.has("Glide", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda state: state.has("Burrow", player) and state.has("WindtornRuins.Seir", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Grapple", player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda state: state.has("Burrow", player) and state.has("WindtornRuins.Seir", player) and state.has("Launch", player))
    add_rule(world.get_location("LowerWastes.SunsetViewEX", player), lambda state: state.can_reach_region("LowerWastes.SunsetView", player))
    add_rule(world.get_location("LowerWastes.PurpleWallEX", player), lambda state: state.can_reach_region("LowerWastes.SunsetView", player) and state.has("Burrow", player) and state.has("Bash", player))
    add_rule(world.get_location("LowerWastes.SpiritTrial", player), lambda state: state.can_reach_region("LowerWastes.SunsetView", player) and state.has("LowerWastes.TrialActivation", player) and state.has("Burrow", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.WestTP", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda state: state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("LowerWastes.EerieGemQI", player), lambda state: state.can_reach_region("LowerWastes.Shovel", player) and state.has("Burrow", player))
    add_rule(world.get_location("LowerWastes.SandBridgeOre", player), lambda state: state.can_reach_region("LowerWastes.Shovel", player))
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.SunsetView", player), lambda state: (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) or state.has("Bash", player) or state.has("Grapple", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.SkeetoHive", player), lambda state: state.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.MuncherTunnel", player), True)
    add_rule(world.get_location("LowerWastes.MuncherTunnelEC", player), lambda state: state.can_reach_region("LowerWastes.MuncherTunnel", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.Shovel", player), lambda state: (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.Shovel", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda state: state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda state: state.has_any(("Sword", "Hammer"), player) and (state.has("DoubleJump", player) or state.has("Burrow", player) or state.has("Hammer", player)))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Burrow", player) or state.has("Grenade", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("LowerWastes.SandPotHC", player), lambda state: state.can_reach_region("LowerWastes.SandPot", player) and state.has("Burrow", player) and state.has("DoubleJump", player))
    add_rule(world.get_location("LowerWastes.SandPotHC", player), lambda state: state.can_reach_region("LowerWastes.SandPot", player) and state.has("Launch", player))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda state: state.can_reach_region("LowerWastes.SandPot", player) and state.has("Burrow", player) and state.has("Dash", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda state: state.can_reach_region("LowerWastes.SandPot", player) and state.has("Burrow", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda state: state.can_reach_region("LowerWastes.SandPot", player) and state.has("Burrow", player) and state.has("Launch", player))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.MuncherTunnel", player), lambda state: (state.has_any(("Sword", "Hammer"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda state: state.has("Dash", player) and (state.has("DoubleJump", player) or state.has("Grapple", player)))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda state: state.has("Dash", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and state.has("Glide", player))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda state: state.has("Launch", player))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda state: state.can_reach_region("LowerWastes.WoodenBridge", player) and state.has("Burrow", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda state: state.can_reach_region("LowerWastes.WoodenBridge", player) and state.has("Burrow", player) and state.has("Grapple", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda state: state.can_reach_region("LowerWastes.WoodenBridge", player) and state.has("Burrow", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerWastes.MuncherPitEX", player), lambda state: state.can_reach_region("LowerWastes.WoodenBridge", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_location("LowerWastes.MuncherPitEX", player), lambda state: state.can_reach_region("LowerWastes.WoodenBridge", player) and state.has("Burrow", player) and state.has("Glide", player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda state: state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Glide", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda state: state.has("Dash", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Grapple", player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and state.has("Glide", player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.LeverArea", player), lambda state: (state.has("DoubleJump", player) or state.has("Burrow", player) or state.has("Launch", player)))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda state: state.can_reach_region("LowerWastes.BeforeMinesEntrance", player))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Grapple", player)))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Grapple", player)))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.WoodenBridge", player), lambda state: state.has_any(("Sword", "Hammer"), player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerWastes.MinesEntranceEnemyPaths_to_LowerWastes.MinesEntrance", player), True)
    add_rule(world.get_location("LowerWastes.BottomRightEX", player), lambda state: state.can_reach_region("LowerWastes.MinesEntrance", player) and state.has("Grapple", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) or state.has("Bash", player)))
    add_rule(world.get_location("LowerWastes.BottomRightEX", player), lambda state: state.can_reach_region("LowerWastes.MinesEntrance", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("LowerWastes.BottomRightEX", player), lambda state: state.can_reach_region("LowerWastes.MinesEntrance", player) and state.has("Launch", player))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda state: state.can_reach_region("LowerWastes.MinesEntrance", player) and state.has("Grapple", player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) or state.has("Bash", player)))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda state: state.can_reach_region("LowerWastes.MinesEntrance", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda state: state.can_reach_region("LowerWastes.MinesEntrance", player) and state.has("Launch", player))
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has("DoubleJump", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda state: state.has("Bash", player) and state.has("DoubleJump", player) and state.has("Grapple", player))
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Grapple", player)))
    add_rule(world.get_location("LowerWastes.SandPlatformLever", player), lambda state: state.can_reach_region("LowerWastes.LeverArea", player) and (state.has("DoubleJump", player) or state.has("Burrow", player) or state.has("Launch", player)))
    add_rule(world.get_location("LowerWastes.SandPlatformLever", player), lambda state: state.can_reach_region("LowerWastes.LeverArea", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("LowerWastes.SandPlatformLever", player), lambda state: state.can_reach_region("LowerWastes.LeverArea", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Dash", player))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.WoodenBridge", player), True)
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.BeforeMinesEntrance", player), True)
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.EastTP", player), lambda state: state.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda state: state.has("LowerWastes.SandPlatformLever", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player) or state.has("Burrow", player)))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda state: state.has("LowerWastes.SandPlatformLever", player) and state.has("Dash", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player))
    add_rule(world.get_location("LowerWastes.MuncherClimbEX", player), lambda state: state.can_reach_region("LowerWastes.MuncherClimb", player) and state.has("Grapple", player) and (state.has("Launch", player) or state.has("DoubleJump", player)))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LeverArea", player), True)
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda state: state.has("LowerWastes.SandPlatformLever", player) and state.has("DoubleJump", player))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda state: state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda state: state.has("Grapple", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_location("LowerWastes.LastStandShard", player), lambda state: state.can_reach_region("LowerWastes.LastStandArea", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Burrow", player)))
    add_rule(world.get_location("LowerWastes.LastStandEX", player), lambda state: state.can_reach_region("LowerWastes.LastStandArea", player) and state.has("Burrow", player) and (state.has("Launch", player) or state.has("DoubleJump", player)))
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.LeverArea", player), True)
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.MuncherClimb", player), lambda state: (state.has("Glide", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("LowerWastes.SandPlatformLever", player)))
    add_rule(world.get_location("LowerWastes.SkeetoHiveEX", player), lambda state: state.can_reach_region("LowerWastes.SkeetoHive", player) and state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda state: (state.has("DoubleJump", player) or state.has("Burrow", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.Shovel", player), lambda state: state.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda state: state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda state: state.has("Burrow", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda state: state.has("Grapple", player) and state.has("Launch", player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda state: state.has("Grapple", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_location("LowerWastes.TrialActivation", player), lambda state: state.can_reach_region("LowerWastes.ThirstyGorlek", player) and state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("LowerWastes.HandToHandMapstone", player), lambda state: state.can_reach_region("LowerWastes.ThirstyGorlek", player) and state.has("GladesTown.HandToHandCanteen", player))
    add_rule(world.get_location("LowerWastes.BurrowTree", player), lambda state: state.can_reach_region("LowerWastes.ThirstyGorlek", player))
    add_rule(world.get_location("LowerWastes.BurrowTreeEX", player), lambda state: state.can_reach_region("LowerWastes.ThirstyGorlek", player) and state.has("Burrow", player))
    add_rule(world.get_location("LowerWastes.LupoMap", player), lambda state: state.can_reach_region("LowerWastes.ThirstyGorlek", player) and state.count("SpiritLight", player) >= 1 and (state.has("Burrow", player) or state.has("Launch", player)))
    add_rule(world.get_location("LowerWastes.LupoMap", player), lambda state: state.can_reach_region("LowerWastes.ThirstyGorlek", player) and state.count("SpiritLight", player) >= 1 and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.SkeetoHive", player), lambda state: state.has("Burrow", player))
    add_rule(world.get_location("LowerWastes.UpperPathEC", player), lambda state: state.can_reach_region("LowerWastes.UpperPath", player) and state.has("Burrow", player))
    add_rule(world.get_location("LowerWastes.UpperPathEX", player), lambda state: state.can_reach_region("LowerWastes.UpperPath", player) and state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("LowerWastes.UpperPathHiddenEX", player), lambda state: state.can_reach_region("LowerWastes.UpperPath", player) and state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerWastes.UpperPath_to_LowerWastes.SkeetoHive", player), lambda state: state.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.UpperPath_to_LowerWastes.EastTP", player), lambda state: state.has("Burrow", player))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda state: state.can_reach_region("LowerWastes.EastTP", player))
    add_rule(world.get_location("LowerWastes.EastTPOre", player), lambda state: state.can_reach_region("LowerWastes.EastTP", player) and state.has_any(("Sword", "Hammer"), player) and (state.has("Burrow", player) or state.has("Launch", player)))
    add_rule(world.get_location("LowerWastes.EastTPOre", player), lambda state: state.can_reach_region("LowerWastes.EastTP", player) and state.has_any(("Sword", "Hammer"), player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("LowerWastes.EastTPOre", player), lambda state: state.can_reach_region("LowerWastes.EastTP", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("LowerWastes.UpperPathHC", player), lambda state: state.can_reach_region("LowerWastes.EastTP", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.EastTP_to_Teleporters", player), True)
    add_rule(world.get_entrance("LowerWastes.EastTP_to_Tokk", player), lambda state: (state.has("DoubleJump", player) or state.has("Burrow", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerWastes.EastTP_to_Tokk", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.LeverArea", player), lambda state: state.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.UpperPath", player), lambda state: state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("LowerWastes.EastTP_to_UpperWastes.KeystoneRoom", player), lambda state: state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda state: state.can_reach_region("UpperWastes.KeystoneRoom", player) and state.count("Keystone", player) >= 12 and state.has("Burrow", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda state: state.can_reach_region("UpperWastes.KeystoneRoom", player) and state.count("Keystone", player) >= 12 and state.has("Burrow", player) and state.has_any(("Sword", "Hammer"), player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda state: state.can_reach_region("UpperWastes.KeystoneRoom", player) and state.count("Keystone", player) >= 12 and state.has("Launch", player))
    add_rule(world.get_location("UpperWastes.LowerKS", player), lambda state: state.can_reach_region("UpperWastes.KeystoneRoom", player) and state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperWastes.LowerKS", player), lambda state: state.can_reach_region("UpperWastes.KeystoneRoom", player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperWastes.UpperKS", player), lambda state: state.can_reach_region("UpperWastes.KeystoneRoom", player) and state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("UpperWastes.TurmoilShard", player), lambda state: state.can_reach_region("UpperWastes.KeystoneRoom", player) and state.has("Burrow", player) and state.has("Bash", player) and state.has("Launch", player))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda state: state.can_reach_region("UpperWastes.KeystoneRoom", player) and state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda state: state.can_reach_region("UpperWastes.KeystoneRoom", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda state: state.can_reach_region("UpperWastes.KeystoneRoom", player) and state.has("Launch", player))
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_LowerWastes.EastTP", player), lambda state: state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.MissilePuzzleLeft", player), lambda state: state.has("UpperWastes.KeystoneDoor", player) and state.has("Burrow", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.MissilePuzzleLeft", player), lambda state: state.has("UpperWastes.KeystoneDoor", player) and state.has("Burrow", player) and state.has_any(("Sword", "Hammer"), player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.MissilePuzzleLeft", player), lambda state: state.has("UpperWastes.KeystoneDoor", player) and state.has("Burrow", player) and state.has("Launch", player))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda state: state.can_reach_region("UpperWastes.MissilePuzzleLeft", player) and state.count("Keystone", player) >= 12 and state.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.LedgeEC", player), lambda state: state.can_reach_region("UpperWastes.MissilePuzzleLeft", player) and state.has("Burrow", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("UpperWastes.LedgeEC", player), lambda state: state.can_reach_region("UpperWastes.MissilePuzzleLeft", player) and state.has("Launch", player))
    add_rule(world.get_location("UpperWastes.MissileSpawnEX", player), lambda state: state.can_reach_region("UpperWastes.MissilePuzzleLeft", player) and state.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda state: state.can_reach_region("UpperWastes.MissilePuzzleLeft", player) and state.has("UpperWastes.KeystoneDoor", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.KeystoneRoom", player), lambda state: state.has("UpperWastes.KeystoneDoor", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.MissilePuzzleMiddle", player), lambda state: state.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.LeverDoor", player), lambda state: state.can_reach_region("UpperWastes.MissilePuzzleMiddle", player) and state.has("Burrow", player) and state.has("Bash", player))
    add_rule(world.get_location("UpperWastes.PurpleWallEX", player), lambda state: state.can_reach_region("UpperWastes.MissilePuzzleMiddle", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has("Burrow", player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_UpperWastes.MissilePuzzleRight", player), lambda state: state.has("UpperWastes.LeverDoor", player) and state.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.PurpleWallHC", player), lambda state: state.can_reach_region("UpperWastes.MissilePuzzleRight", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda state: state.has("Burrow", player) and state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda state: state.has("Burrow", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda state: state.has("Burrow", player) and state.has("Launch", player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.MissilePuzzleMiddle", player), lambda state: state.has("UpperWastes.LeverDoor", player) and state.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.SpinLasersRightEX", player), lambda state: state.can_reach_region("UpperWastes.RuinsApproach", player) and state.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.SpinLasersMiddleEX", player), lambda state: state.can_reach_region("UpperWastes.RuinsApproach", player) and state.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.SpinLasersLowerEX", player), lambda state: state.can_reach_region("UpperWastes.RuinsApproach", player) and state.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda state: state.can_reach_region("UpperWastes.RuinsApproach", player) and state.has("Burrow", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda state: state.can_reach_region("UpperWastes.RuinsApproach", player) and state.has("Burrow", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda state: state.can_reach_region("UpperWastes.RuinsApproach", player) and state.has("Burrow", player) and state.has("Launch", player))
    add_rule(world.get_entrance("UpperWastes.RuinsApproach_to_UpperWastes.NorthTP", player), lambda state: state.has("Burrow", player))
    add_rule(world.get_entrance("UpperWastes.RuinsApproach_to_UpperWastes.MissilePuzzleRight", player), lambda state: state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Launch", player)))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda state: state.can_reach_region("UpperWastes.NorthTP", player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda state: state.has("Bash", player) and state.has("Launch", player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda state: state.has("Burrow", player) and state.has("Bash", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda state: state.has("Burrow", player) and state.has("Bash", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda state: state.has("Burrow", player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.RuinsApproach", player), lambda state: state.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.FlowersSeed", player), lambda state: state.can_reach_region("UpperWastes.OutsideRuins", player))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda state: state.can_reach_region("UpperWastes.OutsideRuins", player) and state.has("Burrow", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda state: state.can_reach_region("UpperWastes.OutsideRuins", player) and state.has("Burrow", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda state: state.can_reach_region("UpperWastes.OutsideRuins", player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Glide", player) or state.has("Burrow", player)))
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_WindtornRuins.UpperRuinsDoor", player), lambda state: state.has("EastHollow.ForestsVoice", player) and state.has("LowerReach.ForestsMemory", player) and state.has("UpperDepths.ForestsEyes", player) and state.has("WestPools.ForestsStrength", player))
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda state: (state.has("Burrow", player) or state.has("Launch", player) or state.has("Bash", player)))
    add_rule(world.get_location("WindtornRuins.RuinsLever", player), lambda state: state.can_reach_region("WindtornRuins.UpperRuinsDoor", player) and state.has("Burrow", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor_to_UpperWastes.OutsideRuins", player), True)
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor_to_WindtornRuins.BrokenMural", player), lambda state: state.has("WindtornRuins.RuinsLever", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.UpperRuinsDoor", player), lambda state: state.has("WindtornRuins.RuinsLever", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.FallenPillar", player), True)
    add_rule(world.get_location("WindtornRuins.HeartBarrier", player), lambda state: state.can_reach_region("WindtornRuins.FallenPillar", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Burrow", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_location("WindtornRuins.HeartBarrier", player), lambda state: state.can_reach_region("WindtornRuins.FallenPillar", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Burrow", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda state: state.has("Burrow", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda state: state.has("Burrow", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Glide", player))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda state: state.has("Launch", player) and (state.has("Burrow", player) or state.has("WindtornRuins.HeartBarrier", player)))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.Escape", player), lambda state: state.has("WindtornRuins.HeartBarrier", player))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.LowerRuins", player), lambda state: state.has("WindtornRuins.HeartBarrier", player) and state.has("WindtornRuins.Seir", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player) or state.has("Burrow", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.LowerRuins", player), lambda state: state.has("WindtornRuins.HeartBarrier", player) and state.has("WindtornRuins.Seir", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.BrokenMural", player), lambda state: (state.has("Burrow", player) or state.has("WindtornRuins.HeartBarrier", player)) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.BrokenMural", player), lambda state: (state.has("Burrow", player) or state.has("WindtornRuins.HeartBarrier", player)) and state.has("Glide", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.BrokenMural", player), lambda state: (state.has("Burrow", player) or state.has("WindtornRuins.HeartBarrier", player)) and state.has("Launch", player))
    add_rule(world.get_location("WindtornRuins.HeartBarrier", player), lambda state: state.can_reach_region("WindtornRuins.RuinsTP", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda state: state.can_reach_region("WindtornRuins.RuinsTP", player))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_Teleporters", player), True)
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.FallenPillar", player), lambda state: (state.has("WindtornRuins.HeartBarrier", player) or state.has("Burrow", player)))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda state: (state.has("Burrow", player) or state.has("WindtornRuins.HeartBarrier", player)) and state.has("Glide", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda state: state.can_reach_region("WindtornRuins.Escape", player) and state.has("WindtornRuins.HeartBarrier", player) and state.has("Burrow", player) and state.has("Dash", player) and state.has("Grapple", player) and (state.has("DoubleJump", player) or state.has("Glide", player)))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda state: state.can_reach_region("WindtornRuins.Escape", player) and state.has("WindtornRuins.HeartBarrier", player) and state.has("Burrow", player) and state.has("DoubleJump", player) and state.has("Glide", player) and state.has("Grapple", player))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda state: state.can_reach_region("WindtornRuins.Escape", player) and state.has("WindtornRuins.HeartBarrier", player) and state.has("Burrow", player) and state.has("DoubleJump", player) and state.has("Launch", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda state: state.can_reach_region("WindtornRuins.Escape", player) and state.has("WindtornRuins.HeartBarrier", player) and state.has("Burrow", player) and state.has("Grapple", player) and state.has("Launch", player) and state.has("Glide", player))
    add_rule(world.get_location("WindtornRuins.HandToHandComplete", player), lambda state: state.can_reach_region("WindtornRuins.LowerRuins", player) and state.has("LowerWastes.HandToHandMapstone", player))
    add_rule(world.get_location("WindtornRuins.EscapeRevisitEC", player), lambda state: state.can_reach_region("WindtornRuins.LowerRuins", player) and state.has("WindtornRuins.Seir", player) and state.has("Burrow", player))
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.Escape", player), True)
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda state: state.has("WindtornRuins.HeartBarrier", player) and state.has("WindtornRuins.Seir", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda state: state.has("WindtornRuins.HeartBarrier", player) and state.has("WindtornRuins.Seir", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda state: state.has("WindtornRuins.HeartBarrier", player) and state.has("WindtornRuins.Seir", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda state: state.has("Burrow", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WeepingRidge.ElevatorFightCompleted", player), lambda state: state.can_reach_region("WeepingRidge.Bottom", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("WeepingRidge.ElevatorFightCompleted", player), lambda state: state.can_reach_region("WeepingRidge.Bottom", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("WeepingRidge.ElevatorFightCompleted", player), lambda state: state.can_reach_region("WeepingRidge.Bottom", player) and state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and state.has_any(("Hammer", "Launch", "Grenade", "Spear"), player) and state.has("Launch", player))
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda state: state.has("WeepingRidge.ElevatorFightCompleted", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda state: state.has("WeepingRidge.ElevatorFightCompleted", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda state: state.has("WeepingRidge.ElevatorFightCompleted", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_LowerWastes.WestTP", player), lambda state: state.has("WindtornRuins.Seir", player) and state.has("Burrow", player))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda state: state.can_reach_region("WeepingRidge.LaunchArea", player) and state.has("Launch", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda state: state.has("Glide", player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda state: state.has("Launch", player) and (state.has("Bash", player) or state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda state: state.has("WeepingRidge.ElevatorFightCompleted", player) and state.has("Launch", player) and state.has("DoubleJump", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda state: state.has("WeepingRidge.ElevatorFightCompleted", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda state: state.has("WeepingRidge.ElevatorFightCompleted", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda state: state.has("WeepingRidge.ElevatorFightCompleted", player) and state.has("DoubleJump", player) and state.has("Dash", player) and state.has("Glide", player))
    add_rule(world.get_location("WeepingRidge.LaunchTree", player), lambda state: state.can_reach_region("WeepingRidge.AboveTree", player))
    add_rule(world.get_location("WeepingRidge.PortalEX", player), lambda state: state.can_reach_region("WeepingRidge.AboveTree", player) and state.has("Launch", player))
    add_rule(world.get_location("WeepingRidge.SpikeClimbEX", player), lambda state: state.can_reach_region("WeepingRidge.AboveTree", player) and state.has("Launch", player) and state.has("DoubleJump", player) and state.has("Bow", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda state: state.can_reach_region("WeepingRidge.AboveTree", player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Bash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda state: state.has("Launch", player) and state.has("Bash", player) and state.has("Glide", player))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda state: state.can_reach_region("WillowsEnd.Entry", player) and state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda state: state.can_reach_region("WillowsEnd.Entry", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda state: state.has("Launch", player) and state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda state: state.has("Launch", player) and state.has("WillowsEnd.PortalShortcut", player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda state: state.has("Grapple", player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda state: state.has("WillowsEnd.GrappleWheelsHeart", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and state.has("Glide", player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda state: state.has("WillowsEnd.GrappleWheelsHeart", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda state: state.has("Grapple", player) and state.has("Launch", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda state: state.has("Grapple", player) and state.has("Launch", player) and state.has("Glide", player))
    add_rule(world.get_location("WillowsEnd.GrappleWheelsHeart", player), lambda state: state.can_reach_region("WillowsEnd.GrappleHeart", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WillowsEnd.PoisonfallHC", player), lambda state: state.can_reach_region("WillowsEnd.GrappleHeart", player) and state.has("Launch", player))
    add_rule(world.get_location("WillowsEnd.PoisonfallHC", player), lambda state: state.can_reach_region("WillowsEnd.GrappleHeart", player) and state.has("WillowsEnd.GrappleWheelsHeart", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda state: state.has("WillowsEnd.GrappleWheelsHeart", player) and state.has("Glide", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda state: state.has("WillowsEnd.GrappleWheelsHeart", player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda state: state.can_reach_region("WillowsEnd.BoulderHeartPath", player) and state.has("Launch", player) and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.Entry", player), lambda state: (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player)))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda state: state.can_reach_region("WillowsEnd.InnerTP", player))
    add_rule(world.get_location("WillowsEnd.PortalShortcut", player), lambda state: state.can_reach_region("WillowsEnd.InnerTP", player) and state.has_any(("Sword", "Hammer"), player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player) or state.has("Bow", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_location("WillowsEnd.LupoMap", player), lambda state: state.can_reach_region("WillowsEnd.InnerTP", player) and state.count("SpiritLight", player) >= 0 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player) or state.has("Bow", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_Teleporters", player), True)
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda state: state.has("WillowsEnd.PortalShortcut", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Launch", player) or state.has("Bow", player) and state.count("Energy", player) >= 4))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda state: state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda state: (state.has("Glide", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.InnerTP", player), lambda state: (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda state: state.has("DoubleJump", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player)))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda state: state.has("Glide", player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda state: state.has("Bash", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda state: state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Bash", player)))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.RedirectHeartPath", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.RedirectHeartPath", player), lambda state: state.has("Bash", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.Upper", player), lambda state: state.has("Bash", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath_to_WillowsEnd.East", player), lambda state: (state.has("Launch", player) or state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath_to_WillowsEnd.RedirectHeartPuzzle", player), True)
    add_rule(world.get_location("WillowsEnd.RedirectEX", player), lambda state: state.can_reach_region("WillowsEnd.RedirectHeartPuzzle", player) and state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_location("WillowsEnd.RedirectEX", player), lambda state: state.can_reach_region("WillowsEnd.RedirectHeartPuzzle", player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectHeartPath", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectHeartPath", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.East", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.East", player), lambda state: (state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player) and state.has("Bow", player) and state.count("Energy", player) >= 4)
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda state: state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and state.has("DoubleJump", player))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.InnerTP", player), lambda state: state.has_any(("Sword", "Hammer"), player) and (state.has_any(("Sword", "Hammer"), player) and state.has_any(("DoubleJump", "Dash", "Bash", "Launch"), player) or state.has("Bash", player) or state.has("Launch", player)))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Bash", player) and state.has("Grenade", player) and state.count("Energy", player) >= 4 and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda state: state.has_any(("Sword", "Hammer"), player) and state.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.GlideHeartPath", player), lambda state: state.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.GlideRooms", player), lambda state: state.has("DoubleJump", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.West", player), True)
    add_rule(world.get_location("WillowsEnd.WindSpinOre", player), lambda state: state.can_reach_region("WillowsEnd.GlideRooms", player) and state.has("Glide", player))
    add_rule(world.get_entrance("WillowsEnd.GlideRooms_to_WillowsEnd.GlideHeartPath", player), True)
    add_rule(world.get_location("WillowsEnd.UpperLeftEX", player), lambda state: state.can_reach_region("WillowsEnd.UpperHeartPath", player) and state.has("Grapple", player) and state.has("Launch", player) and (state.has("DoubleJump", player) or state.has("Dash", player) or state.has("Glide", player)))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.Upper", player), True)
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda state: state.has("Bash", player) and state.has("Grapple", player) and state.has("Launch", player) and state.has("DoubleJump", player) and state.has("Dash", player))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda state: state.has("Bash", player) and state.has("Grapple", player) and state.has("Launch", player) and state.has("Glide", player))
    add_rule(world.get_location("WillowsEnd.SpinPortalsHeart", player), lambda state: state.can_reach_region("WillowsEnd.UpperHeartCheckpoint", player) and state.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WillowsEnd.UpperRightEX", player), lambda state: state.can_reach_region("WillowsEnd.UpperHeartCheckpoint", player) and state.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint_to_WillowsEnd.UpperHeartPath", player), lambda state: state.has("WillowsEnd.SpinPortalsHeart", player))
    add_rule(world.get_location("GladesTown.HandToHandPouch", player), lambda state: state.can_reach_region("Tokk", player) and state.has("EastHollow.HandToHandMap", player))
    add_rule(world.get_location("GladesTown.TwillenGemQuest", player), lambda state: state.can_reach_region("TwillenShop", player) and state.has("LowerWastes.EerieGemQI", player))
    add_rule(world.get_location("TwillenShop.Overcharge", player), lambda state: state.can_reach_region("TwillenShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("TwillenShop.Wingclip", player), lambda state: state.can_reach_region("TwillenShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("TwillenShop.Swap", player), lambda state: state.can_reach_region("TwillenShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("TwillenShop.Vitality", player), lambda state: state.can_reach_region("TwillenShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("TwillenShop.Energy", player), lambda state: state.can_reach_region("TwillenShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("TwillenShop.Finesse", player), lambda state: state.can_reach_region("TwillenShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("TwillenShop.TripleJump", player), lambda state: state.can_reach_region("TwillenShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("TwillenShop.LightHarvest", player), lambda state: state.can_reach_region("TwillenShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("OpherShop.Spike", player), lambda state: state.can_reach_region("OpherShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("OpherShop.SpiritSmash", player), lambda state: state.can_reach_region("OpherShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("OpherShop.SpiritStar", player), lambda state: state.can_reach_region("OpherShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("OpherShop.Blaze", player), lambda state: state.can_reach_region("OpherShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("OpherShop.Sentry", player), lambda state: state.can_reach_region("OpherShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("OpherShop.Teleport", player), lambda state: state.can_reach_region("OpherShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("OpherShop.ShockSmash", player), lambda state: state.can_reach_region("OpherShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("OpherShop.StaticStar", player), lambda state: state.can_reach_region("OpherShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("OpherShop.ExplodingSpike", player), lambda state: state.can_reach_region("OpherShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("OpherShop.RapidSentry", player), lambda state: state.can_reach_region("OpherShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("OpherShop.ChargeBlaze", player), lambda state: state.can_reach_region("OpherShop", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("OpherShop.WaterBreath", player), lambda state: state.can_reach_region("OpherShop", player) and state.has("InnerWellspring.WaterEscape", player) and state.count("SpiritLight", player) >= 12)
    add_rule(world.get_location("GladesTown.RegrowTheGlades", player), lambda state: state.can_reach_region("TuleyShop", player) and state.has("TuleyShop.SelaFlowers", player) and state.has("TuleyShop.StickyGrass", player) and state.has("TuleyShop.Lightcatchers", player) and state.has("TuleyShop.BlueMoon", player) and state.has("TuleyShop.SpringPlants", player) and state.has("TuleyShop.LastTree", player))
    add_rule(world.get_location("TuleyShop.LastTreeBranchRejected", player), lambda state: state.can_reach_region("TuleyShop", player) and state.has("WoodsEntry.LastTreeBranch", player))
    add_rule(world.get_location("TuleyShop.SelaFlowers", player), lambda state: state.can_reach_region("TuleyShop", player) and state.has("UpperWastes.FlowersSeed", player))
    add_rule(world.get_location("TuleyShop.StickyGrass", player), lambda state: state.can_reach_region("TuleyShop", player) and state.has("EastPools.GrassSeed", player))
    add_rule(world.get_location("TuleyShop.Lightcatchers", player), lambda state: state.can_reach_region("TuleyShop", player) and state.has("UpperDepths.LightcatcherSeed", player))
    add_rule(world.get_location("TuleyShop.BlueMoon", player), lambda state: state.can_reach_region("TuleyShop", player) and state.has("InnerWellspring.BlueMoonSeed", player))
    add_rule(world.get_location("TuleyShop.SpringPlants", player), lambda state: state.can_reach_region("TuleyShop", player) and state.has("UpperReach.SpringSeed", player))
    add_rule(world.get_location("TuleyShop.LastTree", player), lambda state: state.can_reach_region("TuleyShop", player) and state.has("WoodsEntry.TreeSeed", player))
