"""
Generated file, do not edit manually.

See https://github.com/Satisha10/APworld_wotw_extractors for the code.
Generated with `extract_rules.py`.
"""


from .Rules_Functions import *
from worlds.generic.Rules import add_rule

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from BaseClasses import MultiWorld
    from .Options import WotWOptions


def set_moki_rules(world: Multiworld, player: int, options: WotWOptions):
    """Moki (or easy, default) rules."""
    add_rule(world.get_entrance("HeaderStates -> SkipKwolok", player), lambda s: s.has("Impossible", player), "or")
    add_rule(world.get_entrance("HeaderStates -> SkipMora1", player), lambda s: s.has("Impossible", player), "or")
    add_rule(world.get_entrance("HeaderStates -> SkipMora2", player), lambda s: s.has("Impossible", player), "or")
    add_rule(world.get_entrance("Teleporters -> MidnightBurrows.Teleporter", player), lambda s: s.has_all(("Midnight Burrows TP", "Bash"), player) and can_open_door(MidnightBurrows.Teleporter, s, player) and can_enter_area(MidnightBurrows, s, player, options), "or")
    add_rule(world.get_entrance("Teleporters -> MarshSpawn.Main", player), lambda s: s.has("Inkwater Marsh TP", player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("Teleporters -> HowlsDen.Teleporter", player), lambda s: s.has("Howl's Den TP", player) and can_enter_area(HowlsDen, s, player, options), "or")
    add_rule(world.get_entrance("Teleporters -> EastHollow.Teleporter", player), lambda s: s.has("Kwolok's Hollow TP", player) and can_enter_area(EastHollow, s, player, options), "or")
    add_rule(world.get_entrance("Teleporters -> GladesTown.Teleporter", player), lambda s: s.has("Glades TP", player) and can_enter_area(GladesTown, s, player, options), "or")
    add_rule(world.get_entrance("Teleporters -> InnerWellspring.Teleporter", player), lambda s: s.has("Wellspring TP", player) and can_enter_area(InnerWellspring, s, player, options), "or")
    add_rule(world.get_entrance("Teleporters -> WoodsEntry.Teleporter", player), lambda s: s.has("Woods Entrance TP", player) and can_enter_area(WoodsEntry, s, player, options), "or")
    add_rule(world.get_entrance("Teleporters -> WoodsMain.Teleporter", player), lambda s: s.has("Woods Exit TP", player) and can_enter_area(WoodsMain, s, player, options), "or")
    add_rule(world.get_entrance("Teleporters -> LowerReach.Teleporter", player), lambda s: s.has_all(("Baur's Reach TP", "Flap"), player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("Teleporters -> UpperDepths.Teleporter", player), lambda s: s.has_all(("Mouldwood Depths TP", "Glide"), player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("Teleporters -> EastPools.Teleporter", player), lambda s: s.has_all(("Central Luma TP", "Clean Water"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("Teleporters -> WestPools.Teleporter", player), lambda s: s.has_all(("Luma Boss TP", "Clean Water"), player) and can_enter_area(WestPools, s, player, options), "or")
    add_rule(world.get_entrance("Teleporters -> LowerWastes.WestTP", player), lambda s: s.has("Feeding Grounds TP", player) and can_enter_area(LowerWastes, s, player, options), "or")
    add_rule(world.get_entrance("Teleporters -> LowerWastes.EastTP", player), lambda s: s.has_all(("Central Wastes TP", "Burrow"), player) and can_enter_area(LowerWastes, s, player, options), "or")
    add_rule(world.get_entrance("Teleporters -> UpperWastes.NorthTP", player), lambda s: s.has_all(("Outer Ruins TP", "Burrow"), player) and can_enter_area(UpperWastes, s, player, options), "or")
    add_rule(world.get_entrance("Teleporters -> WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Inner Ruins TP", "Burrow", "EastHollow.ForestsVoice", "LowerReach.ForestsMemory", "UpperDepths.ForestsEyes", "WestPools.ForestsStrength"), player) and can_enter_area(WindtornRuins, s, player, options), "or")
    add_rule(world.get_entrance("Teleporters -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Willow's End TP", "Burrow"), player) and can_enter_area(WillowsEnd, s, player, options), "or")
    add_rule(world.get_entrance("Teleporters -> WillowsEnd.ShriekArena", player), lambda s: s.has_all(("Shriek TP", "Burrow"), player) and can_enter_area(WillowsEnd, s, player, options), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> F.MarshSpawn.Main", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.FirstPickupEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.BridgeEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.BridgeEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.Main", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.LeftSpawnSignpost", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.OpherBarrier", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> C.MarshSpawn.OpherBarrier", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.ToOpherBarrier", player), lambda s: has_enough_resources([('wall', ('BreakWall', 16))], [], "MarshSpawn.OpherBarrier", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.LogBroken", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.BridgeEX", player), lambda s: s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshPastOpher.MillView", player), lambda s: s.has("MarshSpawn.ToOpherBarrier", player) and can_enter_area(MarshPastOpher, s, player, options), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.BrokenBridge", player), lambda s: s.has("MarshSpawn.LogBroken", player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.Main", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.Main", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.OpherBarrier", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> C.MarshSpawn.BrokenBridge", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.ResilienceShard", player), lambda s: has_enough_resources([('wall', ('BreakWall', 16))], [], "MarshSpawn.BrokenBridge", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.ResilienceOre", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('wall', ('BreakWall', 16))], [], "MarshSpawn.BrokenBridge", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.BashEC", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.PreLupoEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.LupoMap", player), lambda s: can_buy_map(s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.CaveEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.OpherBarrier", player), lambda s: s.has("MarshSpawn.LogBroken", player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.OpherBarrier", player), lambda s: s.has_all(("MarshSpawn.LogBroken", "Bash"), player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.OpherBarrier", player), lambda s: s.has_all(("MarshSpawn.LogBroken", "Bash"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "MarshSpawn.BrokenBridge", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> C.MarshSpawn.CaveEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.KeystoneDoor", player), lambda s: can_open_door(MarshSpawn.KeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.TokkBarrier", player), lambda s: has_enough_resources([('wall', ('BreakWall', 16))], [], "MarshSpawn.CaveEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("Grapple", "Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.CaveEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.RegenDoor", player), lambda s: s.has("MarshSpawn.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.BrokenBridge", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.BrokenBridge", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.CaveEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.Cave", player), lambda s: s.has("MarshSpawn.TokkBarrier", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> C.MarshSpawn.Cave", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> H.MarshSpawn.Cave", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.CaveFight", player), lambda s: has_enough_resources([('combat', 'Lizard'), ('combat', 'Lizard'), ('combat', 'Lizard')], [], "MarshSpawn.Cave", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.CaveKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.CaveKS", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Grapple"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.CaveKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.CaveKS", player), lambda s: s.has("MarshSpawn.CaveFight", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.TokkKeystoneQuest", player), lambda s: s.has("MarshSpawn.CaveKS", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.LeftTokkEX", player), lambda s: has_enough_resources([('wall', ('BreakWall', 10))], [], "MarshSpawn.Cave", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.FightRoomEX", player), lambda s: has_enough_resources([('wall', ('BreakWall', 10))], [], "MarshSpawn.Cave", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> Tokk", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.CaveEntrance", player), lambda s: s.has("MarshSpawn.TokkBarrier", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.Cave", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("MarshSpawn.CaveFight", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("MarshSpawn.CaveFight", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.Cave", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> H.MarshSpawn.BurrowFightArena", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.BurrowArena", player), lambda s: s.has("Regenerate", player) and has_enough_resources([('db', 40), ('combat', 'Hornbug'), ('combat', 'Bat'), ('combat', 'Sandworm'), ('combat', 'Sandworm'), ('combat', 'Lizard'), ('combat', 'Lizard'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'SneezeSlug')], [], "MarshSpawn.BurrowFightArena", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Double Jump", "Bash"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Double Jump", "Bash"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "MarshSpawn.BurrowFightArena", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LifepactLedge", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Clean Water", "Burrow", "Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Clean Water", "Burrow", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge -> MarshSpawn.LifepactShard", player), lambda s: s.has("MarshSpawn.BurrowArena", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge -> MarshSpawn.BurrowFightArena", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge -> MarshSpawn.BurrowFightArena", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge -> MarshSpawn.BurrowFightArena", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.LifepactLedge", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> C.MarshSpawn.PoolsBurrowsSignpost", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.CaveKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.CaveOre", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.CaveOre", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.Cave", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.LifepactLedge", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> C.MarshSpawn.BeforeBurrows", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.CrusherSwimEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.BeforeBurrows", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> C.MarshSpawn.BurrowsEntry", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BurrowsOpen", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BurrowsOpen", player), lambda s: s.has_all(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.DamageTreeOpen", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.TokkTabletQuest", player), lambda s: s.has("MidnightBurrows.TabletQI", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.DamageTree", player), lambda s: s.has("MarshSpawn.DamageTreeOpen", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> Tokk", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MidnightBurrows.Teleporter", player), lambda s: s.has("MarshSpawn.BurrowsOpen", player) and can_enter_area(MidnightBurrows, s, player, options), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> C.MarshSpawn.LeftSpawnSignpost", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.RockHC", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.LongSwimEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Clean Water", "Burrow", "Bash"), player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Clean Water", "Burrow", "Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.Main", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Double Jump", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and s.has_any(("Double Jump", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Clean Water", "Burrow", "Dash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> C.MarshSpawn.PoolsPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> PoolsApproach.WheelWall", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> PoolsApproach.WheelFreed", player), lambda s: s.has_all(("PoolsApproach.WheelWall", "Clean Water", "Water Breath", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has_all(("Double Jump", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has_all(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has_any(("PoolsApproach.WheelFreed", "Double Jump", "Launch"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Water Breath"), player) and s.has_any(("PoolsApproach.WheelFreed", "Double Jump", "Launch"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("Water Breath", "Water Dash"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.PoolsPath", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Glide", player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor -> MarshSpawn.KeystoneDoor", player), lambda s: can_open_door(MarshSpawn.KeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor -> MarshSpawn.RegenTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor -> MarshSpawn.CaveEntrance", player), lambda s: s.has("MarshSpawn.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor -> MarshSpawn.HowlApproach", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor -> MarshSpawn.HowlApproach", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.RegenDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor -> MarshSpawn.HowlApproach", player), lambda s: s.has("Water Dash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach -> C.MarshSpawn.HowlApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach -> MarshSpawn.HowlBurnt", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach -> MarshSpawn.RegenTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach -> MarshSpawn.RecklessShard", player), lambda s: has_enough_resources([('wall', ('BreakWall', 10))], [], "MarshSpawn.HowlApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach -> MarshSpawn.RegenDoor", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach -> MarshSpawn.RegenDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.HowlApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach -> MarshSpawn.MokkTheBrave", player), lambda s: s.has("MarshSpawn.HowlBurnt", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.HowlBurnt", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.MokkFangQuest", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "MarshSpawn.FangQI"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.RecklessShard", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "Bash"), player) and has_enough_resources([('wall', ('BreakWall', 10)), ('energy', ('Grenade', 1))], [], "MarshSpawn.MokkTheBrave", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("MarshSpawn.HowlBurnt", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.HowlApproach", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.HowlApproach", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "HowlsDen.RainLifted", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.MokkTheBrave", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.HowlApproach", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "MarshSpawn.MokkTheBrave", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and s.has_any(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> C.MarshSpawn.AboveHowlArena", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> H.MarshSpawn.AboveHowlArena", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangEC", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangEC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.MokkTheBrave", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangPlatform", player), lambda s: s.has_any(("Launch", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangPlatform", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.AboveHowlArena", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> H.MarshSpawn.FangPlatform", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.FangQI", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance -> MarshSpawn.MokkEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance -> HowlsDen.AboveBoneBridge", player), lambda s: can_enter_area(HowlsDen, s, player, options), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance -> MarshSpawn.MokkTheBrave", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit -> C.HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit -> H.HowlsDen.UpperLoopExit", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit -> HowlsDen.UpperLoopExitBarrier", player), lambda s: has_enough_resources([('wall', ('BreakWall', 16))], [], "HowlsDen.UpperLoopExit", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit -> HowlsDen.RightHC", player), lambda s: s.has_any(("Bash", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "HowlsDen.UpperLoopExit", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit -> HowlsDen.RightHC", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [('combat', 'Slug')], "HowlsDen.UpperLoopExit", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit -> MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player) and s.has_any(("Double Jump", "Dash"), player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player) and s.has_any(("Launch", "Glide", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> C.HowlsDen.AboveBoneBridge", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> HowlsDen.UpperLoopEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Launch", player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> C.HowlsDen.UpperLoopEntrance", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.UpperLoopEntranceBarrier", player), lambda s: has_enough_resources([('wall', ('BreakWall', 16))], [], "HowlsDen.UpperLoopEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.RightHC", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has_any(("Bash", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "HowlsDen.UpperLoopEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.RightHC", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and has_enough_resources([('wall', ('BreakWall', 20))], [('combat', 'Slug')], "HowlsDen.UpperLoopEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.BoneBridge", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "HowlsDen.UpperLoopEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Slug')], [], "HowlsDen.UpperLoopEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.UpperLoopExit", player), lambda s: s.has_all(("HowlsDen.UpperLoopEntranceBarrier", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> C.HowlsDen.BoneBridge", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.KeystoneDoor", player), lambda s: can_open_door(HowlsDen.KeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.RainLifted", player), lambda s: s.has("HowlsDen.SwordTree", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.BoneBarrier", player), lambda s: has_enough_resources([('wall', ('BreakWall', 16))], [], "HowlsDen.BoneBridge", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.SwordTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.BoneOre", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.BoneOre", player), lambda s: has_enough_resources([('combat', 'Mantis'), ('combat', 'Slug'), ('energy', ('Spear', 1))], [], "HowlsDen.BoneBridge", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveDoorKS", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.MagnetShard", player), lambda s: s.has("Launch", player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "HowlsDen.BoneBridge", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.MagnetShard", player), lambda s: has_enough_resources([('wall', ('BreakWall', 10))], [('wall', ('BreakWall', 16))], "HowlsDen.BoneBridge", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveTPEX", player), lambda s: s.has("HowlsDen.BoneBarrier", player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "HowlsDen.BoneBridge", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.BoneBridgeDoor", player), lambda s: s.has("HowlsDen.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveTeleporter", player), lambda s: s.has("HowlsDen.BoneBarrier", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor -> C.HowlsDen.BoneBridgeDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor -> HowlsDen.KeystoneDoor", player), lambda s: can_open_door(HowlsDen.KeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor -> HowlsDen.BoneBridge", player), lambda s: s.has("HowlsDen.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor -> HowlsDen.OutsideSecretRoom", player), lambda s: s.has_any(("Clean Water", "Launch", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.SecretRoomWall", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [], "HowlsDen.OutsideSecretRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has("HowlsDen.SecretRoomWall", player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.BoneBridgeDoor", player), lambda s: s.has_any(("Clean Water", "Launch", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'Slug')], [], "HowlsDen.OutsideSecretRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "HowlsDen.OutsideSecretRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Grenade', 1))], "HowlsDen.OutsideSecretRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> H.HowlsDen.MidwayBottomLoop", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.OutsideSecretRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("Launch", player) and has_enough_resources([('wall', ('BreakWall', 16))], [], "HowlsDen.MidwayBottomLoop", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("Double Jump", player) and s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 16))], [], "HowlsDen.MidwayBottomLoop", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('wall', ('BreakWall', 16))], [('combat', 'Slug')], "HowlsDen.MidwayBottomLoop", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("Dash", player) and s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 16))], [], "HowlsDen.MidwayBottomLoop", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("Dash", player) and has_enough_resources([('wall', ('BreakWall', 16))], [('combat', 'Slug')], "HowlsDen.MidwayBottomLoop", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 16)), ('energy', ('Grenade', 1))], [], "HowlsDen.MidwayBottomLoop", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom -> C.HowlsDen.SecretRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom -> HowlsDen.LeftSecretRoom", player), lambda s: s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom -> HowlsDen.LeftSecretRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom -> HowlsDen.OutsideSecretRoom", player), lambda s: s.has("HowlsDen.SecretRoomWall", player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('combat', 'SneezeSlug')], [], "HowlsDen.LeftSecretRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has("Double Jump", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('combat', 'SneezeSlug')], "HowlsDen.LeftSecretRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "HowlsDen.LeftSecretRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter -> HowlsDen.AboveTPEX", player), lambda s: has_enough_resources([('wall', ('BreakWall', 10))], [], "HowlsDen.AboveTeleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter -> HowlsDen.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter -> HowlsDen.BoneBridge", player), lambda s: s.has("HowlsDen.BoneBarrier", player) and s.has_any(("Double Jump", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter -> HowlsDen.BoneBridge", player), lambda s: s.has("HowlsDen.BoneBarrier", player) and has_enough_resources([], [('combat', 'Slug')], "HowlsDen.AboveTeleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> F.HowlsDen.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.LaserKS", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.LaserKS", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "HowlsDen.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> DenShrine", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> DenShrine", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1))], "HowlsDen.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.DoubleJumpApproach", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.DoubleJumpApproach", player), lambda s: s.has_all(("Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.DoubleJumpApproach", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "HowlsDen.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.AboveTeleporter", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.AboveTeleporter", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "HowlsDen.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach -> C.HowlsDen.DoubleJumpApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach -> HowlsDen.DoubleJumpTreeCombat", player), lambda s: has_enough_resources([('combat', 'Mantis'), ('combat', 'Lizard'), ('combat', 'Lizard'), ('combat', 'SmallSkeeto')], [], "HowlsDen.DoubleJumpApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach -> HowlsDen.DoubleJumpEX", player), lambda s: s.has("HowlsDen.DoubleJumpTreeCombat", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has_any(("HowlsDen.DoubleJumpTreeCombat", "Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach -> HowlsDen.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge -> C.HowlsDen.DoubleJumpTreeLedge", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge -> HowlsDen.DoubleJumpEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge -> HowlsDen.DoubleJumpTreeArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge -> HowlsDen.DoubleJumpApproach", player), lambda s: s.has_any(("Double Jump", "Launch", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> HowlsDen.DoubleJumpTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> HowlsDen.StickyShard", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has_any(("Double Jump", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "HowlsDen.DoubleJumpTreeArea", s, player, options, True), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> MidnightBurrows.DenConnection", player), lambda s: s.has("MidnightBurrows.HowlsDenShortcut", player) and can_enter_area(MidnightBurrows, s, player, options), "or")
    add_rule(world.get_entrance("DenShrine -> F.DenShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("DenShrine -> HowlsDen.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and has_enough_resources([('combat', 'Mantis'), ('combat', 'Lizard'), ('combat', 'Lizard'), ('combat', 'SneezeSlug'), ('combat', 'SneezeSlug'), ('combat', 'Mantis'), ('combat', 'Skeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Lizard'), ('combat', 'Lizard'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('db', 60)], [], "DenShrine", s, player, options, True), "or")
    add_rule(world.get_entrance("DenShrine -> HowlsDen.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and s.has_any(("Dash", "Bash", "Launch"), player) and has_enough_resources([('combat', 'Mantis'), ('combat', 'Lizard'), ('combat', 'Lizard'), ('combat', 'SneezeSlug'), ('combat', 'SneezeSlug'), ('combat', 'Mantis'), ('combat', 'Skeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Lizard'), ('combat', 'Lizard'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('db', 40)], [], "DenShrine", s, player, options, True), "or")
    add_rule(world.get_entrance("DenShrine -> HowlsDen.CombatShrine", player), lambda s: s.has("HowlsDen.CombatShrineCompleted", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> C.MarshPastOpher.MillView", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> E.MarshPastOpher.MillView", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> OpherShop", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> MarshPastOpher.TrialStart", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> MarshSpawn.OpherBarrier", player), lambda s: s.has("MarshSpawn.ToOpherBarrier", player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch -> MarshPastOpher.MillView", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart -> C.MarshPastOpher.TrialStart", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart -> MarshPastOpher.TrunkWall", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [], "MarshPastOpher.TrialStart", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart -> MarshPastOpher.SpiritTrial", player), lambda s: s.has_all(("MarshPastOpher.TrialActivation", "Double Jump", "Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart -> MarshPastOpher.UnderTrunk", player), lambda s: s.has("MarshPastOpher.TrunkWall", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart -> MarshPastOpher.BowPath", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk -> C.MarshPastOpher.UnderTrunk", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk -> MarshPastOpher.TrialLeftEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk -> MarshPastOpher.TrialArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk -> MarshPastOpher.TrialStart", player), lambda s: s.has("MarshPastOpher.TrunkWall", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> C.MarshPastOpher.TrialArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> H.MarshPastOpher.TrialArea", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialActivation", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('combat', 'SneezeSlug'), ('combat', 'Mantis')], [], "MarshPastOpher.TrialArea", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialActivation", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialEC", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialHC", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialHC", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1))], "MarshPastOpher.TrialArea", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialRightEX", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.UnderTrunk", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.UnderTrunk", player), lambda s: s.has_all(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.UnderTrunk", player), lambda s: s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.BowPath", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "MarshPastOpher.TrialArea", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.BowPath", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('combat', 'Mantis'), ('combat', 'SneezeSlug')], [], "MarshPastOpher.TrialArea", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshShrine -> F.MarshShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshShrine -> MarshPastOpher.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and has_enough_resources([('db', 20), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Mantis'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'Mantis'), ('combat', 'Skeeto')], [], "MarshShrine", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshShrine -> MarshPastOpher.CombatShrine", player), lambda s: s.has("MarshPastOpher.CombatShrineCompleted", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> C.MarshPastOpher.BowPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> H.MarshPastOpher.BowPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> E.MarshPastOpher.BowPath", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.SwingPoleEX", player), lambda s: s.has_any(("Dash", "Glide"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.BowPath", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.SwingPoleEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 10), ('energy', ('Grenade', 2))], [], "MarshPastOpher.BowPath", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.BowApproach", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.MillView", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.MillView", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "MarshPastOpher.BowPath", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.TrialStart", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshPastOpher.BowPath", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> C.MarshPastOpher.BowApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> H.MarshPastOpher.BowApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.SwingPoleEX", player), lambda s: has_enough_resources([('db', 10)], [], "MarshPastOpher.BowApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.BowPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.BowArea", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.BowArea", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshPastOpher.BowApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.MillView", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshPastOpher.BowApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash", "Glide"), player) and has_enough_resources([('energy', ('Bow', 4))], [], "MarshPastOpher.BowApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Launch"), player) and has_enough_resources([('energy', ('Bow', 4))], [], "MarshPastOpher.BowApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> E.MarshPastOpher.BowArea", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.EyestoneDoor", player), lambda s: can_open_door(MarshPastOpher.EyestoneDoor, s, player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.BowEC", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.BowTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.UpperBowArea", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'Skeeto'), ('energy', ('Bow', 2))], [], "MarshPastOpher.BowArea", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.UpperBowArea", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> WestHollow.Entrance", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and can_enter_area(WestHollow, s, player, options), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.BowApproach", player), lambda s: s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.BowApproach", player), lambda s: has_enough_resources([('combat', 'Skeeto'), ('energy', ('Bow', 1))], [], "MarshPastOpher.BowArea", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea -> C.MarshPastOpher.UpperBowArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea -> E.MarshPastOpher.UpperBowArea", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea -> MarshPastOpher.LeftEyestone", player), lambda s: has_enough_resources([('combat', 'Skeeto'), ('energy', ('Bow', 1))], [], "MarshPastOpher.UpperBowArea", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea -> MarshPastOpher.RightEyestone", player), lambda s: has_enough_resources([('combat', 'Skeeto'), ('energy', ('Bow', 1))], [], "MarshPastOpher.UpperBowArea", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea -> MarshPastOpher.BowArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea -> MarshPastOpher.BowApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> C.MarshPastOpher.PoolsPathEast", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> H.MarshPastOpher.PoolsPathEast", player), lambda s: has_enough_resources([('combat', 'Mantis'), ('combat', 'Bat')], [], "MarshPastOpher.PoolsPathEast", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> E.MarshPastOpher.PoolsPathEast", player), lambda s: s.has("BreakCrystal", player) and has_enough_resources([('combat', 'Mantis'), ('combat', 'Bat')], [], "MarshPastOpher.PoolsPathEast", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.CeilingEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.CeilingEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.OpherSkipBranch", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> C.MarshPastOpher.PoolsPathMiddle", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "MarshPastOpher.PoolsPathMiddle", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Launch", "Clean Water"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Launch", "Clean Water"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "MarshPastOpher.PoolsPathMiddle", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> C.MarshPastOpher.PoolsPathOneWayWall", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [], "MarshPastOpher.PoolsPathOneWayWall", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathMiddle", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [], "MarshPastOpher.PoolsPathOneWayWall", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> C.MarshPastOpher.PoolsPathWest", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshPastOpher.PoolsPathWest", s, player, options, True), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter -> F.MidnightBurrows.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter -> Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter -> MidnightBurrows.BelowLupo", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter -> MidnightBurrows.BelowLupo", player), lambda s: has_enough_resources([], [('combat', 'SneezeSlug'), ('combat', 'Bat')], "MidnightBurrows.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("MarshSpawn.BurrowsOpen", "Launch"), player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("MarshSpawn.BurrowsOpen", "Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo -> MidnightBurrows.LeftKS", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo -> MidnightBurrows.Teleporter", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo -> MidnightBurrows.Teleporter", player), lambda s: has_enough_resources([], [('combat', 'SneezeSlug'), ('combat', 'Bat')], "MidnightBurrows.BelowLupo", s, player, options, True), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo -> MidnightBurrows.Central", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo -> MidnightBurrows.Central", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> C.MidnightBurrows.Central", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.LupoMap", player), lambda s: can_buy_map(s, player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.DeflectorShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.DeflectorShard", player), lambda s: s.has_all(("MidnightBurrows.Lever", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.BelowLupo", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.TabletRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.TabletRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.PortalRoom", player), lambda s: s.has_any(("Launch", "Glide", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.TabletRoom -> C.MidnightBurrows.TabletRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.TabletRoom -> H.MidnightBurrows.TabletRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.TabletRoom -> MidnightBurrows.KeystoneDoor", player), lambda s: can_open_door(MidnightBurrows.KeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("MidnightBurrows.TabletRoom -> MidnightBurrows.TabletQI", player), lambda s: s.has("MidnightBurrows.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.TabletRoom -> MidnightBurrows.Central", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> C.MidnightBurrows.PortalRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.LeverRoom", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.LeverRoom", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.LeverRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.LeverRoom", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("MidnightBurrows.Lever", "Launch"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.East", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.East", player), lambda s: s.has("MidnightBurrows.Lever", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.Central", player), lambda s: s.has("MidnightBurrows.Lever", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> C.MidnightBurrows.LeverRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.Lever", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.LowerKS", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.LowerKS", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MidnightBurrows.LeverRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.East -> C.MidnightBurrows.East", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.East -> MidnightBurrows.DenConnection", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.East -> MidnightBurrows.DenConnection", player), lambda s: has_enough_resources([], [('combat', 'SneezeSlug'), ('combat', 'Tentacle')], "MidnightBurrows.East", s, player, options, True), "or")
    add_rule(world.get_entrance("MidnightBurrows.DenConnection -> C.MidnightBurrows.DenConnection", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.DenConnection -> MidnightBurrows.HowlsDenShortcut", player), lambda s: has_enough_resources([('wall', ('BreakWall', 10))], [], "MidnightBurrows.DenConnection", s, player, options, True), "or")
    add_rule(world.get_entrance("MidnightBurrows.DenConnection -> MidnightBurrows.RightKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.DenConnection -> MidnightBurrows.PortalCorridor", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.DenConnection -> MidnightBurrows.PortalCorridor", player), lambda s: has_enough_resources([], [('combat', 'WeakSlug')], "MidnightBurrows.DenConnection", s, player, options, True), "or")
    add_rule(world.get_entrance("MidnightBurrows.DenConnection -> HowlsDen.DoubleJumpTreeArea", player), lambda s: s.has("MidnightBurrows.HowlsDenShortcut", player) and can_enter_area(HowlsDen, s, player, options), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor -> C.MidnightBurrows.PortalCorridor", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor -> MidnightBurrows.DenConnection", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([('db', 15)], [], "MidnightBurrows.PortalCorridor", s, player, options, True), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("Launch", "Glide"), player) and has_enough_resources([('db', 15)], [], "MidnightBurrows.PortalCorridor", s, player, options, True), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS -> MidnightBurrows.UpperKS", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS -> MidnightBurrows.UpperKS", player), lambda s: has_enough_resources([], [('combat', 'Bat')], "MidnightBurrows.BelowUpperKS", s, player, options, True), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS -> MidnightBurrows.PortalRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> C.WestHollow.Entrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> E.WestHollow.Entrance", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> MarshPastOpher.EyestoneDoor", player), lambda s: can_open_door(MarshPastOpher.EyestoneDoor, s, player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.Entrance", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.PurpleDoorOpen", player), lambda s: s.has("Launch", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.Entrance", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.PurpleDoorOpen", player), lambda s: s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1)), ('energy', ('Grenade', 1))], [], "WestHollow.Entrance", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.CrusherHC", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> TwillenShop", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and s.has_any(("Double Jump", "Launch"), player) and can_enter_area(MarshPastOpher, s, player, options), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> MarshPastOpher.BowArea", player), lambda s: s.has_all(("MarshPastOpher.EyestoneDoor", "Bash"), player) and can_enter_area(MarshPastOpher, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestHollow.Entrance", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.MokiByTwillen", player), lambda s: s.has_any(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Slug'), ('combat', 'Slug'), ('energy', ('Bow', 1))], [], "WestHollow.Entrance", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen -> H.WestHollow.MokiByTwillen", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen -> WestHollow.UpperDrainLeverPulled", player), lambda s: has_enough_resources([('combat', 'BombSlug'), ('energy', ('Bow', 1))], [], "WestHollow.MokiByTwillen", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen -> WestHollow.UpperDrainLeverPulled", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('combat', 'BombSlug')], [], "WestHollow.MokiByTwillen", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen -> WestHollow.UpperDrainLeverPulled", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen -> WestHollow.Entrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen -> WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen -> WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: has_enough_resources([], [('combat', 'BombSlug')], "WestHollow.MokiByTwillen", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has_any(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.InFrontPurpleDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: has_enough_resources([('energy', ('Bow', 1))], [('combat', 'Slug')], "WestHollow.InFrontPurpleDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestHollow.InFrontPurpleDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained", "Double Jump", "Dash", "Glide"), player) and has_enough_resources([('combat', 'Slug'), ('combat', 'Slug')], [], "WestHollow.InFrontPurpleDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.Entrance", player), lambda s: s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> EastHollow.Teleporter", player), lambda s: s.has("WestHollow.PurpleDoorOpen", player) and can_enter_area(EastHollow, s, player, options), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoorEnemyPaths -> WestHollow.InFrontPurpleDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> C.WestHollow.HollowDrainMiddle", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> E.WestHollow.HollowDrainMiddle", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.UpperTongueExtended", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("WestHollow.UpperTongueExtended", "WestHollow.FullyDrained"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("WestHollow.UpperTongueExtended", "WestHollow.UpperDrainLeverPulled"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> C.WestHollow.RockPuzzle", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> H.WestHollow.RockPuzzle", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> E.WestHollow.RockPuzzle", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('combat', 'Skeeto'), ('energy', ('Bow', 4))], [], "WestHollow.RockPuzzle", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('combat', 'Skeeto'), ('energy', ('Bow', 4))], [], "WestHollow.RockPuzzle", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Bash", "Launch"), player) and has_enough_resources([('energy', ('Bow', 4))], [], "WestHollow.RockPuzzle", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Bash", "Launch"), player) and has_enough_resources([('energy', ('Bow', 4))], [], "WestHollow.RockPuzzle", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleEX", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.FullyDrained"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Skeeto'), ('combat', 'Slug'), ('energy', ('Bow', 1))], [], "WestHollow.RockPuzzle", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.UpperDrainLeverPulled"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Skeeto'), ('combat', 'Slug'), ('energy', ('Bow', 1))], [], "WestHollow.RockPuzzle", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.FullyDrained"), player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.UpperDrainLeverPulled"), player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> E.WestHollow.FarLeftRoom", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Bow', 2))], [], "WestHollow.FarLeftRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.FarLeftRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> E.WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "BreakCrystal"), player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.UpperTongueExtended", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('combat', 'BombSlug'), ('energy', ('Bow', 1))], [], "WestHollow.SubmergedPlatform", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.UpperTongueRetracted", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.LowerTongueExtended"), player) and has_enough_resources([('combat', 'BombSlug'), ('energy', ('Bow', 1))], [], "WestHollow.SubmergedPlatform", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.LowerTongueExtended", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('combat', 'BombSlug'), ('energy', ('Bow', 1))], [], "WestHollow.SubmergedPlatform", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.UpperTongueExtended", "WestHollow.LowerTongueExtended", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.UpperTongueRetracted", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestHollow.SubmergedPlatform", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.AboveJumppad", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("WestHollow.LowerTongueExtended", "Launch", "Glide", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.AboveJumppad", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.LowerTongueExtended", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.AboveJumppad", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.HiddenEC", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "WestHollow.AboveJumppad", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.HollowDrainLower", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.LowerTongueExtended", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> C.WestHollow.HollowDrainLower", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.QuickshotShard", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Double Jump", "Dash"), player) and s.has("Bash", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.HollowDrainLower", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.QuickshotShard", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Bow', 1))], [('combat', 'Skeeto'), ('combat', 'Skeeto')], "WestHollow.HollowDrainLower", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.QuickshotShard", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Double Jump", "Launch"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.HollowDrainLower", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.SwimEC", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: s.has("Bash", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: s.has("Launch", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.TrialApproach", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('combat', 'Slug'), ('combat', 'Skeeto'), ('combat', 'Skeeto')], [], "WestHollow.HollowDrainLower", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.TrialApproach", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Dash", "Glide"), player) and has_enough_resources([('combat', 'Slug'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Hornbug')], [], "WestHollow.HollowDrainLower", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.TrialApproach", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('db', 10)], [], "WestHollow.HollowDrainLower", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.TrialApproach", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Clean Water", "Water Dash"), player) and s.has("Double Jump", player) and has_enough_resources([('combat', 'Slug')], [], "WestHollow.HollowDrainLower", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.TrialApproach", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Clean Water", "Water Dash"), player) and has_enough_resources([('combat', 'Slug')], [('combat', 'Hornbug')], "WestHollow.HollowDrainLower", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.TrialApproach", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Clean Water", "Water Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.TrialApproach", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.PolesPound", player), lambda s: s.has_any(("Double Jump", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.PolesPound", player), lambda s: has_enough_resources([], [('combat', 'SneezeSlug')], "WestHollow.HollowDrainLower", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.AboveJumppad", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.AboveJumppad", player), lambda s: has_enough_resources([], [('combat', 'Slug')], "WestHollow.HollowDrainLower", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> C.WestHollow.TrialApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('combat', 'Slug')], [], "WestHollow.TrialApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.HollowDrainLower", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.TrialStart -> C.WestHollow.TrialStart", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.TrialStart -> WestHollow.TrialHC", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.TrialStart -> WestHollow.SpiritTrial", player), lambda s: s.has_all(("WestHollow.TrialActivation", "WestHollow.FullyDrained", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.TrialStart -> WestHollow.TrialApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> C.WestHollow.PolesPound", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.BelowLupoEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.BelowLupoEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.DashApproach", player), lambda s: s.has_any(("Double Jump", "Bash", "Launch", "Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Slug')], [], "WestHollow.PolesPound", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> C.WestHollow.DashApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> E.WestHollow.DashApproach", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.TrialActivation", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.DoorLever", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Skeeto'), ('combat', 'Mantis'), ('combat', 'Lizard'), ('combat', 'Lizard'), ('combat', 'Hornbug')], [], "WestHollow.DashApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.DoorLever", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.DoorLever", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "WestHollow.DashApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.DoorLever", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.HollowDrainLower", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WestHollow.DashApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.HollowDrainLower", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.DashArea", player), lambda s: s.has("WestHollow.DoorLever", player), "or")
    add_rule(world.get_entrance("WestHollow.DashArea -> C.WestHollow.DashArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashArea -> WestHollow.DashTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashArea -> WestHollow.DashApproach", player), lambda s: s.has("WestHollow.DoorLever", player), "or")
    add_rule(world.get_entrance("WestHollow.DashArea -> WestHollow.DashCrushers", player), lambda s: s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> C.WestHollow.DashCrushers", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.CrusherEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashTree", player), lambda s: s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashArea", player), lambda s: s.has_all(("Dash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestHollow.DashCrushers", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> C.WestHollow.DashRoomTopRight", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashRightEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashRightEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([], [('combat', 'WeakSlug')], "WestHollow.DashRoomTopRight", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashRightEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashCrushers", player), lambda s: s.has_any(("Bash", "Glide", "Launch", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.AboveDashSemisolid", player), lambda s: s.has("Glide", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.AboveDashSemisolid", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('combat', 'Hornbug'), ('combat', 'Skeeto')], "WestHollow.DashRoomTopRight", s, player, options, True), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.AboveDashSemisolid", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.AboveDashSemisolid", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveDashSemisolid -> WestHollow.AboveDashEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.AboveDashSemisolid -> WestHollow.DashArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> F.EastHollow.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.VoiceDoorOpen", player), lambda s: s.has("EastHollow.ForestsVoice", player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> BeetleFight", player), lambda s: has_enough_resources([('combat', 'Skeeto'), ('combat', 'Mantis')], [], "EastHollow.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.AfterBeetleFight", player), lambda s: s.has("EastHollow.BeetleDefeated", player) and s.has_any(("Double Jump", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("WestHollow.PurpleDoorOpen", player) and can_enter_area(WestHollow, s, player, options), "or")
    add_rule(world.get_entrance("BeetleFight -> F.BeetleFight", player), lambda s: True, "or")
    add_rule(world.get_entrance("BeetleFight -> EastHollow.BeetleDefeated", player), lambda s: s.has_all(("Regenerate", "Dash"), player) and has_enough_resources([('wall', ('Boss', 250)), ('db', 45)], [], "BeetleFight", s, player, options, True), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.VoiceDoorOpen", player), lambda s: s.has("EastHollow.ForestsVoice", player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.HornBeetleFightEX", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.HornBeetleFightEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastHollow.VoiceDoorPlatform", s, player, options, True), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.HornBeetleFightEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.MapMoki", player), lambda s: s.has("EastHollow.VoiceDoorOpen", player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.Teleporter", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.AfterBeetleFight", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> C.EastHollow.MapMoki", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.HandToHandMap", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.GladesApproachOre", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.VoiceDoorPlatform", player), lambda s: s.has("EastHollow.VoiceDoorOpen", player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.OutsideGlades -> GladesTown.GromsWall", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.OutsideGlades -> GladesTown.Teleporter", player), lambda s: s.has("GladesTown.GromsWall", player) and can_enter_area(GladesTown, s, player, options), "or")
    add_rule(world.get_entrance("EastHollow.OutsideGlades -> EastHollow.MapMoki", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> C.EastHollow.AfterBeetleFight", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.VoiceDoorOpen", player), lambda s: s.has("EastHollow.ForestsVoice", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SpikeLanternEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SecretRoofEX", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.MortarEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.MortarEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> BeetleFight", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.AboveBash", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastHollow.AfterBeetleFight", s, player, options, True), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.VoiceDoorPlatform", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.VoiceDoorPlatform", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Kwolok", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Kwolok", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Kwolok", player), lambda s: s.has_all(("Launch", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.DepthsLever", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashEC", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashEC", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastHollow.AboveBash", s, player, options, True), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashEC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashTreeCheckpoint", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'SneezeSlug'), ('combat', 'SneezeSlug')], [], "EastHollow.AboveBash", s, player, options, True), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashTreeCheckpoint", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashTreeCheckpoint", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.AboveDepths", player), lambda s: s.has("EastHollow.DepthsLever", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'SneezeSlug'), ('combat', 'SneezeSlug')], [], "EastHollow.AboveBash", s, player, options, True), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.AboveDepths", player), lambda s: s.has_all(("EastHollow.DepthsLever", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.AboveDepths", player), lambda s: s.has("EastHollow.DepthsLever", player) and s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.AfterBeetleFight", player), lambda s: s.has_any(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> C.EastHollow.BashTreeCheckpoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.BashTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.BashEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.BashEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.AboveBash", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.AboveBash", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Spear', 1))], "EastHollow.BashTreeCheckpoint", s, player, options, True), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.AboveBash", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> C.EastHollow.Kwolok", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.ForestsVoice", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokAmuletQuest", player), lambda s: s.has_all(("EastPools.KwolokAmuletQI", "WestPools.ForestsStrength"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> GladesTown.TuleySpawned", player), lambda s: s.has("InnerWellspring.WaterEscape", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.SilentSwimWall", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.RightKwolokEX", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.SilentSwimEC", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Launch"), player) and has_enough_resources([('combat', 'Balloon')], [], "EastHollow.Kwolok", s, player, options, True), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimOre", player), lambda s: s.has("Clean Water", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimOre", player), lambda s: s.has("Clean Water", player) and has_enough_resources([], [('db', 10)], "EastHollow.Kwolok", s, player, options, True), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimLeftEX", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimRightEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.AfterBeetleFight", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.AfterBeetleFight", player), lambda s: s.has_all(("Dash", "Glide"), player) and has_enough_resources([('db', 10)], [], "EastHollow.Kwolok", s, player, options, True), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.AfterBeetleFight", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('combat', 'Balloon')], [], "EastHollow.Kwolok", s, player, options, True), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Grapple", "Dash", "Glide"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('combat', 'Balloon')], [], "EastHollow.Kwolok", s, player, options, True), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Launch"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('combat', 'Balloon')], [], "EastHollow.Kwolok", s, player, options, True), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> C.EastHollow.AboveDepths", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> E.EastHollow.AboveDepths", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.DepthsOpen", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.BashHC", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.SplinterShard", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.DepthsExteriorEX", player), lambda s: s.has_all(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> UpperDepths.Entry", player), lambda s: s.has("EastHollow.DepthsOpen", player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.BashTreeCheckpoint", player), lambda s: s.has("EastHollow.DepthsLever", player) and s.has_any(("Double Jump", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.BashTreeCheckpoint", player), lambda s: s.has("EastHollow.DepthsLever", player) and has_enough_resources([], [('combat', 'SneezeSlug')], "EastHollow.AboveDepths", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> F.GladesTown.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.BuildHuts", player), lambda s: s.count("Gorlek Ore", player) >= 15, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.RoofsOverHeads", player), lambda s: s.has("GladesTown.BuildHuts", player) and s.count("Gorlek Ore", player) >= 21, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.OnwardsAndUpwards", player), lambda s: s.has("GladesTown.RoofsOverHeads", player) and s.count("Gorlek Ore", player) >= 29, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.ClearThorns", player), lambda s: s.count("Gorlek Ore", player) >= 23, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.CaveEntrance", player), lambda s: s.has("GladesTown.ClearThorns", player) and s.count("Gorlek Ore", player) >= 29, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.RebuildTheGlades", player), lambda s: s.count("Gorlek Ore", player) >= 40, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.ArcingShard", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.ArcingShard", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.ArcingShard", player), lambda s: s.has_all(("GladesTown.ClearThorns", "TuleyShop.Lightcatchers", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoSwimMiddleEX", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoSwimLeftEX", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Clean Water"), player) and s.has_any(("Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.TwillenHome", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.UpperWest", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple", "TuleyShop.Lightcatchers", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.BelowBountyShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "TuleyShop.StickyGrass", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.AboveOpher", player), lambda s: s.has_any(("Launch", "TuleyShop.SpringPlants"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.AboveOpher", player), lambda s: s.has_all(("Flap", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.AboveOpher", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LeftAboveCoals", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LeftAboveCoals", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "TuleyShop.Lightcatchers", "Grapple", "Bash"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoHouse", player), lambda s: s.has_any(("Burrow", "Clean Water"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> OpherShop", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> Tokk", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and s.has_any(("Double Jump", "Launch", "TuleyShop.SpringPlants"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> TuleyShop", player), lambda s: s.has_all(("GladesTown.TuleySpawned", "Flap", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> TuleyShop", player), lambda s: s.has_all(("GladesTown.TuleySpawned", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> EastHollow.OutsideGlades", player), lambda s: s.has("GladesTown.GromsWall", player) and can_enter_area(EastHollow, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome (Door) -> GladesTown.KeyMokiHutInside (Door)", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.TwillenHome (Door) -> GladesTown.TwillenHome", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.TwillenHome (Door)", player), lambda s: s.has_all(("GladesTown.BuildHuts", "WoodsEntry.DollQI"), player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> C.GladesTown.TwillenHome", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.HandToHandLantern", player), lambda s: s.has("LowerReach.HandToHandHat", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.FamilyReunionKey", player), lambda s: s.has("GladesTown.BuildHuts", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.LowerOre", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "GladesTown.TwillenHome", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.LowerOre", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.LowerOre", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.TwillenHome", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.LowerOre", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1))], "GladesTown.TwillenHome", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.AboveCaveEX", player), lambda s: s.has("GladesTown.ClearThorns", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.DamageTree", player), lambda s: s.has("TuleyShop.LastTree", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> TwillenShop", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.AcornMoki", player), lambda s: s.has("GladesTown.ClearThorns", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.West", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.West", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.TwillenHome", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.West", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple"), player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.Teleporter", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.TwillenHome", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.Teleporter", player), lambda s: s.has_any(("GladesTown.ClearThorns", "Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.KeyMokiHutInside (Door) -> GladesTown.TwillenHome (Door)", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.KeyMokiHutInside (Door) -> GladesTown.KeyMokiHutInside", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.KeyMokiHutInside -> GladesTown.KeyMokiHutInside (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.KeyMokiHutInside -> GladesTown.KeyMokiHutEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.West -> C.GladesTown.West", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.HandToHandCanteen", player), lambda s: s.has("EastPools.HandToHandSpyglass", player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("Bash", "Launch"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.West", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has("TuleyShop.StickyGrass", player) and s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.West", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Bash", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.West", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "TuleyShop.Lightcatchers", "Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "TuleyShop.Lightcatchers", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "GladesTown.West", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.StickyGrass", "Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.West", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.StickyGrass", "TuleyShop.Lightcatchers", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.Lightcatchers", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.West", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.West", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Grapple"), player) and s.has_any(("TuleyShop.StickyGrass", "TuleyShop.BlueMoon"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.Lightcatchers", "Bash"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has("Launch", player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.TwillenHome", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.Teleporter", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.Teleporter", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.Teleporter", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash", "TuleyShop.StickyGrass", "Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut (Door) -> GladesTown.MotayHutInside (Door)", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.MotayHut (Door) -> GladesTown.MotayHut", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.MotayHut (Door)", player), lambda s: s.has("GladesTown.BuildHuts", player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "GladesTown.MotayHut", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.West", player), lambda s: s.has_any(("GladesTown.BuildHuts", "TuleyShop.Lightcatchers"), player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperWest", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "GladesTown.MotayHut", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperWest", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperWest", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.Lightcatchers", "Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHutInside (Door) -> GladesTown.MotayHut (Door)", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.MotayHutInside (Door) -> GladesTown.MotayHutInside", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.MotayHutInside -> GladesTown.MotayHutInside (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.MotayHutInside -> GladesTown.MotayHutEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.UpperWest (Door) -> GladesTown.InsideThirdHut (Door)", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.UpperWest (Door) -> GladesTown.UpperWest", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.UpperWest (Door)", player), lambda s: s.has("GladesTown.OnwardsAndUpwards", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.ArcingShard", player), lambda s: s.has("GladesTown.ClearThorns", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.ArcingShard", player), lambda s: s.has_all(("GladesTown.ClearThorns", "TuleyShop.Lightcatchers", "Bash"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.ArcingShard", player), lambda s: s.has_all(("GladesTown.ClearThorns", "TuleyShop.BlueMoon", "Grapple"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.UpperLeftEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.UpperWest", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.UpperLeftEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.UpperLeftEX", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has_any(("TuleyShop.StickyGrass", "TuleyShop.BlueMoon"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.AboveGromHC", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.UpperWest", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.AboveGromHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.AboveGromHC", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.AboveGromHC", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player) and s.has_any(("Dash", "Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.MotayHut", player), lambda s: s.has("GladesTown.BuildHuts", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.BlueMoon", "Grapple"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.West", player), lambda s: s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.West", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.TwillenHome", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.Teleporter", player), lambda s: s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.Teleporter", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.Teleporter", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player), "or")
    add_rule(world.get_entrance("GladesTown.InsideThirdHut (Door) -> GladesTown.UpperWest (Door)", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.InsideThirdHut (Door) -> GladesTown.InsideThirdHut", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.InsideThirdHut -> GladesTown.InsideThirdHut (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.InsideThirdHut -> GladesTown.BraveMokiHutEX", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki (Door) -> GladesTown.AcornCave (Door)", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.AcornMoki (Door) -> GladesTown.AcornMoki", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.AcornMoki (Door)", player), lambda s: s.has("GladesTown.CaveEntrance", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.MokiAcornQuest", player), lambda s: s.has("GladesTown.AcornQI", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.AboveCaveEX", player), lambda s: s.has_any(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.AboveCaveEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.AcornMoki", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.AboveCaveEX", player), lambda s: s.has("TuleyShop.SpringPlants", player) and has_enough_resources([('db', 10)], [], "GladesTown.AcornMoki", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.CaveBurrowEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.Teleporter", player), lambda s: s.has("GladesTown.ClearThorns", player) and s.has_any(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.Teleporter", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.AcornMoki", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.Teleporter", player), lambda s: s.has_all(("GladesTown.ClearThorns", "TuleyShop.SpringPlants"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave (Door) -> GladesTown.AcornMoki (Door)", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.AcornCave (Door) -> GladesTown.AcornCave", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornCave (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> E.GladesTown.AcornCave", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Clean Water", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Clean Water", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.AcornCave", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.AboveTpEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.BountyShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.BountyShard", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.BountyShard", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "GladesTown.BelowBountyShard", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.BountyShard", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.LeftAboveCoals", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.LeftAboveCoals", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.LeftAboveCoals", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.UpdraftCeilingEX", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.UpdraftCeilingEX", player), lambda s: s.has_all(("Flap", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.UpdraftCeilingEX", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player) and s.has_any(("Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.UpdraftCeilingEX", player), lambda s: s.has("TuleyShop.SpringPlants", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.AboveOpher", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher (Door) -> GladesTown.StorageHut (Door)", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.AboveOpher (Door) -> GladesTown.AboveOpher", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.AboveOpher -> GladesTown.AboveOpher (Door)", player), lambda s: s.has("GladesTown.RoofsOverHeads", player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> GladesTown.LeftAboveCoals", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> GladesTown.PlayfulMoki", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> GladesTown.PlayfulMoki", player), lambda s: s.has_all(("Flap", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> GladesTown.PlayfulMoki", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> GladesTown.PlayfulMoki", player), lambda s: s.has_all(("TuleyShop.SpringPlants", "Double Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> GladesTown.PlayfulMoki", player), lambda s: s.has_all(("GladesTown.RoofsOverHeads", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.AboveOpher", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> TuleyShop", player), lambda s: s.has_all(("GladesTown.TuleySpawned", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> TuleyShop", player), lambda s: s.has_all(("GladesTown.TuleySpawned", "GladesTown.RoofsOverHeads", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.StorageHut (Door) -> GladesTown.AboveOpher (Door)", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.StorageHut (Door) -> GladesTown.StorageHut", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.StorageHut -> GladesTown.StorageHut (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki -> GladesTown.HoleHut", player), lambda s: s.has_any(("TuleyShop.SpringPlants", "Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki -> GladesTown.HoleHut", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.PlayfulMoki", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki -> GladesTown.HoleHut", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki -> GladesTown.AboveOpher", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki -> TuleyShop", player), lambda s: s.has_all(("GladesTown.TuleySpawned", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.LupoHouse (Door) -> GladesTown.InsideLupoHouse (Door)", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.LupoHouse (Door) -> GladesTown.LupoHouse", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.LupoHouse -> GladesTown.LupoHouse (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.LupoHouse -> GladesTown.LupoSwimHC", player), lambda s: s.has_all(("Clean Water", "Burrow"), player), "or")
    add_rule(world.get_entrance("GladesTown.LupoHouse -> GladesTown.Teleporter", player), lambda s: s.has_any(("Clean Water", "Burrow"), player), "or")
    add_rule(world.get_entrance("GladesTown.InsideLupoHouse (Door) -> GladesTown.LupoHouse (Door)", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.InsideLupoHouse (Door) -> GladesTown.InsideLupoHouse", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.InsideLupoHouse -> GladesTown.InsideLupoHouse (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.InsideLupoHouse -> GladesTown.LupoSoupEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.InsideLupoHouse -> LupoShop.HCMapIcon", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("GladesTown.InsideLupoHouse -> LupoShop.ECMapIcon", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("GladesTown.InsideLupoHouse -> LupoShop.ShardMapIcon", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> GladesTown.BelowHoleHutEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> GladesTown.HoleHutEntrance", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.HoleHut", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> GladesTown.HoleHutEntrance", player), lambda s: s.has_any(("TuleyShop.SpringPlants", "Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("Launch", "Grapple"), player) and s.has_any(("TuleyShop.BlueMoon", "TuleyShop.StickyGrass"), player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("TuleyShop.SpringPlants", "Launch"), player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "TuleyShop.BlueMoon", "Bash", "Grapple"), player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "TuleyShop.StickyGrass", "Bash", "Grapple", "Glide"), player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> GladesTown.PlayfulMoki", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.HoleHutEntrance (Door) -> GladesTown.InsideHoleHut (Door)", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.HoleHutEntrance (Door) -> GladesTown.HoleHutEntrance", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.HoleHutEntrance -> GladesTown.HoleHutEntrance (Door)", player), lambda s: s.has("GladesTown.RoofsOverHeads", player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHutEntrance -> GladesTown.HoleHut", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.InsideHoleHut (Door) -> GladesTown.HoleHutEntrance (Door)", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.InsideHoleHut (Door) -> GladesTown.InsideHoleHut", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.InsideHoleHut -> GladesTown.InsideHoleHut (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.InsideHoleHut -> GladesTown.HoleHutEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.InsideHoleHut -> GladesTown.HoleHutEC", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> C.WestGlades.PastTown", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> E.WestGlades.PastTown", player), lambda s: s.has_all(("BreakCrystal", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> E.WestGlades.PastTown", player), lambda s: s.has_all(("BreakCrystal", "Launch"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestGlades.PastTown", s, player, options, True), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPoolEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has_any(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('combat', 'Tentacle')], [], "WestGlades.PastTown", s, player, options, True), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and can_enter_area(GladesTown, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: s.has("Launch", player) and can_enter_area(GladesTown, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.SwimEC", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.Center", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.Center", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.PastTown", player), lambda s: s.has_any(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.PastTown", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('combat', 'Tentacle')], [], "WestGlades.LowerPool", s, player, options, True), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.PastTown", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.Center -> C.WestGlades.Center", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.RightOre", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.RightOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.Upper", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.Upper", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "WestGlades.Center", s, player, options, True), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.Upper", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.LowerPool", player), lambda s: s.has_any(("Clean Water", "Launch", "Double Jump", "Dash", "Glide", "Bash"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> C.WestGlades.Upper", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.Upper -> H.WestGlades.Upper", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.Upper -> LowerReach.BearSneezed", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.UpperPoolEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.RightOre", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.RightOre", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.Center", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.Upper -> LowerReach.Entry", player), lambda s: s.has("LowerReach.BearSneezed", player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.MillApproach", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.MillApproach", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> C.WestGlades.MillApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> H.WestGlades.MillApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.SwimOre", player), lambda s: s.has("Clean Water", player) and s.has_any(("Grapple", "Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestGlades.MillApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: s.has_all(("Launch", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestGlades.MillApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.Upper", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.Upper", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "WestGlades.MillApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.Upper", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.Upper", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.Upper", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.Upper", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has_any(("Launch", "Clean Water"), player) and can_enter_area(OuterWellspring, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and can_enter_area(OuterWellspring, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and can_enter_area(OuterWellspring, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Dash", "Glide"), player) and can_enter_area(OuterWellspring, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('db', 15)], [], "WestGlades.MillApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and s.has_any(("Water Dash", "Launch"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Launch", "Double Jump", "Dash"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Launch", "Glide"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> C.WestGlades.ShrineArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestGlades.ShrineArea", s, player, options, True), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> GladesShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.MillApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesShrine -> F.GladesShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesShrine -> WestGlades.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and has_enough_resources([('combat', 'Crab'), ('combat', 'Crab'), ('combat', 'Bee'), ('combat', 'Hornbug'), ('combat', 'Tentacle'), ('combat', 'Tentacle'), ('combat', 'SpinCrab'), ('combat', 'SpinCrab'), ('combat', 'Bee'), ('combat', 'Bee'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Tentacle'), ('combat', 'SpinCrab'), ('db', 65)], [], "GladesShrine", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesShrine -> WestGlades.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Crab'), ('combat', 'Crab'), ('combat', 'Bee'), ('combat', 'Hornbug'), ('combat', 'Tentacle'), ('combat', 'Tentacle'), ('combat', 'SpinCrab'), ('combat', 'SpinCrab'), ('combat', 'Bee'), ('combat', 'Bee'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Tentacle'), ('combat', 'SpinCrab'), ('db', 55)], [], "GladesShrine", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesShrine -> WestGlades.CombatShrineCompleted", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and has_enough_resources([('combat', 'Crab'), ('combat', 'Crab'), ('combat', 'Bee'), ('combat', 'Hornbug'), ('combat', 'Tentacle'), ('combat', 'Tentacle'), ('combat', 'SpinCrab'), ('combat', 'SpinCrab'), ('combat', 'Bee'), ('combat', 'Bee'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Tentacle'), ('combat', 'SpinCrab'), ('db', 30)], [], "GladesShrine", s, player, options, True), "or")
    add_rule(world.get_entrance("GladesShrine -> WestGlades.CombatShrine", player), lambda s: s.has("WestGlades.CombatShrineCompleted", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor (Door) -> InnerWellspring.EntranceDoor (Door)", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor (Door) -> OuterWellspring.EntranceDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.EntranceDoor (Door)", player), lambda s: s.has("OuterWellspring.EntranceDoorOpen", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> C.OuterWellspring.EntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.LifeHarvestWallBroken", player), lambda s: s.has("Double Jump", player) and s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "OuterWellspring.EntranceDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.LifeHarvestWallBroken", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('wall', ('BreakWall', 20))], [('combat', 'Slug'), ('combat', 'Mantis')], "OuterWellspring.EntranceDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.LifeHarvestWallBroken", player), lambda s: s.has("Launch", player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "OuterWellspring.EntranceDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.WheelEX", player), lambda s: s.has("OuterWellspring.EntranceDoorOpen", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.BasementEC", player), lambda s: s.has("OuterWellspring.EntranceDoorOpen", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.SwimEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.LifeHarvestEntry", player), lambda s: s.has_all(("OuterWellspring.LifeHarvestWallBroken", "Double Jump"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.LifeHarvestEntry", player), lambda s: s.has_all(("OuterWellspring.LifeHarvestWallBroken", "Double Jump"), player) and has_enough_resources([], [('combat', 'Slug'), ('combat', 'Mantis')], "OuterWellspring.EntranceDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.LifeHarvestEntry", player), lambda s: s.has_all(("OuterWellspring.LifeHarvestWallBroken", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has_all(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has_all(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.EntranceDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.EntranceDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.EntranceDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('Grenade', 2))], [], "OuterWellspring.EntranceDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has_any(("Clean Water", "Launch"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has_all(("OuterWellspring.LifeHarvestLeverPulled", "Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player) and s.has_any(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player) and has_enough_resources([], [('combat', 'Mantis'), ('combat', 'Slug')], "OuterWellspring.LifeHarvestEntry", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoorOpen", player), lambda s: has_enough_resources([('wall', ('BreakWall', 16))], [], "OuterWellspring.Basement", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.BasementEC", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Launch", player) and s.has_any(("OuterWellspring.EntranceDoorOpen", "Double Jump", "Dash", "Glide", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Bash", "Double Jump"), player) and s.has_any(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Clean Water", "Grapple"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Clean Water", "Grapple"), player) and has_enough_resources([], [('combat', 'WeakSlug')], "OuterWellspring.Basement", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Clean Water", "Water Dash"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Clean Water", "Water Dash"), player) and has_enough_resources([], [('combat', 'WeakSlug')], "OuterWellspring.Basement", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> E.OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Double Jump", "Launch"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.EastDoor", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.EastDoor", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has_all(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.EntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor (Door) -> InnerWellspring.WestDoor (Door)", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.WestDoor (Door) -> OuterWellspring.WestDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.WestDoor (Door)", player), lambda s: s.has("InnerWellspring.MiddleDoorsOpen", player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> C.OuterWellspring.WestDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has("Launch", player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "OuterWellspring.WestDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("OuterWellspring.WestDoorBlueMoonFree", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("OuterWellspring.WestDoorBlueMoonFree", "Grapple", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("OuterWellspring.WestDoorBlueMoonFree", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.WestDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.WestDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.EntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor (Door) -> InnerWellspring.EastDoor (Door)", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.EastDoor (Door) -> OuterWellspring.EastDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.EastDoor (Door)", player), lambda s: s.has("InnerWellspring.MiddleDoorsOpen", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> C.OuterWellspring.EastDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has("Grenade", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "OuterWellspring.EastDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has("Spear", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "OuterWellspring.EastDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has("Bow", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "OuterWellspring.EastDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has("Bash", player) and s.has_any(("Bow", "Spear", "Grenade"), player) and has_enough_resources([('wall', ('BreakWall', 3)), ('energy', ('Grenade', 1))], [], "OuterWellspring.EastDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has_all(("InnerWellspring.TopDoorOpen", "Grapple"), player) and s.has_any(("Bow", "Spear", "Grenade"), player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "OuterWellspring.EastDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TheLostCompass", player), lambda s: s.has("InnerWellspring.NeedleQI", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "OuterWellspring.EastDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has_any(("Glide", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "OuterWellspring.EastDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "OuterWellspring.EastDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has_all(("Grapple", "Bash"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('Grenade', 1))], [], "OuterWellspring.EastDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.AboveWestDoor", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("InnerWellspring.TopDoorOpen", "Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.EastDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("Bash", "Launch"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.EastDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.WestDoor", player), lambda s: s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> E.OuterWellspring.AboveWestDoor", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.TopDoor", player), lambda s: s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.TopDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.AboveWestDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.WestDoor", player), lambda s: s.has_any(("Double Jump", "Dash", "Grapple", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.WestDoor", player), lambda s: has_enough_resources([], [('combat', 'Miner')], "OuterWellspring.AboveWestDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.EastDoor", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.EastDoor", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor (Door) -> InnerWellspring.Teleporter (Door)", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.TopDoor (Door) -> OuterWellspring.TopDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.TopDoor (Door)", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.TrialActivation", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.TopDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.EastDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.AboveWestDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.RightWallOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> WestGlades.MillApproach", player), lambda s: s.has_any(("Grapple", "Glide"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.EntranceDoor", player), lambda s: s.has_any(("Clean Water", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> C.OuterWellspring.TrialApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.TrialApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEC", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "OuterWellspring.TrialApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEC", player), lambda s: s.has_any(("Glide", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "OuterWellspring.TrialApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEC", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "OuterWellspring.TrialApproach", s, player, options, True), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.TrialRoom", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.TrialRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.EastDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.EastDoor", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom -> C.OuterWellspring.TrialRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom -> H.OuterWellspring.TrialRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom -> E.OuterWellspring.TrialRoom", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom -> OuterWellspring.TrialStart", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom -> OuterWellspring.TrialStart", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom -> OuterWellspring.TrialApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> C.OuterWellspring.TrialStart", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> OuterWellspring.TrialOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> OuterWellspring.SpiritTrial", player), lambda s: s.has_all(("OuterWellspring.TrialActivation", "Double Jump", "Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> OuterWellspring.TrialRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> OuterWellspring.TrialRoom", player), lambda s: s.has_all(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> OuterWellspring.TrialRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor (Door) -> OuterWellspring.EntranceDoor (Door)", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor (Door) -> InnerWellspring.EntranceDoor", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.EntranceDoor (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> C.InnerWellspring.EntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> E.InnerWellspring.EntranceDoor", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThreeWheels", player), lambda s: has_enough_resources([('wall', ('BreakWall', 3))], [], "InnerWellspring.EntranceDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.WaterDashSwitch", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThreeWheelsEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.EntranceDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThreeWheelsEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThreeWheelsEX", player), lambda s: s.has("InnerWellspring.ThreeWheels", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.WaterSwitchEX", player), lambda s: s.has_all(("InnerWellspring.WaterDashSwitch", "Clean Water"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThornShardArea", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThornShardArea", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThornShardArea", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.EntranceDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThornShardArea", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.DrainRoom", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("InnerWellspring.ThreeWheels", "Grapple"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("InnerWellspring.ThreeWheels", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.EntranceDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ShortcutLever", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ShortcutLever", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> C.InnerWellspring.ThornShardArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornShard", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.EntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.ShortCutWheel", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.EntranceDoor", player), lambda s: s.has_any(("Grapple", "Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.WestDoor", player), lambda s: s.has_all(("InnerWellspring.ShortCutWheel", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.WestDoor", player), lambda s: s.has_all(("InnerWellspring.ShortCutWheel", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.WestDoor", player), lambda s: s.has_all(("InnerWellspring.ShortCutWheel", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> C.InnerWellspring.DrainRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> E.InnerWellspring.DrainRoom", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomBottomWheel", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and has_enough_resources([('wall', ('BreakWall', 16))], [], "InnerWellspring.DrainRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.EntranceDoor", player), lambda s: s.has_any(("Double Jump", "Dash", "Grapple", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Glide", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "InnerWellspring.DrainRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("InnerWellspring.DrainRoomBottomWheel", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("InnerWellspring.DrainRoomBottomWheel", "Dash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Dash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaEntrance", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has_any(("Double Jump", "Dash", "Grapple", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainHC", player), lambda s: s.has_any(("Clean Water", "Double Jump", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainHC", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainAreaEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Dash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainAreaEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("Grapple", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainAreaEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainHC", player), lambda s: s.has_any(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainAreaExit", player), lambda s: s.has_any(("Double Jump", "Dash", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "InnerWellspring.DrainAreaEX", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainAreaExit", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 10)), ('energy', ('Grenade', 1))], [], "InnerWellspring.DrainAreaEX", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> C.InnerWellspring.DrainAreaExit", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainAreaEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Dash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainAreaExit", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "InnerWellspring.DrainAreaExit", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has_any(("Clean Water", "InnerWellspring.DrainRoomBottomWheel"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoomTopWheel", player), lambda s: s.has_any(("Bow", "Grenade", "Spear"), player) and has_enough_resources([('wall', ('BreakWall', 16))], [], "InnerWellspring.DrainRoomCenter", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoomTopWheel", player), lambda s: s.has("Launch", player) and has_enough_resources([('wall', ('BreakWall', 16))], [], "InnerWellspring.DrainRoomCenter", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoom", player), lambda s: s.has_any(("Grapple", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainAreaEntrance", player), lambda s: s.has("InnerWellspring.DrainLever", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoomTop", player), lambda s: s.has_any(("InnerWellspring.DrainRoomTopWheel", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> C.InnerWellspring.DrainRoomTop", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> H.InnerWellspring.DrainRoomTop", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.LaserOre", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.LaserOre", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.LaserOre", player), lambda s: s.has_all(("Dash", "Glide"), player) and has_enough_resources([], [('combat', 'Miner')], "InnerWellspring.DrainRoomTop", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.LaserOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.DrainRoomCenter", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has_all(("InnerWellspring.DrainRoomTopWheel", "Grapple"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> C.InnerWellspring.BelowDrainLever", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.DrainLever", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.BelowDrainLever", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.DrainLever", player), lambda s: s.has_all(("InnerWellspring.UpperCorruption", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.DrainLever", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.LeverEC", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "InnerWellspring.BelowDrainLever", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.LeverEC", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.BelowDrainLever", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.LeverEC", player), lambda s: s.has_all(("InnerWellspring.UpperCorruption", "Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.BelowDrainLever", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.LeverEC", player), lambda s: s.has_all(("InnerWellspring.UpperCorruption", "Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.LeverEC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.AbovePole", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.AbovePole", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.WestDoor", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.BelowDrainLever", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.WestDoor", player), lambda s: s.has_any(("InnerWellspring.UpperCorruption", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.DrainRoomTop", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.DrainRoomCenter", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.AbovePole -> InnerWellspring.UpperCorruption", player), lambda s: has_enough_resources([('wall', ('BreakWall', 16))], [], "InnerWellspring.AbovePole", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.AbovePole -> InnerWellspring.LupoEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.AbovePole -> InnerWellspring.BelowDrainLever", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor (Door) -> OuterWellspring.WestDoor (Door)", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.WestDoor (Door) -> InnerWellspring.WestDoor", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.WestDoor (Door)", player), lambda s: s.has("InnerWellspring.MiddleDoorsOpen", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> C.InnerWellspring.WestDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> H.InnerWellspring.WestDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> E.InnerWellspring.WestDoor", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.MiddleDoorsOpen", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.MiddleDoorsOpen", player), lambda s: s.has_all(("Bash", "Launch"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.WestDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.ShortcutWheelEX", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.LupoMap", player), lambda s: s.has("Grapple", player) and can_buy_map(s, player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.LupoMap", player), lambda s: s.has("Bash", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.LupoMap", player), lambda s: s.has("InnerWellspring.UpperCorruption", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTreeEX", player), lambda s: s.has_all(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "InnerWellspring.WestDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.WestDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTree", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTree", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.WestDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.BelowDrainLever", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor (Door) -> OuterWellspring.EastDoor (Door)", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.EastDoor (Door) -> InnerWellspring.EastDoor", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.EastDoor (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> C.InnerWellspring.EastDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> H.InnerWellspring.EastDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> E.InnerWellspring.EastDoor", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.SpinArena", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and has_enough_resources([('combat', 'Lizard'), ('combat', 'Lizard'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Miner')], [], "InnerWellspring.EastDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.SpinningRoomOpen", player), lambda s: s.has("InnerWellspring.SpinArena", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 16))], [], "InnerWellspring.EastDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.HandToHandHerbs", player), lambda s: s.has("GladesTown.HandToHandPouch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.SpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinningRoomOpen", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("InnerWellspring.TopDoorOpen", "Grapple"), player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("InnerWellspring.TopDoorOpen", "Bash"), player) and s.has_any(("Double Jump", "Launch"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.EastDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("InnerWellspring.TopDoorOpen", "Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> C.InnerWellspring.SpinPuzzle", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has_all(("Grapple", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.SpinPuzzle", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.RotateRoomEX", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.RotateRoomOre", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player) and s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.EastDoor", player), lambda s: s.has("InnerWellspring.SpinningRoomOpen", player) and s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.EastDoor", player), lambda s: s.has_all(("InnerWellspring.SpinningRoomOpen", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.SpinPuzzle", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> C.InnerWellspring.PastSpinPuzzle", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('combat', 'Miner')], [], "InnerWellspring.PastSpinPuzzle", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.SpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player) and s.has_any(("Double Jump", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.SpinPuzzle", player), lambda s: s.has_all(("InnerWellspring.SpinPuzzleSolved", "Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> C.InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Launch"), player) and has_enough_resources([('combat', 'Slug'), ('combat', 'Slug')], [], "InnerWellspring.GrappleThroughZigZagSpikes", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.PastSpinPuzzle", player), lambda s: s.has_all(("Glide", "Bash"), player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.TopDoorOpen", player), lambda s: has_enough_resources([('wall', ('BreakWall', 16))], [], "InnerWellspring.TopSecondRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.NeedleQI", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.EastDoor", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Glide", "Bash"), player) and s.has_any(("Clean Water", "Double Jump", "Dash", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Glide", player) and s.has_any(("Clean Water", "Double Jump", "Dash", "Grapple", "Launch"), player) and has_enough_resources([('combat', 'Miner')], [], "InnerWellspring.TopSecondRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player) and has_enough_resources([], [('combat', 'Miner')], "InnerWellspring.TopSecondRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Launch", "Clean Water"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter (Door) -> OuterWellspring.TopDoor (Door)", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.Teleporter (Door) -> InnerWellspring.Teleporter", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.Teleporter (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> F.InnerWellspring.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.BlueMoonSeed", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.BlueMoonSeed", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.BlueMoonSeed", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.LibraryEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.AboveTpEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.AboveTpEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.AboveTpEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.SwimOre", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> OpherShop", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has_all(("Double Jump", "Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "InnerWellspring.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> F.InnerWellspring.EscapeSequence", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Bash", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Bash", "Grapple", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.EscapeRevisitEX", player), lambda s: s.has("InnerWellspring.WaterEscape", player), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> C.WoodsEntry.ShriekMeet", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> WoodsEntry.FirstMud", player), lambda s: s.has_any(("Bash", "Launch"), player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsEntry.ShriekMeet", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> WoodsEntry.FirstMud", player), lambda s: has_enough_resources([('combat', 'Balloon')], [('combat', 'Tentacle')], "WoodsEntry.ShriekMeet", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> EastHollow.Kwolok", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water"), player) and can_enter_area(EastHollow, s, player, options), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> C.WoodsEntry.FirstMud", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.MudPitEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.MudPitEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WoodsEntry.FirstMud", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.BelowTeleporter", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsEntry.FirstMud", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.BelowTeleporter", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsEntry.FirstMud", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.ShriekMeet", player), lambda s: s.has_any(("Bash", "Launch"), player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsEntry.FirstMud", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.ShriekMeet", player), lambda s: has_enough_resources([('combat', 'Balloon')], [('combat', 'Tentacle')], "WoodsEntry.FirstMud", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsEntry.FamilyHut (Door) -> WoodsEntry.FamilyHutInside (Door)", player), lambda s: True)
    add_rule(world.get_entrance("WoodsEntry.FamilyHut (Door) -> WoodsEntry.FamilyHut", player), lambda s: True)
    add_rule(world.get_entrance("WoodsEntry.FamilyHut -> WoodsEntry.FamilyHut (Door)", player), lambda s: s.has("GladesTown.FamilyReunionKey", player), "or")
    add_rule(world.get_entrance("WoodsEntry.FamilyHut -> WoodsEntry.FirstMud", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.FamilyHut -> WoodsEntry.ShriekMeet", player), lambda s: has_enough_resources([('combat', 'Balloon')], [], "WoodsEntry.FamilyHut", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsEntry.FamilyHut -> WoodsEntry.Teleporter", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.FamilyHut -> WoodsEntry.Teleporter", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsEntry.FamilyHut -> WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsEntry.FamilyHut", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsEntry.FamilyHutInside (Door) -> WoodsEntry.FamilyHut (Door)", player), lambda s: True)
    add_rule(world.get_entrance("WoodsEntry.FamilyHutInside (Door) -> WoodsEntry.FamilyHutInside", player), lambda s: True)
    add_rule(world.get_entrance("WoodsEntry.FamilyHutInside -> WoodsEntry.FamilyHutInside (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.FamilyHutInside -> WoodsEntry.DollQI", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> C.WoodsEntry.BelowTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.FirstMud", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsEntry.BelowTeleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsEntry.BelowTeleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and has_enough_resources([('combat', 'Balloon'), ('combat', 'Balloon')], [], "WoodsEntry.BelowTeleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> F.WoodsEntry.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LastTreeBranch", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.TreeSeed", player), lambda s: s.has("TuleyShop.LastTreeBranchRejected", player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.TpEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LeafPileEX", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Launch"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsEntry.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.FirstMud", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.BelowTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.FamilyHut", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> C.WoodsEntry.TwoKeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> E.WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has_all(("WoodsEntry.KeystoneDoor", "BreakCrystal"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> WoodsEntry.KeystoneDoor", player), lambda s: can_open_door(WoodsEntry.KeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> WoodsEntry.LowerKS", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> WoodsEntry.UpperKS", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has("WoodsEntry.KeystoneDoor", player) and s.has_any(("Bash", "Launch"), player) and can_enter_area(WoodsMain, s, player, options), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has("WoodsEntry.KeystoneDoor", player) and can_enter_area(WoodsMain, s, player, options) and has_enough_resources([], [('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Tentacle')], "WoodsEntry.TwoKeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> WoodsEntry.BelowTeleporter", player), lambda s: s.has_any(("Double Jump", "Glide", "Launch"), player) and has_enough_resources([('combat', 'Balloon'), ('combat', 'Balloon')], [], "WoodsEntry.TwoKeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> C.WoodsMain.AfterKuMeet", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsEntry.KeystoneDoor", player), lambda s: can_open_door(WoodsEntry.KeystoneDoor, s, player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsEntry.KeystoneDoor", player), lambda s: can_open_door(WoodsEntry.KeystoneDoor, s, player) and has_enough_resources([], [('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Tentacle')], "WoodsMain.AfterKuMeet", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has_any(("Bash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("WoodsEntry.KeystoneDoor", player) and s.has_any(("Bash", "Launch"), player) and can_enter_area(WoodsEntry, s, player, options), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("WoodsEntry.KeystoneDoor", player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([], [('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Tentacle')], "WoodsMain.AfterKuMeet", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.LowerLeafPileEX", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Flap", "Glide"), player) and has_enough_resources([('combat', 'Balloon'), ('combat', 'Balloon')], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('combat', 'Balloon'), ('combat', 'Balloon'), ('energy', ('Grenade', 3))], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash", "Glide"), player) and has_enough_resources([('combat', 'Balloon'), ('combat', 'Balloon'), ('energy', ('Grenade', 1))], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has("Launch", player) and has_enough_resources([('combat', 'Balloon'), ('combat', 'Balloon')], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2)), ('db', 10)], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 10)], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.BehindWallOre", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [], "WoodsMain.WallOreLedge", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.BelowKeystonesEX", player), lambda s: s.has_all(("Glide", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.FourKeystoneRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> C.WoodsMain.FourKeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.KeystoneDoor", player), lambda s: can_open_door(WoodsMain.KeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: s.has("Flap", player) and s.has_any(("Double Jump", "Glide"), player) and has_enough_resources([('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Skeeto')], [], "WoodsMain.FourKeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: s.has_all(("Bash", "Flap"), player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.MiddleLeafPileEX", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.RightKS", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.RightKS", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.FourKeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.UpperKS", player), lambda s: s.has_any(("Glide", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "WoodsMain.FourKeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.UpperKS", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 3)), ('energy', ('Grenade', 1))], [], "WoodsMain.FourKeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LeftKS", player), lambda s: s.has("Glide", player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsMain.FourKeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LowerKS", player), lambda s: s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LowerKS", player), lambda s: s.has_all(("WoodsMain.KSRoomYellowBarrierBroken", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LowerKS", player), lambda s: s.has_all(("WoodsMain.KSRoomYellowBarrierBroken", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.GiantSkull", player), lambda s: s.has("WoodsMain.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> C.WoodsMain.GiantSkull", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.KeystoneDoor", player), lambda s: can_open_door(WoodsMain.KeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.UpperLeafPileEX", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_any(("Bash", "Launch"), player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsMain.GiantSkull", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsMain.GiantSkull", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BalloonLure", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsMain.GiantSkull", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.FourKeystoneRoom", player), lambda s: s.has("WoodsMain.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> C.WoodsMain.BalloonLure", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has("Glide", player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "WoodsMain.BalloonLure", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.has_all(("WoodsMain.BalloonLureBlobDestroyed", "Flap", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("WoodsMain.BalloonLureBlobDestroyed", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.GiantSkull", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.GiantSkull", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has_any(("Grenade", "Blaze"), player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "WoodsMain.BelowHiddenOre", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.HiddenOre", player), lambda s: s.has_all(("Flap", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.YellowWallEX", player), lambda s: s.has("WoodsMain.BalloonLureYellowBarrierBroken", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.PetrifiedHowl", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.BalloonLure", player), lambda s: s.has("WoodsMain.BalloonLureBlobDestroyed", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.BalloonLure", player), lambda s: s.has("WoodsMain.BalloonLureBlobDestroyed", player) and has_enough_resources([], [('combat', 'Tentacle')], "WoodsMain.BelowHiddenOre", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> C.WoodsMain.PetrifiedHowl", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> H.WoodsMain.PetrifiedHowl", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.PetrifiedHowlEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.AboveHowl", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BrokenOwl", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "WoodsMain.PetrifiedHowl", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BelowHiddenOre", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BelowHiddenOre", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl -> C.WoodsMain.BrokenOwl", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl -> WoodsMain.AboveHowl", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl -> WoodsMain.AboveHowl", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WoodsMain.BrokenOwl", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl -> WoodsMain.TrialStart", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl -> WoodsMain.TrialStart", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.BrokenOwl", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart -> WoodsMain.SpiritTrial", player), lambda s: s.has_all(("WoodsMain.TrialActivation", "Double Jump", "Dash", "Bash", "Grapple", "Burrow"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart -> WoodsMain.BrokenOwl", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart -> WoodsMain.MidwayTrial", player), lambda s: s.has_all(("Double Jump", "Bash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart -> WoodsMain.MidwayTrial", player), lambda s: s.has_all(("Launch", "Grapple", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> C.WoodsMain.MidwayTrial", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.TrialEnd", player), lambda s: s.has_all(("Double Jump", "Bash", "Burrow"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.TrialEnd", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> C.WoodsMain.TrialEnd", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.TrialActivation", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.OverflowShard", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.OverflowShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.BeforeLog", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.HiddenEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.PetrifiedHowl", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.BrokenOwl", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.BeforeLog", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsMain.AboveHowl", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player) and has_enough_resources([('combat', 'Balloon'), ('energy', ('Grenade', 1))], [], "WoodsMain.AboveHowl", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.BeforeLog", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog -> C.WoodsMain.BeforeLog", player), lambda s: has_enough_resources([('combat', 'Balloon')], [], "WoodsMain.BeforeLog", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog -> WoodsMain.LogBlobDestroyed", player), lambda s: has_enough_resources([('combat', 'Balloon'), ('wall', ('BreakWall', 3))], [], "WoodsMain.BeforeLog", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog -> WoodsMain.Teleporter", player), lambda s: s.has("WoodsMain.LogBlobDestroyed", player) and has_enough_resources([('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon')], [], "WoodsMain.BeforeLog", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog -> WoodsMain.AboveHowl", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> F.WoodsMain.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.AbovePit", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.AbovePit", player), lambda s: s.has_all(("Double Jump", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree -> WoodsMain.AbovePit", player), lambda s: s.has_any(("Bash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree -> WoodsMain.BeforeLog", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.OrangeTree", player), lambda s: s.has_any(("Bash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.FeedingGrounds", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.FeedingGrounds", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.FeedingGrounds", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.AbovePit", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> C.WoodsMain.FeedingGrounds", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> WoodsShrine", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> WoodsShrine", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("Grapple", "Glide"), player) and s.has_any(("Double Jump", "Dash", "Launch"), player) and can_enter_area(LowerWastes, s, player, options), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("WindtornRuins.Seir", "Double Jump", "Bash", "Grapple"), player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.FeedingGrounds", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("WindtornRuins.Seir", "Grapple", "Glide"), player) and can_enter_area(LowerWastes, s, player, options), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("WindtornRuins.Seir", "Burrow"), player) and can_enter_area(LowerWastes, s, player, options), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("WindtornRuins.Seir", "Launch"), player) and can_enter_area(LowerWastes, s, player, options), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> WoodsMain.AbovePit", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> WoodsMain.AbovePit", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsShrine -> F.WoodsShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsShrine -> WoodsMain.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and has_enough_resources([('combat', 'Hornbug'), ('combat', 'Lizard'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'CrystalMiner'), ('combat', 'CrystalMiner'), ('combat', 'Bat'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Bat'), ('db', 80)], [], "WoodsShrine", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsShrine -> WoodsMain.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Hornbug'), ('combat', 'Lizard'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'CrystalMiner'), ('combat', 'CrystalMiner'), ('combat', 'Bat'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Bat'), ('db', 65)], [], "WoodsShrine", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsShrine -> WoodsMain.CombatShrineCompleted", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and has_enough_resources([('combat', 'Hornbug'), ('combat', 'Lizard'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'CrystalMiner'), ('combat', 'CrystalMiner'), ('combat', 'Bat'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Bat'), ('db', 50)], [], "WoodsShrine", s, player, options, True), "or")
    add_rule(world.get_entrance("WoodsShrine -> WoodsMain.ShrineEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsShrine -> WoodsMain.CombatShrine", player), lambda s: s.has("WoodsMain.CombatShrineCompleted", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> C.LowerReach.Entry", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Entry -> H.LowerReach.Entry", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.BearSneezed", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.ThawBaurFurnace", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken", "Bash", "Flap"), player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.ThawBaurFurnace", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Entry", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.FreezeBaurFurnace", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken", "Flap"), player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.BelowBaurEX", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken", "Double Jump", "Dash", "Bash", "Flap"), player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.BelowBaurEX", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Entry", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.BelowBaurEX", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: s.has_all(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "LowerReach.Entry", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> WestGlades.Upper", player), lambda s: s.has("LowerReach.BearSneezed", player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> C.LowerReach.AboveEntry", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("LowerReach.FreezeBaurFurnace", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.AboveEntry", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("LowerReach.ThawBaurFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "LowerReach.AboveEntry", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurUpperEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurUpperEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Double Jump", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Icefall", player), lambda s: s.has_any(("LowerReach.ThawBaurFurnace", "Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Entry", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> C.LowerReach.Icefall", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> E.LowerReach.Icefall", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.BearBridgeBroken", player), lambda s: s.has("LowerReach.BearSneezed", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.LeftFurnace", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Icefall", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.LeftFurnace", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('combat', 'Nest')], [], "LowerReach.Icefall", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.LeftFurnace", player), lambda s: s.has("Launch", player) and s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Icefall", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.LeftFurnace", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Grenade', 1))], [('combat', 'Nest')], "LowerReach.Icefall", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Nest')], [], "LowerReach.Icefall", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Grapple"), player) and has_enough_resources([('combat', 'Nest')], [], "LowerReach.Icefall", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Launch"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Launch"), player) and has_enough_resources([], [('combat', 'Nest')], "LowerReach.Icefall", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Launch", "Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.AboveEntry", player), lambda s: s.has_any(("LowerReach.ThawBaurFurnace", "Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.Entry", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths -> C.LowerReach.CentralEnemyPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths -> LowerReach.Central", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "LowerReach.Central", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.LupoMap", player), lambda s: s.has("Launch", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.LupoMap", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.LupoMap", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Bash"), player) and can_buy_map(s, player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Central", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.SecondSoup", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Central", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.Entry", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.Entry", player), lambda s: s.has_all(("LowerReach.Lever", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> C.LowerReach.OutsideTPRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> F.LowerReach.OutsideTPRoom", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.OutsideTPRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> H.LowerReach.OutsideTPRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> E.LowerReach.OutsideTPRoom", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.AboveDoorEX", player), lambda s: s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.AboveDoorEX", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1))], "LowerReach.OutsideTPRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.LupoMap", player), lambda s: can_buy_map(s, player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.TPLeftEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.TPLeftEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump", "Bash"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump", "Bash"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "LowerReach.OutsideTPRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.SecondSoup", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_any(("Double Jump", "Dash", "Bash", "Glide", "Launch", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.CentralEnemyPaths", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1))], "LowerReach.OutsideTPRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.Teleporter", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.OutsideTPRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.BelowTokk", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.BelowTokk", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> C.LowerReach.BelowTokk", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> LowerReach.OutsideTPRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash"), player) and can_enter_area(UpperReach, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and can_enter_area(UpperReach, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.BelowTokk", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.KeystoneRoom", player), lambda s: s.has("Launch", player) and can_enter_area(UpperReach, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "Double Jump", "Dash", "Bash"), player) and can_enter_area(UpperReach, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "Double Jump", "Bash"), player) and can_enter_area(UpperReach, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.BelowTokk", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "Launch"), player) and can_enter_area(UpperReach, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.Teleporter -> F.LowerReach.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Teleporter -> Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Teleporter -> LowerReach.OutsideTPRoom", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Teleporter -> LowerReach.EastEnemyPaths", player), lambda s: s.has("LowerReach.TPLantern", player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.ThawCentralFurnace", player), lambda s: s.has_all(("Flap", "Bash", "Double Jump", "Dash"), player) and has_enough_resources([('combat', 'ShieldMiner')], [], "LowerReach.SecondSoup", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.MeltIceEX", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.SecondSoup", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.BurrowEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "LowerReach.SecondSoup", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Burrow"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.BelowLupo", player), lambda s: s.has_any(("Bash", "Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.BelowLupo", player), lambda s: has_enough_resources([], [('combat', 'ShieldMiner')], "LowerReach.SecondSoup", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.ThawCentralFurnace", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.BelowLupo", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.FreezeCentralFurnace", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.BelowLupoEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.BelowLupo", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.BelowLupoEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.BelowLupoEX", player), lambda s: s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.SecondSoup", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.SecondSoup", player), lambda s: has_enough_resources([], [('combat', 'ShieldMiner')], "LowerReach.BelowLupo", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.CentralFurnacePedestal", player), lambda s: s.has_any(("LowerReach.ThawCentralFurnace", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> C.LowerReach.CentralFurnacePedestal", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> E.LowerReach.CentralFurnacePedestal", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> E.LowerReach.CentralFurnacePedestal", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> E.LowerReach.CentralFurnacePedestal", player), lambda s: s.has("Sword", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'ShieldMiner')], [], "LowerReach.CentralFurnacePedestal", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> E.LowerReach.CentralFurnacePedestal", player), lambda s: has_enough_resources([('combat', 'ShieldMiner'), ('energy', ('Bow', 1))], [], "LowerReach.CentralFurnacePedestal", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> LowerReach.ThawCentralFurnace", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.CentralFurnacePedestal", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> LowerReach.FreezeCentralFurnace", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> LowerReach.BelowLupo", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> LowerReach.BelowLupo", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.CentralFurnacePedestal", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> LowerReach.WindChannel", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> LowerReach.WindChannel", player), lambda s: has_enough_resources([], [('combat', 'ShieldMiner')], "LowerReach.CentralFurnacePedestal", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> C.LowerReach.WindChannel", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindLantern", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.WindChannel", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.BreakWallEX", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerReach.WindChannel", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindBottomEX", player), lambda s: s.has_all(("LowerReach.WindLantern", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: s.has_all(("LowerReach.WindLantern", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.CentralFurnacePedestal", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.CentralFurnacePedestal", player), lambda s: has_enough_resources([], [('combat', 'ShieldMiner')], "LowerReach.WindChannel", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.SoupMoki", player), lambda s: s.has_all(("LowerReach.WindLantern", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> E.LowerReach.SoupMoki", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.HandToHandHat", player), lambda s: s.has("LowerReach.HandToHandSoup", player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindChannel", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.SoupMoki", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.EastEnemyPaths", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.EastEnemyPaths -> F.LowerReach.EastEnemyPaths", player), lambda s: s.has("LowerReach.TPLantern", player), "or")
    add_rule(world.get_entrance("LowerReach.EastEnemyPaths -> LowerReach.East", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.East -> LowerReach.Teleporter", player), lambda s: s.has("LowerReach.TPLantern", player), "or")
    add_rule(world.get_entrance("LowerReach.East -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerReach.East", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.East -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.East -> LowerReach.SoupMoki", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.SnowballEnemyPaths -> C.LowerReach.SnowballEnemyPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.SnowballEnemyPaths -> LowerReach.Snowball", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.TPLantern", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Snowball", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.TPLantern", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [('combat', 'WeakSlug')], "LowerReach.Snowball", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.RolledSnowball", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Snowball", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.RolledSnowball", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [('combat', 'Mantis')], "LowerReach.Snowball", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.SnowballHC", player), lambda s: s.has_all(("LowerReach.RolledSnowball", "Burrow"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.SnowballHC", player), lambda s: s.has_all(("LowerReach.RolledSnowball", "Burrow"), player) and has_enough_resources([], [('db', 20)], "LowerReach.Snowball", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.EastEnemyPaths", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('combat', 'WeakSlug')], [], "LowerReach.Snowball", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.EastEnemyPaths", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.EastEnemyPaths", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.SoupMoki", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player) and s.has_any(("Double Jump", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.PastSnowball", player), lambda s: s.has_all(("LowerReach.RolledSnowball", "Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Snowball", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.PastSnowball", player), lambda s: s.has_all(("LowerReach.RolledSnowball", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerReach.Snowball", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> C.LowerReach.PastSnowball", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> E.LowerReach.PastSnowball", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Bash", "Launch"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.PastSnowball", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.IceCavern", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.PastSnowball", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.IceCavern", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("LowerReach.RolledSnowball", "LowerReach.ThawCentralFurnace"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("LowerReach.RolledSnowball", "LowerReach.ThawCentralFurnace"), player) and has_enough_resources([], [('combat', 'Lizard')], "LowerReach.PastSnowball", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("LowerReach.RolledSnowball", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.RoofRightEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.PastSnowball", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.EastDoorLantern", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.HalfwayIceCavern", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.EastDoorLantern", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.HalfwayIceCavern", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.SwimmingPool", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.SwimmingPool", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.IceCavern", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.IceCavern", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> E.LowerReach.SwimmingPool", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("LowerReach.FreezeEastFurnace", "Clean Water"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.FractureShard", player), lambda s: s.has_all(("LowerReach.ThawEastFurnace", "Clean Water"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "LowerReach.FreezeEastFurnace", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.SwimmingPool", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Launch"), player) and s.has_any(("LowerReach.FreezeEastFurnace", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.EastFurnace", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.SwimmingPool", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.EastFurnace", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.EastFurnace -> C.LowerReach.EastFurnace", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.EastFurnace -> LowerReach.ThawEastFurnace", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.EastFurnace", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.EastFurnace -> LowerReach.FreezeEastFurnace", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.EastFurnace -> LowerReach.PastSnowball", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerReach.EastFurnace", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.EastFurnace -> LowerReach.SwimmingPool", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> C.LowerReach.ArenaArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> H.LowerReach.ArenaArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> E.LowerReach.ArenaArea", player), lambda s: s.has_all(("BreakCrystal", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> E.LowerReach.ArenaArea", player), lambda s: s.has_all(("BreakCrystal", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.ArenaBeaten", player), lambda s: s.has("Regenerate", player) and has_enough_resources([('db', 40), ('combat', 'ShieldMiner'), ('combat', 'ShieldMiner'), ('combat', 'ShieldMiner'), ('combat', 'Hornbug'), ('combat', 'Bee'), ('combat', 'Bee')], [], "LowerReach.ArenaArea", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.TrialStart", player), lambda s: s.has("LowerReach.ArenaBeaten", player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.WindSpinners", player), lambda s: s.has_all(("LowerReach.ArenaBeaten", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.SwimmingPool", player), lambda s: s.has("LowerReach.EastDoorLantern", player) and s.has_any(("LowerReach.FreezeEastFurnace", "Clean Water"), player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.SwimmingPool", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Launch", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has("Glide", player) and s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.WindSpinners", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.ArenaArea", player), lambda s: s.has_all(("Glide", "LowerReach.ArenaBeaten"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> C.LowerReach.WispPathCheckpoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> H.LowerReach.WispPathCheckpoint", player), lambda s: s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> E.LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> E.LowerReach.WispPathCheckpoint", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.BridgeWispPath", player), lambda s: s.has("Bash", player) and s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.BridgeWispPath", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 3))], "LowerReach.WispPathCheckpoint", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.WindSpinners", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> C.LowerReach.BridgeWispPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.SnowEscape", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has_any(("Double Jump", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.BridgeWispPath", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.SnowEscape", player), lambda s: s.has_all(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.WispPathCheckpoint", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.WispPathCheckpoint", player), lambda s: has_enough_resources([('combat', 'WeakSlug'), ('combat', 'Miner')], [], "LowerReach.BridgeWispPath", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> F.LowerReach.SnowEscape", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has_all(("Dash", "Bash", "Grapple", "Glide"), player) and s.has_any(("Clean Water", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has_all(("Bash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has_all(("Dash", "Bash", "Grapple", "Glide"), player) and s.has_any(("Clean Water", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has_all(("Bash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.EscapeRevisitEX", player), lambda s: s.has("LowerReach.ForestsMemory", player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> C.LowerReach.VeralHome", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.HandToHandSoup", player), lambda s: s.has("InnerWellspring.HandToHandHerbs", player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> GladesTown.LeafPileEX", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.CatalystShard", player), lambda s: s.has_all(("Clean Water", "Bash", "Flap"), player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.CatalystShard", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.VeralHome", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> GladesTown.HoleHut", player), lambda s: s.has_any(("Dash", "Glide"), player) and can_enter_area(GladesTown, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> GladesTown.PlayfulMoki", player), lambda s: can_enter_area(GladesTown, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "LowerReach.VeralHome", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.TownEntry", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.VeralHome", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.TrialStart", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> C.LowerReach.TrialStart", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.KeystoneDoor", player), lambda s: can_open_door(LowerReach.KeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TrialActivation", player), lambda s: s.has("LowerReach.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.SpiritTrial", player), lambda s: s.has_all(("LowerReach.TrialActivation", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.RightKS", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.RightKS", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.TrialStart", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.RightKS", player), lambda s: s.has("Launch", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.RightKS", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 20)], "LowerReach.TrialStart", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.UpperLeftKS", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.MiddleLeftKS", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.BottomLeftKS", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TrialEX", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TownEntry", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.ArenaBeaten", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> LowerReach.BelowTokk", player), lambda s: s.has("Burrow", player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> C.UpperReach.KeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.ThawFurnace", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.KeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.ThawFurnace", player), lambda s: s.has_all(("Flap", "Bash"), player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.FreezeFurnace", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.LowerKS", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.LowerKS", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.KeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.LowerKS", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.LowerKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> Tokk", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('combat', 'ShieldMiner'), ('energy', ('Grenade', 1))], [], "UpperReach.KeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.KeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Double Jump", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Double Jump", "Bash", "Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.KeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoupFrozen", player), lambda s: s.has_all(("UpperReach.FreezeFurnace", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoupFrozen", player), lambda s: s.has_all(("UpperReach.FreezeFurnace", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.KeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Clean Water"), player) and s.has_any(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Clean Water"), player) and has_enough_resources([], [('combat', 'ShieldMiner')], "UpperReach.KeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Double Jump"), player) and s.has_any(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Clean Water", "Water Dash", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.KeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> LowerReach.BelowTokk", player), lambda s: can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.KeystoneSnapPlantPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.KeystoneSnapPlantThawedPaths", player), lambda s: s.has("UpperReach.ThawFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.UpperSoup", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed -> UpperReach.KeystoneSnapPlantPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed -> UpperReach.KeystoneSnapPlantThawedPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed -> UpperReach.UpperSoupThawed", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths -> UpperReach.MiddleLeftKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths -> UpperReach.KeystoneRoom", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths -> UpperReach.LowerKS", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoup -> UpperReach.UpperSoupPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoup -> UpperReach.UpperSoupFrozenPaths", player), lambda s: s.has("UpperReach.FreezeFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoup -> UpperReach.UpperSoupThawedPaths", player), lambda s: s.has("UpperReach.ThawFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozen -> UpperReach.UpperSoupPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozen -> UpperReach.UpperSoupFrozenPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawed -> UpperReach.UpperSoupPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawed -> UpperReach.UpperSoupThawedPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> C.UpperReach.UpperSoupPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> H.UpperReach.UpperSoupPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.SoupOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.UpperKS", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.UpperKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.SwingPoleEX", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.SwingPoleEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.UpperSoupPaths", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.SwingPoleEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.KeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.KeystoneSnapPlant", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozenPaths -> C.UpperReach.UpperSoupFrozenPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths -> C.UpperReach.UpperSoupThawedPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths -> UpperReach.LowerKS", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths -> UpperReach.MiddleRightKS", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths -> UpperReach.MiddleRightKS", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.UpperSoupThawedPaths", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths -> UpperReach.MiddleRightKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths -> UpperReach.OutsideTreeRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> C.UpperReach.OutsideTreeRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> E.UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "BreakCrystal", "Clean Water", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> E.UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "BreakCrystal", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> UpperReach.KeystoneDoor", player), lambda s: can_open_door(UpperReach.KeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> UpperReach.SwimEX", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Clean Water"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.OutsideTreeRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> UpperReach.TreeRoomLedge", player), lambda s: s.has("UpperReach.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge -> UpperReach.KeystoneDoor", player), lambda s: can_open_door(UpperReach.KeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge -> UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.TreeRoomLedge", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge -> UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.TreeRoomLedge", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge -> UpperReach.TreeOre", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge -> UpperReach.TreeRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom (Door) -> UpperReach.SeedHut (Door)", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.TreeRoom (Door) -> UpperReach.TreeRoom", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.TreeRoom (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> E.UpperReach.TreeRoom", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.LightBurstTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.WellEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.HiddenEX", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.TreeRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.TreeRoomLedge", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 3))], [], "UpperReach.TreeRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.TreeRoomLedge", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.SeedHut (Door) -> UpperReach.TreeRoom (Door)", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.SeedHut (Door) -> UpperReach.SeedHut", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.SeedHut -> UpperReach.SeedHut (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.SeedHut -> UpperReach.SpringSeed", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.SeedHut", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> UpperDepths.EntrySpikesEX", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> UpperDepths.FirstFirefly", player), lambda s: s.has("Glide", player) and has_enough_resources([('combat', 'BombSlug'), ('combat', 'BombSlug'), ('combat', 'Bat'), ('combat', 'Bat'), ('combat', 'SneezeSlug')], [], "UpperDepths.Entry", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Glide", "Bash"), player) and has_enough_resources([('combat', 'BombSlug'), ('combat', 'BombSlug')], [], "UpperDepths.Entry", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> EastHollow.AboveDepths", player), lambda s: s.has_all(("EastHollow.DepthsOpen", "Glide"), player) and can_enter_area(EastHollow, s, player, options), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> C.UpperDepths.FirstFirefly", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryRoofEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryRoofEX", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryRoofEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryOre", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and has_enough_resources([('combat', 'Bat')], [], "UpperDepths.FirstFirefly", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryOre", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.LeftEntryKS", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1)), ('combat', 'Spiderling')], [], "UpperDepths.FirstFirefly", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.LeftEntryKS", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.FirstFirefly", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.LeftEntryKS", player), lambda s: s.has("Launch", player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.FirstFirefly", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.LeftEntryKS", player), lambda s: s.has_any(("Double Jump", "Bash", "Launch"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "UpperDepths.FirstFirefly", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.LeftEntryKS", player), lambda s: has_enough_resources([('energy', ('Bow', 1))], [('combat', 'Spiderling')], "UpperDepths.FirstFirefly", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.LeftEntryKS", player), lambda s: s.has_any(("Double Jump", "Bash", "Launch"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "UpperDepths.FirstFirefly", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.LeftEntryKS", player), lambda s: has_enough_resources([('energy', ('Spear', 1))], [('combat', 'Spiderling')], "UpperDepths.FirstFirefly", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.Entry", player), lambda s: s.has("Glide", player) and has_enough_resources([('combat', 'BombSlug'), ('combat', 'BombSlug'), ('combat', 'Bat'), ('combat', 'Bat'), ('combat', 'SneezeSlug')], [], "UpperDepths.FirstFirefly", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.Entry", player), lambda s: s.has_all(("Glide", "Bash"), player) and has_enough_resources([('combat', 'BombSlug'), ('combat', 'BombSlug')], [], "UpperDepths.FirstFirefly", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.FirstKSRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.LeftEntryKS", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.LeftEntryKS", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([], [('combat', 'Spiderling')], "UpperDepths.FirstKSRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.SwimEC", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Bash", "Launch"), player) and has_enough_resources([('energy', ('Flash', 1))], [], "UpperDepths.FirstKSRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.SwimEC", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('energy', ('Flash', 1))], [('combat', 'Spiderling')], "UpperDepths.FirstKSRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.SwimEC", player), lambda s: s.has_all(("UpperDepths.ForestsEyes", "Clean Water"), player) and s.has_any(("Double Jump", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.SwimEC", player), lambda s: s.has_all(("UpperDepths.ForestsEyes", "Clean Water"), player) and has_enough_resources([], [('combat', 'Spiderling')], "UpperDepths.FirstKSRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and has_enough_resources([], [('combat', 'Spiderling'), ('combat', 'WeakSlug')], "UpperDepths.FirstKSRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.FirstFirefly", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.KeydoorLedge", player), lambda s: s.has_all(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.KeydoorLedge", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperDepths.FirstKSRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.KeydoorLedge", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> C.UpperDepths.KeydoorLedge", player), lambda s: s.has("UpperDepths.EntryKeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.LightPuzzle", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "Double Jump", "Bash", "Grapple"), player) and has_enough_resources([('wall', ('BreakWall', 16)), ('wall', ('BreakWall', 16))], [], "UpperDepths.KeydoorLedge", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.LightPuzzle", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "Bash", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 16)), ('wall', ('BreakWall', 16))], [], "UpperDepths.KeydoorLedge", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.EntryKeystoneDoor", player), lambda s: can_open_door(UpperDepths.EntryKeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.FirstKSRoom", player), lambda s: s.has_any(("Double Jump", "Dash", "Grapple", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.RightKeystonePath", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.RightKeystonePath", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.BelowHive", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "UpperDepths.LightPuzzle", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.BelowHive", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "Launch"), player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.BelowHive", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "Bash", "DepthsLight"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.BelowHive", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "Bash", "UpperDepths.LightPuzzle"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.BelowHive", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "DepthsLight"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Bat'), ('combat', 'Bat')], [], "UpperDepths.KeydoorLedge", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.BelowHive", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "UpperDepths.LightPuzzle"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Bat'), ('combat', 'Bat')], [], "UpperDepths.KeydoorLedge", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> C.UpperDepths.RightKeystonePath", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.RightEntryKS", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.RightEntryKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.FirstKSRoom", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.FirstKSRoom", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> C.UpperDepths.BelowHive", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> F.UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has_any(("Bow", "Spear"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.BelowHive", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> F.UpperDepths.BelowHive", player), lambda s: s.has("Launch", player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.BelowHive", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> F.UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> F.UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperDepths.BelowHive", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> E.UpperDepths.BelowHive", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.EntryKeystoneDoor", player), lambda s: s.has("DepthsLight", player) and can_open_door(UpperDepths.EntryKeystoneDoor, s, player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.HiveEX", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.KeydoorLedge", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "DepthsLight"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.Teleporter", player), lambda s: s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.Teleporter", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperDepths.BelowHive", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.Central", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.LowerConnection", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> F.UpperDepths.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> UpperDepths.TeleporterEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> UpperDepths.BelowHive", player), lambda s: s.has_any(("Bow", "Spear"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> UpperDepths.BelowHive", player), lambda s: s.has("Launch", player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> UpperDepths.Central", player), lambda s: s.has("Bow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> UpperDepths.Central", player), lambda s: s.has("Spear", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> UpperDepths.Central", player), lambda s: s.has("Launch", player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.Teleporter", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.Central -> C.UpperDepths.Central", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.Central -> UpperDepths.CentralKeystoneDoor", player), lambda s: can_open_door(UpperDepths.CentralKeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("UpperDepths.Central -> UpperDepths.SecondKSRoom", player), lambda s: has_enough_resources([('combat', 'Spiderling'), ('combat', 'Spiderling'), ('wall', ('BreakWall', 1))], [], "UpperDepths.Central", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.Central -> UpperDepths.SecondKSRoom", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.Central -> UpperDepths.SecondKSRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.Central", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has("UpperDepths.CentralKeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperDepths.Central -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> C.UpperDepths.SecondKSRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> E.UpperDepths.SecondKSRoom", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.RightHealthKS", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.RightHealthKS", player), lambda s: has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.SecondKSRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.SecondKSRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperDepths.SecondKSRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.SecondKSRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.KeystoneHC", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.SecondKSRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.KeystoneHC", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.KeystoneHC", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.KeystoneHC", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.SecondKSRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.BossPathEX", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.BossPathEX", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperDepths.SecondKSRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.BossPathEX", player), lambda s: s.has_all(("DepthsLight", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.Central", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([('combat', 'Spiderling')], [], "UpperDepths.SecondKSRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.Central", player), lambda s: has_enough_resources([('combat', 'Spiderling')], [('wall', ('BreakWall', 1))], "UpperDepths.SecondKSRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.Central", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.Central", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.SecondKSRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.MoraPath", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Grapple"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.MoraPath", player), lambda s: s.has_all(("DepthsLight", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> C.UpperDepths.MoraPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> E.UpperDepths.MoraPath", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.LightcatcherSeed", player), lambda s: s.has_all(("DepthsLight", "Grapple", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.LightcatcherSeed", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Dash", "Bash"), player) and has_enough_resources([('combat', 'Spiderling'), ('combat', 'Spiderling'), ('energy', ('Grenade', 1))], [], "UpperDepths.MoraPath", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.LightcatcherSeed", player), lambda s: s.has_all(("DepthsLight", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("DepthsLight", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("DepthsLight", "Grapple", "Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperDepths.MoraPath", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("DepthsLight", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.SecondKSRoom", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight -> C.UpperDepths.OutsideMoraFight", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight -> MoraFirstPhase", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight -> UpperDepths.Teleporter", player), lambda s: s.has_any(("Double Jump", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "UpperDepths.OutsideMoraFight", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight -> UpperDepths.Teleporter", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('Grenade', 1))], [], "UpperDepths.OutsideMoraFight", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight -> UpperDepths.MoraPath", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MoraFirstPhase -> F.MoraFirstPhase", player), lambda s: True, "or")
    add_rule(world.get_entrance("MoraFirstPhase -> MoraEscape", player), lambda s: s.has("SkipMora1", player), "or")
    add_rule(world.get_entrance("MoraFirstPhase -> MoraEscape", player), lambda s: s.has_all(("Regenerate", "Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Launch"), player) and has_enough_resources([('wall', ('Boss', 165)), ('db', 50)], [], "MoraFirstPhase", s, player, options, True), "or")
    add_rule(world.get_entrance("MoraEscape -> C.MoraEscape", player), lambda s: True, "or")
    add_rule(world.get_entrance("MoraEscape -> MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MoraSecondPhase -> C.MoraSecondPhase", player), lambda s: True, "or")
    add_rule(world.get_entrance("MoraSecondPhase -> E.MoraSecondPhase", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("MoraSecondPhase -> UpperDepths.ForestsEyes", player), lambda s: s.has("SkipMora2", player), "or")
    add_rule(world.get_entrance("MoraSecondPhase -> UpperDepths.ForestsEyes", player), lambda s: s.has_all(("Regenerate", "Bash", "Flash"), player) and s.has_any(("Double Jump", "Dash", "Launch"), player) and has_enough_resources([('wall', ('Boss', 165)), ('db', 60)], [], "MoraSecondPhase", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> C.UpperDepths.LowerConnection", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.CentralKeystoneDoor", player), lambda s: can_open_door(UpperDepths.CentralKeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.BelowDoorOre", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: s.has("Glide", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.LowerConnection", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.LowerConnection", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.LowerConnection", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.LowerConnection", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.LowerConnection", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "UpperDepths.LowerConnection", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.Central", player), lambda s: s.has("UpperDepths.CentralKeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.West", player), lambda s: s.has("Dash", player) and s.has_any(("Double Jump", "Glide"), player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.LowerConnection", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.West", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Dash"), player) and can_enter_area(LowerDepths, s, player, options), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.West", player), lambda s: s.has_all(("DepthsLight", "Glide"), player) and can_enter_area(LowerDepths, s, player, options), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.West", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player) and can_enter_area(LowerDepths, s, player, options), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.West", player), lambda s: s.has("Launch", player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.LowerConnection", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash"), player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.LowerConnection", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Glide"), player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.LowerConnection", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Dash"), player) and s.has_any(("Bash", "Glide"), player) and can_enter_area(LowerDepths, s, player, options), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Bash", "Glide"), player) and can_enter_area(LowerDepths, s, player, options), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperDepths.LowerConnection", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player) and can_enter_area(LowerDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.West -> C.LowerDepths.West", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.HandToHandSilk", player), lambda s: s.has("GladesTown.HandToHandLantern", player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.SwimEC", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.LeftEX", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.LeftEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.West", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Bash"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Bash", "Dash"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerDepths.West", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Bash", "Glide"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerDepths.West", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Launch"), player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Bash", "Dash"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Bash", "Dash"), player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "LowerDepths.West", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("Launch", "DepthsLight"), player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.West", s, player, options, True), "or")
    add_rule(world.get_entrance("DepthsShrine -> F.DepthsShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("DepthsShrine -> LowerDepths.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and has_enough_resources([('combat', 'Bat'), ('combat', 'Bat'), ('combat', 'Bat'), ('combat', 'SneezeSlug'), ('combat', 'SneezeSlug'), ('combat', 'Tentacle'), ('combat', 'Tentacle'), ('combat', 'Bat'), ('combat', 'Bat'), ('combat', 'Tentacle'), ('combat', 'Tentacle'), ('combat', 'Bat'), ('combat', 'SneezeSlug'), ('db', 65)], [], "DepthsShrine", s, player, options, True), "or")
    add_rule(world.get_entrance("DepthsShrine -> LowerDepths.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Bat'), ('combat', 'Bat'), ('combat', 'Bat'), ('combat', 'SneezeSlug'), ('combat', 'SneezeSlug'), ('combat', 'Tentacle'), ('combat', 'Tentacle'), ('combat', 'Bat'), ('combat', 'Bat'), ('combat', 'Tentacle'), ('combat', 'Tentacle'), ('combat', 'Bat'), ('combat', 'SneezeSlug'), ('db', 60)], [], "DepthsShrine", s, player, options, True), "or")
    add_rule(world.get_entrance("DepthsShrine -> LowerDepths.CombatShrineCompleted", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and has_enough_resources([('combat', 'Bat'), ('combat', 'Bat'), ('combat', 'Bat'), ('combat', 'SneezeSlug'), ('combat', 'SneezeSlug'), ('combat', 'Tentacle'), ('combat', 'Tentacle'), ('combat', 'Bat'), ('combat', 'Bat'), ('combat', 'Tentacle'), ('combat', 'Tentacle'), ('combat', 'Bat'), ('combat', 'SneezeSlug'), ('db', 50)], [], "DepthsShrine", s, player, options, True), "or")
    add_rule(world.get_entrance("DepthsShrine -> LowerDepths.CombatShrine", player), lambda s: s.has("LowerDepths.CombatShrineCompleted", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> C.LowerDepths.Central", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has_any(("Dash", "DepthsLight"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.SpiritTrial", player), lambda s: s.has_all(("LowerDepths.TrialActivation", "Double Jump", "Dash", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Launch", "Bash"), player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Bash", "Double Jump"), player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.East -> C.LowerDepths.East", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerDepths.East -> E.LowerDepths.East", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> E.LowerDepths.East", player), lambda s: s.has_all(("BreakCrystal", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> E.LowerDepths.East", player), lambda s: s.has_all(("BreakCrystal", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has("Grapple", player) and can_buy_map(s, player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has_all(("Launch", "Double Jump", "Dash"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has_all(("Launch", "Glide"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has_all(("DepthsLight", "Glide"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has_all(("DepthsLight", "Launch"), player) and can_buy_map(s, player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Bash", "Grapple"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerDepths.East", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Launch"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerDepths.East", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.Central", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Launch", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> C.LowerDepths.BeforeTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TrialActivation", player), lambda s: s.has_all(("Double Jump", "Bash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Double Jump", player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Dash", player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Double Jump", "Bash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.BeforeTree", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Bash", "Double Jump", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.BeforeTree", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Bash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.BeforeTree", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.BeforeTree", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea -> C.LowerDepths.TreeArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea -> E.LowerDepths.TreeArea", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea -> LowerDepths.FlashTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea -> LowerDepths.RightEX", player), lambda s: s.has_any(("DepthsLight", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea -> LowerDepths.BeforeTree", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> C.PoolsApproach.MillPathCheckpoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Bash", "Dash", "Glide"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "PoolsApproach.MillPathCheckpoint", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Grapple", "Glide"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 20), ('combat', 'Crab'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto')], [], "PoolsApproach.MillPathCheckpoint", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.MillPathCheckpoint", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Grapple", "Bash"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.MillPathCheckpoint", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> C.PoolsApproach.MillPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathECWall", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'SpinCrab'), ('combat', 'CorruptSlug')], [], "PoolsApproach.MillPath", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEX", player), lambda s: s.has_all(("Double Jump", "Grapple", "Glide"), player) and has_enough_resources([('combat', 'SpinCrab'), ('combat', 'CorruptSlug')], [], "PoolsApproach.MillPath", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEC", player), lambda s: s.has_all(("PoolsApproach.MillPathECWall", "Clean Water"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.MillPath", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('db', 20), ('combat', 'Crab'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('energy', ('Grenade', 3))], [], "PoolsApproach.MillPath", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('db', 20), ('combat', 'Crab'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('energy', ('Grenade', 2))], [], "PoolsApproach.MillPath", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('db', 20), ('combat', 'Crab'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto')], [], "PoolsApproach.MillPath", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.MillPath", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water", "Grapple"), player) and s.has_any(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water", "Grapple"), player) and has_enough_resources([], [('combat', 'SpinCrab')], "PoolsApproach.MillPath", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water", "PoolsApproach.WheelFreed"), player) and s.has_any(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water", "PoolsApproach.WheelFreed"), player) and has_enough_resources([], [('combat', 'SpinCrab')], "PoolsApproach.MillPath", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Dash", "Water Dash"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.MarshBreakableWall", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> MarshPastOpher.PoolsPathWest", player), lambda s: can_enter_area(MarshPastOpher, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [], "PoolsApproach.MarshBreakableWall", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Launch", "Glide"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> C.PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has_any(("Launch", "Grapple", "PoolsApproach.WheelFreed"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> C.PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.WheelWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.WheelFreed", player), lambda s: s.has_all(("PoolsApproach.WheelWall", "Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathECWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water", "Bash"), player) and has_enough_resources([('db', 10)], [], "PoolsApproach.OnTopOfWheel", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has_all(("PoolsApproach.WheelFreed", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshPathCurrentEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathEC", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "PoolsApproach.MillPathECWall", "Clean Water", "Bash"), player) and has_enough_resources([('db', 10)], [], "PoolsApproach.OnTopOfWheel", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Dash", "Water Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has("Launch", player) and s.has_any(("Glide", "Clean Water"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has_any(("Double Jump", "Dash"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Double Jump", "Dash", "Launch"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("PoolsApproach.WheelFreed", "Double Jump", "Glide"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water", "Bash", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('db', 10)], [], "PoolsApproach.OnTopOfWheel", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water", "Bash", "Water Dash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water", "Bash", "Launch"), player) and has_enough_resources([('db', 10)], [], "PoolsApproach.OnTopOfWheel", s, player, options, True), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> C.EastPools.LeverRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> H.EastPools.LeverRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.BelowEntryLeverBubble", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.BelowEntryLeverBubble", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1))], "EastPools.LeverRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.WheelWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.WheelFreed", player), lambda s: s.has_all(("PoolsApproach.WheelWall", "Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.KwolokAmuletQI", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.TwoCrushersEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('combat', 'CorruptSlug')], [], "EastPools.LeverRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.RightOre", player), lambda s: s.has_all(("Launch", "Grapple"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.BubbleCurrentEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.BelowLeverEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.LeverRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.BelowLeverEX", player), lambda s: s.has("EastPools.BelowEntryLeverBubble", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.BelowLeverEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.MarshPathCurrentEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.BehindEntryDoor", player), lambda s: s.has("EastPools.EntryLever", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has_any(("PoolsApproach.WheelFreed", "Double Jump", "Launch"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.LeverRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Bash", "Glide"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('energy', ('Grenade', 2))], [], "EastPools.LeverRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Bash", "Glide", "Double Jump"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.LeverRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Glide", "Launch"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Double Jump", "Dash", "Launch"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has_any(("Double Jump", "Dash"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.LeverRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> C.EastPools.BehindEntryDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.BelowEntryLeverBubble", player), lambda s: s.has("EastPools.EntryLever", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.BelowEntryLeverBubble", player), lambda s: s.has("EastPools.EntryLever", player) and has_enough_resources([], [('energy', ('Spear', 1))], "EastPools.BehindEntryDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.AboveDoorOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.AboveDoorOre", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "EastPools.BehindEntryDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.AboveDoorOre", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.BehindEntryDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.AboveDoorOre", player), lambda s: s.has_all(("EastPools.TokkBubbleFree", "EastPools.TokkBubblePurpleWall", "Grapple", "Flap"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TokkBubble", player), lambda s: s.has_any(("Launch", "Clean Water", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TokkBubble", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.BehindEntryDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TokkBubble", player), lambda s: s.has_all(("EastPools.TokkBubbleFree", "EastPools.TokkBubblePurpleWall"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TokkBubble", player), lambda s: s.has_all(("EastPools.TokkBubbleFree", "EastPools.TokkBubblePurpleWall"), player) and has_enough_resources([], [('combat', 'Crab')], "EastPools.BehindEntryDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TPArea", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.BehindEntryDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.BehindEntryDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TPArea", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "EastPools.BehindEntryDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.LeverRoom", player), lambda s: s.has("EastPools.EntryLever", player) and s.has_any(("Bash", "Launch", "EastPools.BelowEntryLeverBubble"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.LeverRoom", player), lambda s: s.has("EastPools.EntryLever", player) and has_enough_resources([], [('combat', 'Crab')], "EastPools.BehindEntryDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> C.EastPools.TokkBubble", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubbleFree", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubbleFree", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("EastPools.TokkBubblePurpleWall", player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubbleFree", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and has_enough_resources([], [('combat', 'Crab')], "EastPools.TokkBubble", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubblePurpleWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.AboveDoorOre", player), lambda s: s.has_all(("EastPools.TokkBubbleFree", "EastPools.TokkBubblePurpleWall", "Grapple", "Flap"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TPArea", player), lambda s: s.has_all(("EastPools.TokkBubbleFree", "EastPools.TokkBubblePurpleWall", "Flap", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('combat', 'Crab')], [], "EastPools.TokkBubble", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TPArea", player), lambda s: s.has_all(("EastPools.TokkBubbleFree", "EastPools.TokkBubblePurpleWall", "Flap", "Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.BehindEntryDoor", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.BehindEntryDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.BehindEntryDoor", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('combat', 'CorruptSlug'), ('combat', 'Crab')], "EastPools.TokkBubble", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.BehindEntryDoor", player), lambda s: s.has("Bash", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.BehindEntryDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "EastPools.TokkBubble", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> C.EastPools.TPArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.TPArea -> F.EastPools.TPArea", player), lambda s: s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.LowerWaterDrained", player), lambda s: s.has_all(("Clean Water", "Water Breath"), player), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.AboveDoorOre", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.TPArea", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.Teleporter", player), lambda s: s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.FishingPool", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.FishingPool", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.TPArea", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.FishingPool", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.WaterdashArena", player), lambda s: s.has_all(("EastPools.ArenaWall", "Clean Water"), player), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.NextToLupoOre", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.BehindEntryDoor", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.BehindEntryDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.TPArea", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.TokkBubble", player), lambda s: s.has_any(("Launch", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> F.EastPools.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.LowerWaterDrained", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.ArenaWall", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.UltraBashWall", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Clean Water", "Water Breath", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.UltraBashShard", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "EastPools.UltraBashWall", "Clean Water"), player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> Teleporters", player), lambda s: s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.TPArea", player), lambda s: s.has_any(("EastPools.LowerWaterDrained", "Clean Water"), player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.WaterdashArena", player), lambda s: s.has_all(("EastPools.ArenaWall", "EastPools.LowerWaterDrained"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.HandToHandSpyglass", player), lambda s: s.has("LowerDepths.HandToHandSilk", player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Dash"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Dash"), player) and has_enough_resources([], [('combat', 'CorruptSlug')], "EastPools.FishingPool", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Glide"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Glide"), player) and has_enough_resources([], [('combat', 'CorruptSlug')], "EastPools.FishingPool", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.FishingPool", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.TPArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> EastPools.AboveTpEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> EastPools.FishingPool", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Launch"), player) and can_enter_area(UpperPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Bash", "Double Jump"), player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.AboveFishingPool", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> C.EastPools.NextToLupoOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.LupoOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.Teleporter", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Clean Water"), player), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.TPArea", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> C.EastPools.LupoArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.LupoEX", player), lambda s: s.has_any(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.LupoEX", player), lambda s: s.has_all(("EastPools.LupoPurpleFloor", "Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.LupoMap", player), lambda s: can_buy_map(s, player), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.NextToLupoOre", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [], "EastPools.LupoArea", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.MissilePuzzle", player), lambda s: s.has_all(("EastPools.LupoPurpleFloor", "Clean Water"), player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> C.EastPools.WaterdashArena", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.FightArenas", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Breath", "Bash"), player) and has_enough_resources([('db', 20), ('combat', 'Crab'), ('combat', 'Crab'), ('combat', 'Crab'), ('combat', 'Crab'), ('combat', 'Tentacle'), ('combat', 'Skeeto'), ('combat', 'Skeeto')], [], "EastPools.WaterdashArena", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.FightRoomHC", player), lambda s: s.has_all(("EastPools.FightArenas", "Water Dash", "Double Jump"), player) and s.has_any(("Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.FightRoomHC", player), lambda s: s.has_all(("EastPools.FightArenas", "Water Dash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.WaterdashArena", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.FightRoomHC", player), lambda s: s.has_all(("EastPools.FightArenas", "Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.TPArea", player), lambda s: s.has_all(("EastPools.ArenaWall", "Clean Water"), player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.Teleporter", player), lambda s: s.has_all(("EastPools.ArenaWall", "EastPools.LowerWaterDrained"), player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.FightArenas", player) and s.has_any(("Clean Water", "Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> C.EastPools.MissilePuzzle", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.CentralRoomPurpleWall", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.LupoPurpleFloor", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.EnergyHarvestShard", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.MissilePuzzle", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.EnergyHarvestShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.BehindCrusherEX", player), lambda s: s.has_all(("Clean Water", "Water Breath"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.SpiritTrial", player), lambda s: s.has_all(("UpperPools.TrialActivation", "EastPools.CentralRoomPurpleWall", "Clean Water", "Double Jump", "Dash", "Glide", "Grapple", "Water Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.CentralRoom", player), lambda s: s.has_all(("EastPools.CentralRoomPurpleWall", "Clean Water"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.WaterdashArena", player), lambda s: s.has("EastPools.FightArenas", player) and s.has_any(("Clean Water", "Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.LupoArea", player), lambda s: s.has_all(("EastPools.LupoPurpleFloor", "Clean Water"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> C.EastPools.CentralRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.CentralRoomBubbleFree", player), lambda s: s.has("Clean Water", player) and s.has_any(("Bash", "Water Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has("EastPools.CentralRoomBubbleFree", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.CentralRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("EastPools.CentralRoomBubbleFree", "Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and can_enter_area(UpperPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("EastPools.CentralRoomBubbleFree", "Bash", "Launch"), player) and can_enter_area(UpperPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Water Dash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and can_enter_area(WestPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.MissilePuzzle", player), lambda s: s.has_all(("EastPools.CentralRoomPurpleWall", "Clean Water"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> C.UpperPools.KeystoneRoomEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> EastPools.GrassSeed", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> EastPools.GrassSeed", player), lambda s: has_enough_resources([], [('combat', 'SpinCrab')], "UpperPools.KeystoneRoomEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> EastPools.GrassSeed", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.LowerKS", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.LowerKS", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> EastPools.CentralRoom", player), lambda s: s.has_any(("Bash", "Launch"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> EastPools.CentralRoom", player), lambda s: can_enter_area(EastPools, s, player, options) and has_enough_resources([], [('combat', 'SpinCrab')], "UpperPools.KeystoneRoomEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> EastPools.CentralRoom", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has_any(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> C.UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.UpperLeftKS", player), lambda s: s.has_all(("UpperPools.KeystoneRoomBubbleFree", "Flap", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoom", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("UpperPools.KeystoneRoomBubbleFree", "Flap", "Double Jump", "Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> C.UpperPools.KeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> E.UpperPools.KeystoneRoom", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperLeftKS", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.KeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperLeftKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has("Bash", player) and s.has_any(("Clean Water", "Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.KeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Clean Water", "Grapple", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.KeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Bash", "Clean Water", "Water Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.KeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Clean Water", "Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "UpperPools.KeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 3))], [], "UpperPools.KeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> C.UpperPools.BeforeKeystoneDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> H.UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.KeystoneDoor", player), lambda s: can_open_door(UpperPools.KeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.TrialActivation", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.UpperMidKS", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.TreeRoomEntrance", player), lambda s: s.has("UpperPools.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.KeystoneRoom", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.BeforeKeystoneDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> C.UpperPools.TreeRoomEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> UpperPools.KeystoneDoor", player), lambda s: can_open_door(UpperPools.KeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("UpperPools.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> UpperPools.TreeRoom", player), lambda s: s.has_any(("Clean Water", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> UpperPools.AboveTree", player), lambda s: s.has_all(("UpperPools.TreeRoomLeftBubbleFree", "Flap", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> UpperPools.AboveTree", player), lambda s: s.has_all(("UpperPools.TreeRoomLeftBubbleFree", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomLeftBubbleFree", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomRightBubbleFree", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.ButtonDoorAboveTree", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.SwimDashTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.SwimDashCurrentEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomEntrance", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomEntrance", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomEntrance", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.TreeRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.ButtonDoorAboveTree", "UpperPools.TreeRoomRightBubbleFree", "Clean Water", "Water Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.ButtonDoorAboveTree", "UpperPools.TreeRoomRightBubbleFree", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree -> UpperPools.RoofEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree -> UpperPools.RoofEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree -> UpperPools.RoofEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.AboveTree", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree -> UpperPools.TreeRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.AboveTree -> UpperPools.TreeRoomEntrance", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> C.UpperPools.DrainPuzzleEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Launch", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Launch", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: s.has_all(("Double Jump", "Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: s.has_all(("Bash", "Grapple", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.TreeRoom", player), lambda s: s.has("UpperPools.ButtonDoorAboveTree", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Double Jump", "Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Launch"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "UpperPools.DrainRoomPurpleWall"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "UpperPools.DrainRoomPurpleWall", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "UpperPools.DrainRoomPurpleWall", "Clean Water", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> E.UpperPools.DrainPuzzleRight", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> H.UpperPools.DrainPuzzleRight", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainRoomPurpleWall", player), lambda s: s.has_all(("Bash", "Clean Water"), player) and s.has_any(("Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleExit", player), lambda s: s.has("UpperPools.UpperWaterDrained", player) and s.has_any(("Clean Water", "Glide", "Double Jump", "Launch", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and s.has_any(("Grapple", "UpperPools.DrainRoomPurpleWall"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Launch", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Launch", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleRight", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Dash", "Glide", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleRight", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleRight", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> C.UpperPools.DrainPuzzleExit", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainRoomPurpleWall", player), lambda s: s.has_all(("Bash", "Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> EastPools.PurpleWallHC", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Clean Water", "Bash"), player) and s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> EastPools.PurpleWallHC", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Clean Water", "Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> EastPools.AboveFishingPool", player), lambda s: can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> C.UpperPools.RightBubbleSpamRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamLever", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('combat', 'Bee'), ('combat', 'Skeeto')], [], "UpperPools.RightBubbleSpamRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamLever", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamLever", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolEX", player), lambda s: s.has("Clean Water", player) and s.has_any(("Bash", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolEX", player), lambda s: s.has("Clean Water", player) and has_enough_resources([], [('db', 10)], "UpperPools.RightBubbleSpamRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.RightBubbleSpamRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.RightBubblesEX", player), lambda s: s.has_all(("UpperPools.BubbleSpamWall", "Clean Water"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubblesEC", player), lambda s: s.has("UpperPools.BubbleSpamLever", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.LeftBubbleSpamRoom", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> C.UpperPools.LeftBubbleSpamRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Water Breath"), player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.LeftBubblesEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Clean Water", "Bash", "Water Breath", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Clean Water", "Bash", "Water Dash"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> F.WestPools.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.TpEX", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.TpEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.BurrowEX", player), lambda s: s.has_all(("Clean Water", "Burrow"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.LeftKwolokPlatform", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Water Dash"), player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.LeftKwolokPlatform", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> EastPools.CentralRoom", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Water Dash"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform -> C.WestPools.LeftKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform -> KwolokEscape", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform -> WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Water Breath"), player) and s.has_any(("Bash", "Water Dash"), player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform -> WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform -> WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and has_enough_resources([], [('combat', 'Crab'), ('combat', 'SpinCrab')], "WestPools.LeftKwolokPlatform", s, player, options, True), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> C.WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> WestPools.EscapeRevisitEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> KwolokEscape", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> WestPools.LeftKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> WestPools.LeftKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and has_enough_resources([], [('combat', 'Crab'), ('combat', 'SpinCrab')], "WestPools.RightKwolokPlatform", s, player, options, True), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Water Dash"), player) and can_enter_area(UpperPools, s, player, options), "or")
    add_rule(world.get_entrance("KwolokEscape -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("WestPools.ForestsStrength", player) and can_enter_area(UpperPools, s, player, options), "or")
    add_rule(world.get_entrance("KwolokEscape -> F.KwolokEscape", player), lambda s: True, "or")
    add_rule(world.get_entrance("KwolokEscape -> KwolokFight", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Bash", "Double Jump"), player) and s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("KwolokEscape -> KwolokFight", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("KwolokFight -> C.KwolokFight", player), lambda s: True, "or")
    add_rule(world.get_entrance("KwolokFight -> E.KwolokFight", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("KwolokFight -> WestPools.ForestsStrength", player), lambda s: s.has("SkipKwolok", player), "or")
    add_rule(world.get_entrance("KwolokFight -> WestPools.ForestsStrength", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Bash", "Double Jump"), player) and s.has_any(("Launch", "Dash"), player) and has_enough_resources([('wall', ('Boss', 250)), ('db', 85)], [], "KwolokFight", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> F.LowerWastes.WestTP", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.WestTPOre", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WoodsMain.FeedingGroundsEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has_all(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.WestTP", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has_all(("Double Jump", "Burrow"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WoodsMain.FeedingGrounds", player), lambda s: s.has_all(("WindtornRuins.Seir", "Burrow"), player) and can_enter_area(WoodsMain, s, player, options), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "WindtornRuins.Seir", "Double Jump", "Glide", "Grapple"), player) and can_enter_area(WeepingRidge, s, player, options), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "WindtornRuins.Seir", "Double Jump", "Bash", "Grapple"), player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.WestTP", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "WindtornRuins.Seir", "Launch"), player) and can_enter_area(WeepingRidge, s, player, options), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> C.LowerWastes.SunsetView", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.SunsetViewEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.PurpleWallEX", player), lambda s: s.has_all(("Burrow", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.SpiritTrial", player), lambda s: s.has_all(("LowerWastes.TrialActivation", "Burrow", "Double Jump", "Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.WestTP", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.Shovel", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.Shovel", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.SunsetView", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.Shovel", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel -> E.LowerWastes.Shovel", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel -> E.LowerWastes.Shovel", player), lambda s: s.has_all(("BreakCrystal", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.Shovel", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel -> LowerWastes.EerieGemQI", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel -> LowerWastes.SandBridgeOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.Shovel -> LowerWastes.SunsetView", player), lambda s: s.has_any(("Bash", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel -> LowerWastes.SunsetView", player), lambda s: has_enough_resources([], [('combat', 'MaceMiner')], "LowerWastes.Shovel", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel -> LowerWastes.SkeetoHive", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel -> LowerWastes.MuncherTunnel", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> C.LowerWastes.MuncherTunnel", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> E.LowerWastes.MuncherTunnel", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.MuncherTunnelEC", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.Shovel", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.Shovel", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.MuncherTunnel", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.SandPot", player), lambda s: has_enough_resources([('combat', 'Mantis'), ('combat', 'ShieldSlug')], [], "LowerWastes.MuncherTunnel", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.SandPot", player), lambda s: s.has_any(("Double Jump", "Burrow", "Hammer"), player) and has_enough_resources([('combat', 'Mantis')], [], "LowerWastes.MuncherTunnel", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.SandPot", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Burrow"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.SandPot", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "LowerWastes.MuncherTunnel", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.SandPot", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> C.LowerWastes.SandPot", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotHC", player), lambda s: s.has_all(("Burrow", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Dash", "Grapple"), player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.SandPot", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.MuncherTunnel", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.MuncherTunnel", player), lambda s: has_enough_resources([], [('combat', 'Mantis')], "LowerWastes.SandPot", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Dash", player) and s.has_any(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Dash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.SandPot", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerWastes.SandPot", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.SandPot", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.SandPot", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> C.LowerWastes.WoodenBridge", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Grapple", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.WoodenBridge", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.WoodenBridge", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.MuncherPitEX", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.MuncherPitEX", player), lambda s: s.has_all(("Burrow", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPot", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPot", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPot", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.WoodenBridge", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPot", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.WoodenBridge", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPot", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.LeverArea", player), lambda s: s.has_any(("Double Jump", "Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.BottomRightHC", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Grapple"), player) and has_enough_resources([('combat', 'MaceMiner'), ('combat', 'Mantis')], [], "LowerWastes.BeforeMinesEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.WoodenBridge", player), lambda s: s.has_any(("Bash", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerWastes.BeforeMinesEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.WoodenBridge", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [('combat', 'MaceMiner')], "LowerWastes.BeforeMinesEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntranceEnemyPaths -> LowerWastes.MinesEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightEX", player), lambda s: s.has("Grapple", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightEX", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('combat', 'MaceMiner'), ('combat', 'Mantis')], "LowerWastes.MinesEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.MinesEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightHC", player), lambda s: s.has("Grapple", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightHC", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('combat', 'MaceMiner'), ('combat', 'Mantis')], "LowerWastes.MinesEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightHC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.MinesEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and has_enough_resources([('combat', 'MaceMiner'), ('combat', 'Mantis')], [], "LowerWastes.MinesEntrance", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Bash", "Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BeforeMinesEntrance", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> C.LowerWastes.LeverArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> E.LowerWastes.LeverArea", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.SandPlatformLever", player), lambda s: s.has_any(("Double Jump", "Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.SandPlatformLever", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerWastes.LeverArea", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.SandPlatformLever", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.LeverArea", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.WoodenBridge", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.BeforeMinesEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.EastTP", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.MuncherClimb", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.LeverArea", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.MuncherClimb", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.MuncherClimb", player), lambda s: s.has_all(("LowerWastes.SandPlatformLever", "Double Jump"), player) and s.has_any(("Dash", "Glide", "Burrow"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.MuncherClimb", player), lambda s: s.has_all(("LowerWastes.SandPlatformLever", "Dash", "Burrow"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.LastStandArea", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.LeverArea", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> C.LowerWastes.MuncherClimb", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.MuncherClimbEX", player), lambda s: s.has("Grapple", player) and s.has_any(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.LeverArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.LastStandArea", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.LastStandArea", player), lambda s: s.has_all(("LowerWastes.SandPlatformLever", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.SkeetoHive", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea -> LowerWastes.LastStandShard", player), lambda s: s.has_any(("Double Jump", "Dash", "Burrow"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea -> LowerWastes.LastStandEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea -> LowerWastes.LeverArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea -> LowerWastes.MuncherClimb", player), lambda s: s.has_any(("Glide", "Double Jump", "Dash", "LowerWastes.SandPlatformLever"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> C.LowerWastes.SkeetoHive", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.SkeetoHiveEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.ThirstyGorlek", player), lambda s: s.has_any(("Double Jump", "Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.ThirstyGorlek", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerWastes.SkeetoHive", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.Shovel", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.UpperPath", player), lambda s: s.has_all(("Burrow", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.SkeetoHive", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> C.LowerWastes.ThirstyGorlek", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.TrialActivation", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.HandToHandMapstone", player), lambda s: s.has("GladesTown.HandToHandCanteen", player), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.BurrowTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.BurrowTreeEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.LupoMap", player), lambda s: can_buy_map(s, player) and s.has_any(("Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.LupoMap", player), lambda s: s.has("Bash", player) and can_buy_map(s, player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerWastes.ThirstyGorlek", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.SkeetoHive", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath -> C.LowerWastes.UpperPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath -> E.LowerWastes.UpperPath", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath -> LowerWastes.UpperPathEC", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath -> LowerWastes.UpperPathEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath -> LowerWastes.UpperPathHiddenEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath -> LowerWastes.SkeetoHive", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath -> LowerWastes.EastTP", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> F.LowerWastes.EastTP", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> LowerWastes.EastTPOre", player), lambda s: s.has_any(("Burrow", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerWastes.EastTP", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> LowerWastes.EastTPOre", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('Grenade', 1))], [], "LowerWastes.EastTP", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> LowerWastes.EastTPOre", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('Grenade', 3))], [], "LowerWastes.EastTP", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> LowerWastes.UpperPathHC", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> Tokk", player), lambda s: s.has_any(("Double Jump", "Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> Tokk", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.EastTP", s, player, options, True), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> LowerWastes.LeverArea", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> UpperWastes.KeystoneRoom", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Launch"), player) and can_enter_area(UpperWastes, s, player, options), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> C.UpperWastes.KeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KeystoneDoor", player), lambda s: s.has_all(("Burrow", "Bash"), player) and can_open_door(UpperWastes.KeystoneDoor, s, player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KeystoneDoor", player), lambda s: s.has("Burrow", player) and can_open_door(UpperWastes.KeystoneDoor, s, player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('combat', 'ShieldSlug')], [], "UpperWastes.KeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KeystoneDoor", player), lambda s: s.has("Launch", player) and can_open_door(UpperWastes.KeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.LowerKS", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.LowerKS", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.UpperKS", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KSDoorEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KSDoorEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperWastes.KeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KSDoorEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> LowerWastes.EastTP", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and can_enter_area(LowerWastes, s, player, options), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.MissilePuzzleLeft", player), lambda s: s.has_all(("UpperWastes.KeystoneDoor", "Burrow", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.MissilePuzzleLeft", player), lambda s: s.has_all(("UpperWastes.KeystoneDoor", "Burrow"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('combat', 'ShieldSlug')], [], "UpperWastes.KeystoneRoom", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.MissilePuzzleLeft", player), lambda s: s.has_all(("UpperWastes.KeystoneDoor", "Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> C.UpperWastes.MissilePuzzleLeft", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.KeystoneDoor", player), lambda s: s.has("Burrow", player) and can_open_door(UpperWastes.KeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.LedgeEC", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.LedgeEC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.MissileSpawnEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.KSDoorEX", player), lambda s: s.has_all(("UpperWastes.KeystoneDoor", "Burrow"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.KeystoneRoom", player), lambda s: s.has_all(("UpperWastes.KeystoneDoor", "Burrow"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.MissilePuzzleMiddle", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle -> UpperWastes.LeverDoor", player), lambda s: s.has_all(("Burrow", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle -> UpperWastes.PurpleWallEX", player), lambda s: s.has_all(("Burrow", "Bash"), player) and has_enough_resources([('combat', 'MaceMiner')], [], "UpperWastes.MissilePuzzleMiddle", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle -> UpperWastes.MissilePuzzleRight", player), lambda s: s.has_all(("UpperWastes.LeverDoor", "Burrow"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight -> UpperWastes.PurpleWallHC", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight -> UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight -> UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight -> UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight -> UpperWastes.MissilePuzzleMiddle", player), lambda s: s.has_all(("UpperWastes.LeverDoor", "Burrow"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> C.UpperWastes.SpinLasers", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperWastes.SpinLasers", s, player, options, True), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has_all(("Double Jump", "Burrow"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RuinsApproach", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.RuinsApproach -> C.UpperWastes.RuinsApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperWastes.RuinsApproach -> UpperWastes.SpinLasersRightEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.RuinsApproach -> UpperWastes.SpinLasersMiddleEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.RuinsApproach -> UpperWastes.SpinLasersLowerEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.RuinsApproach -> UpperWastes.NorthTP", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.RuinsApproach -> UpperWastes.SpinLasers", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> F.UpperWastes.NorthTP", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Launch"), player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.RuinsApproach", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins (Door) -> WindtornRuins.UpperRuinsDoor (Door)", player), lambda s: True)
    add_rule(world.get_entrance("UpperWastes.OutsideRuins (Door) -> UpperWastes.OutsideRuins", player), lambda s: True)
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.OutsideRuins (Door)", player), lambda s: s.has_all(("EastHollow.ForestsVoice", "LowerReach.ForestsMemory", "UpperDepths.ForestsEyes", "WestPools.ForestsStrength"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> C.UpperWastes.OutsideRuins", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.FlowersSeed", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WallOre", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WallOre", player), lambda s: s.has_all(("Burrow", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WallOre", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Glide", "Burrow"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.NorthTP", player), lambda s: s.has_any(("Burrow", "Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor (Door) -> UpperWastes.OutsideRuins (Door)", player), lambda s: True)
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor (Door) -> WindtornRuins.UpperRuinsDoor", player), lambda s: True)
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor -> WindtornRuins.UpperRuinsDoor (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor -> C.WindtornRuins.UpperRuinsDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor -> E.WindtornRuins.UpperRuinsDoor", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor -> WindtornRuins.RuinsLever", player), lambda s: s.has("Burrow", player) and has_enough_resources([('wall', ('BreakWall', 6)), ('wall', ('BreakWall', 6))], [], "WindtornRuins.UpperRuinsDoor", s, player, options, True), "or")
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("WindtornRuins.RuinsLever", "Burrow"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural -> C.WindtornRuins.BrokenMural", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural -> WindtornRuins.UpperRuinsDoor", player), lambda s: s.has_all(("WindtornRuins.RuinsLever", "Burrow"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural -> WindtornRuins.FallenPillar", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.HeartBarrier", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 16))], [], "WindtornRuins.FallenPillar", s, player, options, True), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.HeartBarrier", player), lambda s: s.has_all(("Burrow", "Bash"), player) and has_enough_resources([('wall', ('BreakWall', 16)), ('energy', ('Grenade', 1))], [], "WindtornRuins.FallenPillar", s, player, options, True), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Burrow", "Bash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WindtornRuins.FallenPillar", s, player, options, True), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.RuinsTP", player), lambda s: s.has("Launch", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.Escape", player), lambda s: s.has("WindtornRuins.HeartBarrier", player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.LowerRuins", player), lambda s: s.has("WindtornRuins.Seir", player) and s.has_any(("Double Jump", "Dash", "Glide", "Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.LowerRuins", player), lambda s: s.has_all(("WindtornRuins.Seir", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WindtornRuins.FallenPillar", s, player, options, True), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Bash", "WindtornRuins.HeartBarrier"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WindtornRuins.FallenPillar", s, player, options, True), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Bash", "Burrow"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WindtornRuins.FallenPillar", s, player, options, True), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Glide", "WindtornRuins.HeartBarrier"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Glide", "Burrow"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.BrokenMural", player), lambda s: s.has("Launch", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> F.WindtornRuins.RuinsTP", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.HeartBarrier", player), lambda s: has_enough_resources([('wall', ('BreakWall', 16))], [], "WindtornRuins.RuinsTP", s, player, options, True), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.FallenPillar", player), lambda s: s.has_any(("WindtornRuins.HeartBarrier", "Burrow"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Glide", "WindtornRuins.HeartBarrier"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Glide", "Burrow"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> F.WindtornRuins.Escape", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Dash", "Grapple"), player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Double Jump", "Glide", "Grapple"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Double Jump", "Launch"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Grapple", "Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins -> WindtornRuins.HandToHandComplete", player), lambda s: s.has("LowerWastes.HandToHandMapstone", player), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins -> WindtornRuins.EscapeRevisitEC", player), lambda s: s.has_all(("WindtornRuins.Seir", "Burrow"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins -> WindtornRuins.Escape", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins -> WindtornRuins.FallenPillar", player), lambda s: s.has_all(("WindtornRuins.Seir", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins -> WindtornRuins.FallenPillar", player), lambda s: s.has_all(("WindtornRuins.Seir", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WindtornRuins.LowerRuins", s, player, options, True), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins -> WindtornRuins.FallenPillar", player), lambda s: s.has_all(("WindtornRuins.Seir", "Launch"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins -> LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Burrow", player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [], "WindtornRuins.LowerRuins", s, player, options, True), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> C.WeepingRidge.Bottom", player), lambda s: True, "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> H.WeepingRidge.Bottom", player), lambda s: True, "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> E.WeepingRidge.Bottom", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('combat', 'CrystalMiner'), ('combat', 'CrystalMiner'), ('combat', 'ShieldCrystalMiner'), ('combat', 'ShieldCrystalMiner')], [], "WeepingRidge.Bottom", s, player, options, True), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has("Bash", player) and has_enough_resources([('combat', 'CrystalMiner'), ('combat', 'CrystalMiner'), ('combat', 'ShieldCrystalMiner'), ('combat', 'ShieldCrystalMiner'), ('energy', ('Grenade', 1))], [], "WeepingRidge.Bottom", s, player, options, True), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has("Launch", player) and has_enough_resources([('combat', 'CrystalMiner'), ('combat', 'CrystalMiner'), ('combat', 'ShieldCrystalMiner'), ('combat', 'ShieldCrystalMiner')], [], "WeepingRidge.Bottom", s, player, options, True), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> WeepingRidge.LaunchArea", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> WeepingRidge.LaunchArea", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WeepingRidge.Bottom", s, player, options, True), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> WeepingRidge.LaunchArea", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Launch"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> LowerWastes.WestTP", player), lambda s: s.has_all(("WindtornRuins.Seir", "Burrow"), player) and can_enter_area(LowerWastes, s, player, options), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> C.WeepingRidge.LaunchArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> H.WeepingRidge.LaunchArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Ore", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.WillowEntranceLedge", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Launch", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Bottom", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Launch"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Bottom", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WeepingRidge.LaunchArea", s, player, options, True), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Bottom", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> C.WeepingRidge.AboveTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.LaunchTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.PortalEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and has_enough_resources([('energy', ('Bow', 2))], [], "WeepingRidge.AboveTree", s, player, options, True), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.Ore", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Launch", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.WillowEntranceLedge (Door) -> WillowsEnd.Entry (Door)", player), lambda s: True)
    add_rule(world.get_entrance("WeepingRidge.WillowEntranceLedge (Door) -> WeepingRidge.WillowEntranceLedge", player), lambda s: True)
    add_rule(world.get_entrance("WeepingRidge.WillowEntranceLedge -> WeepingRidge.WillowEntranceLedge (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("WeepingRidge.WillowEntranceLedge -> C.WeepingRidge.WillowEntranceLedge", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.Entry (Door) -> WeepingRidge.WillowEntranceLedge (Door)", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.Entry (Door) -> WillowsEnd.Entry", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.Entry (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> C.WillowsEnd.Entry", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> E.WillowsEnd.Entry", player), lambda s: s.has_all(("BreakCrystal", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> E.WillowsEnd.Entry", player), lambda s: has_enough_resources([('energy', ('Bow', 1))], [], "WillowsEnd.Entry", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.EntryEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WillowsEnd.Entry", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.EntryEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Launch", "WillowsEnd.PortalShortcut"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.BoulderHeartPath", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.BoulderHeartPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.Entry", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Grapple", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Bash", "Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WillowsEnd.Entry", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> C.WillowsEnd.GrappleHeartMidPoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> H.WillowsEnd.GrappleHeartMidPoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Grapple", "Launch", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Grapple", "Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> C.WillowsEnd.GrappleHeart", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> E.WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("BreakCrystal", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> E.WillowsEnd.GrappleHeart", player), lambda s: has_enough_resources([('energy', ('Bow', 1))], [], "WillowsEnd.GrappleHeart", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> H.WillowsEnd.GrappleHeart", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.GrappleWheelsHeart", player), lambda s: has_enough_resources([('wall', ('BreakWall', 30))], [], "WillowsEnd.GrappleHeart", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.PoisonfallHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.PoisonfallHC", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.Entry", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Glide"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.Entry", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> C.WillowsEnd.BoulderHeartPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> E.WillowsEnd.BoulderHeartPath", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.BoulderHeart", player), lambda s: s.has_all(("Launch", "Double Jump", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 30))], [], "WillowsEnd.BoulderHeartPath", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.Entry", player), lambda s: s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> F.WillowsEnd.InnerTP", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.PortalShortcut", player), lambda s: s.has_any(("Double Jump", "Dash", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "WillowsEnd.InnerTP", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.PortalShortcut", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [('energy', ('Bow', 1))], "WillowsEnd.InnerTP", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.LupoMap", player), lambda s: can_buy_map(s, player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.LupoMap", player), lambda s: can_buy_map(s, player) and has_enough_resources([], [('energy', ('Bow', 1))], "WillowsEnd.InnerTP", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.Entry", player), lambda s: s.has("WillowsEnd.PortalShortcut", player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.Entry", player), lambda s: s.has("WillowsEnd.PortalShortcut", player) and has_enough_resources([], [('energy', ('Bow', 1))], "WillowsEnd.InnerTP", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.Entry", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.Entry", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.InnerTP", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> C.WillowsEnd.AboveInnerTP", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> E.WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("BreakCrystal", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> E.WillowsEnd.AboveInnerTP", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WillowsEnd.AboveInnerTP", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> E.WillowsEnd.AboveInnerTP", player), lambda s: has_enough_resources([('energy', ('Bow', 1))], [('combat', 'CrystalMiner')], "WillowsEnd.AboveInnerTP", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.InnerTP", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.InnerTP", player), lambda s: has_enough_resources([], [('combat', 'CrystalMiner')], "WillowsEnd.AboveInnerTP", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.East", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.AboveInnerTP", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.East", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.AboveInnerTP", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath -> H.WillowsEnd.RedirectHeartPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath -> E.WillowsEnd.RedirectHeartPath", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Launch", "Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath -> E.WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WillowsEnd.RedirectHeartPath", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath -> WillowsEnd.East", player), lambda s: s.has_any(("Launch", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath -> WillowsEnd.RedirectHeartPuzzle", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> C.WillowsEnd.RedirectHeartPuzzle", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectHeart", player), lambda s: s.has_all(("Double Jump", "Bash", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 10)), ('wall', ('BreakWall', 30))], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Bash", "Launch"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper (Door) -> WillowsEnd.ShriekArena (Door)", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.Upper (Door) -> WillowsEnd.Upper", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.Upper (Door)", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "WillowsEnd.BoulderHeart", "WillowsEnd.RedirectHeart", "WillowsEnd.BurrowHeart", "WillowsEnd.MinibossHeart", "WillowsEnd.SpinLasersHeart", "WillowsEnd.GlideHeart", "WillowsEnd.SpinPortalsHeart"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> C.WillowsEnd.Upper", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.BurrowHeart", player), lambda s: s.has_all(("Burrow", "Launch", "Double Jump", "Dash", "Bash", "Grapple", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 30))], [], "WillowsEnd.Upper", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.MiniBossFight", player), lambda s: s.has_all(("Launch", "Dash", "Glide", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.East", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('combat', 'CrystalMiner')], [], "WillowsEnd.Upper", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.East", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.West", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.UpperHeartPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Bow', 1))], [], "WillowsEnd.Upper", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.UpperHeartPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WillowsEnd.Upper", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.UpperHeartPath", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.ShriekArena (Door) -> WillowsEnd.Upper (Door)", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.ShriekArena (Door) -> WillowsEnd.ShriekArena", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.ShriekArena -> WillowsEnd.ShriekArena (Door)", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.ShriekArena -> Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.MiniBossFight -> C.WillowsEnd.MiniBossFight", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.MiniBossFight -> H.WillowsEnd.MiniBossFight", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.MiniBossFight -> WillowsEnd.MinibossHeart", player), lambda s: s.has_all(("Regenerate", "Bash", "Dash", "Double Jump", "Launch"), player) and has_enough_resources([('wall', ('Boss', 300)), ('db', 60)], [], "WillowsEnd.MiniBossFight", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.MiniBossFight -> WillowsEnd.Upper", player), lambda s: s.has_all(("Launch", "Dash", "Glide", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> C.WillowsEnd.West", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.West -> E.WillowsEnd.West", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.SpinLasersHeart", player), lambda s: s.has_all(("Launch", "Double Jump", "Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 30))], [], "WillowsEnd.West", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.InnerTP", player), lambda s: s.has_any(("Bash", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "WillowsEnd.West", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.InnerTP", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [('combat', 'MaceMiner')], "WillowsEnd.West", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.Upper", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 10)), ('energy', ('Grenade', 1))], [], "WillowsEnd.West", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.Upper", player), lambda s: s.has("Launch", player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "WillowsEnd.West", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.GlideHeartPath", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath -> C.WillowsEnd.GlideHeartPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath -> H.WillowsEnd.GlideHeartPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath -> WillowsEnd.GlideRooms", player), lambda s: s.has_all(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath -> WillowsEnd.West", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms -> C.WillowsEnd.GlideRooms", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms -> E.WillowsEnd.GlideRooms", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms -> E.WillowsEnd.GlideRooms", player), lambda s: has_enough_resources([('energy', ('Bow', 1))], [], "WillowsEnd.GlideRooms", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms -> WillowsEnd.GlideHeart", player), lambda s: s.has("Glide", player) and has_enough_resources([('wall', ('BreakWall', 30))], [], "WillowsEnd.GlideRooms", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms -> WillowsEnd.WindSpinOre", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms -> WillowsEnd.GlideHeartPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> C.WillowsEnd.UpperHeartPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> E.WillowsEnd.UpperHeartPath", player), lambda s: s.has_all(("BreakCrystal", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> E.WillowsEnd.UpperHeartPath", player), lambda s: has_enough_resources([('energy', ('Bow', 1))], [], "WillowsEnd.UpperHeartPath", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("Grapple", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.Upper", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Bash", "Grapple", "Launch", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Bash", "Grapple", "Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint -> C.WillowsEnd.UpperHeartCheckpoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint -> WillowsEnd.SpinPortalsHeart", player), lambda s: has_enough_resources([('wall', ('BreakWall', 30))], [], "WillowsEnd.UpperHeartCheckpoint", s, player, options, True), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint -> WillowsEnd.UpperRightEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint -> WillowsEnd.UpperHeartPath", player), lambda s: s.has("WillowsEnd.SpinPortalsHeart", player), "or")
    add_rule(world.get_entrance("Tokk -> GladesTown.HandToHandPouch", player), lambda s: s.has("EastHollow.HandToHandMap", player), "or")
    add_rule(world.get_entrance("TwillenShop -> GladesTown.TwillenGemQuest", player), lambda s: s.has("LowerWastes.EerieGemQI", player), "or")
    add_rule(world.get_entrance("TwillenShop -> TwillenShop.Overcharge", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("TwillenShop -> TwillenShop.Wingclip", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("TwillenShop -> TwillenShop.Swap", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("TwillenShop -> TwillenShop.Vitality", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("TwillenShop -> TwillenShop.Energy", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("TwillenShop -> TwillenShop.Finesse", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("TwillenShop -> TwillenShop.TripleJump", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("TwillenShop -> TwillenShop.LightHarvest", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("OpherShop -> OpherShop.Spike", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("OpherShop -> OpherShop.SpiritSmash", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("OpherShop -> OpherShop.SpiritStar", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("OpherShop -> OpherShop.Blaze", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("OpherShop -> OpherShop.Sentry", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("OpherShop -> OpherShop.Teleport", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("OpherShop -> OpherShop.ShockSmash", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("OpherShop -> OpherShop.StaticStar", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("OpherShop -> OpherShop.ExplodingSpike", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("OpherShop -> OpherShop.RapidSentry", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("OpherShop -> OpherShop.ChargeBlaze", player), lambda s: can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("OpherShop -> OpherShop.WaterBreath", player), lambda s: s.has("InnerWellspring.WaterEscape", player) and can_buy_shop(s, player), "or")
    add_rule(world.get_entrance("TuleyShop -> GladesTown.RegrowTheGlades", player), lambda s: s.has_all(("TuleyShop.SelaFlowers", "TuleyShop.StickyGrass", "TuleyShop.Lightcatchers", "TuleyShop.BlueMoon", "TuleyShop.SpringPlants", "TuleyShop.LastTree"), player), "or")
    add_rule(world.get_entrance("TuleyShop -> TuleyShop.LastTreeBranchRejected", player), lambda s: s.has("WoodsEntry.LastTreeBranch", player), "or")
    add_rule(world.get_entrance("TuleyShop -> TuleyShop.SelaFlowers", player), lambda s: s.has("UpperWastes.FlowersSeed", player), "or")
    add_rule(world.get_entrance("TuleyShop -> TuleyShop.StickyGrass", player), lambda s: s.has("EastPools.GrassSeed", player), "or")
    add_rule(world.get_entrance("TuleyShop -> TuleyShop.Lightcatchers", player), lambda s: s.has("UpperDepths.LightcatcherSeed", player), "or")
    add_rule(world.get_entrance("TuleyShop -> TuleyShop.BlueMoon", player), lambda s: s.has("InnerWellspring.BlueMoonSeed", player), "or")
    add_rule(world.get_entrance("TuleyShop -> TuleyShop.SpringPlants", player), lambda s: s.has("UpperReach.SpringSeed", player), "or")
    add_rule(world.get_entrance("TuleyShop -> TuleyShop.LastTree", player), lambda s: s.has("WoodsEntry.TreeSeed", player), "or")


def set_gorlek_rules(world: Multiworld, player: int, options: WotWOptions):
    """Gorlek (or medium) rules."""
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "MarshSpawn.Main", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("HowlsDen.RainLifted", player) and has_enough_resources([('db', 10)], [], "MarshSpawn.Main", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Bash", "Launch"), player) and has_enough_resources([('db', 10)], [('energy', ('Grenade', 1))], "MarshSpawn.Main", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Bash", "Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.Main", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Bash", "HowlsDen.RainLifted", "Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.BridgeEX", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.BridgeEX", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.BridgeEX", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.BridgeEX", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.Main", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.Main", player), lambda s: s.has_all(("Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.OpherBarrier", player), lambda s: s.has_all(("MarshSpawn.LogBroken", "Hammer", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.CaveEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.BrokenBridge", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.BrokenBridge", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.CaveKS", player), lambda s: s.has_any(("Double Jump", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.Cave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LifepactLedge", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LifepactLedge", player), lambda s: has_enough_resources([], [('db', 10)], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge -> MarshSpawn.BurrowFightArena", player), lambda s: has_enough_resources([], [('db', 10)], "MarshSpawn.LifepactLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.LifepactLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.LifepactLedge", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.LifepactLedge", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 10)], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BurrowsOpen", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BurrowsOpen", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BurrowsOpen", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "MarshSpawn.BurrowsEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.DamageTreeOpen", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_any(("Double Jump", "Dash", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.BurrowsEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Clean Water", player) and has_enough_resources([], [('db', 10)], "MarshSpawn.BurrowsEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and has_enough_resources([], [('db', 10)], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([], [('db', 10)], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Launch", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and has_enough_resources([], [('db', 10)], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> PoolsApproach.WheelWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> PoolsApproach.WheelFreed", player), lambda s: s.has_all(("PoolsApproach.WheelWall", "Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([], [('db', 10)], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has_any(("PoolsApproach.WheelFreed", "Double Jump", "Launch"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has("Hammer", player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 10)], [], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Glide", player) and s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor -> MarshSpawn.HowlApproach", player), lambda s: s.has_all(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.RecklessShard", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and s.has("Dash", player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.RecklessShard", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.HowlApproach", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "Dash", "Bash"), player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.HowlApproach", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "Dash", "Bash"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.AboveHowlArena", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Hammer", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangEC", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangPlatform", player), lambda s: s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangPlatform", player), lambda s: has_enough_resources([], [('db', 10)], "MarshSpawn.AboveHowlArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.FangEC", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('db', 10)], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance -> MarshSpawn.MokkTheBrave", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit -> HowlsDen.RightHC", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [], "HowlsDen.UpperLoopExit", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit -> MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player) and s.has_any(("Glide", "Sword"), player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> MarshSpawn.HowlsDenEntrance", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Bash", player) and can_enter_area(MarshSpawn, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "HowlsDen.AboveBoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.RightHC", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "HowlsDen.UpperLoopEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.AboveBoneBridge", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.UpperLoopExit", player), lambda s: s.has_all(("HowlsDen.UpperLoopEntranceBarrier", "Glide"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.UpperLoopExit", player), lambda s: s.has_all(("HowlsDen.UpperLoopEntranceBarrier", "Glide"), player) and has_enough_resources([], [('combat', 'Slug')], "HowlsDen.UpperLoopEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveDoorKS", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveDoorKS", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 10)], [], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.UpperLoopEntrance", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.UpperLoopEntrance", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor -> HowlsDen.OutsideSecretRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor -> HowlsDen.OutsideSecretRoom", player), lambda s: has_enough_resources([], [('db', 10)], "HowlsDen.BoneBridgeDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.BoneBridgeDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.BoneBridgeDoor", player), lambda s: has_enough_resources([], [('db', 10)], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('db', 10)], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 10)], [], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and has_enough_resources([('db', 10)], [], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 16))], [], "HowlsDen.MidwayBottomLoop", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('wall', ('BreakWall', 16)), ('energy', ('Grenade', 1))], [], "HowlsDen.MidwayBottomLoop", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 16)), ('energy', ('Grenade', 1))], [('db', 10)], "HowlsDen.MidwayBottomLoop", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom -> HowlsDen.LeftSecretRoom", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom -> HowlsDen.LeftSecretRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "HowlsDen.SecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 10)], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has_all(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.DoubleJumpApproach", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.AboveTeleporter", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge -> HowlsDen.DoubleJumpApproach", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Launch", "Bash"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "MarshPastOpher.MillView", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 10)], "MarshPastOpher.OpherSkipBranch", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Launch", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshPastOpher.OpherSkipBranch", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart -> MarshPastOpher.SpiritTrial", player), lambda s: s.has_all(("MarshPastOpher.TrialActivation", "Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart -> MarshPastOpher.BowPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk -> MarshPastOpher.TrialLeftEX", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk -> MarshPastOpher.TrialLeftEX", player), lambda s: has_enough_resources([], [('db', 10)], "MarshPastOpher.UnderTrunk", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> H.MarshPastOpher.TrialArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialActivation", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialActivation", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('db', 10)], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialEC", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialEC", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.UnderTrunk", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.BowPath", player), lambda s: s.has_any(("Sword", "Hammer", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.BowPath", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('Grenade', 1))], [], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.SwingPoleEX", player), lambda s: s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.BowPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.SwingPoleEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 10), ('energy', ('Grenade', 1))], [], "MarshPastOpher.BowPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.BowApproach", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.BowApproach", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "MarshPastOpher.BowPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.BowApproach", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.MillView", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.MillView", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshPastOpher.BowPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.TrialStart", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.BowArea", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.BowArea", player), lambda s: has_enough_resources([], [('db', 10)], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Launch"), player) and has_enough_resources([('energy', ('Bow', 2))], [], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Triple Jump", "Glide"), player) and has_enough_resources([('energy', ('Bow', 2))], [], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.UpperBowArea", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.UpperBowArea", player), lambda s: s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'Skeeto'), ('energy', ('Bow', 2))], [], "MarshPastOpher.BowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.UpperBowArea", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Bow', 2))], [], "MarshPastOpher.BowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.UpperBowArea", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "MarshPastOpher.BowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.BowApproach", player), lambda s: s.has_any(("Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.BowApproach", player), lambda s: has_enough_resources([], [('db', 10)], "MarshPastOpher.BowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea -> MarshPastOpher.LeftEyestone", player), lambda s: has_enough_resources([('energy', ('Bow', 1))], [], "MarshPastOpher.UpperBowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea -> MarshPastOpher.RightEyestone", player), lambda s: has_enough_resources([('energy', ('Bow', 1))], [], "MarshPastOpher.UpperBowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> H.MarshPastOpher.PoolsPathEast", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> E.MarshPastOpher.PoolsPathEast", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.CeilingEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.CeilingEX", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshPastOpher.PoolsPathEast", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Bat')], [], "MarshPastOpher.PoolsPathEast", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Bash", "Sword"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Spear', 1))], [('db', 10)], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Launch", "Hammer"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Launch", "Hammer"), player) and has_enough_resources([], [('db', 10)], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEast", player), lambda s: has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has_all(("Bash", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 10)], "MarshPastOpher.PoolsPathOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Sword", "Hammer", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('db', 10)], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 10)], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter -> MidnightBurrows.BelowLupo", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter -> MidnightBurrows.BelowLupo", player), lambda s: has_enough_resources([], [('db', 16)], "MidnightBurrows.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("MarshSpawn.BurrowsOpen", "Bash", "Double Jump"), player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo -> MidnightBurrows.LeftKS", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo -> MidnightBurrows.LeftKS", player), lambda s: has_enough_resources([], [('db', 15)], "MidnightBurrows.BelowLupo", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo -> MidnightBurrows.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo -> MidnightBurrows.Central", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo -> MidnightBurrows.Central", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword", "Hammer", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo -> MidnightBurrows.Central", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('db', 15)], "MidnightBurrows.BelowLupo", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.LupoMap", player), lambda s: can_buy_map(s, player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.DeflectorShard", player), lambda s: s.has_all(("MidnightBurrows.Lever", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.DeflectorShard", player), lambda s: s.has("MidnightBurrows.Lever", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.TabletRoom", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.PortalRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.PortalRoom", player), lambda s: has_enough_resources([], [('db', 15)], "MidnightBurrows.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.LeverRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.LeverRoom", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.LeverRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.LeverRoom", player), lambda s: s.has_any(("Double Jump", "Dash", "Bash", "Sword", "Hammer"), player) and has_enough_resources([('db', 15)], [], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.LeverRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.East", player), lambda s: s.has_all(("MidnightBurrows.Lever", "Sword"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.East", player), lambda s: s.has_all(("MidnightBurrows.Lever", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.Central", player), lambda s: has_enough_resources([('db', 15)], [], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.LowerKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.LowerKS", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.LowerKS", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 15)], [], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 15)], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.East -> MidnightBurrows.DenConnection", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.East -> MidnightBurrows.DenConnection", player), lambda s: has_enough_resources([], [('db', 10)], "MidnightBurrows.East", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 15)], [], "MidnightBurrows.PortalCorridor", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS -> MidnightBurrows.UpperKS", player), lambda s: s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Glide", "WestHollow.FullyDrained"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Glide", "WestHollow.UpperDrainLeverPulled"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and can_enter_area(MarshPastOpher, s, player, options), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and can_enter_area(MarshPastOpher, s, player, options) and has_enough_resources([], [('db', 10)], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.MokiByTwillen", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: has_enough_resources([('energy', ('Bow', 1))], [('db', 10)], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen -> WestHollow.UpperDrainLeverPulled", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen -> WestHollow.UpperDrainLeverPulled", player), lambda s: has_enough_resources([], [('energy', ('Bow', 1))], "WestHollow.MokiByTwillen", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen -> WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained", "Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.Entrance", player), lambda s: has_enough_resources([], [('db', 20)], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.HollowDrainMiddle", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("WestHollow.UpperTongueExtended", "WestHollow.FullyDrained"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("WestHollow.UpperTongueExtended", "WestHollow.UpperDrainLeverPulled"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("Double Jump", "WestHollow.FullyDrained"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("Double Jump", "WestHollow.UpperDrainLeverPulled"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("Dash", "WestHollow.FullyDrained"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("Dash", "WestHollow.UpperDrainLeverPulled"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('db', 20)], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.Entrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> E.WestHollow.RockPuzzle", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Launch", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and s.has("Launch", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1)), ('energy', ('Grenade', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.FullyDrained"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('combat', 'Skeeto'), ('combat', 'Slug'), ('energy', ('Bow', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.UpperDrainLeverPulled"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('combat', 'Skeeto'), ('combat', 'Slug'), ('energy', ('Bow', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "Double Jump", "WestHollow.FullyDrained"), player) and has_enough_resources([], [('combat', 'Slug'), ('db', 10)], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "Double Jump", "WestHollow.UpperDrainLeverPulled"), player) and has_enough_resources([], [('combat', 'Slug'), ('db', 10)], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Launch"), player) and has_enough_resources([('db', 20)], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 20)], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.Entrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Bash"), player) and has_enough_resources([('energy', ('Bow', 1)), ('energy', ('Grenade', 1))], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Bow', 2))], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 10)], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Double Jump", "Dash"), player) and has_enough_resources([('db', 10)], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Water Dash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Double Jump"), player) and has_enough_resources([], [('db', 10)], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Dash", "Double Jump"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.FarLeftEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.UpperTongueRetracted", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.LowerTongueExtended"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.UpperTongueRetracted", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.UpperTongueExtended", "WestHollow.LowerTongueExtended", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('db', 10)], [], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.AboveJumppad", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.AboveJumppad", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.LowerTongueRetracted", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Bash", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.AboveJumppad", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.LowerTongueRetracted", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('energy', ('Bow', 1))], [('combat', 'Slug'), ('db', 10)], "WestHollow.AboveJumppad", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.LowerTongueExtended", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.QuickshotShard", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Dash", "Launch"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('combat', 'Slug'), ('combat', 'Skeeto'), ('combat', 'Skeeto')], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.TrialApproach", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Bash"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.PolesPound", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Slug')], [], "WestHollow.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "WestHollow.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: s.has("Glide", player) and s.has("Bash", player) and has_enough_resources([('db', 10)], [], "WestHollow.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: s.has("Glide", player) and has_enough_resources([('db', 10)], [('combat', 'Slug')], "WestHollow.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.TrialStart -> WestHollow.SpiritTrial", player), lambda s: s.has_all(("WestHollow.TrialActivation", "WestHollow.FullyDrained", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.BelowLupoEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.DashApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has("Water Dash", player) and s.has_any(("Hammer", "Glide"), player) and has_enough_resources([('db', 30), ('combat', 'Slug')], [], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has_all(("Water Dash", "Clean Water"), player) and s.has_any(("Hammer", "Glide"), player) and has_enough_resources([('db', 10), ('combat', 'Slug')], [], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.TrialActivation", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.DoorLever", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.HollowDrainLower", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WestHollow.DashApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.CrusherEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashRightEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashRightEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashRightEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Glide"), player) and has_enough_resources([('combat', 'WeakSlug')], [], "WestHollow.DashRoomTopRight", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashCrushers", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.AboveDashSemisolid", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.AboveDashSemisolid", player), lambda s: s.has("Bash", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.AboveDashSemisolid", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('db', 10)], "WestHollow.DashRoomTopRight", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.AboveDashSemisolid", player), lambda s: s.has_any(("Glide", "Sword"), player) and has_enough_resources([('combat', 'Hornbug')], [], "WestHollow.DashRoomTopRight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> BeetleFight", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.AfterBeetleFight", player), lambda s: s.has_any(("EastHollow.BeetleDefeated", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.VoiceDoorPlatform", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("BeetleFight -> EastHollow.BeetleDefeated", player), lambda s: s.has("Regenerate", player) and s.has_any(("Double Jump", "Launch"), player) and has_enough_resources([('wall', ('Boss', 250)), ('db', 35)], [], "BeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.HornBeetleFightEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.AfterBeetleFight", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.AfterBeetleFight", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.GladesApproachOre", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastHollow.MapMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 10)], [], "EastHollow.MapMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SpikeLanternEX", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SpikeLanternEX", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Bash"), player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SpikeLanternEX", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SpikeLanternEX", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 10)], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.MortarEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and s.has_any(("Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has("EastHollow.BeetleDefeated", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.VoiceDoorPlatform", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Kwolok", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Kwolok", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Grapple", player) and has_enough_resources([('db', 10)], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.DepthsLever", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashEC", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashEC", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashTreeCheckpoint", player), lambda s: s.has_any(("Double Jump", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashTreeCheckpoint", player), lambda s: has_enough_resources([], [('db', 10)], "EastHollow.AboveBash", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.AboveDepths", player), lambda s: s.has("EastHollow.DepthsLever", player) and s.has_any(("Double Jump", "Dash", "Bash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.AboveDepths", player), lambda s: s.has("EastHollow.DepthsLever", player) and has_enough_resources([], [('db', 10)], "EastHollow.AboveBash", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.AfterBeetleFight", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.BashEX", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastHollow.BashTreeCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.AboveBash", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.AboveBash", player), lambda s: s.has_all(("Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.AboveBash", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 10)], [], "EastHollow.BashTreeCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.SilentSwimEC", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.SilentSwimEC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'Balloon'), ('db', 10)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.SilentSwimEC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 20)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimOre", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimLeftEX", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('db', 10)], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.AfterBeetleFight", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.AfterBeetleFight", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 10)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('combat', 'Balloon')], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Grapple", "Dash"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('combat', 'Balloon')], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Water Dash", "Double Jump", "Triple Jump"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('combat', 'Balloon')], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Water Dash", "Double Jump"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('combat', 'Balloon'), ('db', 10)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.DepthsExteriorEX", player), lambda s: s.has_all(("Bash", "Launch"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastHollow.AboveDepths", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.DepthsExteriorEX", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.DepthsExteriorEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastHollow.AboveDepths", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.BashTreeCheckpoint", player), lambda s: s.has("EastHollow.DepthsLever", player) and has_enough_resources([('db', 5)], [], "EastHollow.AboveDepths", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.ArcingShard", player), lambda s: s.has_all(("GladesTown.ClearThorns", "TuleyShop.Lightcatchers", "Bash"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoSwimMiddleEX", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoSwimLeftEX", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Clean Water", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.UpperWest", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple", "TuleyShop.Lightcatchers", "Bash"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.AboveOpher", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LeftAboveCoals", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and s.has_any(("Burrow", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.LowerOre", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.LowerOre", player), lambda s: s.has("Sword", player) and has_enough_resources([('energy', ('Spear', 1))], [], "GladesTown.TwillenHome", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.LowerOre", player), lambda s: has_enough_resources([('energy', ('Spear', 1))], [('db', 10)], "GladesTown.TwillenHome", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.West", player), lambda s: s.has("TuleyShop.SpringPlants", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.West", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Bash"), player) and s.has_any(("Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Double Jump", "Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "TuleyShop.Lightcatchers", "Bash"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "TuleyShop.Lightcatchers", "Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.StickyGrass", "Bash"), player) and s.has_any(("Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.StickyGrass", "TuleyShop.Lightcatchers", "Bash"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has_all(("Bash", "Glide"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has_all(("Bash", "Sword"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('db', 10)], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug')], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug')], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.Teleporter", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash", "TuleyShop.StickyGrass", "Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Double Jump", "Triple Jump", "Hammer"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.StickyGrass", "TuleyShop.Lightcatchers", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperWest", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.MotayHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperWest", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.Lightcatchers", "Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.ArcingShard", player), lambda s: s.has("GladesTown.ClearThorns", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.UpperLeftEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.UpperLeftEX", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.AboveGromHC", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.AboveGromHC", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.MotayHut", player), lambda s: s.has("GladesTown.BuildHuts", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.West", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.Teleporter", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.AboveCaveEX", player), lambda s: s.has_all(("Hammer", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.AboveCaveEX", player), lambda s: s.has("TuleyShop.SpringPlants", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.CaveBurrowEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.Teleporter", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.AcornMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.Teleporter", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Hammer", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Clean Water"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Bow', 4))], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Bow', 4)), ('energy', ('Grenade', 1))], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.BountyShard", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.BountyShard", player), lambda s: s.has("TuleyShop.StickyGrass", player) and s.has_any(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.LeftAboveCoals", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.LeftAboveCoals", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.UpdraftCeilingEX", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.UpdraftCeilingEX", player), lambda s: s.has_all(("TuleyShop.SpringPlants", "Sword"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.AboveOpher", player), lambda s: s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> GladesTown.PlayfulMoki", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> GladesTown.PlayfulMoki", player), lambda s: s.has("TuleyShop.SpringPlants", player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> TuleyShop", player), lambda s: s.has_all(("GladesTown.TuleySpawned", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki -> GladesTown.HoleHut", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki -> GladesTown.HoleHut", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki -> TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> GladesTown.UpdraftCeilingEX", player), lambda s: s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> GladesTown.HoleHutEntrance", player), lambda s: s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has("Launch", player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple"), player) and s.has_any(("Glide", "Sword"), player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> E.WestGlades.PastTown", player), lambda s: s.has("Clean Water", player) and has_enough_resources([], [('energy', ('Bow', 1)), ('energy', ('Grenade', 1))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> E.WestGlades.PastTown", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Bow', 1)), ('energy', ('Grenade', 1))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> E.WestGlades.PastTown", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Bow', 1)), ('energy', ('Grenade', 1))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and has_enough_resources([], [('db', 20)], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('db', 10), ('combat', 'Tentacle')], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('db', 10), ('combat', 'Tentacle')], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([('db', 20)], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: s.has("Bash", player) and can_enter_area(GladesTown, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and can_enter_area(GladesTown, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and can_enter_area(GladesTown, s, player, options) and has_enough_resources([('db', 10)], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash", "Glide"), player) and has_enough_resources([('db', 10)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.Center", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.Center", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump", "Dash"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.PastTown", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.PastTown", player), lambda s: s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('combat', 'Tentacle')], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.PastTown", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.RightOre", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.RightOre", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.Upper", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.LowerPool", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.RightOre", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.RightOre", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.MillApproach", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.MillApproach", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.MillApproach", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "WestGlades.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.SwimOre", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.SwimOre", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.SwimOre", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.Upper", player), lambda s: s.has_any(("Clean Water", "Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.Upper", player), lambda s: has_enough_resources([], [('db', 20)], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.Upper", player), lambda s: s.has("Hammer", player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and can_enter_area(OuterWellspring, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has_any(("Glide", "Sword"), player) and can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([('db', 20)], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword"), player) and can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 20)], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([('energy', ('Grenade', 2))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Bash"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([], [('db', 15)], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Triple Jump"), player) and s.has_any(("Water Dash", "Bash"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("Dash", "Glide", "Sword"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([], [('db', 15)], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has_any(("Dash", "Glide", "Sword"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([], [('db', 15)], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Bash", "Water Dash", "Sword", "Hammer"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([], [('db', 15)], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> H.OuterWellspring.EntranceDoor", player), lambda s: has_enough_resources([('combat', 'Slug')], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.LifeHarvestWallBroken", player), lambda s: s.has_any(("Double Jump", "Bash", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.LifeHarvestWallBroken", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [('combat', 'Slug'), ('combat', 'Mantis')], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Grapple", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Launch", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.BasementEC", player), lambda s: s.has_any(("Double Jump", "Dash", "Grapple", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 15)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.LifeHarvestEntry", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player) and s.has_any(("Double Jump", "Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.LifeHarvestEntry", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player) and has_enough_resources([], [('combat', 'Slug'), ('combat', 'Mantis')], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('db', 15)], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has_all(("Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Hammer"), player) and has_enough_resources([('db', 15)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 15)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and s.has("Glide", player) and has_enough_resources([('energy', ('Grenade', 3))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 3))], [('db', 15)], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 3))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('db', 20)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has("Glide", player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('db', 20)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has_all(("Bash", "Glide"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has("Bash", player) and s.has("Sword", player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('Grenade', 2))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has("Bash", player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('Grenade', 2))], [('db', 20)], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.LifeHarvestEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has_all(("OuterWellspring.LifeHarvestLeverPulled", "Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 15)], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Bash", "Double Jump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Bash", "Double Jump"), player) and has_enough_resources([('db', 15)], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Bash", "Dash", "Glide"), player) and has_enough_resources([('db', 15)], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.EntranceRoofEX", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('db', 15)], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.EastDoor", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('db', 15)], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has_all(("Grapple", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 3))], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Double Jump", player) and s.has_any(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 15)], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has("Glide", player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has("Bash", player) and s.has_any(("Bow", "Spear", "Shuriken", "Grenade", "Blaze", "Grapple"), player) and has_enough_resources([('wall', ('BreakWall', 3)), ('energy', ('Grenade', 1))], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("OuterWellspring.WestDoorBlueMoonFree", "Grapple", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("OuterWellspring.WestDoorBlueMoonFree", "Grapple", "Double Jump"), player) and has_enough_resources([], [('db', 15)], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("OuterWellspring.WestDoorBlueMoonFree", "Grapple"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('db', 15)], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 15)], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 15)], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Bash", "Launch"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.WestDoorBlueMoonFree", player), lambda s: has_enough_resources([('wall', ('BreakWall', 3))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('Grenade', 1))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('Grenade', 2))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("InnerWellspring.TopDoorOpen", "Bash"), player) and s.has_any(("Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("InnerWellspring.TopDoorOpen", "Bash", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 10)], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.WestDoor", player), lambda s: s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('db', 15)], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([], [('db', 15)], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> WestGlades.MillApproach", player), lambda s: can_enter_area(WestGlades, s, player, options) and has_enough_resources([('db', 20)], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and has_enough_resources([], [('db', 15)], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('db', 15)], [], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Glide"), player) and has_enough_resources([('db', 15)], [], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has("Launch", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 15)], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.TopDoor", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.TopDoor", player), lambda s: s.has_all(("InnerWellspring.TopDoorOpen", "Double Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.WestDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.WestDoor", player), lambda s: has_enough_resources([], [('db', 15)], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.EastDoor", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 15)], [], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.EastDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.EastDoor", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.TrialActivation", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> WestGlades.MillApproach", player), lambda s: s.has("Sword", player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> WestGlades.MillApproach", player), lambda s: can_enter_area(WestGlades, s, player, options) and has_enough_resources([], [('db', 20)], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> WestGlades.MillApproach", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.EntranceDoor", player), lambda s: has_enough_resources([], [('db', 20)], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.TrialApproach", player), lambda s: s.has("Grapple", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.TrialApproach", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('combat', 'Bee')], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEX", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEX", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEC", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.TrialRoom", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.TrialRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.EastDoor", player), lambda s: s.has_any(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.EastDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.EastDoor", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.EastDoor", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and has_enough_resources([('db', 15)], [], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.AboveEntranceDoor", player), lambda s: has_enough_resources([('db', 15)], [], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallMidpoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom -> OuterWellspring.TrialStart", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> OuterWellspring.SpiritTrial", player), lambda s: s.has_all(("OuterWellspring.TrialActivation", "Dash", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> OuterWellspring.TrialRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> OuterWellspring.TrialRoom", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> OuterWellspring.TrialRoom", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> OuterWellspring.TrialRoom", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThornShardArea", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThornShardArea", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThornShardArea", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.DrainRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 15)], [], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and has_enough_resources([('db', 15)], [], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ShortcutLever", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ShortcutLever", player), lambda s: s.has("Grapple", player) and has_enough_resources([('db', 15)], [], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ShortcutLever", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.EntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.ShortcutLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.ThornShardArea", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.EntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and has_enough_resources([('db', 15)], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("InnerWellspring.DrainRoomBottomWheel", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("InnerWellspring.DrainRoomBottomWheel", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("InnerWellspring.DrainLever", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("InnerWellspring.DrainLever", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Clean Water", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 4))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaEntrance", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaEntrance", player), lambda s: s.has("InnerWellspring.DrainLever", player) and has_enough_resources([], [('db', 15)], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaEntrance", player), lambda s: s.has_all(("InnerWellspring.DrainLever", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainHC", player), lambda s: s.has_any(("Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainHC", player), lambda s: has_enough_resources([], [('db', 20)], "InnerWellspring.DrainAreaEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('db', 20)], "InnerWellspring.DrainAreaEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainAreaEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 20)], "InnerWellspring.DrainAreaEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainHC", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainHC", player), lambda s: s.has_all(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainHC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainAreaExit", player), lambda s: s.has_any(("Glide", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "InnerWellspring.DrainAreaEX", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('db', 15)], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Sword", player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Sword", player) and has_enough_resources([], [('db', 15)], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and s.has_any(("Grapple", "Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 15)], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("InnerWellspring.DrainRoomBottomWheel", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has("Glide", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('db', 20)], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Clean Water", "Sword"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Clean Water", "Dash"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Clean Water", "Grapple", "Hammer"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoomTopWheel", player), lambda s: has_enough_resources([('wall', ('BreakWall', 16))], [], "InnerWellspring.DrainRoomCenter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoom", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoom", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 20)], [], "InnerWellspring.DrainRoomCenter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Hammer", "Clean Water"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.DrainRoomCenter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoomTop", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoomTop", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainRoomCenter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.LaserOre", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.LaserOre", player), lambda s: s.has("Glide", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.LaserOre", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('combat', 'Miner')], "InnerWellspring.DrainRoomTop", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('db', 15)], "InnerWellspring.DrainRoomTop", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('db', 15)], "InnerWellspring.DrainRoomTop", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainRoomTop", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has_all(("InnerWellspring.DrainRoomTopWheel", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainRoomTop", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.DrainLever", player), lambda s: s.has("InnerWellspring.UpperCorruption", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.LeverEC", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.LeverEC", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("InnerWellspring.UpperCorruption", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.LeverEC", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.LeverEC", player), lambda s: s.has_all(("InnerWellspring.UpperCorruption", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.LeverEC", player), lambda s: s.has("InnerWellspring.UpperCorruption", player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.AbovePole", player), lambda s: has_enough_resources([('db', 15)], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.AbovePole", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.WestDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.WestDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.DrainRoomTop", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.AbovePole -> InnerWellspring.BelowDrainLever", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.MiddleDoorsOpen", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.MiddleDoorsOpen", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.LupoMap", player), lambda s: s.has("Grapple", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTreeEX", player), lambda s: s.has_all(("Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTree", player), lambda s: s.has_any(("Bash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.SpinArena", player), lambda s: has_enough_resources([('combat', 'Lizard'), ('combat', 'Lizard'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Miner')], [], "InnerWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.SpinningRoomOpen", player), lambda s: s.has("InnerWellspring.SpinArena", player) and has_enough_resources([('wall', ('BreakWall', 16))], [], "InnerWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Grapple", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('db', 15)], "InnerWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("InnerWellspring.TopDoorOpen", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.TopSecondRoom", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Grapple", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.PastSpinPuzzle", player), lambda s: s.has_all(("InnerWellspring.SpinPuzzleSolved", "Clean Water"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.EastDoor", player), lambda s: s.has_all(("InnerWellspring.SpinningRoomOpen", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Grapple", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('combat', 'Miner')], "InnerWellspring.PastSpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.SpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.SpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player) and has_enough_resources([], [('db', 15)], "InnerWellspring.PastSpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.TopSecondRoom", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.GrappleThroughZigZagSpikes", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Launch", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.TopSecondRoom", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.GrappleThroughZigZagSpikes", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Glide", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('combat', 'Miner')], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Double Jump", "Bash"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Double Jump", "Bash"), player) and has_enough_resources([], [('db', 20)], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'Miner')], [], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and has_enough_resources([('combat', 'Miner')], [('db', 20)], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Dash", "Bash"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Dash", "Bash"), player) and has_enough_resources([], [('db', 20)], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Sword", player) and has_enough_resources([('combat', 'Miner')], [], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Dash"), player) and has_enough_resources([('combat', 'Miner')], [('db', 20)], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Bash"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'Miner')], [], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Clean Water", "Dash", "Bash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Clean Water", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('combat', 'Miner')], [], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Bash"), player) and s.has_any(("Dash", "Sword"), player) and has_enough_resources([('db', 20)], [], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword"), player) and has_enough_resources([('db', 20), ('combat', 'Miner')], [], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Launch", player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 20)], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.BlueMoonSeed", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.AboveTpEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 15)], "InnerWellspring.EscapeSequence", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> EastHollow.SilentSwimWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and has_enough_resources([('db', 10)], [], "WoodsEntry.ShriekMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> WoodsEntry.LedgeOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> WoodsEntry.FirstMud", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> WoodsEntry.FirstMud", player), lambda s: has_enough_resources([], [('combat', 'Tentacle'), ('db', 10)], "WoodsEntry.ShriekMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.MudPitEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsEntry.FirstMud", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.BelowTeleporter", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.ShriekMeet", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.ShriekMeet", player), lambda s: has_enough_resources([], [('combat', 'Tentacle'), ('db', 10)], "WoodsEntry.FirstMud", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.FamilyHut -> WoodsEntry.ShriekMeet", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.FamilyHut -> WoodsEntry.Teleporter", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.FirstMud", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has_all(("Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has_all(("Grapple", "Hammer", "Bash"), player) and has_enough_resources([('db', 15)], [], "WoodsEntry.BelowTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player) and s.has("Sword", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsEntry.BelowTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 15)], "WoodsEntry.BelowTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('combat', 'Balloon'), ('combat', 'Balloon')], [], "WoodsEntry.BelowTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsEntry.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsEntry.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> WoodsEntry.LowerKS", player), lambda s: s.has_any(("Launch", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> WoodsEntry.UpperKS", player), lambda s: s.has_all(("Hammer", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> WoodsEntry.UpperKS", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsEntry.TwoKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has("WoodsEntry.KeystoneDoor", player) and can_enter_area(WoodsMain, s, player, options) and has_enough_resources([('db', 10)], [], "WoodsEntry.TwoKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> WoodsEntry.BelowTeleporter", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsEntry.KeystoneDoor", player), lambda s: can_open_door(WoodsEntry.KeystoneDoor, s, player) and has_enough_resources([('db', 10)], [], "WoodsMain.AfterKuMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'Tentacle')], [], "WoodsMain.AfterKuMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("WoodsEntry.KeystoneDoor", player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 10)], [], "WoodsMain.AfterKuMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Flap", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Bash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'Balloon'), ('combat', 'Balloon')], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'Balloon'), ('combat', 'Balloon')], [('db', 15)], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('db', 20), ('energy', ('Grenade', 2))], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 20)], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Glide", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.LowerKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.LowerKS", player), lambda s: s.has_all(("Glide", "Bash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.LowerKS", player), lambda s: s.has_all(("Glide", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.LowerKS", player), lambda s: s.has_all(("Glide", "Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.FourKeystoneRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.WallOreLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Glide", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: s.has("Flap", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: s.has("Flap", player) and has_enough_resources([], [('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Skeeto')], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.RightKS", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.RightKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.UpperKS", player), lambda s: s.has_all(("Flap", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.UpperKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.UpperKS", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.UpperKS", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 3))], [('energy', ('Grenade', 1))], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LeftKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('combat', 'Balloon'), ('db', 15)], [], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LeftKS", player), lambda s: s.has("Launch", player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LowerKS", player), lambda s: s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and s.has_any(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LowerKS", player), lambda s: s.has_all(("WoodsMain.KSRoomYellowBarrierBroken", "Hammer", "Bash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsMain.GiantSkull", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BalloonLure", player), lambda s: s.has_all(("Bash", "Sword"), player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsMain.GiantSkull", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has("Launch", player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.has_all(("WoodsMain.BalloonLureBlobDestroyed", "Flap", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("WoodsMain.BalloonLureBlobDestroyed", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.GiantSkull", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.GiantSkull", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.HiddenOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Bash"), player) and has_enough_resources([('db', 15)], [], "WoodsMain.BelowHiddenOre", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.PetrifiedHowl", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.AboveHowl", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.AboveHowl", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.PetrifiedHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BrokenOwl", player), lambda s: s.has("Glide", player) and has_enough_resources([('wall', ('BreakWall', 3)), ('db', 10)], [], "WoodsMain.PetrifiedHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BrokenOwl", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('wall', ('BreakWall', 3)), ('db', 15)], [], "WoodsMain.PetrifiedHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BrokenOwl", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BrokenOwl", player), lambda s: s.has_all(("Dash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 10)], [], "WoodsMain.PetrifiedHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BelowHiddenOre", player), lambda s: s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl -> WoodsMain.AboveHowl", player), lambda s: s.has("Dash", player) and has_enough_resources([('db', 15)], [], "WoodsMain.BrokenOwl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl -> WoodsMain.AboveHowl", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl -> WoodsMain.TrialStart", player), lambda s: s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart -> WoodsMain.MidwayTrial", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart -> WoodsMain.MidwayTrial", player), lambda s: s.has_all(("Double Jump", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart -> WoodsMain.AboveHowl", player), lambda s: s.has_all(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.TrialEnd", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.TrialEnd", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "Hammer", "Burrow"), player) and has_enough_resources([('db', 15)], [], "WoodsMain.MidwayTrial", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.TrialEnd", player), lambda s: s.has_all(("Double Jump", "Bash", "Burrow"), player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.TrialEnd", player), lambda s: s.has_all(("Double Jump", "Bash", "Burrow", "Hammer"), player) and has_enough_resources([('db', 15)], [], "WoodsMain.MidwayTrial", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.TrialEnd", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 2)), ('db', 15)], [], "WoodsMain.MidwayTrial", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.BeforeLog", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.OrangeTree", player), lambda s: s.has_all(("Burrow", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.OrangeTree", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.AboveHowl", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.TrialStart", player), lambda s: s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.OverflowShard", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.MidwayTrial", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.AboveHowl", player), lambda s: s.has_any(("Double Jump", "Bash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.BeforeLog", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.OrangeTree", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.OrangeTree", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.BeforeLog", player), lambda s: s.has("Double Jump", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.BeforeLog", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('db', 20)], "WoodsMain.AboveHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player) and s.has("Dash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.AboveHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 20)], "WoodsMain.AboveHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog -> C.WoodsMain.BeforeLog", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog -> C.WoodsMain.BeforeLog", player), lambda s: has_enough_resources([], [('db', 20)], "WoodsMain.BeforeLog", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog -> WoodsMain.LogBlobDestroyed", player), lambda s: has_enough_resources([('wall', ('BreakWall', 3))], [], "WoodsMain.BeforeLog", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog -> WoodsMain.Teleporter", player), lambda s: s.has("WoodsMain.LogBlobDestroyed", player) and has_enough_resources([], [('combat', 'Balloon'), ('db', 20)], "WoodsMain.BeforeLog", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog -> WoodsMain.OrangeTree", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog -> WoodsMain.OrangeTree", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.BeforeLog", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.LogBlobDestroyed", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.LogBlobDestroyed", player), lambda s: has_enough_resources([], [('energy', ('Grenade', 1)), ('energy', ('Blaze', 1)), ('energy', ('Sentry', 1))], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.AbovePit", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 15)], [], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.BeforeLog", player), lambda s: s.has_all(("WoodsMain.LogBlobDestroyed", "Double Jump"), player) and s.has_any(("Hammer", "Sword", "Triple Jump"), player) and has_enough_resources([('combat', 'Balloon'), ('combat', 'Balloon')], [], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.BeforeLog", player), lambda s: s.has_all(("WoodsMain.LogBlobDestroyed", "Bash"), player) and s.has("Dash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.BeforeLog", player), lambda s: s.has_all(("WoodsMain.LogBlobDestroyed", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('combat', 'Balloon'), ('combat', 'Balloon')], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.BeforeLog", player), lambda s: s.has_all(("WoodsMain.LogBlobDestroyed", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree -> WoodsMain.AbovePit", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree -> WoodsMain.AbovePit", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree -> WoodsMain.BeforeLog", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.OrangeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.Teleporter", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.Teleporter", player), lambda s: has_enough_resources([], [('db', 15)], "WoodsMain.AbovePit", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.OrangeTree", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.OrangeTree", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('db', 15)], "WoodsMain.AbovePit", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.OrangeTree", player), lambda s: s.has("Dash", player) and has_enough_resources([('db', 15)], [], "WoodsMain.AbovePit", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.FeedingGrounds", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.FeedingGrounds", player), lambda s: s.has("Dash", player) and s.has_any(("Bash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.FeedingGrounds", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsShrine", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 15)], [], "WoodsMain.AbovePit", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> WoodsShrine", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 15)], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has("Launch", player) and can_enter_area(LowerWastes, s, player, options), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has("Burrow", player) and can_enter_area(LowerWastes, s, player, options), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("Glide", "Double Jump", "Triple Jump"), player) and can_enter_area(LowerWastes, s, player, options), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("Glide", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player) and can_enter_area(LowerWastes, s, player, options), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("WindtornRuins.Seir", "Bash", "Grapple"), player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("WindtornRuins.Seir", "Bash", "Dash"), player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([('energy', ('Grenade', 2))], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("WindtornRuins.Seir", "Glide", "Bash", "Dash"), player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("WindtornRuins.Seir", "Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> WoodsMain.AbovePit", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.BelowBaurEX", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken", "Double Jump", "Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([('db', 20)], [], "LowerReach.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Bash"), player) and s.has_any(("Dash", "Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurUpperEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurUpperEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Icefall", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Bash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.LeftFurnace", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.LeftFurnace", player), lambda s: s.has("Grapple", player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('combat', 'Nest')], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.LeftFurnace", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 10)], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.LeftFurnace", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.LeftFurnace", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Grapple"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('combat', 'Nest')], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('db', 10)], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Clean Water", "Water Dash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('db', 20)], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([('combat', 'Nest')], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Water Dash"), player) and has_enough_resources([('db', 20)], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Grapple"), player) and has_enough_resources([('db', 10)], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.AboveEntry", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.LupoMap", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.LupoMap", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Bash"), player) and can_buy_map(s, player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2)), ('energy', ('Spear', 1))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump", "Triple Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Spear', 1))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Spear', 1))], [('db', 20)], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Bash", "Hammer"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Bash", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 20)], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [('energy', ('Spear', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump", "Triple Jump", "Bash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump", "Triple Jump", "Bash"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.Entry", player), lambda s: s.has("LowerReach.Lever", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.Entry", player), lambda s: s.has("LowerReach.Lever", player) and has_enough_resources([], [('db', 20)], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveEntry", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump", "Triple Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.LupoMap", player), lambda s: can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.TPLeftEX", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.TPLeftEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.TPLeftEX", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.TPLeftEX", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.CentralEnemyPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.BelowTokk", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.BelowTokk", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.BelowTokk", player), lambda s: s.has_all(("LowerReach.FreezeCentralFurnace", "Bash", "Double Jump"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.KeystoneRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and can_enter_area(UpperReach, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.KeystoneRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and can_enter_area(UpperReach, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump"), player) and can_enter_area(UpperReach, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and can_enter_area(UpperReach, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.ThawCentralFurnace", player), lambda s: s.has_all(("Flap", "Bash"), player) and has_enough_resources([('combat', 'ShieldMiner')], [], "LowerReach.SecondSoup", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.MeltIceEX", player), lambda s: s.has_all(("Bash", "Flap"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.BurrowEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Dash", "Bash"), player) and s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Dash", "Bash"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "LowerReach.SecondSoup", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.BelowLupo", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.BelowLupoEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "LowerReach.BelowLupo", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.BelowLupoEX", player), lambda s: s.has("LowerReach.ThawCentralFurnace", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.BelowLupoEX", player), lambda s: s.has("LowerReach.ThawCentralFurnace", player) and has_enough_resources([], [('db', 20)], "LowerReach.BelowLupo", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.SecondSoup", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.CentralFurnacePedestal", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> E.LowerReach.CentralFurnacePedestal", player), lambda s: has_enough_resources([('combat', 'ShieldMiner')], [('energy', ('Grenade', 1)), ('energy', ('Shuriken', 1))], "LowerReach.CentralFurnacePedestal", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> LowerReach.BelowLupo", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> LowerReach.BelowLupo", player), lambda s: has_enough_resources([], [('db', 20)], "LowerReach.CentralFurnacePedestal", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> LowerReach.WindChannel", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> LowerReach.WindChannel", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindBottomEX", player), lambda s: s.has("LowerReach.WindLantern", player) and s.has_any(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindBottomEX", player), lambda s: s.has("LowerReach.WindLantern", player) and has_enough_resources([], [('db', 20)], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and has_enough_resources([], [('db', 20)], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.CentralFurnacePedestal", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.SoupMoki", player), lambda s: s.has("Launch", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.SoupMoki", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 20)], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> E.LowerReach.SoupMoki", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> E.LowerReach.SoupMoki", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindHiddenEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindHiddenEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('db', 20)], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindHiddenEX", player), lambda s: s.has("Glide", player) and s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindHiddenEX", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('db', 20)], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindHiddenEX", player), lambda s: s.has_any(("Dash", "Sword", "Hammer", "Launch"), player) and has_enough_resources([('db', 20)], [], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindHiddenEX", player), lambda s: s.has_all(("Launch", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindChannel", player), lambda s: s.has_any(("Double Jump", "Dash", "Launch", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindChannel", player), lambda s: has_enough_resources([], [('db', 20)], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.East -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.TPLantern", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.SnowballHC", player), lambda s: s.has_all(("LowerReach.RolledSnowball", "Burrow"), player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.EastEnemyPaths", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.EastEnemyPaths", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player) and has_enough_resources([], [('db', 20)], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: s.has_all(("LowerReach.FreezeEastFurnace", "Bash", "Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerReach.PastSnowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("LowerReach.RolledSnowball", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.RoofRightEX", player), lambda s: s.has_all(("LowerReach.FreezeEastFurnace", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and has_enough_resources([('db', 20)], [], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("LowerReach.FreezeEastFurnace", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("LowerReach.FreezeEastFurnace", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.EastDoorLantern", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer", "Glide", "Dash", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.SwimmingPool", player), lambda s: s.has_any(("Glide", "Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.SwimmingPool", player), lambda s: has_enough_resources([], [('db', 20)], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.IceCavern", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.IceCavern", player), lambda s: s.has_all(("LowerReach.FreezeEastFurnace", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.IceCavern", player), lambda s: s.has_all(("LowerReach.FreezeEastFurnace", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 20)], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "LowerReach.ThawEastFurnace", "Water Dash", "Clean Water", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.EastFurnace", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.EastFurnace", player), lambda s: s.has_all(("LowerReach.ThawEastFurnace", "Water Dash", "Double Jump", "Clean Water"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.EastFurnace", player), lambda s: s.has_all(("LowerReach.ThawEastFurnace", "Water Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.WindSpinners", player), lambda s: s.has_all(("LowerReach.ArenaBeaten", "Launch"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.WindSpinners", player), lambda s: s.has_all(("LowerReach.ArenaBeaten", "Launch"), player) and has_enough_resources([], [('db', 20)], "LowerReach.ArenaArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.SwimmingPool", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Double Jump", "Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.SwimmingPool", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.SwimmingPool", player), lambda s: s.has("LowerReach.EastDoorLantern", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('db', 20)], [], "LowerReach.ArenaArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.SwimmingPool", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Water Dash", "Hammer"), player) and has_enough_resources([('db', 20)], [], "LowerReach.ArenaArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.SwimmingPool", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.WindSpinners", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and has_enough_resources([], [('db', 20)], "LowerReach.WindSpinners", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.ArenaArea", player), lambda s: s.has("LowerReach.ArenaBeaten", player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> H.LowerReach.WispPathCheckpoint", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> E.LowerReach.WispPathCheckpoint", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> E.LowerReach.WispPathCheckpoint", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.BridgeWispPath", player), lambda s: s.has("Launch", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.BridgeWispPath", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 20)], "LowerReach.WispPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.WindSpinners", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 20)], [], "LowerReach.WispPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.SnowEscape", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.SnowEscape", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.SnowEscape", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.BridgeWispPath", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.WispPathCheckpoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has("Launch", player) and s.has_any(("Clean Water", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 20)], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has_all(("Dash", "Glide", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has_all(("Dash", "Glide", "Double Jump"), player) and has_enough_resources([], [('db', 20)], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has_all(("Dash", "Glide", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has("Launch", player) and s.has_any(("Clean Water", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 20)], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has_all(("Dash", "Glide", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has_all(("Dash", "Glide", "Double Jump"), player) and has_enough_resources([], [('db', 20)], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has_all(("Dash", "Glide", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> GladesTown.HoleHut", player), lambda s: can_enter_area(GladesTown, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.TownEntry", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Glide", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.TrialStart", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and has_enough_resources([('db', 20)], [], "LowerReach.TownEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.TrialStart", player), lambda s: s.has_all(("Launch", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.TownEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.RightKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.RightKS", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TownEntry", player), lambda s: s.has_any(("Sword", "Dash", "Double Jump", "Launch"), player) and has_enough_resources([('db', 20)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Dash", "Double Jump", "Launch"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TownEntry", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "Hammer", "Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TownEntry", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer", "Dash", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TownEntry", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.ThawFurnace", player), lambda s: s.has_all(("Flap", "Bash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.LowerKS", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Water Dash"), player) and has_enough_resources([('db', 20)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has_any(("Clean Water", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([], [('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Dash", "Grapple", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('combat', 'ShieldMiner')], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Dash", "Grapple", "Glide", "Bash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Dash", "Grapple", "Glide", "Bash"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Clean Water", "Dash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('combat', 'ShieldMiner')], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Clean Water", "Dash", "Grapple", "Bash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Dash", "Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Dash", "Grapple", "Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Dash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 20), ('combat', 'ShieldMiner')], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Dash", "Grapple", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([], [('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Clean Water", "Water Dash", "Glide"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Clean Water", "Water Dash", "Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Water Dash", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Water Dash", "Grapple", "Sword"), player) and has_enough_resources([('db', 20)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoupFrozen", player), lambda s: s.has("UpperReach.FreezeFurnace", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Clean Water", "Water Dash"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Water Dash"), player) and s.has_any(("Double Jump", "Bash"), player) and has_enough_resources([('db', 20)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Water Dash"), player) and has_enough_resources([('db', 20)], [('combat', 'ShieldMiner')], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Double Jump"), player) and has_enough_resources([], [('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Double Jump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has("UpperReach.ThawFurnace", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'ShieldMiner'), ('db', 20)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Grapple", "Dash", "Glide"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Grapple", "Dash", "Glide"), player) and has_enough_resources([], [('combat', 'ShieldMiner')], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Grapple"), player) and s.has("Bash", player) and has_enough_resources([('db', 20)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Grapple"), player) and has_enough_resources([('db', 20)], [('combat', 'ShieldMiner')], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlant", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Water Dash", "Glide"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Water Dash", "Glide"), player) and has_enough_resources([], [('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Clean Water", "Water Dash", "Grapple"), player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Clean Water", "Water Dash", "Grapple"), player) and has_enough_resources([], [('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Water Dash", "Grapple"), player) and s.has_any(("Dash", "Sword"), player) and has_enough_resources([('db', 20)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Grapple"), player) and s.has_any(("Dash", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.UpperSoup", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.UpperSoup", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('db', 20)], "UpperReach.KeystoneSnapPlant", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.UpperSoup", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.UpperSoup", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('db', 20)], "UpperReach.KeystoneSnapPlant", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.UpperSoup", player), lambda s: s.has("Sword", player) and has_enough_resources([('db', 20)], [], "UpperReach.KeystoneSnapPlant", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed -> UpperReach.UpperSoupThawed", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed -> UpperReach.UpperSoupThawed", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed -> UpperReach.UpperSoupThawed", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('db', 20)], "UpperReach.KeystoneSnapPlantThawed", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed -> UpperReach.UpperSoupThawed", player), lambda s: s.has("Dash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed -> UpperReach.UpperSoupThawed", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('db', 20)], "UpperReach.KeystoneSnapPlantThawed", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths -> UpperReach.LowerKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths -> UpperReach.KeystoneRoom", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths -> UpperReach.KeystoneRoom", player), lambda s: has_enough_resources([], [('db', 20)], "UpperReach.KeystoneSnapPlantPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths -> UpperReach.LowerKS", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths -> UpperReach.LowerKS", player), lambda s: s.has("Dash", player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths -> UpperReach.LowerKS", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('db', 10)], "UpperReach.KeystoneSnapPlantThawedPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths -> UpperReach.LowerKS", player), lambda s: s.has("Hammer", player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths -> UpperReach.LowerKS", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('db', 10)], "UpperReach.KeystoneSnapPlantThawedPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths -> UpperReach.LowerKS", player), lambda s: s.has_all(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths -> UpperReach.LowerKS", player), lambda s: s.has("Grapple", player) and has_enough_resources([('db', 20)], [], "UpperReach.KeystoneSnapPlantThawedPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.LowerKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.UpperKS", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.SwingPoleEX", player), lambda s: s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.KeystoneSnapPlant", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 20)], [], "UpperReach.UpperSoupPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths -> UpperReach.LowerKS", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths -> UpperReach.LowerKS", player), lambda s: s.has_all(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths -> UpperReach.MiddleRightKS", player), lambda s: s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> E.UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "BreakCrystal", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> E.UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "BreakCrystal", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> E.UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Clean Water", "BreakCrystal"), player) and s.has_any(("Bow", "Spear"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> E.UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Clean Water", "Grapple", "BreakCrystal"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.OutsideTreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "UpperReach.OutsideTreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge -> UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.TreeRoomLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge -> UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.TreeRoomLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge -> UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.TreeRoomLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge -> UpperReach.TreeOre", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge -> UpperReach.TreeOre", player), lambda s: s.has_all(("Launch", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.TreeRoomLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.TreeRoomLedge", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> UpperDepths.EntrySpikesEX", player), lambda s: has_enough_resources([('db', 10)], [], "UpperDepths.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> UpperDepths.FirstFirefly", player), lambda s: s.has("Glide", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> UpperDepths.FirstFirefly", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('combat', 'Bat')], "UpperDepths.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> UpperDepths.FirstFirefly", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'BombSlug'), ('combat', 'BombSlug'), ('db', 30)], [], "UpperDepths.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> EastHollow.AboveDepths", player), lambda s: s.has_all(("EastHollow.DepthsOpen", "Launch"), player) and s.has("Double Jump", player) and can_enter_area(EastHollow, s, player, options), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> EastHollow.AboveDepths", player), lambda s: s.has_all(("EastHollow.DepthsOpen", "Launch"), player) and can_enter_area(EastHollow, s, player, options) and has_enough_resources([], [('db', 10)], "UpperDepths.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryRoofEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperDepths.FirstFirefly", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryRoofEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryOre", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryOre", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.LeftEntryKS", player), lambda s: s.has("Grapple", player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.FirstFirefly", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.LeftEntryKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.FirstFirefly", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.LeftEntryKS", player), lambda s: has_enough_resources([], [('energy', ('Bow', 1)), ('energy', ('Spear', 1))], "UpperDepths.FirstFirefly", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.Entry", player), lambda s: s.has_all(("Glide", "Bash"), player) and has_enough_resources([], [('combat', 'BombSlug'), ('db', 10)], "UpperDepths.FirstFirefly", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.Entry", player), lambda s: s.has("Glide", player) and has_enough_resources([('combat', 'BombSlug'), ('combat', 'Bat')], [], "UpperDepths.FirstFirefly", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.Entry", player), lambda s: s.has("Glide", player) and has_enough_resources([('combat', 'Bat'), ('db', 10)], [], "UpperDepths.FirstFirefly", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.Entry", player), lambda s: s.has_all(("Launch", "Double Jump", "Triple Jump", "Dash", "Bash"), player) and has_enough_resources([('db', 30)], [], "UpperDepths.FirstFirefly", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.LeftEntryKS", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.SwimEC", player), lambda s: s.has("Clean Water", player) and s.has("UpperDepths.ForestsEyes", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.SwimEC", player), lambda s: s.has("Clean Water", player) and has_enough_resources([], [('energy', ('Flash', 1))], "UpperDepths.FirstKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.FirstFirefly", player), lambda s: s.has("Grapple", player) and s.has("Double Jump", player) and has_enough_resources([('combat', 'WeakSlug')], [], "UpperDepths.FirstKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.FirstFirefly", player), lambda s: s.has("Grapple", player) and has_enough_resources([('combat', 'WeakSlug')], [('db', 30)], "UpperDepths.FirstKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Grapple", "Bash"), player) and has_enough_resources([], [('db', 30)], "UpperDepths.FirstKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 30)], [], "UpperDepths.FirstKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.FirstFirefly", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.KeydoorLedge", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.KeydoorLedge", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.KeydoorLedge", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperDepths.FirstKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.RightKeystonePath", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.LightPuzzle", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "Double Jump", "Grapple"), player) and has_enough_resources([('wall', ('BreakWall', 16)), ('wall', ('BreakWall', 16)), ('combat', 'Spiderling'), ('combat', 'SneezeSlug')], [], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.LightPuzzle", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('wall', ('BreakWall', 16)), ('wall', ('BreakWall', 16))], [], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.LightPuzzle", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 16)), ('wall', ('BreakWall', 16)), ('db', 30)], [], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.LightPuzzle", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 16)), ('wall', ('BreakWall', 16)), ('energy', ('Grenade', 2)), ('combat', 'Spiderling'), ('combat', 'SneezeSlug')], [], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.LightPuzzle", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 16)), ('wall', ('BreakWall', 16))], [], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.FirstKSRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.FirstKSRoom", player), lambda s: has_enough_resources([], [('db', 30)], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.RightKeystonePath", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.RightKeystonePath", player), lambda s: s.has_all(("Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.BelowHive", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "UpperDepths.LightPuzzle", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.BelowHive", player), lambda s: s.has("UpperDepths.EntryKeystoneDoor", player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player) and has_enough_resources([('db', 30)], [], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.BelowHive", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "DepthsLight"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('combat', 'Bat')], [], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.BelowHive", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "UpperDepths.LightPuzzle"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('combat', 'Bat')], [], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.RightEntryKS", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.RightEntryKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.RightEntryKS", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.RightEntryKS", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperDepths.RightKeystonePath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.FirstKSRoom", player), lambda s: s.has("Grapple", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.FirstKSRoom", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('db', 30)], "UpperDepths.RightKeystonePath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.FirstKSRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> F.UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has_any(("Bow", "Spear", "Shuriken", "Grenade"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.BelowHive", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> F.UpperDepths.BelowHive", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Bow", "Spear", "Shuriken", "Grenade"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.BelowHive", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> F.UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 30)], [], "UpperDepths.BelowHive", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.EntryKeystoneDoor", player), lambda s: s.has("DepthsLight", player) and can_open_door(UpperDepths.EntryKeystoneDoor, s, player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.EntryKeystoneDoor", player), lambda s: s.has("DepthsLight", player) and can_open_door(UpperDepths.EntryKeystoneDoor, s, player) and has_enough_resources([], [('db', 30)], "UpperDepths.BelowHive", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.EntryKeystoneDoor", player), lambda s: s.has_all(("Dash", "Launch"), player) and can_open_door(UpperDepths.EntryKeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.HiveEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and has_enough_resources([('combat', 'Nest')], [], "UpperDepths.BelowHive", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.KeydoorLedge", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "DepthsLight"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.KeydoorLedge", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "DepthsLight"), player) and has_enough_resources([], [('db', 30)], "UpperDepths.BelowHive", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.KeydoorLedge", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.Teleporter", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.Teleporter", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 30)], [], "UpperDepths.BelowHive", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.Central", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.LowerConnection", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> UpperDepths.BelowHive", player), lambda s: s.has_any(("Shuriken", "Grenade"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> UpperDepths.BelowHive", player), lambda s: s.has("Dash", player) and s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> UpperDepths.BelowHive", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('db', 30)], "UpperDepths.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> UpperDepths.Central", player), lambda s: s.has_any(("Bow", "Spear", "Shuriken", "Grenade"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Central -> UpperDepths.SecondKSRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.Central -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Bash", "Double Jump"), player) and s.has("Triple Jump", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Central -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 10)], "UpperDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.RightHealthKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has_all(("Dash", "Glide"), player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has("Sword", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.KeystoneHC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.KeystoneHC", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.KeystoneHC", player), lambda s: s.has_all(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.BossPathEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.Central", player), lambda s: s.has_any(("DepthsLight", "Dash", "Bash", "Glide", "Launch", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.Central", player), lambda s: has_enough_resources([], [('wall', ('BreakWall', 1)), ('db', 10)], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.MoraPath", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.MoraPath", player), lambda s: s.has_all(("DepthsLight", "Dash"), player) and has_enough_resources([('db', 30)], [], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.MoraPath", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 30)], [], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.MoraPath", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.LightcatcherSeed", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.LightcatcherSeed", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and has_enough_resources([], [('db', 30)], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.LightcatcherSeed", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('combat', 'Spiderling'), ('combat', 'Spiderling'), ('combat', 'Spiderling')], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.LightcatcherSeed", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and has_enough_resources([('combat', 'Spiderling'), ('combat', 'Spiderling'), ('combat', 'Spiderling')], [('db', 30)], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.LightcatcherSeed", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.LightcatcherSeed", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("DepthsLight", "Grapple", "Dash"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('db', 30)], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("DepthsLight", "Grapple", "Bash"), player) and s.has_any(("Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 3))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.OutsideMoraFight", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Bash", "Grapple"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [('db', 30)], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('Grenade', 1))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('Grenade', 1))], [('db', 30)], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('combat', 'Spiderling'), ('combat', 'Spiderling'), ('combat', 'Spiderling')], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('combat', 'Spiderling'), ('combat', 'Spiderling'), ('combat', 'Spiderling')], [('db', 30)], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight -> UpperDepths.Teleporter", player), lambda s: s.has_any(("Dash", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "UpperDepths.OutsideMoraFight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight -> UpperDepths.MoraPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("MoraEscape -> MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("MoraEscape -> MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MoraEscape -> MoraSecondPhase", player), lambda s: s.has_all(("Launch", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.BelowDoorOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: s.has("Hammer", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('db', 30)], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: s.has("Dash", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: has_enough_resources([('wall', ('BreakWall', 1))], [('db', 30)], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: s.has("DepthsLight", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([], [('db', 30)], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Grapple", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 10)], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 2)), ('db', 10)], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 3)), ('db', 10)], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.West", player), lambda s: s.has("Sword", player) and can_enter_area(LowerDepths, s, player, options), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.West", player), lambda s: s.has("Dash", player) and s.has("DepthsLight", player) and can_enter_area(LowerDepths, s, player, options), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.West", player), lambda s: s.has("Dash", player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.West", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and can_enter_area(LowerDepths, s, player, options), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.West", player), lambda s: s.has("Double Jump", player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.West", player), lambda s: s.has("DepthsLight", player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('db', 30)], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.West", player), lambda s: can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('db', 30)], [('wall', ('BreakWall', 1))], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("Dash", "Glide"), player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has_any(("Triple Jump", "Glide", "Sword"), player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 1))], [('db', 30)], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Bash", "Sword", "Hammer"), player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 1))], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has("Launch", player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 1))], [('db', 30)], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Glide"), player) and can_enter_area(LowerDepths, s, player, options), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and can_enter_area(LowerDepths, s, player, options), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Sword"), player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('db', 30)], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and can_enter_area(LowerDepths, s, player, options), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Dash", "Hammer"), player) and can_enter_area(LowerDepths, s, player, options), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Dash", "Sword"), player) and can_enter_area(LowerDepths, s, player, options), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Launch"), player) and s.has_any(("Sword", "Hammer"), player) and can_enter_area(LowerDepths, s, player, options), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Launch"), player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([], [('db', 30)], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has_all(("BreakCrystal", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has_all(("BreakCrystal", "Dash"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has_all(("BreakCrystal", "Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.SwimEC", player), lambda s: s.has("Clean Water", player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player) and has_enough_resources([('db', 10)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.LeftEX", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.LeftEX", player), lambda s: s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Triple Jump"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Bash", "Dash"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Bash", "Flash"), player) and s.has_any(("Double Jump", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Bash", "UpperDepths.ForestsEyes"), player) and s.has_any(("Double Jump", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('db', 10)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide", "Sword"), player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Triple Jump", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1)), ('combat', 'Bat')], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Bash"), player) and s.has_any(("Triple Jump", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Glide"), player) and has_enough_resources([('combat', 'Bat')], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('combat', 'Bat'), ('db', 30)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 10)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 30)], [], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Dash"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Launch"), player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Bash", "Glide", "Sword", "Hammer"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('combat', 'WeakSlug')], [], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('combat', 'WeakSlug')], [('db', 30)], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> E.LowerDepths.East", player), lambda s: s.has("BreakCrystal", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> E.LowerDepths.East", player), lambda s: s.has_all(("BreakCrystal", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("Launch", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump", "Dash"), player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([], [('db', 30)], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("DepthsLight", "Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("DepthsLight", "Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 30)], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("DepthsLight", "Bash", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 30)], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has_all(("Grapple", "Sword"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has("Launch", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player) and can_buy_map(s, player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Dash"), player) and can_buy_map(s, player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has("DepthsLight", player) and can_buy_map(s, player) and s.has_any(("Double Jump", "Dash", "Grapple", "Sword", "Hammer"), player) and has_enough_resources([('db', 30)], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Bash", "Grapple", "Dash"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Bash", "Grapple"), player) and s.has_any(("Glide", "Sword"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20)), ('db', 30)], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('Grenade', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Glide", "Sword"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('Grenade', 1)), ('db', 30)], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Bash", "Double Jump", "Triple Jump"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Grapple"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Grapple"), player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Double Jump", "DepthsLight"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Double Jump", "DepthsLight"), player) and has_enough_resources([], [('db', 30)], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Bash", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [('db', 30)], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Dash", "DepthsLight"), player) and s.has_any(("Glide", "Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Dash", "DepthsLight"), player) and has_enough_resources([], [('db', 30)], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Glide", "Bash", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [('db', 30)], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Glide", "DepthsLight"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Glide", "DepthsLight"), player) and has_enough_resources([], [('db', 30)], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Glide"), player) and s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [('db', 30)], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "DepthsLight"), player) and s.has_any(("Bash", "Sword"), player) and has_enough_resources([('db', 30)], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Sword"), player) and has_enough_resources([('db', 30), ('wall', ('BreakWall', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('db', 30)], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Grapple"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Bash", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [('db', 30)], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Glide", "Bash", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [('db', 30)], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Glide"), player) and s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [('db', 30)], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.TreeArea", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 1)), ('db', 30)], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.Central", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.Central", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump", "Dash", "Glide"), player) and has_enough_resources([('db', 30)], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TrialActivation", player), lambda s: s.has_all(("Double Jump", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('db', 30)], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([], [('db', 30)], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Sword", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 30)], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Bash", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('db', 30)], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has_all(("Bash", "Grapple", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has_all(("Sword", "Grapple"), player) and s.has("UpperDepths.ForestsEyes", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has_all(("Sword", "Grapple"), player) and has_enough_resources([], [('energy', ('Flash', 1))], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 30), ('energy', ('Flash', 1))], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has_all(("Hammer", "UpperDepths.ForestsEyes"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 30)], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword"), player) and has_enough_resources([('db', 30), ('energy', ('Flash', 1))], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("UpperDepths.ForestsEyes", player) and s.has_any(("Double Jump", "Dash", "Sword"), player) and has_enough_resources([('db', 30)], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple", "Double Jump"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple", "Dash"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump", "Dash"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('wall', ('BreakWall', 1)), ('db', 30)], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea -> LowerDepths.RightEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerDepths.TreeArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea -> LowerDepths.BeforeTree", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([], [('db', 15)], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Dash"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([], [('db', 15)], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Glide"), player) and s.has("Sword", player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Glide"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([], [('db', 15)], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Sword"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('db', 15)], [], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Bash", "Launch"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has("Sword", player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([], [('db', 15)], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: s.has("Grapple", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto')], [], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEX", player), lambda s: s.has("Bash", player) and s.has_any(("Clean Water", "Glide"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Grapple", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'SpinCrab'), ('combat', 'CorruptSlug')], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [('db', 20)], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and s.has("Double Jump", player) and has_enough_resources([('combat', 'Crab'), ('combat', 'SmallSkeeto')], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto')], [('combat', 'CorruptSlug')], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water"), player) and s.has_any(("PoolsApproach.WheelFreed", "Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Launch", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Grapple", "Water Dash", "Hammer"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> C.PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathECWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathECWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water"), player) and has_enough_resources([], [('db', 10)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has_all(("Double Jump", "Hammer", "Dash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "PoolsApproach.WheelFreed"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has_all(("PoolsApproach.WheelFreed", "Double Jump"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathEC", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "PoolsApproach.MillPathECWall", "Clean Water"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathEC", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "PoolsApproach.MillPathECWall", "Clean Water"), player) and has_enough_resources([], [('db', 10)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Triple Jump"), player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('db', 20)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Triple Jump", "Dash"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Triple Jump", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has_any(("Double Jump", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Launch", "Dash"), player) and has_enough_resources([], [('db', 20)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has_any(("Water Dash", "Bash"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Dash", "Sword"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Glide"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Double Jump", "Hammer"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide", "Sword"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Dash"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has_any(("Double Jump", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Launch", "Dash"), player) and has_enough_resources([], [('db', 20)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has_any(("Water Dash", "Bash"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Glide", "Double Jump", "Hammer", "Dash"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Glide", "Double Jump", "Triple Jump"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Dash", "Sword"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Launch", "Hammer"), player) and s.has_any(("Double Jump", "Dash"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Launch", "Dash", "Sword"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("PoolsApproach.WheelFreed", "Glide", "Dash"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("PoolsApproach.WheelFreed", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and s.has("Triple Jump", player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([], [('db', 20)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer", "Water Dash"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water", "Launch"), player) and has_enough_resources([('db', 10)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water", "Water Dash"), player) and s.has_any(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water", "Water Dash"), player) and has_enough_resources([], [('combat', 'SpinCrab')], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'CorruptSlug')], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'CorruptSlug')], [('db', 20)], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([], [('db', 20)], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has("Dash", player) and s.has("Bash", player) and has_enough_resources([('db', 20)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has("Dash", player) and has_enough_resources([('db', 20)], [('combat', 'CorruptSlug')], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.RightOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'CorruptSlug')], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap"), player) and has_enough_resources([('combat', 'CorruptSlug')], [('db', 20)], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap", "Bash"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap", "Bash"), player) and has_enough_resources([], [('db', 20)], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.BelowLeverEX", player), lambda s: s.has("EastPools.BelowEntryLeverBubble", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.BelowLeverEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has("Hammer", player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('db', 20)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Bash", "Launch"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([], [('db', 20)], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('db', 20)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.AboveDoorOre", player), lambda s: s.has_all(("EastPools.TokkBubbleFree", "EastPools.TokkBubblePurpleWall", "Grapple", "Flap"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TokkBubble", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TokkBubble", player), lambda s: has_enough_resources([], [('db', 20)], "EastPools.BehindEntryDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.BehindEntryDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 20)], "EastPools.BehindEntryDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TPArea", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "EastPools.BehindEntryDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TPArea", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [('db', 20)], "EastPools.BehindEntryDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TPArea", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 3))], [], "EastPools.BehindEntryDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.LeverRoom", player), lambda s: s.has_all(("EastPools.EntryLever", "Clean Water"), player) and has_enough_resources([('db', 10)], [], "EastPools.BehindEntryDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.AboveDoorOre", player), lambda s: s.has_all(("EastPools.TokkBubbleFree", "EastPools.TokkBubblePurpleWall", "Grapple", "Flap"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.AboveDoorOre", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2)), ('db', 20)], [], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TPArea", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TPArea", player), lambda s: s.has_all(("EastPools.TokkBubbleFree", "EastPools.TokkBubblePurpleWall", "Flap", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('combat', 'Crab')], [], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TPArea", player), lambda s: s.has_all(("EastPools.TokkBubbleFree", "EastPools.TokkBubblePurpleWall", "Flap", "Grapple"), player) and has_enough_resources([('combat', 'Crab')], [('db', 20)], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TPArea", player), lambda s: s.has_all(("EastPools.TokkBubbleFree", "EastPools.TokkBubblePurpleWall", "Flap", "Bash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TPArea", player), lambda s: s.has_all(("EastPools.TokkBubbleFree", "EastPools.TokkBubblePurpleWall", "Flap", "Bash", "Grapple"), player) and has_enough_resources([], [('db', 20)], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.BehindEntryDoor", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.BehindEntryDoor", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'CorruptSlug'), ('combat', 'Crab')], [], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.LowerWaterDrained", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.AboveDoorOre", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.AboveDoorOre", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.FishingPool", player), lambda s: s.has("Grapple", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.FishingPool", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.FishingPool", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.BehindEntryDoor", player), lambda s: has_enough_resources([('db', 20)], [], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.BehindEntryDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.BehindEntryDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.TokkBubble", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.UltraBashWall", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.WaterdashArena", player), lambda s: s.has_all(("EastPools.ArenaWall", "EastPools.LowerWaterDrained"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.WaterdashArena", player), lambda s: s.has_all(("EastPools.ArenaWall", "EastPools.LowerWaterDrained"), player) and has_enough_resources([], [('db', 20)], "EastPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and has_enough_resources([], [('db', 20)], "EastPools.FishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Dash", "Sword"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Dash", "Sword"), player) and has_enough_resources([], [('db', 20)], "EastPools.FishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.FishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Bash"), player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 2))], [], "EastPools.AboveFishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.LupoEX", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.LupoEX", player), lambda s: s.has_all(("EastPools.LupoPurpleFloor", "Water Dash"), player) and has_enough_resources([('db', 20)], [], "EastPools.LupoArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.FightArenas", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Bash"), player) and has_enough_resources([('db', 20), ('combat', 'Crab'), ('combat', 'Crab'), ('combat', 'Crab'), ('combat', 'Crab'), ('combat', 'Tentacle'), ('combat', 'Skeeto'), ('combat', 'Skeeto')], [], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.FightRoomHC", player), lambda s: s.has_all(("EastPools.FightArenas", "Water Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.FightRoomHC", player), lambda s: s.has_all(("EastPools.FightArenas", "Water Dash"), player) and has_enough_resources([], [('db', 20)], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.FightRoomHC", player), lambda s: s.has_all(("EastPools.FightArenas", "Water Dash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.Teleporter", player), lambda s: s.has_all(("EastPools.ArenaWall", "EastPools.LowerWaterDrained"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.Teleporter", player), lambda s: s.has_all(("EastPools.ArenaWall", "EastPools.LowerWaterDrained"), player) and has_enough_resources([], [('db', 20)], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.FightArenas", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.FightArenas", player) and has_enough_resources([], [('db', 20)], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.CentralRoomPurpleWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.LupoPurpleFloor", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and has_enough_resources([('db', 20)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("Double Jump", "Water Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.BehindCrusherEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.WaterdashArena", player), lambda s: s.has("EastPools.FightArenas", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("EastPools.CentralRoomBubbleFree", "Double Jump", "Triple Jump", "Dash", "Glide"), player) and can_enter_area(UpperPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("EastPools.CentralRoomBubbleFree", "Double Jump", "Triple Jump", "Bash"), player) and can_enter_area(UpperPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("EastPools.CentralRoomBubbleFree", "Bash", "Double Jump"), player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "EastPools.CentralRoomBubbleFree"), player) and can_enter_area(UpperPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch", "Sword", "Hammer"), player) and can_enter_area(WestPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and can_enter_area(WestPools, s, player, options) and has_enough_resources([], [('db', 20)], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> EastPools.GrassSeed", player), lambda s: s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> EastPools.GrassSeed", player), lambda s: has_enough_resources([], [('db', 10)], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.LowerKS", player), lambda s: s.has_all(("Clean Water", "Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> EastPools.CentralRoom", player), lambda s: s.has_any(("Dash", "Glide"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> EastPools.CentralRoom", player), lambda s: can_enter_area(EastPools, s, player, options) and has_enough_resources([], [('db', 10)], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: has_enough_resources([('db', 20)], [], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "UpperPools.KeystoneRoomBubbleFree"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword", "UpperPools.KeystoneRoomBubbleFree"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.UpperLeftKS", player), lambda s: s.has_all(("UpperPools.KeystoneRoomBubbleFree", "Flap"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoom", player), lambda s: s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("UpperPools.KeystoneRoomBubbleFree", "Flap", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("UpperPools.KeystoneRoomBubbleFree", "Flap", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_any(("Bash", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Triple Jump"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('db', 20)], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperMidKS", player), lambda s: s.has_all(("Double Jump", "Water Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperMidKS", player), lambda s: s.has_all(("Double Jump", "Water Dash"), player) and has_enough_resources([], [('db', 20)], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperMidKS", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperMidKS", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has("Bash", player) and s.has("Sword", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 20)], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has("Water Dash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has("Water Dash", player) and has_enough_resources([], [('db', 20)], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has_all(("Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and has_enough_resources([], [('db', 20)], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Clean Water"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('db', 20)], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Grapple", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and s.has("Sword", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [('db', 20)], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> H.UpperPools.BeforeKeystoneDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.TrialActivation", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.UpperMidKS", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.UpperMidKS", player), lambda s: has_enough_resources([], [('db', 20)], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.KeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Bash", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> UpperPools.TreeRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> UpperPools.AboveTree", player), lambda s: s.has_all(("UpperPools.TreeRoomLeftBubbleFree", "Flap", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> UpperPools.AboveTree", player), lambda s: s.has_all(("UpperPools.TreeRoomLeftBubbleFree", "Flap", "Glide"), player) and has_enough_resources([('db', 20)], [], "UpperPools.TreeRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> UpperPools.AboveTree", player), lambda s: s.has_all(("UpperPools.TreeRoomLeftBubbleFree", "Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([('db', 20)], [], "UpperPools.TreeRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.AboveTree", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.AboveTree", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomEntrance", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomEntrance", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomEntrance", player), lambda s: s.has("UpperPools.TreeRoomLeftBubbleFree", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.ButtonDoorAboveTree", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.ButtonDoorAboveTree", "UpperPools.TreeRoomRightBubbleFree", "Clean Water", "Water Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.ButtonDoorAboveTree", "UpperPools.TreeRoomRightBubbleFree", "Water Dash"), player) and s.has_any(("Double Jump", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.ButtonDoorAboveTree", "UpperPools.TreeRoomRightBubbleFree", "Bash"), player) and s.has_any(("Double Jump", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree -> UpperPools.RoofEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "UpperPools.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree -> UpperPools.TreeRoomEntrance", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('db', 20)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Launch"), player) and has_enough_resources([], [('db', 20)], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has_any(("Triple Jump", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Dash", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has_any(("Triple Jump", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Bash", "Grapple"), player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Bash", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 20)], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "UpperPools.DrainRoomPurpleWall"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainRoomPurpleWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainRoomPurpleWall", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Bash", "Launch"), player) and has_enough_resources([('db', 20)], [], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Launch", "UpperPools.DrainRoomPurpleWall"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleExit", player), lambda s: s.has("UpperPools.UpperWaterDrained", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 20)], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Double Jump"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Double Jump", "UpperPools.UpperWaterDrained"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Double Jump", "Clean Water"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Dash", "Sword"), player) and s.has_any(("Clean Water", "UpperPools.UpperWaterDrained"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Dash", "Sword"), player) and has_enough_resources([], [('db', 20)], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Dash", "Glide"), player) and s.has_any(("Clean Water", "UpperPools.UpperWaterDrained"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Dash", "Glide"), player) and has_enough_resources([], [('db', 20)], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainRoomPurpleWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> EastPools.PurpleWallHC", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Clean Water", "Bash"), player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> EastPools.PurpleWallHC", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Clean Water", "Bash"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> EastPools.PurpleWallHC", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Clean Water", "Bash", "Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleRight", player), lambda s: s.has("Launch", player) and s.has_any(("UpperPools.UpperWaterDrained", "Clean Water"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("UpperPools.UpperWaterDrained", "Clean Water"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump"), player) and s.has_any(("Water Dash", "Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Bash", "Dash", "UpperPools.UpperWaterDrained"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Bash", "Dash", "Clean Water"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamLever", player), lambda s: s.has_any(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamLever", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'Bee'), ('combat', 'Skeeto')], [], "UpperPools.RightBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamLever", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'Bee'), ('combat', 'Skeeto')], [('db', 20)], "UpperPools.RightBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubblesEC", player), lambda s: s.has("UpperPools.BubbleSpamLever", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.LeftBubbleSpamRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("Double Jump", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.TpEX", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.TpEX", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Dash", "Triple Jump"), player) and has_enough_resources([('db', 20)], [], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.BurrowOre", player), lambda s: s.has_all(("WestPools.ForestsStrength", "Clean Water", "Water Dash", "Burrow"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.LeftKwolokPlatform", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.LeftKwolokPlatform", player), lambda s: s.has("Clean Water", player) and s.has("Bash", player) and has_enough_resources([('combat', 'SpinCrab')], [], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.LeftKwolokPlatform", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('combat', 'SpinCrab')], [('db', 3)], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> EastPools.CentralRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform -> WestPools.Teleporter", player), lambda s: s.has("Clean Water", player) and s.has_any(("Bash", "Water Dash"), player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform -> WestPools.Teleporter", player), lambda s: s.has("Clean Water", player) and has_enough_resources([], [('db', 3)], "WestPools.LeftKwolokPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform -> WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform -> WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and has_enough_resources([], [('db', 10)], "WestPools.LeftKwolokPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> WestPools.LeftKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> WestPools.LeftKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and has_enough_resources([], [('db', 10)], "WestPools.RightKwolokPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and can_enter_area(UpperPools, s, player, options), "or")
    add_rule(world.get_entrance("KwolokEscape -> KwolokFight", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("KwolokEscape -> KwolokFight", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("KwolokEscape -> KwolokFight", player), lambda s: s.has_all(("Clean Water", "Launch", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("KwolokFight -> WestPools.ForestsStrength", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Bash"), player) and s.has_any(("Double Jump", "Launch", "Dash"), player) and has_enough_resources([('wall', ('Boss', 250)), ('db', 85)], [], "KwolokFight", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WoodsMain.FeedingGroundsEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 30)], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Sword"), player) and has_enough_resources([('db', 30)], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WoodsMain.FeedingGrounds", player), lambda s: s.has("Burrow", player) and can_enter_area(WoodsMain, s, player, options), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "WindtornRuins.Seir", "Grapple", "Glide"), player) and can_enter_area(WeepingRidge, s, player, options), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "WindtornRuins.Seir", "Double Jump", "Triple Jump", "Glide"), player) and can_enter_area(WeepingRidge, s, player, options), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "WindtornRuins.Seir", "Bash", "Dash", "Glide"), player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Launch"), player) and s.has("WindtornRuins.Seir", player) and can_enter_area(WeepingRidge, s, player, options), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Bash", "Grapple"), player) and s.has("WindtornRuins.Seir", player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump", "Triple Jump"), player) and s.has("WindtornRuins.Seir", player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Bash", "Dash"), player) and s.has("WindtornRuins.Seir", player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.SpiritTrial", player), lambda s: s.has_all(("LowerWastes.TrialActivation", "Burrow", "Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.WestTP", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.WestTP", player), lambda s: has_enough_resources([], [('db', 30)], "LowerWastes.SunsetView", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.Shovel", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.Shovel", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.SunsetView", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel -> LowerWastes.SunsetView", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.Shovel", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.Shovel", player), lambda s: has_enough_resources([], [('db', 30)], "LowerWastes.MuncherTunnel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.Shovel", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.SandPot", player), lambda s: s.has_any(("Double Jump", "Dash", "Burrow", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotHC", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotHC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Dash"), player) and s.has_any(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and has_enough_resources([('db', 30)], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('db', 30)], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.MuncherTunnel", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 30)], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 30)], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player) and has_enough_resources([('db', 30), ('energy', ('Grenade', 1))], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 30)], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 30)], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [('db', 30)], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and has_enough_resources([], [('db', 30)], "LowerWastes.WoodenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.MuncherPitEX", player), lambda s: s.has_any(("Burrow", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPot", player), lambda s: s.has("Grapple", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPot", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPot", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('db', 30)], [], "LowerWastes.WoodenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.LeverArea", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.LeverArea", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.WoodenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('combat', 'MaceMiner'), ('combat', 'Mantis')], [], "LowerWastes.BeforeMinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.MinesEntranceEnemyPaths", player), lambda s: has_enough_resources([('combat', 'MaceMiner'), ('combat', 'Mantis')], [('db', 30)], "LowerWastes.BeforeMinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('db', 30)], "LowerWastes.BeforeMinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.WoodenBridge", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerWastes.BeforeMinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.LeverArea", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.LeverArea", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightEX", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "LowerWastes.MinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightEX", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightHC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 30)], [], "LowerWastes.MinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightHC", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 30), ('combat', 'MaceMiner'), ('combat', 'Mantis')], [], "LowerWastes.MinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightHC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightHC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightHC", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Grapple", "Dash"), player) and has_enough_resources([], [('combat', 'MaceMiner'), ('combat', 'Mantis')], "LowerWastes.MinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BeforeMinesEntrance", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.SandPlatformLever", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.SandPlatformLever", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.LeverArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.MuncherClimb", player), lambda s: s.has_all(("LowerWastes.SandPlatformLever", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.MuncherClimb", player), lambda s: s.has_all(("LowerWastes.SandPlatformLever", "Burrow"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.LastStandArea", player), lambda s: s.has_all(("LowerWastes.SandPlatformLever", "Burrow"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.LastStandArea", player), lambda s: s.has_all(("LowerWastes.SandPlatformLever", "Bash"), player) and s.has_any(("Glide", "Burrow", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.LeverArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.MuncherClimbEX", player), lambda s: s.has_all(("Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.MuncherClimbEX", player), lambda s: s.has_all(("Launch", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.MuncherClimbEX", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 30)], [], "LowerWastes.MuncherClimb", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.LastStandArea", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.LastStandArea", player), lambda s: s.has_all(("LowerWastes.SandPlatformLever", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.SkeetoHive", player), lambda s: s.has_all(("Launch", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea -> LowerWastes.LastStandShard", player), lambda s: s.has_any(("Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea -> LowerWastes.LastStandEX", player), lambda s: s.has_all(("Burrow", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea -> LowerWastes.LastStandEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Dash", "Sword"), player) and has_enough_resources([('db', 30)], [], "LowerWastes.LastStandArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea -> LowerWastes.MuncherClimb", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.SkeetoHiveEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.ThirstyGorlek", player), lambda s: s.has("Bash", player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.ThirstyGorlek", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.UpperPath", player), lambda s: s.has_all(("Burrow", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.UpperPath", player), lambda s: s.has_all(("Burrow", "Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.MuncherClimb", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.MuncherClimb", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.MuncherClimb", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 30)], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.LupoMap", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath -> LowerWastes.UpperPathEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath -> LowerWastes.UpperPathEX", player), lambda s: s.has("Burrow", player) and has_enough_resources([], [('db', 30)], "LowerWastes.UpperPath", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> LowerWastes.EastTPOre", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerWastes.EastTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> LowerWastes.EastTPOre", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('Grenade', 1))], [], "LowerWastes.EastTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> Tokk", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and has_enough_resources([], [('db', 30)], "LowerWastes.EastTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> UpperWastes.KeystoneRoom", player), lambda s: s.has("Burrow", player) and s.has_any(("Glide", "Sword"), player) and can_enter_area(UpperWastes, s, player, options), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> UpperWastes.KeystoneRoom", player), lambda s: s.has("Burrow", player) and can_enter_area(UpperWastes, s, player, options) and has_enough_resources([], [('db', 30)], "LowerWastes.EastTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KeystoneDoor", player), lambda s: s.has("Burrow", player) and can_open_door(UpperWastes.KeystoneDoor, s, player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KeystoneDoor", player), lambda s: s.has_all(("Bash", "Burrow"), player) and can_open_door(UpperWastes.KeystoneDoor, s, player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.LowerKS", player), lambda s: s.has_any(("Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.LowerKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.UpperKS", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and s.has_any(("Dash", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Launch"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 30)], [], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KSDoorEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KSDoorEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('combat', 'ShieldSlug'), ('energy', ('Grenade', 1))], [], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> LowerWastes.EastTP", player), lambda s: s.has("Burrow", player) and s.has_any(("Sword", "Hammer"), player) and can_enter_area(LowerWastes, s, player, options), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> LowerWastes.EastTP", player), lambda s: s.has("Burrow", player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([], [('db', 30)], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.MissilePuzzleLeft", player), lambda s: s.has_all(("UpperWastes.KeystoneDoor", "Burrow"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.MissilePuzzleLeft", player), lambda s: s.has_all(("UpperWastes.KeystoneDoor", "Burrow", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.LedgeEC", player), lambda s: s.has_all(("Burrow", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.LedgeEC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperWastes.MissilePuzzleLeft", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle -> C.UpperWastes.MissilePuzzleMiddle", player), lambda s: s.has("Burrow", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle -> C.UpperWastes.MissilePuzzleMiddle", player), lambda s: s.has("Burrow", player) and has_enough_resources([], [('db', 14)], "UpperWastes.MissilePuzzleMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle -> UpperWastes.LeverDoor", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 14)], [], "UpperWastes.MissilePuzzleMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle -> UpperWastes.PurpleWallEX", player), lambda s: s.has("Burrow", player) and s.has("Dash", player) and has_enough_resources([('combat', 'MaceMiner')], [], "UpperWastes.MissilePuzzleMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle -> UpperWastes.PurpleWallEX", player), lambda s: s.has("Burrow", player) and has_enough_resources([('combat', 'MaceMiner')], [('db', 14)], "UpperWastes.MissilePuzzleMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle -> UpperWastes.MissilePuzzleLeft", player), lambda s: s.has_all(("Burrow", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight -> UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Dash"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight -> UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Dash"), player) and has_enough_resources([], [('db', 30)], "UpperWastes.MissilePuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight -> UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Glide"), player) and s.has_any(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight -> UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Glide"), player) and has_enough_resources([], [('db', 30)], "UpperWastes.MissilePuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight -> UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has_all(("Double Jump", "Burrow"), player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 30)], [], "UpperWastes.SpinLasers", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.MissilePuzzleRight", player), lambda s: s.has_all(("Burrow", "Dash"), player) and has_enough_resources([('db', 30)], [], "UpperWastes.SpinLasers", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RuinsApproach", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Burrow", "Bash", "Dash"), player) and has_enough_resources([], [('energy', ('Grenade', 1)), ('db', 30)], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump"), player) and s.has("Dash", player) and has_enough_resources([('db', 30)], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and has_enough_resources([], [('energy', ('Grenade', 1)), ('db', 30)], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 30)], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and has_enough_resources([('combat', 'MaceMiner')], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Burrow"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WallOre", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WallOre", player), lambda s: s.has_all(("Burrow", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WallOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WallOre", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WallOre", player), lambda s: s.has_any(("Dash", "Glide", "Sword"), player) and has_enough_resources([('db', 30)], [], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WallOre", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WallOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.NorthTP", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.NorthTP", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'Mantis'), ('combat', 'MaceMiner')], [], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural -> WindtornRuins.RuinsTP", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural -> WindtornRuins.RuinsTP", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural -> WindtornRuins.RuinsTP", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.HeartBarrier", player), lambda s: s.has("Burrow", player) and has_enough_resources([('wall', ('BreakWall', 16))], [], "WindtornRuins.FallenPillar", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WindtornRuins.FallenPillar", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Burrow", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 40)], "WindtornRuins.FallenPillar", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.LowerRuins", player), lambda s: s.has("WindtornRuins.Seir", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.BrokenMural", player), lambda s: s.has("Bash", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WindtornRuins.FallenPillar", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has("Glide", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Sword", "WindtornRuins.HeartBarrier"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Sword", "Burrow"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Double Jump", "Dash", "Hammer"), player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Grapple", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 40)], [], "WindtornRuins.Escape", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Grapple", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 40)], [], "WindtornRuins.Escape", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Launch"), player) and has_enough_resources([], [('db', 40)], "WindtornRuins.Escape", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins -> WindtornRuins.FallenPillar", player), lambda s: s.has_all(("WindtornRuins.Seir", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'CrystalMiner'), ('combat', 'CrystalMiner'), ('combat', 'ShieldCrystalMiner'), ('combat', 'ShieldCrystalMiner')], [], "WeepingRidge.Bottom", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> LowerWastes.WestTP", player), lambda s: s.has("Burrow", player) and can_enter_area(LowerWastes, s, player, options), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Ore", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Ore", player), lambda s: s.has_all(("Launch", "Sword"), player) and has_enough_resources([('db', 20)], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Bow', 1)), ('db', 40)], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer", "Dash"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.WillowEntranceLedge", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Launch"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Bottom", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.SpikeClimbEX", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Bow', 1)), ('energy', ('Spear', 1)), ('energy', ('Grenade', 1)), ('db', 20)], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 2)), ('db', 40)], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.Ore", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Launch", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.WillowEntranceLedge -> WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("WeepingRidge.WillowEntranceLedge -> WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and has_enough_resources([], [('db', 20)], "WeepingRidge.WillowEntranceLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.EntryEX", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.EntryEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Launch", "Bash"), player) and has_enough_resources([], [('db', 40)], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has("WillowsEnd.PortalShortcut", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 2))], [('db', 40)], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 3))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.BoulderHeartPath", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.BoulderHeartPath", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.BoulderHeartPath", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 40)], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Bash", "Sword"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Bash", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 3))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and has_enough_resources([], [('db', 40)], "WillowsEnd.GrappleHeartMidPoint", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Launch", "Sword"), player) and has_enough_resources([('db', 40)], [], "WillowsEnd.GrappleHeartMidPoint", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> E.WillowsEnd.GrappleHeart", player), lambda s: has_enough_resources([], [('energy', ('Grenade', 1))], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.PoisonfallHC", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.PoisonfallHC", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([('db', 4)], [], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.PoisonfallHC", player), lambda s: s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.PoisonfallHC", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.Entry", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.Entry", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.Entry", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Launch"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 40)], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 40)], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.EntryEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.EntryEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Grapple", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.Entry", player), lambda s: s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.PortalShortcut", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [], "WillowsEnd.InnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.LupoMap", player), lambda s: can_buy_map(s, player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.Entry", player), lambda s: s.has("WillowsEnd.PortalShortcut", player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 40)], [], "WillowsEnd.InnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.Entry", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 40)], [], "WillowsEnd.InnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 40)], "WillowsEnd.InnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.InnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.AboveInnerTP", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('wall', ('BreakWall', 20))], [], "WillowsEnd.InnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.AboveInnerTP", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('wall', ('BreakWall', 20))], [('db', 40)], "WillowsEnd.InnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 40)], [], "WillowsEnd.InnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.InnerTP", player), lambda s: has_enough_resources([('db', 10)], [], "WillowsEnd.AboveInnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.East", player), lambda s: s.has("Launch", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.East", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.AboveInnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.East", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.East", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.East", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "WillowsEnd.AboveInnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.RedirectHeartPath", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.Upper", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath -> WillowsEnd.East", player), lambda s: s.has_any(("Bash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectEX", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Glide", "Double Jump", "Triple Jump", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectHeartPath", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 40)], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> E.WillowsEnd.Upper", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> E.WillowsEnd.Upper", player), lambda s: s.has_all(("BreakCrystal", "Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'CrystalMiner')], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.BurrowHeart", player), lambda s: s.has_all(("Burrow", "Double Jump", "Dash", "Bash", "Grapple", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 30))], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.BurrowHeart", player), lambda s: s.has_all(("Burrow", "Bash", "Grapple", "Launch"), player) and s.has_any(("Double Jump", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 30))], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.MiniBossFight", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Glide", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.East", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('db', 10)], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.West", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.West", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 2)), ('db', 20)], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.UpperHeartPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.MiniBossFight -> WillowsEnd.MinibossHeart", player), lambda s: s.has_all(("Regenerate", "Launch", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('wall', ('Boss', 300)), ('db', 60)], [], "WillowsEnd.MiniBossFight", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.MiniBossFight -> WillowsEnd.Upper", player), lambda s: s.has("Launch", player) and s.has_any(("Glide", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.SpinLasersHeart", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 30))], [], "WillowsEnd.West", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "WillowsEnd.West", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('wall', ('BreakWall', 10)), ('energy', ('Grenade', 1))], [], "WillowsEnd.West", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.Upper", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 10)), ('energy', ('Grenade', 2))], [], "WillowsEnd.West", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.GlideHeartPath", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.GlideHeartPath", player), lambda s: has_enough_resources([('db', 20)], [], "WillowsEnd.West", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath -> WillowsEnd.GlideRooms", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath -> WillowsEnd.GlideRooms", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("Launch", "Grapple"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("Launch", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("WillowsEnd.SpinPortalsHeart", "Launch", "Double Jump", "Glide", "Bash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Grapple", "Bash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Double Jump", "Triple Jump"), player) and s.has_any(("Grapple", "Bash", "Glide"), player) and has_enough_resources([('db', 40)], [], "WillowsEnd.UpperHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("WillowsEnd.SpinPortalsHeart", "Launch", "Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("WillowsEnd.SpinPortalsHeart", "Launch", "Bash"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.UpperHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("WillowsEnd.SpinPortalsHeart", "Launch", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint -> WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("Launch", "Double Jump", "Glide", "Bash"), player), "or")


def set_gorlek_glitched_rules(world: Multiworld, player: int, options: WotWOptions):
    """Gorlek (or medium) rules with glitches"""
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.Main", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.Main", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.OpherBarrier", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.BashEC", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.BrokenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.OpherBarrier", player), lambda s: s.has("MarshSpawn.LogBroken", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.BrokenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.CaveEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.CaveEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.BrokenBridge", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.CaveEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.TokkBarrier", player), lambda s: has_enough_resources([('wall', ('shuriken', 16))], [], "MarshSpawn.Cave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("MarshSpawn.CaveFight", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.Cave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge -> MarshSpawn.BurrowFightArena", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.LifepactLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.CaveOre", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 10)], [], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BurrowsOpen", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.BurrowsEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has("Hammer", player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor -> MarshSpawn.HowlApproach", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.RegenDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach -> MarshSpawn.RegenDoor", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.HowlApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.RecklessShard", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and s.has("Dash", player) and has_enough_resources([('wall', ('BreakWall', 10)), ('energy', ('SentryJump', 1))], [], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.HowlApproach", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.AboveHowlArena", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.FangEC", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1)), ('db', 10)], [], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> HowlsDen.MidwayBottomLoop", player), lambda s: has_enough_resources([('wall', ('shuriken', 16))], [], "HowlsDen.AboveBoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has("Sword", player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "HowlsDen.UpperLoopEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveDoorKS", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Hammer", player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: has_enough_resources([('wall', ('BreakWall', 16)), ('energy', ('SentryJump', 1))], [], "HowlsDen.MidwayBottomLoop", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter -> HowlsDen.BoneBarrier", player), lambda s: has_enough_resources([('wall', ('shuriken', 16))], [], "HowlsDen.AboveTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.LaserKS", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "HowlsDen.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.DoubleJumpApproach", player), lambda s: s.has("Hammer", player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "HowlsDen.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.AboveTeleporter", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "HowlsDen.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge -> HowlsDen.DoubleJumpEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "HowlsDen.DoubleJumpTreeLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "HowlsDen.DoubleJumpTreeArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> MarshSpawn.ToOpherBarrier", player), lambda s: has_enough_resources([('wall', ('shuriken', 16))], [], "MarshPastOpher.MillView", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialRightEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.UpperBowArea", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "MarshPastOpher.BowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.CeilingEX", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1))], [], "MarshPastOpher.PoolsPathEast", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.CeilingEX", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "MarshPastOpher.PoolsPathEast", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEC", player), lambda s: has_enough_resources([('combat', 'SpinCrab'), ('energy', ('SentryJump', 1))], [], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_any(("Bash", "Launch"), player) and has_enough_resources([('wall', ('shuriken', 20)), ('energy', ('SentryJump', 1))], [], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_any(("Bash", "Launch"), player) and has_enough_resources([('wall', ('shuriken', 20))], [], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('wall', ('shuriken', 20))], [], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 10)], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1)), ('db', 10)], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> PoolsApproach.MarshBreakableWall", player), lambda s: can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('wall', ('shuriken', 20))], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("MarshSpawn.BurrowsOpen", "Double Jump"), player) and can_enter_area(MarshSpawn, s, player, options) and has_enough_resources([('energy', ('SentryJump', 3)), ('db', 15)], [], "MidnightBurrows.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.TabletRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "MidnightBurrows.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has("MidnightBurrows.Lever", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.East", player), lambda s: s.has("MidnightBurrows.Lever", player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.LowerKS", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.PurpleDoorOpen", player), lambda s: s.has("Double Jump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1)), ('energy', ('SentryJump', 1))], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.MokiByTwillen", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Launch", player) and has_enough_resources([('energy', ('Bow', 1)), ('energy', ('SentryJump', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and s.has("Launch", player) and has_enough_resources([('energy', ('Bow', 1)), ('energy', ('SentryJump', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and has_enough_resources([('energy', ('Bow', 1)), ('energy', ('SentryJump', 1))], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.UpperTongueRetracted"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.UpperTongueRetracted"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: can_buy_map(s, player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.DoorLever", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "WestHollow.DashApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.HollowDrainLower", player), lambda s: has_enough_resources([('energy', ('SentryJump', 3))], [], "WestHollow.DashApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashArea -> WestHollow.AboveDashSemisolid", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "WestHollow.DashArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashArea", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SwordSJump', 1)), ('db', 10)], [], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has("Dash", player) and has_enough_resources([('combat', 'Mantis'), ('combat', 'Lizard'), ('energy', ('SentryJump', 1)), ('energy', ('SentryJump', 1))], [], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: has_enough_resources([('combat', 'Mantis'), ('combat', 'Lizard'), ('energy', ('SentryJump', 1)), ('energy', ('SwordSJump', 1)), ('db', 10)], [], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'Mantis'), ('combat', 'Lizard'), ('energy', ('SentryJump', 1)), ('energy', ('HammerSJump', 1))], [], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.AfterBeetleFight", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastHollow.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.VoiceDoorPlatform", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastHollow.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastHollow.MapMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SpikeLanternEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SpikeLanternEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 10)], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SecretRoofEX", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SecretRoofEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has("EastHollow.BeetleDefeated", player) and s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Kwolok", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Grapple", player) and has_enough_resources([('db', 10), ('energy', ('SentryJump', 1))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashEC", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1))], [], "EastHollow.AboveBash", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashEC", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Bash"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "EastHollow.AboveBash", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.AfterBeetleFight", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "EastHollow.AboveBash", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.BashEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastHollow.BashTreeCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.RightKwolokEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.BashHC", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "EastHollow.AboveDepths", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.BashHC", player), lambda s: has_enough_resources([('energy', ('SentryJump', 3))], [], "EastHollow.AboveDepths", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.DepthsExteriorEX", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastHollow.AboveDepths", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.AboveBash", player), lambda s: s.has("EastHollow.DepthsLever", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('SwordSJump', 5))], [], "EastHollow.AboveDepths", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.AboveBash", player), lambda s: s.has_all(("EastHollow.DepthsLever", "Double Jump"), player) and has_enough_resources([('energy', ('SwordSJump', 4))], [], "EastHollow.AboveDepths", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.ArcingShard", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.AboveOpher", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and s.has_any(("Burrow", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.West", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.TwillenHome", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.Teleporter", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.TwillenHome", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has("TuleyShop.StickyGrass", player) and s.has_any(("Double Jump", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "TuleyShop.Lightcatchers", "Bash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Double Jump"), player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.Lightcatchers", "Bash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.StickyGrass"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has("GladesTown.BuildHuts", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperOre", player), lambda s: s.has("GladesTown.BuildHuts", player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "GladesTown.MotayHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.StickyGrass"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.MotayHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperWest", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.MotayHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.UpperLeftEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.UpperWest", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.AboveGromHC", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.UpperWest", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.InsideThirdHut -> GladesTown.BraveMokiHutEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.InsideThirdHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.AboveCaveEX", player), lambda s: s.has("GladesTown.ClearThorns", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.AcornMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.AboveCaveEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [('db', 10)], "GladesTown.AcornMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.Teleporter", player), lambda s: s.has("GladesTown.ClearThorns", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.AcornMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has("Flash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: has_enough_resources([('energy', ('Bow', 4)), ('energy', ('SentryJump', 1))], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.BountyShard", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.BelowBountyShard", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Hammer", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.LeftAboveCoals", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> GladesTown.PlayfulMoki", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.AboveOpher", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki -> GladesTown.HoleHut", player), lambda s: s.has("Hammer", player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "GladesTown.PlayfulMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> GladesTown.HoleHutEntrance", player), lambda s: s.has_any(("Glide", "Sword"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "GladesTown.HoleHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: can_enter_area(LowerReach, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.HoleHut", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Clean Water"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('combat', 'Tentacle')], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('energy', ('SentryJump', 1)), ('combat', 'Tentacle'), ('db', 20)], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 2)), ('combat', 'Tentacle')], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Glide", player) and s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1))], [('db', 10), ('combat', 'Tentacle')], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: can_enter_area(GladesTown, s, player, options) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and can_enter_area(GladesTown, s, player, options) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: can_enter_area(GladesTown, s, player, options) and has_enough_resources([('energy', ('HammerSJump', 1))], [('db', 10)], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.Center", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.RightOre", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.Upper", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.RightOre", player), lambda s: s.has("Glide", player) and has_enough_resources([('combat', 'Tentacle'), ('energy', ('SentryJump', 1))], [], "WestGlades.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.MillApproach", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "WestGlades.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.SwimOre", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([('energy', ('SentryJump', 2))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Glide", player) and can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([('energy', ('HammerSJump', 1))], [('db', 20)], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "WestGlades.ShrineArea", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: has_enough_resources([('energy', ('HammerSJump', 1)), ('db', 15)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('SwordSJump', 2))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has("Glide", player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('HammerSJump', 2))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('HammerSJump', 2))], [('db', 20)], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestWallBroken", player), lambda s: has_enough_resources([('wall', ('shuriken', 20))], [], "OuterWellspring.LifeHarvestEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has("OuterWellspring.LifeHarvestLeverPulled", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "OuterWellspring.LifeHarvestEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has("OuterWellspring.LifeHarvestLeverPulled", player) and has_enough_resources([('energy', ('SentryJump', 1))], [('db', 15)], "OuterWellspring.LifeHarvestEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Grapple", "Bash"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Double Jump", player) and s.has_any(("Grapple", "Bash"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('HammerSJump', 1)), ('db', 15)], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Double Jump", "Glide", "Sword"), player) and has_enough_resources([('energy', ('HammerSJump', 1)), ('db', 15)], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 15)], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SwordSJump', 2))], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has_any(("Bow", "Spear", "Shuriken", "Grenade", "Blaze", "Grapple"), player) and has_enough_resources([('wall', ('BreakWall', 3)), ('energy', ('SentryJump', 1))], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [('db', 15)], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 15)], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.EastDoor", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.AboveWestDoor", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.AboveWestDoor", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.AboveWestDoor", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player) and has_enough_resources([('energy', ('HammerSJump', 1))], [('db', 10)], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.TopDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "OuterWellspring.TopDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> WestGlades.MillApproach", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.EntranceDoor", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.TrialRoom", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.EastDoor", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.AboveEntranceDoor", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThreeWheelsEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThornShardArea", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 15)], [], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has_all(("Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 15)], [], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has_any(("Grapple", "Glide", "Launch"), player) and has_enough_resources([('wall', ('shuriken', 10))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('wall', ('shuriken', 10))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and has_enough_resources([('wall', ('shuriken', 10)), ('energy', ('Grenade', 1))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('wall', ('shuriken', 10))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has_all(("InnerWellspring.DrainLever", "Bash"), player) and has_enough_resources([('wall', ('shuriken', 10)), ('energy', ('Grenade', 2))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('wall', ('shuriken', 10))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('wall', ('shuriken', 10))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and has_enough_resources([('wall', ('shuriken', 10)), ('energy', ('Grenade', 1)), ('db', 15)], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and has_enough_resources([('wall', ('shuriken', 10)), ('energy', ('Grenade', 2))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.DrainAreaEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [('db', 20)], "InnerWellspring.DrainAreaEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and s.has("Grapple", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Sword", player) and s.has("Grapple", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [('db', 15)], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainAreaExit", player), lambda s: has_enough_resources([('wall', ('shuriken', 10))], [], "InnerWellspring.DrainRoomCenter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.DrainRoomTop", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "InnerWellspring.DrainRoomTop", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has("InnerWellspring.DrainRoomTopWheel", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.DrainRoomTop", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.DrainLever", player), lambda s: s.has("InnerWellspring.UpperCorruption", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.LeverEC", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("InnerWellspring.UpperCorruption", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.LeverEC", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.LeverEC", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.LeverEC", player), lambda s: s.has("InnerWellspring.UpperCorruption", player) and s.has("Grapple", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.WestDoor", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.WestDoor", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.WestDoor", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.MiddleDoorsOpen", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.LupoMap", player), lambda s: can_buy_map(s, player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "InnerWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTreeEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Grapple", player) and s.has("Sword", player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "InnerWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('shuriken', 10))], [], "InnerWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.AboveSpinArenaEX", player), lambda s: has_enough_resources([('wall', ('shuriken', 10))], [('combat', 'Tentacle')], "InnerWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.EastDoor", player), lambda s: s.has("InnerWellspring.SpinningRoomOpen", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.SpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Bash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.PastSpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "InnerWellspring.PastSpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 3))], [], "InnerWellspring.PastSpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.BlueMoonSeed", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.AboveTpEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has_any(("Double Jump", "Grapple"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.MudPitEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsEntry.FirstMud", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.FamilyHut -> WoodsEntry.Teleporter", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsEntry.FamilyHut", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1))], [], "WoodsEntry.BelowTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('HammerSJump', 1)), ('db', 15)], [], "WoodsEntry.BelowTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsEntry.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1))], [], "WoodsMain.AfterKuMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'Balloon'), ('energy', ('SentryJump', 1))], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.AfterKuMeet", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsMain.WallOreLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.RightKS", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.UpperKS", player), lambda s: has_enough_resources([('wall', ('BreakWall', 3)), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('energy', ('SwordSJump', 1))], [], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.UpperKS", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 3)), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('energy', ('HammerSJump', 1))], [], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BehindDoorRoofEX", player), lambda s: has_enough_resources([('combat', 'Balloon'), ('energy', ('SentryJump', 1))], [], "WoodsMain.GiantSkull", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BalloonLure", player), lambda s: s.has("Bash", player) and has_enough_resources([('combat', 'Balloon'), ('energy', ('HammerSJump', 1))], [], "WoodsMain.GiantSkull", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.AboveHowl", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsMain.PetrifiedHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.AboveHowl", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsMain.PetrifiedHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl -> WoodsMain.AboveHowl", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsMain.BrokenOwl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl -> WoodsMain.TrialStart", player), lambda s: s.has_any(("Bash", "Hammer"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "WoodsMain.BrokenOwl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.BeforeLog", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsMain.AboveHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.BeforeLog", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [('combat', 'Balloon'), ('db', 20)], "WoodsMain.AboveHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog -> WoodsMain.OrangeTree", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "WoodsMain.BeforeLog", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.BeforeLog", player), lambda s: s.has("WoodsMain.LogBlobDestroyed", player) and s.has("Dash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.BeforeLog", player), lambda s: s.has("WoodsMain.LogBlobDestroyed", player) and has_enough_resources([('energy', ('SentryJump', 1))], [('combat', 'Balloon'), ('combat', 'Balloon')], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree -> WoodsMain.BeforeLog", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsMain.OrangeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("WindtornRuins.Seir", "Double Jump", "Triple Jump"), player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> WoodsMain.AbovePit", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.BelowBaurEX", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: s.has_any(("Double Jump", "Bash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.LeftFurnace", player), lambda s: has_enough_resources([('energy', ('Grenade', 1)), ('combat', 'Nest'), ('energy', ('SentryJump', 1))], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.LupoMap", player), lambda s: can_buy_map(s, player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 2)), ('energy', ('Spear', 1))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: has_enough_resources([('energy', ('HammerSJump', 3))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 3)), ('energy', ('Spear', 1))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has("Hammer", player) and has_enough_resources([('energy', ('SwordSJump', 4))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: has_enough_resources([('energy', ('HammerSJump', 3))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> F.LowerReach.OutsideTPRoom", player), lambda s: has_enough_resources([('energy', ('Sentry', 1))], [], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.TPLeftEX", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump"), player) and s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.Teleporter", player), lambda s: has_enough_resources([('energy', ('Sentry', 1))], [], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.BelowTokk", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.BelowTokk", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.BelowTokk", player), lambda s: s.has_all(("LowerReach.FreezeCentralFurnace", "Double Jump"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.KeystoneRoom", player), lambda s: s.has("Double Jump", player) and can_enter_area(UpperReach, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.BelowTokk", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.KeystoneRoom", player), lambda s: can_enter_area(UpperReach, s, player, options) and has_enough_resources([('energy', ('SentryJump', 2))], [], "LowerReach.BelowTokk", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and can_enter_area(UpperReach, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.BelowTokk", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.BurrowArea", player), lambda s: s.has("Burrow", player) and can_enter_area(UpperReach, s, player, options) and has_enough_resources([('energy', ('SentryJump', 2))], [], "LowerReach.BelowTokk", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Teleporter -> LowerReach.OutsideTPRoom", player), lambda s: has_enough_resources([('energy', ('Sentry', 1))], [], "LowerReach.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.MeltIceEX", player), lambda s: has_enough_resources([('energy', ('Sentry', 1))], [], "LowerReach.SecondSoup", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.SecondSoup", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.BelowLupo", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.SecondSoup", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.BelowLupoEX", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.BelowLupo", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.BelowLupoEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [('db', 20)], "LowerReach.BelowLupo", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.SecondSoup", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.BelowLupo", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> LowerReach.WindChannel", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.CentralFurnacePedestal", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindLantern", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Sentry', 1)), ('energy', ('SentryJump', 1))], [], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindLantern", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.EastEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.EastEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 20)], [], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.East -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [('energy', ('Grenade', 1)), ('energy', ('Spear', 1))], "LowerReach.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.East -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [('energy', ('Grenade', 1)), ('energy', ('Spear', 1))], "LowerReach.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.TPLantern", player), lambda s: has_enough_resources([('energy', ('Sentry', 1)), ('energy', ('SentryJump', 1))], [], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.TPLantern", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.TPLantern", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.RolledSnowball", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.RolledSnowball", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Glide"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.IceCavern", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.PastSnowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.EastFurnace", player), lambda s: has_enough_resources([('wall', ('shuriken', 20))], [], "LowerReach.PastSnowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.RoofRightEX", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.RoofRightEX", player), lambda s: s.has("LowerReach.FreezeEastFurnace", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 2))], [], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has("LowerReach.FreezeEastFurnace", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has("LowerReach.FreezeEastFurnace", player) and has_enough_resources([('energy', ('HammerSJump', 2))], [], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.EastDoorLantern", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1)), ('energy', ('Grenade', 1))], [], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.EastDoorLantern", player), lambda s: s.has_any(("Launch", "Double Jump"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.IceCavern", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1))], [], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.IceCavern", player), lambda s: s.has("LowerReach.FreezeEastFurnace", player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "LowerReach.FreezeEastFurnace"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Clean Water"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Double Jump", "Glide"), player) and has_enough_resources([('energy', ('SwordSJump', 2))], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.EastFurnace", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1))], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.EastFurnace", player), lambda s: s.has_any(("Dash", "Double Jump", "LowerReach.FreezeEastFurnace"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.WindSpinners", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.BridgeWispPath", player), lambda s: s.has("Launch", player) and s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.WispPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.SnowEscape", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.BridgeWispPath", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.SnowEscape", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Triple Jump"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "LowerReach.BridgeWispPath", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.SnowEscape", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('energy', ('SwordSJump', 2))], [], "LowerReach.BridgeWispPath", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.TownEntry", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.VeralHome", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.RightKS", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TownEntry", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1))], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.LowerKS", player), lambda s: s.has("UpperReach.ThawFurnace", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.LowerKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Grapple", "Dash"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Grapple", "Sword"), player) and has_enough_resources([('energy', ('HammerSJump', 1)), ('db', 20)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Grapple"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Grapple"), player) and s.has("Dash", player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Grapple"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.SwingPoleEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperReach.UpperSoupPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths -> UpperReach.MiddleRightKS", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperReach.UpperSoupThawedPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge -> UpperReach.TreeOre", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperReach.TreeRoomLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.HiddenEX", player), lambda s: has_enough_resources([('energy', ('Sentry', 1))], [], "UpperReach.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.TreeRoomLedge", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1)), ('energy', ('Grenade', 2))], [], "UpperReach.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.TreeRoomLedge", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2)), ('energy', ('Sentry', 2))], [], "UpperReach.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.SeedHut -> UpperReach.SpringSeed", player), lambda s: has_enough_resources([('energy', ('Sentry', 1))], [], "UpperReach.SeedHut", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> EastHollow.AboveDepths", player), lambda s: s.has_all(("EastHollow.DepthsOpen", "Launch"), player) and can_enter_area(EastHollow, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperDepths.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryRoofEX", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('combat', 'Bat')], [], "UpperDepths.FirstFirefly", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryOre", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperDepths.FirstFirefly", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.LeftEntryKS", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "UpperDepths.FirstFirefly", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.SwimEC", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('wall', ('shuriken', 20))], [], "UpperDepths.FirstKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.SwimEC", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([('wall', ('shuriken', 20))], [('db', 30)], "UpperDepths.FirstKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.FirstFirefly", player), lambda s: s.has("Double Jump", player) and s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 30)], [], "UpperDepths.FirstKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.FirstFirefly", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 30)], [('combat', 'Spiderling'), ('combat', 'Spiderling')], "UpperDepths.FirstKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.KeydoorLedge", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1))], [], "UpperDepths.FirstKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.KeydoorLedge", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Grapple"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "UpperDepths.FirstKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.RightEntryKS", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperDepths.RightKeystonePath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.FirstKSRoom", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperDepths.RightKeystonePath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> F.UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperDepths.BelowHive", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> F.UpperDepths.BelowHive", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperDepths.BelowHive", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> F.UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperDepths.BelowHive", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.LightcatcherSeed", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('wall', ('shuriken', 20))], [], "UpperDepths.BelowHive", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.HiveEX", player), lambda s: has_enough_resources([('combat', 'Nest'), ('energy', ('SentryJump', 1))], [], "UpperDepths.BelowHive", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.Teleporter", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperDepths.BelowHive", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> UpperDepths.BelowHive", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperDepths.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> UpperDepths.Central", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperDepths.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> UpperDepths.OutsideMoraFight", player), lambda s: has_enough_resources([('wall', ('shuriken', 20))], [], "UpperDepths.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Central -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 10)], [], "UpperDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.BossPathEX", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> LowerDepths.East", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Launch", "Double Jump", "Dash", "Glide", "Bash", "Sword", "Hammer"), player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('wall', ('shuriken', 20)), ('combat', 'Spiderling')], [], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.LightcatcherSeed", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.LightcatcherSeed", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.LightcatcherSeed", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([('energy', ('HammerSJump', 1))], [('db', 30)], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.OutsideMoraFight", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([('energy', ('SwordSJump', 2))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.OutsideMoraFight", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('HammerSJump', 2))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.OutsideMoraFight", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([('energy', ('SentryJump', 3))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('SwordSJump', 1))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('HammerSJump', 1))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('HammerSJump', 1))], [('db', 30)], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and s.has("Glide", player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('SentryJump', 1))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('SentryJump', 1))], [('db', 30)], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and s.has("Glide", player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('SentryJump', 2))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('SentryJump', 2))], [('db', 30)], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight -> UpperDepths.Teleporter", player), lambda s: s.has_any(("Dash", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('HammerSJump', 1))], [], "UpperDepths.OutsideMoraFight", s, player, options, False), "or")
    add_rule(world.get_entrance("MoraEscape -> MoraSecondPhase", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Grapple"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "MoraEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 10)], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 2)), ('db', 10)], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([('energy', ('SentryJump', 3)), ('db', 10)], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: has_enough_resources([('wall', ('BreakWall', 1)), ('energy', ('SentryJump', 4))], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [('wall', ('BreakWall', 1))], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('wall', ('shuriken', 20))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('wall', ('shuriken', 20))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_any(("Bash", "Launch"), player) and has_enough_resources([('wall', ('shuriken', 20))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has("Water Dash", player) and s.has("Clean Water", player) and has_enough_resources([('wall', ('shuriken', 20))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('wall', ('shuriken', 20))], [('db', 20)], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has("Clean Water", player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 1)), ('energy', ('SentryJump', 1)), ('db', 10)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 10)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> E.LowerDepths.East", player), lambda s: s.has("BreakCrystal", player) and s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('SentryJump', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('SwordSJump', 1)), ('db', 30)], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Bash", "Glide"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('SentryJump', 1)), ('db', 30)], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('SwordSJump', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('HammerSJump', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('energy', ('SentryJump', 1))], [], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and s.has("Double Jump", player) and has_enough_resources([('combat', 'Crab'), ('combat', 'SmallSkeeto'), ('energy', ('SentryJump', 1))], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('energy', ('SentryJump', 1))], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water"), player) and s.has_any(("PoolsApproach.WheelFreed", "Double Jump", "Grapple"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> C.PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "PoolsApproach.WheelFreed"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has("Glide", player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [('db', 20)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has("Hammer", player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 20)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Launch", player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.AboveDoorOre", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2)), ('db', 20)], [], "EastPools.BehindEntryDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.AboveDoorOre", player), lambda s: s.has_any(("Double Jump", "Grapple"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastPools.BehindEntryDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TPArea", player), lambda s: s.has_any(("Grapple", "Double Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastPools.BehindEntryDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TPArea", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2)), ('db', 20)], [], "EastPools.BehindEntryDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.BehindEntryDoor", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.AboveDoorOre", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [('energy', ('Spear', 1)), ('energy', ('Grenade', 1)), ('db', 20)], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.FishingPool", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastPools.FishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Double Jump"), player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastPools.AboveFishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.LupoArea", player), lambda s: has_enough_resources([('wall', ('shuriken', 20))], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.LupoEX", player), lambda s: s.has("Hammer", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastPools.LupoArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.EnergyHarvestShard", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("EastPools.CentralRoomBubbleFree", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide"), player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperLeftKS", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Water Dash", player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('SentryJump', 1)), ('combat', 'Crab'), ('combat', 'SpinCrab')], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('energy', ('SentryJump', 1)), ('combat', 'Crab'), ('combat', 'SpinCrab')], [('db', 20)], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [('db', 20)], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SwordSJump', 2))], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 2))], [('db', 10)], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Clean Water", "Dash", "Glide"), player) and has_enough_resources([('energy', ('HammerSJump', 2))], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('HammerSJump', 2))], [('db', 20)], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1))], [], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Bash"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: has_enough_resources([('energy', ('HammerSJump', 1))], [('db', 20)], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.AboveTree", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 20)], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomEntrance", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1))], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomEntrance", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree -> UpperPools.RoofEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperPools.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 20)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "UpperPools.DrainRoomPurpleWall"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperPools.RightBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [('db', 30)], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 2))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('HammerSJump', 2))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Launch"), player) and s.has("WindtornRuins.Seir", player) and can_enter_area(WeepingRidge, s, player, options), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and s.has("WindtornRuins.Seir", player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and s.has("WindtornRuins.Seir", player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump"), player) and s.has("WindtornRuins.Seir", player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump"), player) and s.has("WindtornRuins.Seir", player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Bash", "Grapple"), player) and s.has("WindtornRuins.Seir", player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump", "Triple Jump"), player) and s.has("WindtornRuins.Seir", player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Bash", "Dash"), player) and s.has("WindtornRuins.Seir", player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.Shovel", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "LowerWastes.SunsetView", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.Shovel", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SwordSJump', 1))], [('db', 30)], "LowerWastes.SunsetView", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.Shovel", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "LowerWastes.SunsetView", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.Shovel", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.MuncherTunnel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotHC", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotEX", player), lambda s: s.has("Burrow", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1)), ('db', 30)], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.LeverArea", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.WoodenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_any(("Double Jump", "Bash", "Launch"), player) and has_enough_resources([('wall', ('shuriken', 20))], [], "LowerWastes.WoodenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.BeforeMinesEntrance", player), lambda s: has_enough_resources([('wall', ('shuriken', 20))], [('combat', 'MaceMiner')], "LowerWastes.WoodenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.MinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.MinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> WindtornRuins.LowerRuins", player), lambda s: s.has("Burrow", player) and can_enter_area(WindtornRuins, s, player, options) and has_enough_resources([('wall', ('shuriken', 20))], [], "LowerWastes.MinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.SandPlatformLever", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "LowerWastes.LeverArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.SandPlatformLever", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.LeverArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.MuncherClimb", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.LeverArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.LastStandArea", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.LeverArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.ThirstyGorlek", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.ThirstyGorlek", player), lambda s: s.has_any(("Bash", "Grapple"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.LupoMap", player), lambda s: can_buy_map(s, player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "LowerWastes.ThirstyGorlek", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> LowerWastes.EastTPOre", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('SentryJump', 1))], [], "LowerWastes.EastTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KeystoneDoor", player), lambda s: can_open_door(UpperWastes.KeystoneDoor, s, player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KSDoorEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.LedgeEC", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'MaceMiner'), ('energy', ('SentryJump', 1))], [], "UpperWastes.MissilePuzzleLeft", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight -> UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Dash"), player) and s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperWastes.MissilePuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight -> UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Glide"), player) and s.has_any(("Double Jump", "Bash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperWastes.MissilePuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperWastes.SpinLasers", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [('db', 30)], "UpperWastes.SpinLasers", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "UpperWastes.SpinLasers", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "UpperWastes.SpinLasers", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Burrow", "Bash", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump"), player) and s.has("Dash", player) and has_enough_resources([('db', 30), ('energy', ('SentryJump', 1))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.FlowersSeed", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WallOre", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.NorthTP", player), lambda s: has_enough_resources([('combat', 'Mantis'), ('combat', 'MaceMiner'), ('energy', ('SentryJump', 1))], [], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.RuinsTP", player), lambda s: s.has("Burrow", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WindtornRuins.FallenPillar", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.BrokenMural", player), lambda s: s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WindtornRuins.FallenPillar", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins -> WindtornRuins.FallenPillar", player), lambda s: s.has("WindtornRuins.Seir", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WindtornRuins.LowerRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'CrystalMiner'), ('combat', 'CrystalMiner'), ('combat', 'ShieldCrystalMiner'), ('combat', 'ShieldCrystalMiner'), ('energy', ('SentryJump', 1))], [], "WeepingRidge.Bottom", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WeepingRidge.Bottom", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Bottom", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 2)), ('db', 40)], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.EntryEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2)), ('db', 20)], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.EntryEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.BoulderHeartPath", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.BoulderHeartPath", player), lambda s: s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 40)], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Double Jump"), player) and has_enough_resources([('energy', ('SwordSJump', 2))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> E.WillowsEnd.GrappleHeart", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 40)], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.AboveInnerTP", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('combat', 'CrystalMiner')], [], "WillowsEnd.InnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.AboveInnerTP", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('combat', 'CrystalMiner'), ('db', 40)], [], "WillowsEnd.InnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.East", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "WillowsEnd.AboveInnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.East", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "WillowsEnd.AboveInnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.East", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WillowsEnd.AboveInnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectHeartPath", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> E.WillowsEnd.Upper", player), lambda s: s.has("BreakCrystal", player) and has_enough_resources([('combat', 'CrystalMiner'), ('energy', ('SentryJump', 1))], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.West", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 20)], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.UpperHeartPath", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('wall', ('BreakWall', 10)), ('energy', ('SentryJump', 1))], [], "WillowsEnd.West", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.Upper", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 10)), ('energy', ('SentryJump', 2))], [], "WillowsEnd.West", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.Upper", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('wall', ('BreakWall', 10)), ('energy', ('SentryJump', 1))], [], "WillowsEnd.West", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath -> WillowsEnd.GlideRooms", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'Mantis'), ('energy', ('SentryJump', 1))], [], "WillowsEnd.GlideHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath -> WillowsEnd.GlideRooms", player), lambda s: has_enough_resources([('combat', 'Mantis'), ('energy', ('SentryJump', 1))], [('db', 20)], "WillowsEnd.GlideHeartPath", s, player, options, False), "or")


def set_kii_rules(world: Multiworld, player: int, options: WotWOptions):
    """Kii (or hard) rules"""
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1))], "MarshSpawn.Main", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Bash", "Launch"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "MarshSpawn.Main", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Launch", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Launch", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.BridgeEX", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "MarshSpawn.Main", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.BridgeEX", player), lambda s: s.has("MarshSpawn.ToOpherBarrier", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.OpherBarrier", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.Main", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.Main", player), lambda s: s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.Main", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.OpherBarrier", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.BashEC", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Sword", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.OpherBarrier", player), lambda s: s.has_all(("MarshSpawn.LogBroken", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.OpherBarrier", player), lambda s: s.has_all(("MarshSpawn.LogBroken", "Sword"), player) and s.has_any(("Glide", "HowlsDen.RainLifted"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.OpherBarrier", player), lambda s: s.has_all(("MarshSpawn.LogBroken", "Sword"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "MarshSpawn.BrokenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("Grapple", "Bash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "MarshSpawn.CaveEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.CaveEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1))], "MarshSpawn.CaveEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.BrokenBridge", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.BrokenBridge", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.CaveEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.CaveKS", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.CaveKS", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("MarshSpawn.CaveFight", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.Cave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("MarshSpawn.CaveFight", "Glide"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "MarshSpawn.Cave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and s.has_any(("Glide", "Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and has_enough_resources([], [('db', 20)], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 10), ('energy', ('Shuriken', 1))], [], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and has_enough_resources([('energy', ('Shuriken', 2))], [], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LifepactLedge", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LifepactLedge", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Clean Water"), player) and s.has_any(("Sword", "Hammer", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Clean Water"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 40)], [], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide", "Sword", "Hammer", "Water Dash"), player) and has_enough_resources([('db', 30)], [], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 30)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_any(("Sword", "Hammer", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge -> MarshSpawn.BurrowFightArena", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.LifepactLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> E.MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.CaveOre", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.CaveOre", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1))], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 10)], [('energy', ('Shuriken', 3)), ('energy', ('Sentry', 3))], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 20)], [('energy', ('Blaze', 3)), ('energy', ('Flash', 2))], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Spear', 3)), ('db', 30)], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 40)], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 20)], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1))], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Dash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Sword"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 10)], [('energy', ('Shuriken', 3)), ('energy', ('Sentry', 3))], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 20)], [('energy', ('Blaze', 3)), ('energy', ('Flash', 2))], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Spear', 3)), ('db', 30)], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 40)], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.LifepactLedge", player), lambda s: has_enough_resources([('db', 10), ('db', 10), ('db', 10), ('combat', 'Slug')], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.LifepactLedge", player), lambda s: s.has_any(("Double Jump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'Bat'), ('combat', 'Slug')], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.LifepactLedge", player), lambda s: has_enough_resources([('combat', 'Bat'), ('combat', 'Slug')], [('energy', ('Spear', 3)), ('energy', ('Shuriken', 3)), ('energy', ('Flash', 3)), ('energy', ('Sentry', 3))], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.LifepactLedge", player), lambda s: has_enough_resources([('combat', 'Bat'), ('combat', 'Slug'), ('db', 10)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.LifepactLedge", player), lambda s: s.has_any(("Double Jump", "Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.LifepactLedge", player), lambda s: has_enough_resources([('db', 10), ('combat', 'Slug')], [('energy', ('Spear', 3)), ('energy', ('Shuriken', 3)), ('energy', ('Flash', 3)), ('energy', ('Sentry', 3))], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.LifepactLedge", player), lambda s: has_enough_resources([('db', 10), ('db', 10), ('combat', 'Slug')], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.LifepactLedge", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Spear', 3)), ('energy', ('Shuriken', 3)), ('energy', ('Flash', 3)), ('energy', ('Sentry', 3))], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.LifepactLedge", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 10)], [('db', 10), ('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.CrusherSwimEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has_all(("Bash", "Sword"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has_all(("Bash", "Glide", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 10), ('energy', ('Grenade', 1))], [], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has("Water Dash", player) and s.has_any(("Dash", "Double Jump"), player) and has_enough_resources([('db', 20)], [], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([('db', 20), ('energy', ('Grenade', 1))], [], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Spear', 1))], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 20)], [], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BurrowsOpen", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BurrowsOpen", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BurrowsOpen", player), lambda s: s.has_all(("Bash", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.BurrowsEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.CrusherSwimEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "MarshSpawn.BurrowsEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_any(("Dash", "Hammer", "Clean Water"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BeforeBurrows", player), lambda s: has_enough_resources([], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 2)), ('db', 20)], "MarshSpawn.BurrowsEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.BurrowsEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshSpawn.BurrowsEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and has_enough_resources([('db', 10), ('energy', ('Shuriken', 1))], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 1))], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 30)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has("Launch", player) and s.has("Glide", player) and has_enough_resources([('db', 6)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 6)], [('db', 10)], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Launch", "Glide"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Launch", "Glide"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide"), player) and has_enough_resources([('db', 20)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has("Burrow", player) and s.has_any(("Bash", "Double Jump", "Dash", "Glide", "Launch", "Sword", "Hammer", "Water Dash"), player) and has_enough_resources([('db', 20)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 30)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and s.has_any(("Bash", "Double Jump", "Dash", "Glide", "Launch", "Sword", "Hammer", "Water Dash"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and has_enough_resources([('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2)), ('db', 20)], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('energy', ('Spear', 1))], [], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Water Dash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Double Jump", player) and s.has_any(("Bash", "Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Sentry', 2))], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor -> MarshSpawn.HowlApproach", player), lambda s: s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor -> MarshSpawn.HowlApproach", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.RegenDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor -> MarshSpawn.HowlApproach", player), lambda s: has_enough_resources([('energy', ('Spear', 1)), ('db', 10)], [], "MarshSpawn.RegenDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach -> MarshSpawn.RegenDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach -> MarshSpawn.RegenDoor", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.HowlApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.RecklessShard", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.RecklessShard", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 10))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.HowlApproach", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.HowlApproach", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "HowlsDen.RainLifted", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.HowlApproach", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "HowlsDen.RainLifted", "Bash", "Glide"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.AboveHowlArena", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.AboveHowlArena", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and has_enough_resources([('energy', ('Shuriken', 1))], [('energy', ('Spear', 1))], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangPlatform", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.AboveHowlArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("Sword", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: has_enough_resources([('db', 10), ('db', 10), ('db', 10), ('db', 20)], [], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: has_enough_resources([('db', 10), ('db', 10), ('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: has_enough_resources([('db', 10), ('energy', ('Shuriken', 1)), ('db', 10), ('energy', ('Shuriken', 1)), ('db', 10)], [], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: has_enough_resources([('db', 10), ('energy', ('Flash', 1)), ('db', 10), ('energy', ('Flash', 1)), ('db', 10)], [], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: has_enough_resources([('db', 10), ('energy', ('Sentry', 1)), ('db', 10), ('energy', ('Sentry', 1)), ('db', 10)], [], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: has_enough_resources([('energy', ('Shuriken', 2)), ('db', 10), ('energy', ('Shuriken', 1)), ('db', 10)], [], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: has_enough_resources([('energy', ('Flash', 2)), ('db', 10), ('energy', ('Flash', 1)), ('db', 10)], [], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: has_enough_resources([('energy', ('Sentry', 2)), ('db', 10), ('energy', ('Sentry', 1)), ('db', 10)], [], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: has_enough_resources([('energy', ('Sentry', 5)), ('db', 10)], [], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: has_enough_resources([('energy', ('Flash', 5)), ('db', 10)], [], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance -> MarshSpawn.MokkTheBrave", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.HowlsDenEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit -> MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player) and s.has("Hammer", player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit -> MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player) and can_enter_area(MarshSpawn, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.UpperLoopExit", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Bash", player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has_any(("Hammer", "Glide", "Bash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "HowlsDen.UpperLoopEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.UpperLoopExit", player), lambda s: s.has_all(("HowlsDen.UpperLoopEntranceBarrier", "Water Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.UpperLoopExit", player), lambda s: s.has_all(("HowlsDen.UpperLoopEntranceBarrier", "Water Dash"), player) and has_enough_resources([], [('db', 10)], "HowlsDen.UpperLoopEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveDoorKS", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveDoorKS", player), lambda s: has_enough_resources([], [('energy', ('Flash', 3)), ('energy', ('Sentry', 3))], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveDoorKS", player), lambda s: has_enough_resources([('db', 10)], [('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.MagnetShard", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 10)), ('energy', ('Grenade', 1))], [], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor -> HowlsDen.OutsideSecretRoom", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.BoneBridgeDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.BoneBridgeDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.BoneBridgeDoor", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: has_enough_resources([('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: has_enough_resources([('energy', ('Sentry', 3))], [], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 10), ('db', 10)], [], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Bash"), player) and has_enough_resources([], [('energy', ('Grenade', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Water Dash", "Bash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Water Dash", "Bash"), player) and has_enough_resources([], [('db', 10)], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: s.has_any(("Hammer", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 16))], [], "HowlsDen.MidwayBottomLoop", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: has_enough_resources([('wall', ('BreakWall', 16))], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "HowlsDen.MidwayBottomLoop", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: has_enough_resources([('wall', ('BreakWall', 16)), ('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.MidwayBottomLoop", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom -> HowlsDen.LeftSecretRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom -> HowlsDen.LeftSecretRoom", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 10)], [], "HowlsDen.SecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom -> HowlsDen.LeftSecretRoom", player), lambda s: has_enough_resources([('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.SecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: has_enough_resources([], [('energy', ('Spear', 3)), ('energy', ('Shuriken', 3)), ('energy', ('Flash', 3)), ('energy', ('Sentry', 3))], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: has_enough_resources([('db', 10)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: has_enough_resources([('db', 10), ('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Glide"), player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has_any(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has_all(("Sword", "Grapple"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has_all(("Sword", "Clean Water"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has("Sword", player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter -> HowlsDen.BoneBridge", player), lambda s: s.has("HowlsDen.BoneBarrier", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.LaserKS", player), lambda s: s.has_any(("Dash", "Hammer", "Bash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.LaserKS", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1))], "HowlsDen.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.LaserKS", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.LaserKS", player), lambda s: s.has("Sword", player) and has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.DoubleJumpApproach", player), lambda s: s.has_any(("Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.DoubleJumpApproach", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1))], "HowlsDen.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.DoubleJumpApproach", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.AboveTeleporter", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.AboveTeleporter", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 2))], "HowlsDen.DoubleJumpApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "HowlsDen.DoubleJumpApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge -> HowlsDen.DoubleJumpEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge -> HowlsDen.DoubleJumpApproach", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "HowlsDen.DoubleJumpTreeLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> HowlsDen.DoubleJumpEX", player), lambda s: s.has_all(("Dash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has_any(("Bash", "Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 3))], "HowlsDen.DoubleJumpTreeArea", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "HowlsDen.DoubleJumpTreeArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Bash", "Launch"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "MarshPastOpher.MillView", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Bash"), player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshPastOpher.MillView", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Grenade', 1))], "MarshPastOpher.MillView", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshPastOpher.OpherSkipBranch", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk -> MarshPastOpher.TrialLeftEX", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1)), ('energy', ('Blaze', 1)), ('energy', ('Shuriken', 1))], "MarshPastOpher.UnderTrunk", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialEC", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialEC", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialEC", player), lambda s: has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialRightEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialRightEX", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.UnderTrunk", player), lambda s: has_enough_resources([('db', 20)], [], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.BowPath", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.BowPath", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [('energy', ('Shuriken', 3)), ('energy', ('Sentry', 4)), ('energy', ('Blaze', 6))], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.SwingPoleEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.BowPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.SwingPoleEX", player), lambda s: has_enough_resources([('db', 10)], [('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "MarshPastOpher.BowPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.BowApproach", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.BowApproach", player), lambda s: has_enough_resources([('energy', ('Sentry', 3))], [], "MarshPastOpher.BowPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.BowApproach", player), lambda s: has_enough_resources([('energy', ('Sentry', 2))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1))], "MarshPastOpher.BowPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.BowApproach", player), lambda s: has_enough_resources([('energy', ('Blaze', 3))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1))], "MarshPastOpher.BowPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.MillView", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.MillView", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.BowPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.BowArea", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Bow', 2)), ('energy', ('Spear', 3))], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Spear', 2)), ('energy', ('Grenade', 1))], [], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Bow', 1))], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1))], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Spear', 1))], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1))], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Bow', 1)), ('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Grenade', 1)), ('energy', ('Blaze', 1))], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide", "Hammer", "Sword"), player) and has_enough_resources([('energy', ('Spear', 3))], [], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide", "Hammer", "Sword"), player) and has_enough_resources([('energy', ('Spear', 2)), ('energy', ('Grenade', 1))], [], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Hammer", "Sword"), player) and has_enough_resources([('energy', ('Bow', 2))], [], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.UpperBowArea", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Bow', 2))], [], "MarshPastOpher.BowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.UpperBowArea", player), lambda s: has_enough_resources([('energy', ('Bow', 2))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.BowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.UpperBowArea", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.BowApproach", player), lambda s: s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.BowApproach", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 2)), ('energy', ('Shuriken', 1))], "MarshPastOpher.BowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.BowApproach", player), lambda s: has_enough_resources([('energy', ('Bow', 1))], [], "MarshPastOpher.BowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.CeilingEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.PoolsPathEast", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.CeilingEX", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshPastOpher.PoolsPathEast", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "MarshPastOpher.PoolsPathEast", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathEast", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "MarshPastOpher.PoolsPathEast", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEC", player), lambda s: s.has_any(("Glide", "Sword", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEC", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 3))], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('db', 10)], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Bash", "Clean Water"), player) and s.has("Water Dash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Bash", "Clean Water"), player) and has_enough_resources([], [('energy', ('Shuriken', 1))], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Launch", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Spear', 1))], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Hammer", "Clean Water", "Water Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and has_enough_resources([('energy', ('Spear', 1))], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_any(("Glide", "Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEast", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 2))], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has_all(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 20)], [], "MarshPastOpher.PoolsPathOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: has_enough_resources([('db', 20)], [('energy', ('Sentry', 3))], "MarshPastOpher.PoolsPathOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.PoolsPathOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 3)), ('energy', ('Sentry', 2)), ('db', 10)], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 20)], [], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Hammer", player) and s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Dash", player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Spear', 1))], [], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('Spear', 1))], [('db', 10), ('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Double Jump", "Clean Water"), player) and has_enough_resources([('energy', ('Spear', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Spear', 1)), ('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20), ('energy', ('Spear', 1))], [], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 10), ('energy', ('Spear', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 20)], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Sword", player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Glide", player) and s.has("Hammer", player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Glide", player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 10), ('energy', ('Sentry', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 10), ('energy', ('Flash', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 10), ('energy', ('Shuriken', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: has_enough_resources([('db', 20), ('energy', ('Sentry', 3))], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_any(("Dash", "Sword"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Dash", player) and s.has("Hammer", player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Dash", player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1))], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Hammer", player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1))], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_any(("Glide", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: has_enough_resources([('db', 30)], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter -> MidnightBurrows.BelowLupo", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("MarshSpawn.BurrowsOpen", "Bash"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("MarshSpawn.BurrowsOpen", "Bash"), player) and can_enter_area(MarshSpawn, s, player, options) and has_enough_resources([], [('energy', ('Shuriken', 3)), ('energy', ('Sentry', 4))], "MidnightBurrows.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("MarshSpawn.BurrowsOpen", "Bash"), player) and can_enter_area(MarshSpawn, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "MidnightBurrows.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo -> MidnightBurrows.LeftKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo -> MidnightBurrows.Central", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword", "Hammer", "Glide", "Bash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo -> MidnightBurrows.Central", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 2)), ('db', 15)], "MidnightBurrows.BelowLupo", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.Lever", player), lambda s: has_enough_resources([('db', 15), ('energy', ('Blaze', 1))], [], "MidnightBurrows.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.DeflectorShard", player), lambda s: s.has("MidnightBurrows.Lever", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.DeflectorShard", player), lambda s: s.has("MidnightBurrows.Lever", player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2)), ('energy', ('Flash', 2))], "MidnightBurrows.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.DeflectorShard", player), lambda s: s.has("MidnightBurrows.Lever", player) and has_enough_resources([('db', 15)], [('energy', ('Spear', 2)), ('energy', ('Blaze', 2))], "MidnightBurrows.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.TabletRoom", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.TabletRoom", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('db', 30)], "MidnightBurrows.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.PortalRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.LeverRoom", player), lambda s: s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.LeverRoom", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 3)), ('db', 30)], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.LeverRoom", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 2))], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.LeverRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.LeverRoom", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.LeverRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 15)], [], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.LeverRoom", player), lambda s: has_enough_resources([('db', 15)], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 2))], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("MidnightBurrows.Lever", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 15)], [], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("MidnightBurrows.Lever", "Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.East", player), lambda s: s.has("MidnightBurrows.Lever", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.East", player), lambda s: s.has("MidnightBurrows.Lever", player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 3))], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.East", player), lambda s: s.has_all(("MidnightBurrows.Lever", "Bash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.Central", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.LowerKS", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.LowerKS", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 3))], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.LowerKS", player), lambda s: has_enough_resources([('db', 15)], [], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.LowerKS", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.LowerKS", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 15)], [], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 60)], [], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('db', 45)], [], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 45)], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and has_enough_resources([('db', 30)], [], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: has_enough_resources([('db', 105)], [], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has_any(("Dash", "Sword"), player) and has_enough_resources([('db', 75)], [], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 90)], [], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.East -> MidnightBurrows.DenConnection", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.DenConnection -> MidnightBurrows.PortalCorridor", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('db', 15)], "MidnightBurrows.PortalCorridor", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Shuriken', 4)), ('energy', ('Sentry', 4)), ('db', 15)], "MidnightBurrows.PortalCorridor", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 15)], [], "MidnightBurrows.PortalCorridor", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor -> MidnightBurrows.BelowUpperKS", player), lambda s: has_enough_resources([('db', 15)], [('energy', ('Sentry', 5))], "MidnightBurrows.PortalCorridor", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor -> MidnightBurrows.BelowUpperKS", player), lambda s: has_enough_resources([('db', 30)], [('energy', ('Sentry', 3)), ('energy', ('Blaze', 4))], "MidnightBurrows.PortalCorridor", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor -> MidnightBurrows.BelowUpperKS", player), lambda s: has_enough_resources([('db', 45)], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 2)), ('energy', ('Spear', 2))], "MidnightBurrows.PortalCorridor", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor -> MidnightBurrows.BelowUpperKS", player), lambda s: has_enough_resources([('db', 60)], [], "MidnightBurrows.PortalCorridor", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS -> MidnightBurrows.UpperKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS -> MidnightBurrows.PortalCorridor", player), lambda s: has_enough_resources([('db', 15), ('energy', ('Blaze', 6))], [], "MidnightBurrows.BelowUpperKS", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS -> MidnightBurrows.PortalCorridor", player), lambda s: has_enough_resources([('db', 45), ('energy', ('Spear', 4))], [], "MidnightBurrows.BelowUpperKS", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS -> MidnightBurrows.PortalCorridor", player), lambda s: has_enough_resources([('db', 60)], [('energy', ('Flash', 2)), ('energy', ('Blaze', 4))], "MidnightBurrows.BelowUpperKS", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS -> MidnightBurrows.PortalCorridor", player), lambda s: has_enough_resources([('db', 90)], [('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "MidnightBurrows.BelowUpperKS", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS -> MidnightBurrows.PortalCorridor", player), lambda s: has_enough_resources([('db', 150)], [], "MidnightBurrows.BelowUpperKS", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Hammer", "WestHollow.FullyDrained"), player) and s.has_any(("Dash", "Double Jump"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Hammer", "WestHollow.UpperDrainLeverPulled"), player) and s.has_any(("Dash", "Double Jump"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Glide", "WestHollow.FullyDrained"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Glide", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Glide", "WestHollow.UpperDrainLeverPulled"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Glide", "WestHollow.UpperDrainLeverPulled"), player) and has_enough_resources([('energy', ('Bow', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.PurpleDoorOpen", player), lambda s: s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and s.has("Bash", player) and can_enter_area(MarshPastOpher, s, player, options), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and can_enter_area(MarshPastOpher, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player) and s.has_any(("Double Jump", "Dash", "Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.MokiByTwillen", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: has_enough_resources([('energy', ('Bow', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen -> WestHollow.UpperDrainLeverPulled", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen -> WestHollow.UpperDrainLeverPulled", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 2))], "WestHollow.MokiByTwillen", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Dash", "WestHollow.FullyDrained"), player) and s.has("Sword", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Dash", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [('energy', ('Shuriken', 1))], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Dash", "WestHollow.UpperDrainLeverPulled"), player) and s.has("Sword", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Dash", "WestHollow.UpperDrainLeverPulled"), player) and has_enough_resources([('energy', ('Bow', 1))], [('energy', ('Shuriken', 1))], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Double Jump", "WestHollow.FullyDrained"), player) and s.has("Sword", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Double Jump", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [('energy', ('Sentry', 2))], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Double Jump", "WestHollow.UpperDrainLeverPulled"), player) and s.has("Sword", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Double Jump", "WestHollow.UpperDrainLeverPulled"), player) and has_enough_resources([('energy', ('Bow', 1))], [('energy', ('Sentry', 2))], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.PurpleDoorOpen", player), lambda s: s.has("Sword", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1)), ('energy', ('Shuriken', 1))], [], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player) and s.has_any(("Double Jump", "Dash", "Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Dash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('db', 10)], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.Entrance", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.Entrance", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 2))], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoorEnemyPaths -> WestHollow.MokiByTwillen", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([], [('energy', ('Blaze', 6)), ('energy', ('Sentry', 3))], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and has_enough_resources([], [('energy', ('Blaze', 6)), ('energy', ('Sentry', 3))], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("WestHollow.UpperTongueExtended", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("WestHollow.UpperTongueExtended", "WestHollow.UpperDrainLeverPulled"), player) and has_enough_resources([('energy', ('Bow', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("Hammer", "WestHollow.FullyDrained"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("Hammer", "WestHollow.UpperDrainLeverPulled"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 4))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "WestHollow.FullyDrained"), player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [('energy', ('Spear', 1))], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "WestHollow.UpperDrainLeverPulled"), player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "WestHollow.UpperDrainLeverPulled"), player) and has_enough_resources([('energy', ('Bow', 1))], [('energy', ('Spear', 1))], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Bash"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.FullyDrained"), player) and s.has_any(("Dash", "Glide", "Hammer"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.UpperDrainLeverPulled"), player) and s.has_any(("Dash", "Glide", "Hammer"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.UpperDrainLeverPulled"), player) and has_enough_resources([('energy', ('Bow', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "Double Jump"), player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "Sword"), player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Double Jump"), player) and s.has("Hammer", player) and has_enough_resources([('db', 20)], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Double Jump"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 2))], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Double Jump"), player) and has_enough_resources([('db', 20), ('energy', ('Spear', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and has_enough_resources([('energy', ('Bow', 2))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Double Jump"), player) and has_enough_resources([('energy', ('Bow', 1))], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Water Dash"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Dash", "Hammer"), player) and has_enough_resources([('db', 10)], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('energy', ('Bow', 1)), ('energy', ('Sentry', 2))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Double Jump"), player) and s.has_any(("Hammer", "WestHollow.UpperTongueExtended"), player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.UpperTongueExtended", "WestHollow.LowerTongueExtended", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.UpperTongueExtended", "WestHollow.LowerTongueExtended", "Hammer"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.UpperTongueExtended", "WestHollow.LowerTongueExtended", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.UpperTongueExtended", "WestHollow.LowerTongueExtended", "Sword"), player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.UpperTongueExtended", "WestHollow.LowerTongueExtended", "Sword"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.UpperTongueExtended", "WestHollow.LowerTongueExtended", "Glide"), player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.UpperTongueExtended", "WestHollow.LowerTongueExtended", "Glide"), player) and has_enough_resources([('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([], [('energy', ('Shuriken', 1))], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Glide"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Glide"), player) and has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Bash", "WestHollow.LowerTongueRetracted"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestHollow.AboveJumppad", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.LowerTongueExtended", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.LowerTongueExtended", "Dash"), player) and has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.AboveJumppad", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.LowerTongueExtended", "Bash"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.LowerTongueExtended", "Bash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "WestHollow.AboveJumppad", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.QuickshotShard", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Water Dash"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: s.has("Sword", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and can_buy_map(s, player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: s.has("Dash", player) and can_buy_map(s, player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: s.has("Dash", player) and can_buy_map(s, player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.TrialApproach", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('combat', 'Slug'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('energy', ('Sentry', 2))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.PolesPound", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.AboveJumppad", player), lambda s: has_enough_resources([('db', 10)], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: s.has("Hammer", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('energy', ('Shuriken', 1))], "WestHollow.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: s.has_all(("Glide", "Bash"), player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: s.has("Glide", player) and has_enough_resources([('combat', 'Slug')], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: has_enough_resources([('combat', 'Slug'), ('db', 10), ('energy', ('Sentry', 2))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "WestHollow.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: has_enough_resources([('combat', 'Slug'), ('db', 10), ('energy', ('Flash', 2))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "WestHollow.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: has_enough_resources([('combat', 'Slug'), ('db', 10), ('energy', ('Shuriken', 2))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "WestHollow.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: has_enough_resources([('combat', 'Slug'), ('db', 10), ('energy', ('Spear', 2))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "WestHollow.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: has_enough_resources([('combat', 'Slug'), ('energy', ('Sentry', 4))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "WestHollow.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: has_enough_resources([('combat', 'Slug'), ('energy', ('Flash', 4))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "WestHollow.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: has_enough_resources([('combat', 'Slug'), ('energy', ('Shuriken', 4))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "WestHollow.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.BelowLupoEX", player), lambda s: s.has("Double Jump", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.BelowLupoEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.BelowLupoEX", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.BelowLupoEX", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: has_enough_resources([('combat', 'Slug')], [('energy', ('Shuriken', 3)), ('energy', ('Sentry', 4))], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Shuriken', 3)), ('energy', ('Sentry', 4))], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has("Glide", player) and has_enough_resources([('combat', 'Slug')], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has_all(("Glide", "Bash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has("Glide", player) and s.has("Bash", player) and has_enough_resources([('db', 10), ('energy', ('Spear', 1))], [], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has("Glide", player) and has_enough_resources([('db', 10), ('energy', ('Spear', 1))], [('combat', 'Slug')], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([('db', 30)], [], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has_all(("Water Dash", "Clean Water", "Bash"), player) and has_enough_resources([('db', 10)], [], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('combat', 'Slug'), ('db', 30)], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has_all(("Water Dash", "Clean Water"), player) and has_enough_resources([('combat', 'Slug'), ('db', 10)], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.TrialActivation", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.DoorLever", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.DoorLever", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.DashApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.HollowDrainLower", player), lambda s: s.has("Double Jump", player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.HollowDrainLower", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WestHollow.DashApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestHollow.DashApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.DashApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.HollowDrainLower", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.HollowDrainLower", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Shuriken', 4)), ('energy', ('Flash', 4)), ('energy', ('Sentry', 4))], "WestHollow.DashApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashArea -> WestHollow.AboveDashSemisolid", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashArea -> WestHollow.AboveDashSemisolid", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashArea -> WestHollow.AboveDashSemisolid", player), lambda s: s.has_all(("WestHollow.DoorLever", "Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('db', 10)], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has("Double Jump", player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 10)], [('energy', ('Shuriken', 3)), ('energy', ('Flash', 3)), ('energy', ('Sentry', 3))], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 4)), ('energy', ('Flash', 4)), ('energy', ('Sentry', 4))], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Shuriken', 4)), ('energy', ('Flash', 4)), ('energy', ('Sentry', 4))], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has("Dash", player) and has_enough_resources([('db', 10)], [('energy', ('Shuriken', 3)), ('energy', ('Flash', 3)), ('energy', ('Sentry', 3))], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashRightEX", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashRightEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'WeakSlug')], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.DashRoomTopRight", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashRightEX", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('combat', 'WeakSlug')], [], "WestHollow.DashRoomTopRight", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashRightEX", player), lambda s: s.has("Dash", player) and has_enough_resources([('combat', 'WeakSlug')], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.DashRoomTopRight", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashRightEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashCrushers", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "WestHollow.DashRoomTopRight", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.AboveDashSemisolid", player), lambda s: s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.AboveDashSemisolid", player), lambda s: has_enough_resources([], [('energy', ('Blaze', 3)), ('energy', ('Sentry', 2)), ('db', 20)], "WestHollow.DashRoomTopRight", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.AboveDashSemisolid -> WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.AboveDashSemisolid -> WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.AboveDashSemisolid", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.HornBeetleFightEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.VoiceDoorPlatform", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.HornBeetleFightEX", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.AfterBeetleFight", player), lambda s: s.has_all(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.GladesApproachOre", player), lambda s: s.has_all(("Deflector", "Sword", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.GladesApproachOre", player), lambda s: s.has_all(("Deflector", "Sword", "Double Jump"), player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.GladesApproachOre", player), lambda s: s.has_all(("Deflector", "Sword", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('db', 10)], "EastHollow.MapMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 2)), ('db', 20)], "EastHollow.MapMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player) and has_enough_resources([('db', 10)], [], "EastHollow.MapMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1))], "EastHollow.MapMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 3)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.MapMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SpikeLanternEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SpikeLanternEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SpikeLanternEX", player), lambda s: s.has_all(("Grapple", "Double Jump", "Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SpikeLanternEX", player), lambda s: s.has_all(("Grapple", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SpikeLanternEX", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Grapple", "Glide"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.MortarEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.MortarEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('db', 10)], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.MortarEX", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has_all(("Grapple", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has_all(("Grapple", "Double Jump", "Sword", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.VoiceDoorPlatform", player), lambda s: s.has_all(("Grapple", "Double Jump", "Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.VoiceDoorPlatform", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Double Jump", "Triple Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.VoiceDoorPlatform", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Kwolok", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Kwolok", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Kwolok", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and has_enough_resources([], [('energy', ('Sentry', 3))], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Kwolok", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and has_enough_resources([('energy', ('Sentry', 2)), ('db', 10)], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Kwolok", player), lambda s: s.has_all(("Grapple", "Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Kwolok", player), lambda s: s.has_all(("Grapple", "Glide"), player) and has_enough_resources([('energy', ('Sentry', 3)), ('db', 10)], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.DepthsLever", player), lambda s: s.has("Deflector", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashEC", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashEC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashEC", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1))], "EastHollow.AboveBash", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashEC", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashEC", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.AboveBash", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashTreeCheckpoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.AboveDepths", player), lambda s: s.has("EastHollow.DepthsLever", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.AfterBeetleFight", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.BashEX", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer", "Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.BashEX", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.BashTreeCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.BashEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.BashEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.BashEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([], [('energy', ('Sentry', 2)), ('energy', ('Spear', 2))], "EastHollow.BashTreeCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.AboveBash", player), lambda s: s.has("Bash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.AboveBash", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "EastHollow.BashTreeCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.AboveBash", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastHollow.BashTreeCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.RightKwolokEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.RightKwolokEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.RightKwolokEX", player), lambda s: s.has_all(("Dash", "Double Jump", "Triple Jump", "Hammer"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.SilentSwimEC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 10)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.SilentSwimEC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Hammer"), player) and has_enough_resources([('db', 20)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimLeftEX", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimLeftEX", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimLeftEX", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.SecretRoofEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.SecretRoofEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.AfterBeetleFight", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.AfterBeetleFight", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 3)), ('db', 20)], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.AfterBeetleFight", player), lambda s: has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.AfterBeetleFight", player), lambda s: has_enough_resources([('energy', ('Sentry', 2))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Launch"), player) and can_enter_area(WoodsEntry, s, player, options), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide", "Triple Jump", "Hammer"), player) and can_enter_area(WoodsEntry, s, player, options), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Grapple", "Double Jump"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and can_enter_area(WoodsEntry, s, player, options), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Water Dash", "Double Jump"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Water Dash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 10)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Water Dash", "Double Jump"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Grapple", "Sword"), player) and can_enter_area(WoodsEntry, s, player, options), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Grapple", "Hammer"), player) and s.has("Glide", player) and can_enter_area(WoodsEntry, s, player, options), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Grapple", "Hammer"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Grapple", "Glide"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Water Dash", "Bash"), player) and can_enter_area(WoodsEntry, s, player, options), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Water Dash", "Sword"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 10)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Water Dash", "Dash"), player) and s.has_any(("Glide", "Hammer"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 10)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Water Dash", "Dash"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Water Dash", "Hammer"), player) and s.has("Glide", player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 10)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Water Dash", "Hammer"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Water Dash", "Glide"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.BashHC", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.AboveDepths", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.DepthsExteriorEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.DepthsExteriorEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastHollow.AboveDepths", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.BashTreeCheckpoint", player), lambda s: s.has("EastHollow.DepthsLever", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.ArcingShard", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Double Jump", "Triple Jump"), player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.ArcingShard", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoSwimLeftEX", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Clean Water", "Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple", "Double Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple", "Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.AboveOpher", player), lambda s: s.has("Double Jump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.AboveOpher", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Sentry', 2))], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.AboveOpher", player), lambda s: s.has_all(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.LowerOre", player), lambda s: has_enough_resources([('energy', ('Spear', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.TwillenHome", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.West", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.West", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.TwillenHome", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.Teleporter", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.Teleporter", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('db', 20)], "GladesTown.TwillenHome", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Bash", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "TuleyShop.Lightcatchers", "Bash", "Sword"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "TuleyShop.Lightcatchers", "Bash", "Hammer", "Flash"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Double Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Sword"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Sword"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Hammer", "Glide"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has("Bash", player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('db', 10)], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has_all(("Dash", "Hammer"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug')], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('db', 10)], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug'), ('db', 20)], [('db', 10), ('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug'), ('db', 10), ('energy', ('Sentry', 1))], [('db', 10), ('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug'), ('db', 10), ('energy', ('Flash', 1))], [('db', 10), ('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug'), ('db', 10), ('energy', ('Shuriken', 1))], [('db', 10), ('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug'), ('db', 10), ('energy', ('Spear', 1))], [('db', 10), ('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and s.has_any(("Glide", "Hammer"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug'), ('db', 10)], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug')], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug')], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.Teleporter", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Flash', 1))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash", "TuleyShop.StickyGrass", "Grapple"), player) and has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Double Jump", "Triple Jump"), player) and s.has_any(("Glide", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple", "Double Jump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple", "Double Jump", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.BlueMoon", "Grapple", "Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.MotayHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.BlueMoon", "Grapple", "Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "GladesTown.MotayHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.BlueMoon", "Grapple", "Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.MotayHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.BlueMoon", "Grapple", "Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.MotayHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.ArcingShard", player), lambda s: s.has("GladesTown.ClearThorns", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.UpperWest", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.UpperLeftEX", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.UpperLeftEX", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.UpperWest", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.UpperLeftEX", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.UpperLeftEX", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.UpperWest", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.AboveGromHC", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.UpperWest", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.AboveGromHC", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.UpperWest", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.MotayHut", player), lambda s: s.has("GladesTown.BuildHuts", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.UpperWest", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.Teleporter", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.UpperWest", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.InsideThirdHut -> GladesTown.BraveMokiHutEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.InsideThirdHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.InsideThirdHut -> GladesTown.BraveMokiHutEX", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.AboveCaveEX", player), lambda s: s.has("Hammer", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.AboveCaveEX", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.AcornMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.Teleporter", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Hammer"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.Teleporter", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Hammer"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.AcornMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Clean Water"), player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Clean Water"), player) and has_enough_resources([('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 1))], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has("Flash", player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 32)], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has("Flash", player) and has_enough_resources([('db', 32)], [('energy', ('Shuriken', 2)), ('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Water Dash"), player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 16)], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Water Dash"), player) and has_enough_resources([('db', 16)], [('energy', ('Shuriken', 2)), ('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Water Dash"), player) and has_enough_resources([('db', 10), ('db', 16)], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2)), ('energy', ('Blaze', 2))], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has("Flash", player) and has_enough_resources([('db', 10), ('db', 32)], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2)), ('energy', ('Blaze', 2))], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Clean Water"), player) and has_enough_resources([('db', 10), ('db', 10)], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has("Flash", player) and has_enough_resources([('db', 10), ('db', 42)], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Water Dash"), player) and has_enough_resources([('db', 10), ('db', 26)], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Bow', 4))], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.BountyShard", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.BountyShard", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "GladesTown.BelowBountyShard", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.LeftAboveCoals", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.LeftAboveCoals", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 2)), ('energy', ('Blaze', 4))], "GladesTown.BelowBountyShard", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.UpdraftCeilingEX", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1))], "GladesTown.LeftAboveCoals", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.LeftAboveCoals", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.UpdraftCeilingEX", player), lambda s: s.has("TuleyShop.SpringPlants", player) and has_enough_resources([('energy', ('Sentry', 3))], [], "GladesTown.LeftAboveCoals", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.LeftAboveCoals", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.AboveOpher", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.AboveOpher", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "GladesTown.LeftAboveCoals", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> GladesTown.PlayfulMoki", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.AboveOpher", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> GladesTown.PlayfulMoki", player), lambda s: s.has("TuleyShop.SpringPlants", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.AboveOpher", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and has_enough_resources([], [('energy', ('Blaze', 2)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1))], "GladesTown.AboveOpher", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki -> TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and has_enough_resources([], [('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "GladesTown.PlayfulMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> GladesTown.HoleHutEntrance", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> GladesTown.HoleHutEntrance", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.HoleHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player) and can_enter_area(LowerReach, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.HoleHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple"), player) and s.has("Hammer", player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple"), player) and can_enter_area(LowerReach, s, player, options) and has_enough_resources([], [('energy', ('Shuriken', 3)), ('energy', ('Flash', 3)), ('energy', ('Sentry', 3))], "GladesTown.HoleHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("TuleyShop.SpringPlants", "TuleyShop.StickyGrass", "Grapple"), player) and can_enter_area(LowerReach, s, player, options) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "GladesTown.HoleHut", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> E.WestGlades.PastTown", player), lambda s: s.has_any(("Clean Water", "Double Jump", "Dash", "Glide", "Hammer", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> E.WestGlades.PastTown", player), lambda s: s.has_any(("Clean Water", "Double Jump", "Dash", "Glide", "Hammer", "Sword"), player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> E.WestGlades.PastTown", player), lambda s: s.has_any(("Clean Water", "Double Jump", "Dash", "Glide", "Hammer", "Sword"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> E.WestGlades.PastTown", player), lambda s: s.has("Sword", player) and s.has_any(("Clean Water", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> E.WestGlades.PastTown", player), lambda s: s.has_all(("Hammer", "Glide"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> E.WestGlades.PastTown", player), lambda s: s.has_all(("Hammer", "Clean Water"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has_all(("Bash", "Water Dash", "Clean Water"), player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has_all(("Bash", "Water Dash", "Clean Water"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and s.has_any(("Glide", "Hammer"), player) and has_enough_resources([('db', 20)], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Hammer", player) and has_enough_resources([('combat', 'Tentacle')], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'Tentacle')], [('energy', ('Spear', 1))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPoolEX", player), lambda s: has_enough_resources([('db', 60)], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPoolEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPoolEX", player), lambda s: s.has_any(("Launch", "Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 40)], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPoolEX", player), lambda s: has_enough_resources([('db', 40)], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: has_enough_resources([('db', 80), ('db', 40)], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Water Dash", player) and s.has("Glide", player) and has_enough_resources([('db', 20), ('combat', 'Tentacle')], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20), ('combat', 'Tentacle')], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Water Dash", player) and s.has("Glide", player) and has_enough_resources([('db', 20), ('db', 10)], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20), ('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Hammer", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('combat', 'Tentacle'), ('db', 10)], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Sword", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Sword", player) and has_enough_resources([], [('combat', 'Tentacle'), ('db', 10)], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Glide", player) and has_enough_resources([('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Glide", player) and has_enough_resources([('combat', 'Tentacle')], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has_all(("Glide", "Bash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([('db', 20)], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and can_enter_area(GladesTown, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: s.has_all(("Sword", "Dash"), player) and can_enter_area(GladesTown, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('db', 10)], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player) and can_enter_area(GladesTown, s, player, options) and has_enough_resources([('db', 10)], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: s.has_all(("Hammer", "Glide"), player) and can_enter_area(GladesTown, s, player, options) and has_enough_resources([('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('db', 20)], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 30)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 30)], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.SwimEC", player), lambda s: has_enough_resources([('db', 140)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.SwimEC", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 60)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LowerPoolEX", player), lambda s: has_enough_resources([('db', 80)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LowerPoolEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch", "Bash", "Sword", "Hammer"), player) and has_enough_resources([('db', 40)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LowerPoolEX", player), lambda s: has_enough_resources([('db', 40)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LowerPoolEX", player), lambda s: has_enough_resources([('db', 20), ('db', 40)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LowerPoolEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LowerPoolEX", player), lambda s: s.has("Water Dash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch", "Bash", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LowerPoolEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.Center", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.Center", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.Center", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump", "Glide"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.Center", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump", "Glide"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.PastTown", player), lambda s: has_enough_resources([('db', 10)], [('db', 40), ('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.PastTown", player), lambda s: has_enough_resources([('combat', 'Tentacle')], [('db', 40), ('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.PastTown", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20), ('db', 10)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.PastTown", player), lambda s: has_enough_resources([('db', 20), ('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.PastTown", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20), ('combat', 'Tentacle')], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.PastTown", player), lambda s: has_enough_resources([('db', 20), ('combat', 'Tentacle')], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.LeftOre", player), lambda s: s.has_all(("Glide", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.LeftOre", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.LeftOre", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and has_enough_resources([('db', 10)], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.RightOre", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.RightOre", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 30), ('combat', 'Tentacle')], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.RightOre", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 20), ('combat', 'Tentacle')], [], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.RightOre", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 20), ('combat', 'Tentacle')], [('energy', ('Sentry', 2)), ('energy', ('Flash', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Spear', 2)), ('energy', ('Blaze', 2))], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.RightOre", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 50), ('combat', 'Tentacle')], [], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.RightOre", player), lambda s: s.has("Dash", player) and has_enough_resources([('db', 50), ('combat', 'Tentacle')], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1))], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.RightOre", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 40)], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.RightOre", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 30)], [], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.RightOre", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 30)], [('energy', ('Sentry', 2)), ('energy', ('Flash', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Spear', 2)), ('energy', ('Blaze', 2))], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.LowerPoolEX", player), lambda s: has_enough_resources([('db', 60)], [], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.Upper", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Sword"), player) and has_enough_resources([('combat', 'Tentacle'), ('db', 20)], [], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.Upper", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'Tentacle'), ('db', 20)], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1))], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.Upper", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and has_enough_resources([('combat', 'Tentacle'), ('db', 20)], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1))], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.Upper", player), lambda s: s.has_all(("Dash", "Hammer"), player) and has_enough_resources([('combat', 'Tentacle'), ('db', 20)], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1))], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.Upper", player), lambda s: s.has_all(("Dash", "Sword"), player) and has_enough_resources([('combat', 'Tentacle'), ('db', 20), ('db', 30)], [], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.LowerPool", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.PastTown", player), lambda s: has_enough_resources([('combat', 'Tentacle')], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.PastTown", player), lambda s: has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.RightOre", player), lambda s: s.has_any(("Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.RightOre", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 6))], "WestGlades.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.RightOre", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WestGlades.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.RightOre", player), lambda s: s.has("Glide", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.RightOre", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.RightOre", player), lambda s: s.has("Hammer", player) and has_enough_resources([('combat', 'Tentacle')], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WestGlades.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 1))], "WestGlades.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "Hammer"), player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "WestGlades.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.SwimOre", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.Upper", player), lambda s: s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.Upper", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 2))], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.Upper", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 2))], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Sword", player) and can_enter_area(OuterWellspring, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Hammer", player) and can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([('db', 20)], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([('db', 20)], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 2)), ('db', 20)], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Sentry', 2))], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Hammer", player) and s.has_any(("Glide", "Grapple"), player) and can_enter_area(OuterWellspring, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Hammer", player) and can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Glide", player) and s.has("Grapple", player) and can_enter_area(OuterWellspring, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Glide", player) and can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Grapple", player) and can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Grapple", "Bash"), player) and can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Bash"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has_any(("Double Jump", "Hammer"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([], [('energy', ('Sentry', 2))], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("Double Jump", "Hammer"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([], [('energy', ('Sentry', 2))], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 2))], "WestGlades.ShrineArea", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> H.OuterWellspring.EntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.EntranceDoorOpen", player), lambda s: s.has("Clean Water", player) and s.has_any(("Bow", "Spear", "Shuriken", "Grenade", "Blaze"), player) and has_enough_resources([('wall', ('BreakWall', 16)), ('db', 15)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.LifeHarvestWallBroken", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Grapple", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.BasementEC", player), lambda s: has_enough_resources([('db', 35)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.BasementEC", player), lambda s: has_enough_resources([('db', 15)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.LifeHarvestEntry", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has_any(("Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Glide", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 15)], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Sword", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 15)], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 15)], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 2)), ('db', 15)], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Hammer"), player) and has_enough_resources([('db', 15)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 55)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 95)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("OuterWellspring.FallingWheel", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 15)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("OuterWellspring.FallingWheel", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("OuterWellspring.FallingWheel", "Glide"), player) and has_enough_resources([('db', 15)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("OuterWellspring.FallingWheel", "Glide", "Bash"), player) and has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("OuterWellspring.FallingWheel", "Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("OuterWellspring.FallingWheel", "Double Jump", "Triple Jump"), player) and s.has_any(("Glide", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("OuterWellspring.FallingWheel", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("OuterWellspring.FallingWheel", "Double Jump", "Dash"), player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("OuterWellspring.FallingWheel", "Double Jump", "Dash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("OuterWellspring.FallingWheel", "Dash", "Hammer", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has_any(("Bash", "Double Jump", "Dash", "Sword", "Hammer"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('db', 20)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: can_enter_area(WestGlades, s, player, options) and has_enough_resources([('db', 20)], [('energy', ('Sentry', 2)), ('db', 20)], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("Sword", player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "Glide"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has_all(("Bash", "Glide"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.has_any(("Glide", "Sword", "Hammer", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestLeverPulled", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 4)), ('energy', ('Shuriken', 2))], "OuterWellspring.LifeHarvestEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.has("Clean Water", player) and has_enough_resources([], [('energy', ('Sentry', 2)), ('energy', ('Shuriken', 1))], "OuterWellspring.LifeHarvestEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestLeverPulled", player), lambda s: has_enough_resources([('db', 20)], [('energy', ('Sentry', 2)), ('energy', ('Shuriken', 1))], "OuterWellspring.LifeHarvestEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has_all(("OuterWellspring.LifeHarvestLeverPulled", "Bash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has_all(("OuterWellspring.LifeHarvestLeverPulled", "Bash"), player) and has_enough_resources([], [('energy', ('Sentry', 4)), ('energy', ('Shuriken', 2))], "OuterWellspring.LifeHarvestEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has_all(("OuterWellspring.LifeHarvestLeverPulled", "Bash", "Clean Water"), player) and has_enough_resources([], [('energy', ('Sentry', 2)), ('energy', ('Shuriken', 1))], "OuterWellspring.LifeHarvestEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has_all(("OuterWellspring.LifeHarvestLeverPulled", "Bash"), player) and has_enough_resources([('db', 20)], [('energy', ('Sentry', 2)), ('energy', ('Shuriken', 1))], "OuterWellspring.LifeHarvestEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.BasementEC", player), lambda s: has_enough_resources([('db', 80)], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.BasementEC", player), lambda s: s.has_any(("Water Dash", "Double Jump", "Dash"), player) and has_enough_resources([('db', 40)], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.BasementEC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide"), player) and has_enough_resources([('db', 20)], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Dash", "Sword"), player) and has_enough_resources([('db', 20)], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.BasementEC", player), lambda s: s.has_all(("Dash", "Grapple"), player) and s.has_any(("Double Jump", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Grapple", "Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Grapple"), player) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug')], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Grapple"), player) and has_enough_resources([], [('combat', 'WeakSlug')], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Water Dash"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'WeakSlug'), ('db', 15), ('db', 20)], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Water Dash", "Clean Water"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'WeakSlug'), ('db', 15)], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'WeakSlug'), ('db', 20)], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Water Dash", "Double Jump"), player) and has_enough_resources([('combat', 'WeakSlug'), ('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Water Dash", "Double Jump", "Clean Water"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'WeakSlug')], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Water Dash", "Double Jump", "Clean Water"), player) and has_enough_resources([('combat', 'WeakSlug')], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Water Dash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'WeakSlug'), ('db', 20)], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Water Dash", "Dash"), player) and has_enough_resources([('combat', 'WeakSlug'), ('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Water Dash", "Dash", "Clean Water"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'WeakSlug')], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Water Dash", "Dash", "Clean Water"), player) and has_enough_resources([('combat', 'WeakSlug')], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Water Dash", "Glide", "Hammer"), player) and s.has("Clean Water", player) and has_enough_resources([('combat', 'WeakSlug')], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Water Dash", "Glide", "Hammer"), player) and has_enough_resources([('combat', 'WeakSlug')], [('db', 20)], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.EastDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 2))], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 1))], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Dash", player) and s.has_any(("Bash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Blaze', 6)), ('energy', ('Sentry', 4))], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 3)), ('energy', ('Grenade', 1))], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Grapple"), player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash", "Hammer"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 15)], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "OuterWellspring.WestDoorBlueMoonFree", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "OuterWellspring.WestDoorBlueMoonFree", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "OuterWellspring.WestDoorBlueMoonFree", "Hammer"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "OuterWellspring.WestDoorBlueMoonFree", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 15)], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 15)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Shuriken', 2))], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: has_enough_resources([('db', 30)], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has("Dash", player) and has_enough_resources([('wall', ('BreakWall', 20)), ('db', 15)], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Bash", "Hammer"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('wall', ('BreakWall', 20))], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has("Grapple", player) and has_enough_resources([('wall', ('BreakWall', 20))], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Sentry', 2))], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("InnerWellspring.TopDoorOpen", "Bash"), player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("InnerWellspring.TopDoorOpen", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 2))], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 15)], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has("Dash", player) and has_enough_resources([('db', 15)], [('energy', ('Sentry', 2)), ('db', 15)], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player) and has_enough_resources([('db', 15)], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 15)], [('energy', ('Spear', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 15)], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 30), ('energy', ('Sentry', 3))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 15)], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 15)], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Glide"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Glide"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('db', 15)], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.TopDoor", player), lambda s: s.has_all(("InnerWellspring.TopDoorOpen", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.TopDoor", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player) and has_enough_resources([('energy', ('Spear', 1))], [], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.WestDoor", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.EastDoor", player), lambda s: s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.EastDoor", player), lambda s: has_enough_resources([], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 3))], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.EastDoor", player), lambda s: has_enough_resources([('db', 15)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.EastDoor", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.TrialActivation", player), lambda s: s.has_all(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Dash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.TopDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 2))], "OuterWellspring.TopDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Sword"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Sword"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.TopDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and has_enough_resources([('energy', ('Sentry', 2))], [], "OuterWellspring.TopDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> WestGlades.MillApproach", player), lambda s: s.has_any(("Double Jump", "Dash", "Hammer"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> WestGlades.MillApproach", player), lambda s: can_enter_area(WestGlades, s, player, options) and has_enough_resources([], [('energy', ('Blaze', 2)), ('energy', ('Sentry', 2))], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> WestGlades.MillApproach", player), lambda s: s.has("Bash", player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.EntranceDoor", player), lambda s: s.has_any(("Double Jump", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.EntranceDoor", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Sentry', 2))], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Glide"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.EastDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.TrialApproach", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 3))], [], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 2)), ('db', 15)], [], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2)), ('db', 30), ('energy', ('Sentry', 3))], [], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEX", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEX", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEC", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEC", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20)), ('db', 15)], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEC", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 20)), ('db', 15)], [], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.TrialRoom", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.TrialRoom", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.EastDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.EastDoor", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.EastDoor", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Sentry', 2)), ('db', 15)], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.EastDoor", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.EastDoor", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 15)], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.EastDoor", player), lambda s: has_enough_resources([('db', 15), ('energy', ('Sentry', 2))], [], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.AboveEntranceDoor", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom -> OuterWellspring.TrialStart", player), lambda s: s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom -> OuterWellspring.TrialStart", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 3))], "OuterWellspring.TrialRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> OuterWellspring.SpiritTrial", player), lambda s: s.has_all(("OuterWellspring.TrialActivation", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> OuterWellspring.TrialRoom", player), lambda s: s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> OuterWellspring.TrialRoom", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> OuterWellspring.TrialRoom", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.WaterDashSwitch", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThreeWheelsEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.WaterSwitchEX", player), lambda s: s.has("InnerWellspring.WaterDashSwitch", player) and has_enough_resources([('db', 80)], [], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.WaterSwitchEX", player), lambda s: s.has_all(("InnerWellspring.WaterDashSwitch", "Water Dash"), player) and has_enough_resources([('db', 40)], [], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThornShardArea", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThornShardArea", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThornShardArea", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.DrainRoom", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.DrainRoom", player), lambda s: has_enough_resources([('db', 15)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.DrainRoom", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Blaze', 3)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ShortcutLever", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has_all(("Grapple", "Sword"), player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has_all(("Grapple", "Sword"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1))], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2)), ('db', 15)], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2)), ('db', 15)], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has_all(("Dash", "Glide"), player) and has_enough_resources([('db', 15)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and has_enough_resources([], [('db', 15)], "InnerWellspring.ShortcutLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.WestDoor", player), lambda s: s.has_all(("InnerWellspring.ShortCutWheel", "Hammer"), player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.WestDoor", player), lambda s: s.has_all(("InnerWellspring.ShortCutWheel", "Hammer"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.ShortcutLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.WestDoor", player), lambda s: s.has_all(("InnerWellspring.ShortCutWheel", "Glide"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.ShortcutLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.ThornShardArea", player), lambda s: has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "InnerWellspring.ShortcutLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Blaze', 5)), ('energy', ('Sentry', 3))], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and has_enough_resources([], [('energy', ('Shuriken', 4))], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 20)], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 60), ('energy', ('Grenade', 3))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([('db', 40), ('energy', ('Grenade', 3))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("InnerWellspring.DrainLever", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("InnerWellspring.DrainLever", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 3))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaEntrance", player), lambda s: s.has("InnerWellspring.DrainLever", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainHC", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainHC", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.DrainAreaEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has("Dash", player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Dash", "Bash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.DrainAreaEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Dash", "Clean Water"), player) and s.has("Water Dash", player) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug')], [], "InnerWellspring.DrainAreaEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Dash", "Clean Water"), player) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug')], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.DrainAreaEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has("Dash", player) and has_enough_resources([('db', 20), ('combat', 'WeakSlug'), ('combat', 'WeakSlug')], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.DrainAreaEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Dash", "Water Dash"), player) and has_enough_resources([('db', 20), ('db', 20), ('combat', 'WeakSlug'), ('combat', 'WeakSlug')], [], "InnerWellspring.DrainAreaEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.DrainAreaEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Bash", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainAreaEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Sword"), player) and s.has_any(("Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainHC", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 40)], [], "InnerWellspring.DrainAreaEX", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainHC", player), lambda s: has_enough_resources([('db', 40)], [('db', 20)], "InnerWellspring.DrainAreaEX", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainHC", player), lambda s: has_enough_resources([('db', 20), ('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.DrainAreaEX", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainHC", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "InnerWellspring.DrainAreaEX", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainHC", player), lambda s: has_enough_resources([('db', 20)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "InnerWellspring.DrainAreaEX", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainHC", player), lambda s: s.has("Water Dash", player) and s.has("Bash", player) and has_enough_resources([('db', 20)], [], "InnerWellspring.DrainAreaEX", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainHC", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "InnerWellspring.DrainAreaEX", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainHC", player), lambda s: s.has("Dash", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainAreaExit", player), lambda s: s.has_any(("Bash", "Hammer"), player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "InnerWellspring.DrainAreaEX", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainAreaExit", player), lambda s: has_enough_resources([('wall', ('BreakWall', 10))], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2))], "InnerWellspring.DrainAreaEX", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: has_enough_resources([], [('energy', ('Spear', 3)), ('energy', ('Shuriken', 3)), ('energy', ('Sentry', 3))], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and has_enough_resources([('energy', ('Sentry', 4))], [], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("InnerWellspring.DrainRoomBottomWheel", "Glide"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("InnerWellspring.DrainRoomBottomWheel", "Glide"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("InnerWellspring.DrainRoomBottomWheel", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("InnerWellspring.DrainRoomBottomWheel", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainLever", player) and has_enough_resources([('db', 15)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 3)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 15)], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("InnerWellspring.DrainLever", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("InnerWellspring.DrainLever", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 15)], [], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 80)], [], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 3)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([('db', 40), ('energy', ('Grenade', 1))], [], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoom", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoom", player), lambda s: has_enough_resources([], [('energy', ('Blaze', 3)), ('energy', ('Sentry', 2)), ('db', 40)], "InnerWellspring.DrainRoomCenter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoom", player), lambda s: has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.DrainRoomCenter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainRoomCenter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainLever", player) and has_enough_resources([('db', 15)], [], "InnerWellspring.DrainRoomCenter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and has_enough_resources([('db', 20)], [], "InnerWellspring.DrainRoomCenter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("InnerWellspring.DrainLever", "InnerWellspring.DrainRoomBottomWheel"), player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "InnerWellspring.DrainRoomCenter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.LaserOre", player), lambda s: has_enough_resources([('combat', 'Miner')], [('energy', ('Shuriken', 2)), ('energy', ('Blaze', 4)), ('energy', ('Sentry', 3))], "InnerWellspring.DrainRoomTop", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has("Grapple", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Shuriken', 1))], "InnerWellspring.DrainRoomTop", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainRoomTop", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.DrainRoomTop", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.DrainLever", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.LeverEC", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.AbovePole", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.AbovePole", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.AbovePole", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Spear', 1))], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.MiddleDoorsOpen", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.MiddleDoorsOpen", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.LupoMap", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.LupoMap", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and can_buy_map(s, player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.LupoMap", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and can_buy_map(s, player) and has_enough_resources([], [('energy', ('Spear', 1))], "InnerWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Shuriken', 1))], "InnerWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Double Jump", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1))], "InnerWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 15)], "InnerWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("InnerWellspring.TopDoorOpen", "Double Jump", "Triple Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("InnerWellspring.TopDoorOpen", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "InnerWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.SpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Grapple", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and has_enough_resources([], [('db', 30)], "InnerWellspring.SpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.SpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has_all(("Clean Water", "Sword"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.SpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.SpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.PastSpinPuzzle", player), lambda s: s.has_all(("InnerWellspring.SpinPuzzleSolved", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.SpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.EastDoor", player), lambda s: s.has_all(("InnerWellspring.SpinningRoomOpen", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.EastDoor", player), lambda s: s.has_all(("InnerWellspring.SpinningRoomOpen", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and has_enough_resources([], [('db', 30)], "InnerWellspring.PastSpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.PastSpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has_all(("Clean Water", "Sword"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.PastSpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Grapple", player) and has_enough_resources([('db', 10)], [], "InnerWellspring.PastSpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Double Jump", player) and s.has("Bash", player) and has_enough_resources([('db', 15)], [], "InnerWellspring.PastSpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 15)], [('combat', 'Miner'), ('db', 10)], "InnerWellspring.PastSpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.SpinPuzzle", player), lambda s: s.has_all(("InnerWellspring.SpinPuzzleSolved", "Clean Water"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.PastSpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.SpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.PastSpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.TopSecondRoom", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 15)], "InnerWellspring.GrappleThroughZigZagSpikes", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 3))], "InnerWellspring.GrappleThroughZigZagSpikes", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and has_enough_resources([], [('db', 20)], "InnerWellspring.GrappleThroughZigZagSpikes", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.PastSpinPuzzle", player), lambda s: has_enough_resources([], [('db', 35)], "InnerWellspring.GrappleThroughZigZagSpikes", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Glide", player) and has_enough_resources([('db', 10)], [], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 75)], [], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: has_enough_resources([('db', 75)], [('combat', 'Miner')], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: has_enough_resources([('db', 85)], [], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('combat', 'Miner')], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 60)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: has_enough_resources([('db', 60), ('combat', 'Miner')], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: has_enough_resources([('db', 70)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.TopSecondRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.BlueMoonSeed", player), lambda s: s.has_all(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.BlueMoonSeed", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.AboveTpEX", player), lambda s: s.has("Double Jump", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.AboveTpEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Sentry', 3))], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.AboveTpEX", player), lambda s: s.has("Dash", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.AboveTpEX", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Sentry', 2))], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has_all(("Dash", "Hammer", "Grapple"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has("Launch", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.EscapeSequence", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Blaze', 3)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "InnerWellspring.EscapeSequence", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Water Dash", "Clean Water"), player) and has_enough_resources([], [('energy', ('Sentry', 2)), ('db', 15)], "InnerWellspring.EscapeSequence", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Water Dash"), player) and has_enough_resources([('db', 95)], [], "InnerWellspring.EscapeSequence", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Water Dash"), player) and has_enough_resources([('db', 60), ('energy', ('Sentry', 2))], [], "InnerWellspring.EscapeSequence", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Water Dash"), player) and has_enough_resources([('db', 40), ('energy', ('Sentry', 3))], [], "InnerWellspring.EscapeSequence", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Water Dash"), player) and has_enough_resources([('db', 20), ('energy', ('Sentry', 4))], [], "InnerWellspring.EscapeSequence", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash"), player) and has_enough_resources([('energy', ('Sentry', 6))], [], "InnerWellspring.EscapeSequence", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> EastHollow.SilentSwimWall", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('energy', ('Spear', 1))], [], "WoodsEntry.ShriekMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsEntry.ShriekMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.MudPitEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.BelowTeleporter", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.BelowTeleporter", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 3))], "WoodsEntry.FirstMud", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.BelowTeleporter", player), lambda s: s.has("Bash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.BelowTeleporter", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Sentry', 2))], "WoodsEntry.FirstMud", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.FamilyHut -> WoodsEntry.Teleporter", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.FirstMud", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.FirstMud", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.FirstMud", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "WoodsEntry.BelowTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('db', 15)], "WoodsEntry.BelowTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('Sentry', 2)), ('db', 15)], [], "WoodsEntry.BelowTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('Sentry', 4))], [], "WoodsEntry.BelowTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "WoodsEntry.BelowTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Sentry', 2)), ('db', 15)], "WoodsEntry.BelowTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.TwoKeystoneRoom", player), lambda s: has_enough_resources([('combat', 'Balloon'), ('combat', 'Balloon')], [('energy', ('Shuriken', 3)), ('energy', ('Sentry', 3)), ('energy', ('Spear', 3))], "WoodsEntry.BelowTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('combat', 'Balloon'), ('combat', 'Balloon'), ('energy', ('Grenade', 1)), ('energy', ('Flash', 2))], [], "WoodsEntry.BelowTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('combat', 'Balloon'), ('combat', 'Balloon'), ('energy', ('Grenade', 2)), ('energy', ('Spear', 1))], [], "WoodsEntry.BelowTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has_any(("Double Jump", "Glide"), player) and has_enough_resources([('db', 20), ('db', 20)], [], "WoodsEntry.BelowTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "WoodsEntry.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2)), ('energy', ('Flash', 1))], "WoodsEntry.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "WoodsEntry.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "WoodsEntry.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Dash", "Sword"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "WoodsEntry.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Dash", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "WoodsEntry.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsEntry.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Bash", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "WoodsEntry.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> WoodsEntry.LowerKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> WoodsEntry.BelowTeleporter", player), lambda s: s.has_any(("Launch", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> WoodsEntry.BelowTeleporter", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "WoodsEntry.TwoKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.LowerKS", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.LowerKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: has_enough_resources([('energy', ('Sentry', 3))], [], "WoodsMain.AfterKuMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Sword", player) and has_enough_resources([('db', 10)], [], "WoodsMain.AfterKuMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Sword", player) and has_enough_resources([('combat', 'Tentacle')], [], "WoodsMain.AfterKuMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Hammer", player) and has_enough_resources([('combat', 'Tentacle')], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.AfterKuMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and has_enough_resources([('combat', 'Tentacle')], [], "WoodsMain.AfterKuMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'Tentacle')], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.AfterKuMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("WoodsMain.KSRoomYellowBarrierBroken", "Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide"), player) and has_enough_resources([('db', 15)], [], "WoodsMain.AfterKuMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("WoodsMain.KSRoomYellowBarrierBroken", "Launch"), player) and s.has_any(("Double Jump", "Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("WoodsMain.KSRoomYellowBarrierBroken", "Launch"), player) and has_enough_resources([], [('db', 15)], "WoodsMain.AfterKuMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.BehindWallOre", player), lambda s: s.has_all(("Flap", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and has_enough_resources([], [('combat', 'Balloon'), ('db', 20)], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has("Double Jump", player) and s.has_any(("Glide", "Dash", "Hammer"), player) and has_enough_resources([('combat', 'Balloon'), ('combat', 'Balloon'), ('db', 15)], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'Balloon'), ('combat', 'Balloon'), ('db', 15)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Glide", "Dash", "Hammer"), player) and has_enough_resources([('db', 20), ('db', 35)], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 20), ('db', 35)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide", "Hammer"), player) and has_enough_resources([('combat', 'Tentacle')], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'Tentacle')], [('energy', ('Sentry', 2))], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has_any(("Glide", "Hammer"), player) and has_enough_resources([('combat', 'Tentacle')], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Tentacle')], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.WallOreLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.LowerKS", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.LowerKS", player), lambda s: s.has_all(("Glide", "Double Jump", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.WallOreLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.WallOreLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.FourKeystoneRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.FourKeystoneRoom", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 1))], "WoodsMain.WallOreLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: has_enough_resources([], [('combat', 'Balloon'), ('db', 20)], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.RightKS", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.UpperKS", player), lambda s: s.has_any(("Double Jump", "Bash"), player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.UpperKS", player), lambda s: s.has_all(("Sword", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.UpperKS", player), lambda s: s.has_any(("Glide", "Double Jump", "Bash"), player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.UpperKS", player), lambda s: s.has_any(("Glide", "Double Jump", "Bash"), player) and has_enough_resources([('db', 20)], [], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LeftKS", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'Balloon'), ('db', 15)], [], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LeftKS", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 20)], [], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LeftKS", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LowerKS", player), lambda s: s.has_all(("WoodsMain.KSRoomYellowBarrierBroken", "Bash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LowerKS", player), lambda s: s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and has_enough_resources([], [('energy', ('Spear', 3)), ('energy', ('Shuriken', 3)), ('energy', ('Sentry', 3)), ('energy', ('Blaze', 4)), ('energy', ('Flash', 3)), ('energy', ('Sentry', 3))], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LowerKS", player), lambda s: s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and has_enough_resources([('db', 15)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LowerKS", player), lambda s: s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and has_enough_resources([('db', 25)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.BelowKeystonesEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and has_enough_resources([('db', 15)], [], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and s.has_any(("Dash", "Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.GiantSkull", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Glide", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Glide", "Dash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "WoodsMain.GiantSkull", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Glide", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BalloonLure", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BalloonLure", player), lambda s: s.has("Bash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BalloonLure", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('db', 15)], "WoodsMain.GiantSkull", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BalloonLure", player), lambda s: s.has_any(("Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BalloonLure", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'Tentacle')], [], "WoodsMain.GiantSkull", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has_any(("Glide", "Launch"), player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has_any(("Glide", "Launch"), player) and has_enough_resources([('db', 20)], [], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('db', 20)], [], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.has("WoodsMain.BalloonLureBlobDestroyed", player) and s.has_any(("Glide", "Launch"), player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.has("WoodsMain.BalloonLureBlobDestroyed", player) and s.has_any(("Glide", "Launch"), player) and has_enough_resources([('db', 20)], [], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.has_all(("WoodsMain.BalloonLureBlobDestroyed", "Double Jump", "Triple Jump"), player) and s.has("Flap", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.has_all(("WoodsMain.BalloonLureBlobDestroyed", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('db', 20), ('combat', 'Balloon')], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("WoodsMain.BalloonLureBlobDestroyed", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('combat', 'Balloon'), ('db', 20)], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("WoodsMain.BalloonLureBlobDestroyed", "Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.GiantSkull", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.GiantSkull", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.GiantSkull", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1)), ('db', 15)], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.GiantSkull", player), lambda s: s.has("Bash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.GiantSkull", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.GiantSkull", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.HiddenOre", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('db', 15)], [], "WoodsMain.BelowHiddenOre", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.HiddenOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.PetrifiedHowl", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 45)], [], "WoodsMain.BelowHiddenOre", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.PetrifiedHowl", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Bash"), player) and has_enough_resources([('db', 15)], [], "WoodsMain.BelowHiddenOre", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.AboveHowl", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BrokenOwl", player), lambda s: s.has("Glide", player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "WoodsMain.PetrifiedHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BrokenOwl", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BrokenOwl", player), lambda s: s.has_all(("Dash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BelowHiddenOre", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BelowHiddenOre", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 3))], "WoodsMain.PetrifiedHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BelowHiddenOre", player), lambda s: has_enough_resources([('energy', ('Blaze', 3))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.PetrifiedHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BelowHiddenOre", player), lambda s: has_enough_resources([('db', 15)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WoodsMain.PetrifiedHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BelowHiddenOre", player), lambda s: has_enough_resources([('db', 15), ('db', 15)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.PetrifiedHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BelowHiddenOre", player), lambda s: has_enough_resources([('db', 30), ('db', 15)], [], "WoodsMain.PetrifiedHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl -> WoodsMain.AboveHowl", player), lambda s: s.has_any(("Hammer", "Sword"), player) and has_enough_resources([('db', 15)], [], "WoodsMain.BrokenOwl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl -> WoodsMain.TrialStart", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart -> WoodsMain.MidwayTrial", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart -> WoodsMain.MidwayTrial", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart -> WoodsMain.MidwayTrial", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('db', 15)], "WoodsMain.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart -> WoodsMain.AboveHowl", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Sentry', 3)), ('energy', ('Blaze', 5))], "WoodsMain.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.TrialEnd", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.TrialEnd", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Burrow", player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.TrialEnd", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([], [('energy', ('Grenade', 2))], "WoodsMain.MidwayTrial", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.TrialEnd", player), lambda s: s.has_all(("Double Jump", "Burrow"), player) and has_enough_resources([('db', 45)], [], "WoodsMain.MidwayTrial", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.BeforeLog", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.OrangeTree", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.TrialStart", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.TrialActivation", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.OverflowShard", player), lambda s: has_enough_resources([('energy', ('Sentry', 2))], [], "WoodsMain.TrialEnd", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.OverflowShard", player), lambda s: s.has("Sword", player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1))], "WoodsMain.TrialEnd", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.OverflowShard", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1))], "WoodsMain.TrialEnd", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.BeforeLog", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 2)), ('energy', ('Shuriken', 1))], "WoodsMain.TrialEnd", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.OrangeTree", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.OrangeTree", player), lambda s: s.has("Burrow", player) and has_enough_resources([], [('energy', ('Sentry', 5))], "WoodsMain.TrialEnd", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.BeforeLog", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.BeforeLog", player), lambda s: s.has("Hammer", player) and s.has_any(("Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.BeforeLog", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.AboveHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog -> C.WoodsMain.BeforeLog", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog -> WoodsMain.LogBlobDestroyed", player), lambda s: has_enough_resources([], [('combat', 'Balloon'), ('db', 20)], "WoodsMain.BeforeLog", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog -> WoodsMain.Teleporter", player), lambda s: s.has("WoodsMain.LogBlobDestroyed", player), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.AbovePit", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.AbovePit", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 60)], [], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.AbovePit", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Bash"), player) and has_enough_resources([('db', 30)], [], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.BeforeLog", player), lambda s: s.has_all(("WoodsMain.LogBlobDestroyed", "Double Jump"), player) and s.has_any(("Sword", "Hammer", "Triple Jump"), player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.BeforeLog", player), lambda s: s.has_all(("WoodsMain.LogBlobDestroyed", "Double Jump"), player) and has_enough_resources([('combat', 'Balloon')], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.BeforeLog", player), lambda s: s.has_all(("WoodsMain.LogBlobDestroyed", "Double Jump"), player) and s.has_any(("Sword", "Hammer", "Triple Jump"), player) and has_enough_resources([('db', 20)], [], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.BeforeLog", player), lambda s: s.has_all(("WoodsMain.LogBlobDestroyed", "Double Jump"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.BeforeLog", player), lambda s: s.has_all(("WoodsMain.LogBlobDestroyed", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree -> WoodsMain.AbovePit", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree -> WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree -> WoodsMain.Teleporter", player), lambda s: has_enough_resources([('energy', ('Sentry', 3))], [], "WoodsMain.OrangeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree -> WoodsMain.Teleporter", player), lambda s: has_enough_resources([('db', 15)], [('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1))], "WoodsMain.OrangeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.Teleporter", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.Teleporter", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Blaze', 4)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2)), ('db', 15)], "WoodsMain.AbovePit", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.Teleporter", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.AbovePit", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.OrangeTree", player), lambda s: has_enough_resources([('db', 45)], [], "WoodsMain.AbovePit", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.OrangeTree", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.OrangeTree", player), lambda s: has_enough_resources([('db', 30)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.AbovePit", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.OrangeTree", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.FeedingGrounds", player), lambda s: s.has_any(("Dash", "Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.FeedingGrounds", player), lambda s: has_enough_resources([], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 2))], "WoodsMain.AbovePit", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.FeedingGrounds", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.AbovePit", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsShrine", player), lambda s: has_enough_resources([], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 2))], "WoodsMain.AbovePit", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsShrine", player), lambda s: has_enough_resources([('db', 15)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.AbovePit", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> WoodsShrine", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> WoodsShrine", player), lambda s: has_enough_resources([], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 2))], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> WoodsShrine", player), lambda s: has_enough_resources([('db', 15)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("Glide", "Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and can_enter_area(LowerWastes, s, player, options), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("Glide", "Double Jump", "Hammer"), player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("Bash", "Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("Bash", "Double Jump", "Hammer"), player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("WindtornRuins.Seir", "Glide", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("WindtornRuins.Seir", "Bash", "Double Jump"), player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([('energy', ('Grenade', 2))], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> WoodsMain.AbovePit", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> WoodsMain.AbovePit", player), lambda s: s.has_all(("Dash", "Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> WoodsMain.AbovePit", player), lambda s: s.has_all(("Dash", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.BelowBaurEX", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.BelowBaurEX", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken", "Double Jump", "Triple Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.BelowBaurEX", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1))], "LowerReach.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.BelowBaurEX", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken", "Double Jump", "Triple Jump", "Glide"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.BelowBaurEX", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken", "Double Jump", "Triple Jump", "Glide"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "LowerReach.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.BelowBaurEX", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken", "Double Jump", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and has_enough_resources([('db', 20)], [], "LowerReach.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 20)], [('energy', ('Sentry', 3))], "LowerReach.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has("Bash", player) and s.has_any(("LowerReach.ThawBaurFurnace", "Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2)), ('energy', ('Flash', 2))], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has("LowerReach.ThawBaurFurnace", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has("LowerReach.ThawBaurFurnace", player) and has_enough_resources([], [('energy', ('Sentry', 2))], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Glide"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Bash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Bash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 2)), ('energy', ('Spear', 1))], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurUpperEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurUpperEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Icefall", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Icefall", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Icefall", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2))], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Bash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2)), ('energy', ('Blaze', 3)), ('db', 20)], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 2)), ('db', 20)], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Dash"), player) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Glide"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Glide"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('db', 20)], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Sword"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2)), ('db', 20)], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Hammer"), player) and has_enough_resources([('db', 20), ('energy', ('Shuriken', 1))], [], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.LeftFurnace", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.LeftFurnace", player), lambda s: has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [('combat', 'Nest')], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.LeftFurnace", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.LeftFurnace", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has("LowerReach.LeftFurnace", player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Grapple"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Clean Water", "Water Dash", "Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Hammer"), player) and has_enough_resources([('db', 20)], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump"), player) and s.has("Dash", player) and has_enough_resources([('combat', 'Nest')], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'Nest')], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 3))], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump", "Glide"), player) and s.has("Clean Water", player) and has_enough_resources([('combat', 'Nest')], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump", "Glide"), player) and has_enough_resources([('combat', 'Nest')], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1)), ('db', 20)], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Clean Water", "Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'Nest')], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'Nest'), ('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Hammer", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('combat', 'Nest')], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump"), player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump", "Glide"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump", "Hammer"), player) and has_enough_resources([('combat', 'Nest')], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Dash", "Hammer"), player) and has_enough_resources([('combat', 'Nest')], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Sword"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump"), player) and has_enough_resources([('db', 40)], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Clean Water"), player) and has_enough_resources([('db', 20)], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Hammer", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Hammer", "Grapple"), player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Hammer", "Grapple"), player) and has_enough_resources([], [('combat', 'Nest')], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Hammer", "Water Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Hammer", "Water Dash"), player) and has_enough_resources([], [('db', 20)], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.AboveEntry", player), lambda s: s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.AboveEntry", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 3))], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths -> LowerReach.AboveDoorEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths -> LowerReach.AboveDoorEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths -> LowerReach.LupoMap", player), lambda s: s.has("Bash", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths -> LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths -> LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Spear', 1))], "LowerReach.CentralEnemyPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Sword", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "LowerReach.CentralEnemyPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Bash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "LowerReach.CentralEnemyPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump", "Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Spear', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Spear', 2))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump"), player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Sentry', 2))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump"), player) and has_enough_resources([('energy', ('Sentry', 2))], [('energy', ('Spear', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.LupoMap", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and can_buy_map(s, player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and has_enough_resources([('energy', ('Sentry', 2))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.LupoMap", player), lambda s: s.has_all(("Dash", "Hammer"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.LupoMap", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump", "Glide"), player) and can_buy_map(s, player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.LupoMap", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump", "Glide"), player) and can_buy_map(s, player) and has_enough_resources([], [('energy', ('Spear', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: s.has_all(("LowerReach.Lever", "Hammer", "Double Jump"), player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: s.has_all(("LowerReach.Lever", "Hammer", "Double Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1)), ('db', 20)], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump", "Glide"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump"), player) and has_enough_resources([('energy', ('Sentry', 5))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump"), player) and has_enough_resources([('energy', ('Sentry', 2)), ('db', 20)], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "LowerReach.Lever", "Double Jump"), player) and has_enough_resources([('energy', ('Spear', 2)), ('db', 20)], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.BelowLupo", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.BelowLupo", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 2)), ('energy', ('Blaze', 3))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.BelowLupo", player), lambda s: has_enough_resources([('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 2))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("LowerReach.Lever", "Hammer", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Shuriken', 2))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Dash", "Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.Entry", player), lambda s: s.has("LowerReach.Lever", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.Entry", player), lambda s: s.has("LowerReach.Lever", player) and has_enough_resources([], [('energy', ('Shuriken', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.Entry", player), lambda s: s.has_all(("LowerReach.Lever", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveEntry", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.TPLeftEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.TPLeftEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: s.has_all(("Sword", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Bash"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Bash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.BelowTokk", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.BelowTokk", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.BelowTokk", player), lambda s: s.has_all(("LowerReach.FreezeCentralFurnace", "Bash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.KeystoneRoom", player), lambda s: s.has("Sword", player) and can_enter_area(UpperReach, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.KeystoneRoom", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player) and can_enter_area(UpperReach, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.KeystoneRoom", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and can_enter_area(UpperReach, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.KeystoneRoom", player), lambda s: s.has("Bash", player) and can_enter_area(UpperReach, s, player, options) and has_enough_resources([], [('energy', ('Sentry', 2))], "LowerReach.BelowTokk", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.KeystoneRoom", player), lambda s: s.has("Double Jump", player) and can_enter_area(UpperReach, s, player, options) and has_enough_resources([('combat', 'Mantis'), ('energy', ('Sentry', 2))], [], "LowerReach.BelowTokk", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and can_enter_area(UpperReach, s, player, options) and has_enough_resources([('combat', 'Mantis')], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "LowerReach.BelowTokk", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.KeystoneRoom", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Double Jump", "Glide"), player) and can_enter_area(UpperReach, s, player, options) and has_enough_resources([('combat', 'Mantis'), ('energy', ('Spear', 1))], [], "LowerReach.BelowTokk", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.KeystoneRoom", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Dash"), player) and can_enter_area(UpperReach, s, player, options) and has_enough_resources([('combat', 'Mantis')], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "LowerReach.BelowTokk", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "Sword"), player) and can_enter_area(UpperReach, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has("Hammer", player) and can_enter_area(UpperReach, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "Bash"), player) and can_enter_area(UpperReach, s, player, options) and has_enough_resources([], [('energy', ('Sentry', 2))], "LowerReach.BelowTokk", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "LowerReach.ThawCentralFurnace", "Double Jump"), player) and s.has("Dash", player) and can_enter_area(UpperReach, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "LowerReach.ThawCentralFurnace", "Double Jump"), player) and can_enter_area(UpperReach, s, player, options) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "LowerReach.BelowTokk", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "LowerReach.ThawCentralFurnace", "Dash", "Hammer"), player) and can_enter_area(UpperReach, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has_any(("Bash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "LowerReach.SecondSoup", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Burrow", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Burrow", "Dash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "LowerReach.SecondSoup", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.SecondSoup", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "LowerReach.SecondSoup", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Bash", "Flap"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Bash", "Flap"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "LowerReach.SecondSoup", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.BelowLupo", player), lambda s: has_enough_resources([('db', 10)], [], "LowerReach.SecondSoup", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.BelowLupo", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.BelowLupo", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "LowerReach.SecondSoup", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.BelowLupo", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.BelowLupo", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "LowerReach.SecondSoup", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.BelowLupoEX", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.BelowLupo", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.BelowLupoEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1))], "LowerReach.BelowLupo", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.BelowLupoEX", player), lambda s: s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.BelowLupoEX", player), lambda s: s.has("LowerReach.ThawCentralFurnace", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "LowerReach.BelowLupo", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.SecondSoup", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.SecondSoup", player), lambda s: has_enough_resources([], [('db', 10)], "LowerReach.BelowLupo", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> LowerReach.BelowLupo", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> LowerReach.WindChannel", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> LowerReach.WindChannel", player), lambda s: has_enough_resources([], [('db', 10)], "LowerReach.CentralFurnacePedestal", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindBottomEX", player), lambda s: s.has("LowerReach.WindLantern", player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindBottomEX", player), lambda s: s.has("LowerReach.WindLantern", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Hammer", player) and has_enough_resources([('db', 60)], [], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 60)], [('energy', ('Spear', 1))], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Bash"), player) and has_enough_resources([('db', 60), ('energy', ('Grenade', 1))], [], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: s.has("Launch", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 40)], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.SoupMoki", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.SoupMoki", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> E.LowerReach.SoupMoki", player), lambda s: s.has("BreakCrystal", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('db', 20)], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindHiddenEX", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindHiddenEX", player), lambda s: has_enough_resources([], [('db', 20)], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindHiddenEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindHiddenEX", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindChannel", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("LowerReach.FreezeCentralFurnace", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("LowerReach.FreezeCentralFurnace", "Bash"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("LowerReach.FreezeCentralFurnace", "Bash", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("LowerReach.FreezeCentralFurnace", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.EastEnemyPaths -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.East -> LowerReach.TPLantern", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.East -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.East -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('combat', 'WeakSlug')], [], "LowerReach.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.East -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'WeakSlug')], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "LowerReach.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.East -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Bash"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.East -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Bash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "LowerReach.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowballEnemyPaths -> LowerReach.EastEnemyPaths", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_any(("LowerReach.ThawCentralFurnace", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.EastEnemyPaths", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.EastEnemyPaths", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerReach.PastSnowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: s.has_all(("LowerReach.ThawEastFurnace", "Bash", "Double Jump"), player) and s.has_any(("Glide", "Triple Jump", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerReach.PastSnowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: s.has_all(("LowerReach.ThawEastFurnace", "Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 2))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.PastSnowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("LowerReach.RolledSnowball", "LowerReach.ThawCentralFurnace"), player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("LowerReach.RolledSnowball", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("LowerReach.RolledSnowball", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "LowerReach.PastSnowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Sentry', 2))], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 1))], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Sentry', 3))], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("LowerReach.ThawEastFurnace", "Double Jump"), player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("LowerReach.ThawEastFurnace", "Double Jump"), player) and has_enough_resources([('energy', ('Blaze', 1)), ('db', 20)], [], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("LowerReach.ThawEastFurnace", "Dash"), player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("LowerReach.ThawEastFurnace", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.EastDoorLantern", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 3))], [], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.EastDoorLantern", player), lambda s: s.has("Bash", player) and s.has("Dash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.EastDoorLantern", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.EastDoorLantern", player), lambda s: s.has_any(("Double Jump", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.SwimmingPool", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.SwimmingPool", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.IceCavern", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.IceCavern", player), lambda s: has_enough_resources([], [('db', 20)], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.IceCavern", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.IceCavern", player), lambda s: s.has("Glide", player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.IceCavern", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.IceCavern", player), lambda s: s.has("LowerReach.ThawEastFurnace", player) and s.has_any(("Glide", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.IceCavern", player), lambda s: s.has("LowerReach.ThawEastFurnace", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 40)], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Bash"), player) and s.has_any(("Water Dash", "Double Jump", "Dash", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Bash", "Sword"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Bash", "Double Jump", "Dash"), player) and s.has_any(("Triple Jump", "Glide", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Bash", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Sentry', 2))], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Bash"), player) and s.has_any(("Dash", "Glide", "Double Jump", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [('energy', ('Sentry', 2)), ('db', 20)], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "LowerReach.ThawEastFurnace", "Bash", "Clean Water"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "LowerReach.ThawEastFurnace", "Bash", "Water Dash"), player) and has_enough_resources([('db', 20), ('db', 40)], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "LowerReach.ThawEastFurnace", "Water Dash", "Clean Water"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "LowerReach.ThawEastFurnace", "Water Dash", "Clean Water"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "LowerReach.ThawEastFurnace", "Water Dash"), player) and s.has("Hammer", player) and has_enough_resources([('db', 20), ('db', 20)], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "LowerReach.ThawEastFurnace", "Water Dash"), player) and has_enough_resources([('db', 20), ('db', 20)], [('energy', ('Spear', 1))], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "LowerReach.ThawEastFurnace", "Double Jump", "Triple Jump", "Hammer"), player) and s.has_any(("Clean Water", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "LowerReach.ThawEastFurnace", "Double Jump", "Triple Jump", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "LowerReach.ThawEastFurnace", "Double Jump", "Triple Jump"), player) and s.has_any(("Clean Water", "Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "LowerReach.ThawEastFurnace", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Spear', 1))], [('energy', ('Sentry', 3)), ('db', 20)], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.EastFurnace", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.EastFurnace", player), lambda s: s.has_all(("LowerReach.ThawEastFurnace", "Bash", "Water Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.EastFurnace", player), lambda s: s.has_all(("LowerReach.ThawEastFurnace", "Bash", "Water Dash"), player) and has_enough_resources([], [('db', 40)], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.EastFurnace", player), lambda s: s.has_all(("LowerReach.ThawEastFurnace", "Bash", "Clean Water"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("LowerReach.ThawEastFurnace", "Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("LowerReach.ThawEastFurnace", "Double Jump", "Triple Jump", "Water Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("LowerReach.ThawEastFurnace", "Double Jump", "Triple Jump", "Water Dash"), player) and has_enough_resources([], [('db', 20)], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.WindSpinners", player), lambda s: s.has_all(("LowerReach.ArenaBeaten", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.WindSpinners", player), lambda s: s.has_all(("LowerReach.ArenaBeaten", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('db', 20)], "LowerReach.WindSpinners", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and has_enough_resources([], [('db', 20)], "LowerReach.WindSpinners", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 60)], [], "LowerReach.WindSpinners", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 40)], [], "LowerReach.WindSpinners", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 40)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.WindSpinners", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> H.LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> E.LowerReach.WispPathCheckpoint", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.BridgeWispPath", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerReach.WispPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.BridgeWispPath", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.WispPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.WispPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.WispPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 40)], [], "LowerReach.WispPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.WindSpinners", player), lambda s: s.has_any(("Launch", "Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.WindSpinners", player), lambda s: has_enough_resources([], [('db', 20)], "LowerReach.WispPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.SnowEscape", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.SnowEscape", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Grapple", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.SnowEscape", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Sentry', 2)), ('combat', 'WeakSlug'), ('combat', 'WeakSlug')], [], "LowerReach.BridgeWispPath", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.SnowEscape", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Sentry', 2)), ('db', 10), ('db', 10)], [], "LowerReach.BridgeWispPath", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has_all(("Double Jump", "Glide", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has_all(("Glide", "Grapple", "Bash", "Clean Water"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has_all(("Glide", "Grapple", "Bash", "Clean Water"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has_all(("Glide", "Grapple", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has_all(("Glide", "Grapple", "Bash"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has_all(("Double Jump", "Glide", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has_all(("Glide", "Grapple", "Bash", "Clean Water"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has_all(("Glide", "Grapple", "Bash", "Clean Water"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has_all(("Glide", "Grapple", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has_all(("Glide", "Grapple", "Bash"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.CatalystShard", player), lambda s: has_enough_resources([('db', 80), ('energy', ('Grenade', 1))], [], "LowerReach.VeralHome", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.CatalystShard", player), lambda s: s.has_all(("Bash", "Flap"), player) and has_enough_resources([('db', 80)], [], "LowerReach.VeralHome", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.CatalystShard", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 60), ('energy', ('Grenade', 1))], [], "LowerReach.VeralHome", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.CatalystShard", player), lambda s: s.has_all(("Water Dash", "Bash", "Flap"), player) and has_enough_resources([('db', 60)], [], "LowerReach.VeralHome", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.TownEntry", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.TrialStart", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 40)], [], "LowerReach.TownEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.TrialStart", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "LowerReach.TownEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.TrialStart", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.TownEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.TrialStart", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump", "Dash", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "LowerReach.TownEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.RightKS", player), lambda s: s.has_all(("Dash", "Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.RightKS", player), lambda s: s.has_all(("Dash", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.RightKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.UpperLeftKS", player), lambda s: s.has_all(("Launch", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 30)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.UpperLeftKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'BombSlug'), ('db', 80)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.MiddleLeftKS", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 40)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.MiddleLeftKS", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('db', 20)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.BottomLeftKS", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.BottomLeftKS", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Sentry', 3)), ('db', 20)], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.BottomLeftKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Dash", "Hammer"), player) and has_enough_resources([('combat', 'BombSlug'), ('db', 20)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.BottomLeftKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'BombSlug'), ('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TrialEX", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 40)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TrialEX", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 20)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TrialEX", player), lambda s: s.has_all(("Launch", "Double Jump", "Triple Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TrialEX", player), lambda s: s.has_all(("Launch", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TownEntry", player), lambda s: has_enough_resources([('db', 20), ('db', 40)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TownEntry", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 30)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20), ('db', 20)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 2)), ('energy', ('Blaze', 4)), ('energy', ('Sentry', 3))], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Bash"), player) and has_enough_resources([('energy', ('Sentry', 5))], [], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Sword", "Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and has_enough_resources([('db', 20)], [], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Bash"), player) and has_enough_resources([('energy', ('Sentry', 3))], [], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Sword", "Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and has_enough_resources([('db', 20)], [], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.ThawFurnace", player), lambda s: s.has_all(("Flap", "Bash"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.ThawFurnace", player), lambda s: s.has_all(("Flap", "Bash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.LowerKS", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.LowerKS", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 2))], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.LowerKS", player), lambda s: s.has("UpperReach.ThawFurnace", player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.SwimEX", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Water Dash"), player) and has_enough_resources([('db', 40)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.SwimEX", player), lambda s: s.has("UpperReach.ThawFurnace", player) and has_enough_resources([('db', 80)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and s.has("Dash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Sentry', 4))], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Grapple", "Glide"), player) and has_enough_resources([('energy', ('Sentry', 4))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Grapple", "Glide"), player) and has_enough_resources([('energy', ('Sentry', 3)), ('db', 20)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('Sentry', 6))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Sentry', 4))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('Sentry', 4))], [('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Sentry', 3)), ('db', 20)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('Sentry', 3)), ('db', 20)], [('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1)), ('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Water Dash", "Grapple"), player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Shuriken', 2)), ('db', 20)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Water Dash", "Grapple"), player) and has_enough_resources([('energy', ('Shuriken', 2)), ('db', 20)], [('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('energy', ('Sentry', 5))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('db', 20), ('energy', ('Shuriken', 3))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('db', 40), ('energy', ('Shuriken', 2))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoupFrozen", player), lambda s: s.has("UpperReach.FreezeFurnace", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoupFrozen", player), lambda s: s.has("UpperReach.FreezeFurnace", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has("UpperReach.ThawFurnace", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has("UpperReach.ThawFurnace", player) and has_enough_resources([], [('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Double Jump"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Double Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 3))], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Grapple"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Grapple"), player) and has_enough_resources([], [('energy', ('Sentry', 2))], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlant", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Water Dash", "Grapple"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Water Dash", "Grapple"), player) and has_enough_resources([], [('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Grapple"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Grapple"), player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2)), ('energy', ('Flash', 2))], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash", "Grapple"), player) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 2))], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.UpperSoup", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.UpperSoup", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "UpperReach.KeystoneSnapPlant", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.UpperSoup", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "UpperReach.KeystoneSnapPlant", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.UpperSoup", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('db', 20)], "UpperReach.KeystoneSnapPlant", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.UpperSoup", player), lambda s: has_enough_resources([('energy', ('Sentry', 3))], [], "UpperReach.KeystoneSnapPlant", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.UpperSoup", player), lambda s: has_enough_resources([('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "UpperReach.KeystoneSnapPlant", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed -> UpperReach.UpperSoupThawed", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "UpperReach.KeystoneSnapPlantThawed", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed -> UpperReach.UpperSoupThawed", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "UpperReach.KeystoneSnapPlantThawed", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed -> UpperReach.UpperSoupThawed", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('db', 20)], "UpperReach.KeystoneSnapPlantThawed", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed -> UpperReach.UpperSoupThawed", player), lambda s: has_enough_resources([('energy', ('Sentry', 3))], [], "UpperReach.KeystoneSnapPlantThawed", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed -> UpperReach.UpperSoupThawed", player), lambda s: has_enough_resources([('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "UpperReach.KeystoneSnapPlantThawed", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths -> UpperReach.LowerKS", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths -> UpperReach.KeystoneRoom", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "UpperReach.KeystoneSnapPlantPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths -> UpperReach.LowerKS", player), lambda s: s.has_any(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths -> UpperReach.LowerKS", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 2)), ('db', 20)], "UpperReach.KeystoneSnapPlantThawedPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.LowerKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.LowerKS", player), lambda s: s.has_all(("Flap", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.LowerKS", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.LowerKS", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1))], "UpperReach.UpperSoupPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.SwingPoleEX", player), lambda s: has_enough_resources([('energy', ('Spear', 1))], [], "UpperReach.UpperSoupPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.KeystoneSnapPlant", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "UpperReach.UpperSoupPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.KeystoneSnapPlant", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 20)], [('energy', ('Sentry', 2))], "UpperReach.UpperSoupPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.KeystoneSnapPlant", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 40)], [], "UpperReach.UpperSoupPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.KeystoneSnapPlant", player), lambda s: s.has_all(("Dash", "Hammer"), player) and has_enough_resources([('db', 20)], [], "UpperReach.UpperSoupPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.KeystoneSnapPlant", player), lambda s: s.has_all(("Dash", "Sword"), player) and has_enough_resources([('db', 40)], [], "UpperReach.UpperSoupPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozenPaths -> UpperReach.SwingPoleEX", player), lambda s: s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozenPaths -> UpperReach.SwingPoleEX", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1))], "UpperReach.UpperSoupFrozenPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths -> UpperReach.LowerKS", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths -> UpperReach.LowerKS", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 2)), ('energy', ('Blaze', 4))], "UpperReach.UpperSoupThawedPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths -> UpperReach.MiddleRightKS", player), lambda s: has_enough_resources([('energy', ('Spear', 1))], [], "UpperReach.UpperSoupThawedPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> E.UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Clean Water", "BreakCrystal", "Grenade"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Double Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "UpperReach.OutsideTreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Grapple"), player) and has_enough_resources([], [('energy', ('Sentry', 4))], "UpperReach.OutsideTreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Grapple"), player) and has_enough_resources([('energy', ('Sentry', 3)), ('db', 20)], [], "UpperReach.OutsideTreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.OutsideTreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('db', 20)], "UpperReach.OutsideTreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge -> UpperReach.TreeOre", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.TreeRoomLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge -> UpperReach.TreeOre", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Sentry', 3))], "UpperReach.TreeRoomLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge -> UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "UpperReach.TreeRoomLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.TreeOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.TreeOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 2))], "UpperReach.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.TreeRoomLedge", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.TreeRoomLedge", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "UpperReach.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.TreeRoomLedge", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> UpperReach.TreeRoomLedge", player), lambda s: s.has_all(("Bash", "Double Jump", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "UpperReach.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> UpperDepths.FirstFirefly", player), lambda s: s.has_any(("Dash", "Sword"), player) and has_enough_resources([('db', 40)], [], "UpperDepths.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> UpperDepths.FirstFirefly", player), lambda s: has_enough_resources([('db', 40)], [('energy', ('Shuriken', 4))], "UpperDepths.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> UpperDepths.FirstFirefly", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> UpperDepths.FirstFirefly", player), lambda s: has_enough_resources([('db', 70)], [('energy', ('Sentry', 4)), ('energy', ('Flash', 4))], "UpperDepths.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> EastHollow.AboveDepths", player), lambda s: s.has_all(("EastHollow.DepthsOpen", "Bash", "Double Jump", "Triple Jump"), player) and can_enter_area(EastHollow, s, player, options) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 30)], [], "UpperDepths.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryRoofEX", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryRoofEX", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Shuriken', 1))], "UpperDepths.FirstFirefly", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryRoofEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 30)], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "UpperDepths.FirstFirefly", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryRoofEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.LeftEntryKS", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1))], "UpperDepths.FirstFirefly", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.Entry", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.LeftEntryKS", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.KeydoorLedge", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.KeydoorLedge", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1)), ('energy', ('Shuriken', 1))], "UpperDepths.FirstKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.KeydoorLedge", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> UpperDepths.RightKeystonePath", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperDepths.FirstKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.LightPuzzle", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "Launch"), player) and has_enough_resources([('wall', ('BreakWall', 16)), ('wall', ('BreakWall', 16)), ('db', 30)], [], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.FirstKSRoom", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 1))], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.RightKeystonePath", player), lambda s: s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.RightKeystonePath", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.RightKeystonePath", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Sentry', 2))], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.RightKeystonePath", player), lambda s: s.has("Double Jump", player) and s.has("Shuriken", player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.RightKeystonePath", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Sentry', 2))], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.BelowHive", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "DepthsLight"), player) and s.has("Hammer", player) and has_enough_resources([('combat', 'Bat')], [], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.BelowHive", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "DepthsLight"), player) and has_enough_resources([('combat', 'Bat')], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.BelowHive", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "UpperDepths.LightPuzzle"), player) and s.has("Hammer", player) and has_enough_resources([('combat', 'Bat')], [], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.BelowHive", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "UpperDepths.LightPuzzle"), player) and has_enough_resources([('combat', 'Bat')], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.RightEntryKS", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.RightEntryKS", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.RightEntryKS", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2))], "UpperDepths.RightKeystonePath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.FirstKSRoom", player), lambda s: s.has("Dash", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player) and has_enough_resources([('db', 30)], [], "UpperDepths.RightKeystonePath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.FirstKSRoom", player), lambda s: s.has("Dash", player) and has_enough_resources([('db', 30)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperDepths.RightKeystonePath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.FirstKSRoom", player), lambda s: s.has_all(("Dash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.EntryKeystoneDoor", player), lambda s: s.has("DepthsLight", player) and can_open_door(UpperDepths.EntryKeystoneDoor, s, player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Spear', 1))], "UpperDepths.BelowHive", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.EntryKeystoneDoor", player), lambda s: can_open_door(UpperDepths.EntryKeystoneDoor, s, player) and has_enough_resources([('energy', ('Flash', 1))], [], "UpperDepths.BelowHive", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.HiveEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.KeydoorLedge", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "DepthsLight"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Spear', 1))], "UpperDepths.BelowHive", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.KeydoorLedge", player), lambda s: s.has("UpperDepths.EntryKeystoneDoor", player) and has_enough_resources([('energy', ('Flash', 1))], [], "UpperDepths.BelowHive", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive -> UpperDepths.Teleporter", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> UpperDepths.BelowHive", player), lambda s: s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter -> UpperDepths.Central", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('wall', ('BreakWall', 1)), ('db', 30)], [], "UpperDepths.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Central -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has("Sword", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.LeftHealthKS", player), lambda s: s.has("Sword", player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.KeystoneHC", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.KeystoneHC", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Spear', 1))], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.BossPathEX", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.Central", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.MoraPath", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 60)], [], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.MoraPath", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([('db', 60)], [('energy', ('Sentry', 4)), ('energy', ('Shuriken', 4))], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.LightcatcherSeed", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.LightcatcherSeed", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and has_enough_resources([], [('db', 30), ('energy', ('Sentry', 2)), ('energy', ('Shuriken', 1))], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.LightcatcherSeed", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('db', 30)], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('db', 30)], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [('db', 40), ('energy', ('Sentry', 3)), ('energy', ('Shuriken', 2))], "UpperDepths.MoraPath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight -> UpperDepths.Teleporter", player), lambda s: s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "UpperDepths.OutsideMoraFight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight -> UpperDepths.Teleporter", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [('energy', ('Sentry', 2))], "UpperDepths.OutsideMoraFight", s, player, options, False), "or")
    add_rule(world.get_entrance("MoraFirstPhase -> MoraEscape", player), lambda s: s.has("Regenerate", player) and s.has_any(("Double Jump", "Dash", "Launch"), player) and has_enough_resources([('wall', ('Boss', 165)), ('db', 50)], [], "MoraFirstPhase", s, player, options, False), "or")
    add_rule(world.get_entrance("MoraEscape -> MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MoraEscape -> MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "MoraEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("MoraEscape -> MoraSecondPhase", player), lambda s: s.has_all(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MoraSecondPhase -> UpperDepths.ForestsEyes", player), lambda s: s.has_all(("Regenerate", "DepthsLight", "Launch"), player) and has_enough_resources([('wall', ('Boss', 165)), ('db', 60)], [], "MoraSecondPhase", s, player, options, False), "or")
    add_rule(world.get_entrance("MoraSecondPhase -> UpperDepths.ForestsEyes", player), lambda s: s.has_all(("Regenerate", "DepthsLight", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('wall', ('Boss', 165)), ('db', 60)], [], "MoraSecondPhase", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([('energy', ('Sentry', 2))], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: has_enough_resources([('energy', ('Sentry', 2))], [('wall', ('BreakWall', 1))], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: has_enough_resources([], [('energy', ('Blaze', 3)), ('energy', ('Shuriken', 3))], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and has_enough_resources([], [('energy', ('Sentry', 3)), ('energy', ('Shuriken', 3))], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.West", player), lambda s: s.has("DepthsLight", player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('energy', ('Sentry', 2))], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.West", player), lambda s: can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('energy', ('Sentry', 2))], [('wall', ('BreakWall', 1))], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.West", player), lambda s: s.has("DepthsLight", player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('energy', ('Blaze', 3))], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.West", player), lambda s: can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('energy', ('Blaze', 3))], [('wall', ('BreakWall', 1))], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Sword"), player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('energy', ('Sentry', 2))], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has("DepthsLight", player) and s.has("Hammer", player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('db', 30)], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has("DepthsLight", player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('db', 30)], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 3))], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has("DepthsLight", player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('db', 60), ('energy', ('Shuriken', 1))], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: s.has_all(("Double Jump", "Clean Water"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 20), ('db', 20)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20), ('db', 20)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has_all(("BreakCrystal", "Hammer"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has_all(("BreakCrystal", "Glide"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has_all(("BreakCrystal", "Double Jump", "Clean Water"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has_all(("BreakCrystal", "Double Jump"), player) and has_enough_resources([('db', 20), ('db', 20)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has_all(("BreakCrystal", "Water Dash"), player) and has_enough_resources([('db', 20), ('db', 20)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.SwimEC", player), lambda s: s.has("Clean Water", player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.SwimEC", player), lambda s: s.has_all(("Water Dash", "UpperDepths.ForestsEyes"), player) and has_enough_resources([('db', 150)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.LeftEX", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.LeftEX", player), lambda s: has_enough_resources([], [('wall', ('BreakWall', 1))], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Bash", "Clean Water", "UpperDepths.ForestsEyes"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and s.has_any(("Dash", "Glide", "Sword"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('db', 20)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and s.has("DepthsLight", player) and has_enough_resources([('db', 10)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and has_enough_resources([('db', 10)], [('wall', ('BreakWall', 1))], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("Hammer", "Double Jump"), player) and s.has("DepthsLight", player) and has_enough_resources([('db', 30)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("Hammer", "Double Jump"), player) and has_enough_resources([('db', 30)], [('wall', ('BreakWall', 1))], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('wall', ('BreakWall', 1))], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2))], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has_all(("Grapple", "UpperDepths.ForestsEyes"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has_all(("Grapple", "UpperDepths.ForestsEyes"), player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2))], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has_all(("Grapple", "Flash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has_all(("Grapple", "Flash"), player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2))], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.SpiritTrial", player), lambda s: s.has_all(("LowerDepths.TrialActivation", "Dash", "Bash", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.SpiritTrial", player), lambda s: s.has_all(("LowerDepths.TrialActivation", "Double Jump", "Bash", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player) and s.has("UpperDepths.ForestsEyes", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player) and has_enough_resources([], [('energy', ('Flash', 1))], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 1)), ('energy', ('Flash', 1))], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide"), player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([], [('db', 30)], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Bash", "Glide"), player) and s.has_any(("Sword", "Hammer", "Double Jump", "Grapple"), player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Bash", "Glide"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([], [('energy', ('Grenade', 1)), ('energy', ('Spear', 1)), ('energy', ('Sentry', 1))], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Bash", "Dash"), player) and s.has_any(("Sword", "Hammer", "Double Jump", "Grapple"), player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Bash", "Dash"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([], [('energy', ('Grenade', 1)), ('energy', ('Spear', 1)), ('energy', ('Sentry', 1))], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("Bash", "UpperDepths.ForestsEyes"), player) and s.has_any(("Hammer", "Sword"), player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has("Bash", player) and s.has_any(("Hammer", "Sword"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('energy', ('Flash', 1))], [], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> E.LowerDepths.East", player), lambda s: s.has_all(("BreakCrystal", "Sword"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> E.LowerDepths.East", player), lambda s: s.has_all(("BreakCrystal", "Hammer"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> E.LowerDepths.East", player), lambda s: s.has_all(("BreakCrystal", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 30)], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has("DepthsLight", player) and can_buy_map(s, player) and has_enough_resources([('db', 60)], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has("DepthsLight", player) and can_buy_map(s, player) and has_enough_resources([('db', 30)], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2))], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and can_buy_map(s, player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has("Grapple", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Bash", "Grapple"), player) and s.has_any(("Sword", "Hammer", "Glide"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Bash", "Grapple"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('Grenade', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("UpperDepths.ForestsEyes", "Double Jump", "Triple Jump"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 30)], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 1)), ('energy', ('Flash', 1))], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("UpperDepths.ForestsEyes", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "UpperDepths.ForestsEyes"), player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "UpperDepths.ForestsEyes"), player) and has_enough_resources([], [('db', 50)], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Grapple", player) and has_enough_resources([('energy', ('Flash', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Flash', 1))], [('db', 50)], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.TreeArea", player), lambda s: s.has("Launch", player) and has_enough_resources([('wall', ('BreakWall', 1)), ('db', 30)], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Bash"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.Central", player), lambda s: s.has_all(("UpperDepths.ForestsEyes", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.Central", player), lambda s: s.has("Bash", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.Central", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1))], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TrialActivation", player), lambda s: s.has_all(("Dash", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Sword", player) and s.has_any(("Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Sword", player) and has_enough_resources([], [('db', 30)], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has_all(("DepthsLight", "Hammer"), player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has_all(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Sentry', 3)), ('db', 30)], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Sentry', 3)), ('energy', ('Flash', 2)), ('db', 30)], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "Double Jump", "Grapple", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has("Dash", player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Bash"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 4))], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has("Launch", player) and has_enough_resources([('wall', ('BreakWall', 1)), ('db', 30)], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2)), ('db', 30)], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Sword", "Dash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [('energy', ('Sentry', 7))], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('wall', ('BreakWall', 1)), ('db', 30)], [('energy', ('Shuriken', 4)), ('energy', ('Sentry', 5))], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('wall', ('BreakWall', 1)), ('db', 30)], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 3)), ('energy', ('Blaze', 5))], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump", "Dash"), player) and s.has("Hammer", player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1))], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea -> LowerDepths.BeforeTree", player), lambda s: s.has("DepthsLight", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea -> LowerDepths.BeforeTree", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([], [('energy', ('Sentry', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Spear', 2))], "LowerDepths.TreeArea", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Sword"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Glide"), player) and s.has("Hammer", player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Glide"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 15)], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Bash", "Glide"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Hammer"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 15)], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('Sentry', 4))], [], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('Sentry', 2)), ('db', 15)], [], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Bash"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Sentry', 2))], [], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('db', 30)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Bash"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 15)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Triple Jump"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('db', 15)], [], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: s.has("Grapple", player) and has_enough_resources([('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('energy', ('Shuriken', 1))], [], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: s.has("Bash", player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.UnderwaterWallBroken", player), lambda s: has_enough_resources([('db', 160)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 140)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathECWall", player), lambda s: has_enough_resources([('db', 100)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathECWall", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 60)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'SpinCrab'), ('combat', 'CorruptSlug')], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEX", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('combat', 'SpinCrab'), ('combat', 'CorruptSlug')], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEX", player), lambda s: s.has("Dash", player) and has_enough_resources([('combat', 'SpinCrab'), ('combat', 'CorruptSlug')], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEX", player), lambda s: s.has_all(("Grapple", "Glide"), player) and s.has_any(("Dash", "Double Jump"), player) and has_enough_resources([('combat', 'CorruptSlug')], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEC", player), lambda s: s.has("PoolsApproach.MillPathECWall", player) and has_enough_resources([('db', 60)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEC", player), lambda s: s.has_all(("PoolsApproach.MillPathECWall", "Water Dash"), player) and has_enough_resources([('db', 40)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathHC", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 220)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Grapple", "Dash"), player) and has_enough_resources([('combat', 'Crab'), ('combat', 'SmallSkeeto')], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and has_enough_resources([('combat', 'Crab'), ('combat', 'SmallSkeeto')], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and has_enough_resources([('combat', 'Crab'), ('combat', 'SmallSkeeto'), ('combat', 'CorruptSlug'), ('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Grapple", "Glide"), player) and has_enough_resources([('combat', 'Crab'), ('combat', 'SmallSkeeto')], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1)), ('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water"), player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash"), player) and s.has_any(("Launch", "Grapple", "Double Jump", "Sword", "Hammer", "PoolsApproach.WheelFreed"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash"), player) and has_enough_resources([('db', 100)], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Launch"), player) and s.has_any(("Grapple", "Glide"), player) and has_enough_resources([('db', 120)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Launch", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 120)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Launch", "Double Jump"), player) and has_enough_resources([('db', 120)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 120)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Launch", "Dash"), player) and has_enough_resources([('db', 120)], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 2))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Launch", "Sword"), player) and s.has("Hammer", player) and has_enough_resources([('db', 120)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Launch", "Sword"), player) and has_enough_resources([('db', 120)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Launch", "Hammer"), player) and has_enough_resources([('db', 120), ('energy', ('Sentry', 2))], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Launch"), player) and has_enough_resources([('db', 140)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Launch"), player) and s.has_any(("Grapple", "Glide"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Launch", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Launch", "Double Jump"), player) and has_enough_resources([('db', 60)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Launch", "Dash"), player) and has_enough_resources([('db', 60)], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 2))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Launch", "Sword"), player) and s.has("Hammer", player) and has_enough_resources([('db', 60)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Launch", "Sword"), player) and has_enough_resources([('db', 60)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Launch", "Hammer"), player) and has_enough_resources([('db', 60), ('energy', ('Sentry', 2))], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Grapple", "Glide"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Grapple", "Double Jump"), player) and has_enough_resources([('db', 60)], [('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Grapple", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Grapple", "Dash"), player) and has_enough_resources([('db', 60)], [('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Grapple", "Sword"), player) and s.has("Hammer", player) and has_enough_resources([('db', 60)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Grapple", "Sword"), player) and has_enough_resources([('db', 60)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Grapple", "Hammer"), player) and has_enough_resources([('db', 60), ('energy', ('Sentry', 2))], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Launch"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Grapple"), player) and has_enough_resources([('db', 80)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Hammer"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Double Jump", "Glide"), player) and s.has("Sword", player) and has_enough_resources([('db', 80)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Double Jump", "Glide"), player) and has_enough_resources([('db', 80)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Double Jump", "Sword"), player) and has_enough_resources([('db', 80)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Double Jump"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Grapple"), player) and has_enough_resources([('db', 100)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Dash"), player) and has_enough_resources([('db', 100)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Sword"), player) and s.has_any(("Glide", "Hammer"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Sword"), player) and has_enough_resources([('db', 100)], [('energy', ('Shuriken', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Hammer", "Glide"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash"), player) and s.has_any(("Grapple", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 120)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Glide"), player) and has_enough_resources([('db', 140)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash"), player) and has_enough_resources([('db', 180)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Spear', 1)), ('db', 20)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Launch", player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player) and has_enough_resources([('energy', ('Spear', 1)), ('db', 20)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Launch", "Hammer"), player) and has_enough_resources([('energy', ('Spear', 1)), ('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Launch", "Bash"), player) and has_enough_resources([('energy', ('Spear', 1)), ('db', 20), ('energy', ('Grenade', 1))], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('energy', ('Spear', 1)), ('db', 40)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Double Jump", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Spear', 1)), ('db', 40)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Spear', 1)), ('db', 40)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_any(("Double Jump", "Dash", "Hammer"), player) and has_enough_resources([('energy', ('Spear', 1)), ('db', 80)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Sword", player) and has_enough_resources([('energy', ('Spear', 1)), ('db', 100)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: has_enough_resources([('energy', ('Spear', 1)), ('db', 120)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 160)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player) and has_enough_resources([('db', 160)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Launch", "Hammer"), player) and has_enough_resources([('db', 160)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Launch"), player) and has_enough_resources([('db', 160), ('energy', ('Grenade', 1))], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('db', 180)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Double Jump", "Sword", "Hammer"), player) and has_enough_resources([('db', 180)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Launch"), player) and has_enough_resources([('db', 180)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([], [('db', 180)], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('db', 200)], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and has_enough_resources([], [('db', 60)], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 80)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 100)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 180)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Grapple", "Clean Water"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Launch", player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player) and has_enough_resources([('db', 180)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Launch", "Clean Water"), player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Launch", "Hammer"), player) and has_enough_resources([('db', 180)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Launch", "Hammer", "Clean Water"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Launch", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 180)], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Hammer"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Dash", "PoolsApproach.WheelFreed"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Sword"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "PoolsApproach.WheelFreed"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Launch", "Hammer"), player) and has_enough_resources([('db', 80)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Launch", "Bash"), player) and has_enough_resources([('db', 80), ('energy', ('Grenade', 1))], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Sword", "Hammer"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water Dash", player) and s.has_any(("Double Jump", "Hammer"), player) and has_enough_resources([('db', 140)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Dash", "PoolsApproach.WheelFreed"), player) and has_enough_resources([('db', 140)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and has_enough_resources([('db', 160)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "PoolsApproach.WheelFreed"), player) and has_enough_resources([('db', 180)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('db', 200)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Double Jump", "Sword", "Hammer"), player) and has_enough_resources([('db', 200)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Launch"), player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Launch", "Hammer"), player) and has_enough_resources([('db', 60)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Launch", "Bash"), player) and has_enough_resources([('db', 60), ('energy', ('Grenade', 1))], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Bash", "Grapple"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Grapple", "Double Jump"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Launch"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Double Jump", "Sword", "Hammer"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Bash", "Launch"), player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player) and has_enough_resources([('db', 120)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Bash", "Launch"), player) and has_enough_resources([('db', 120)], [('energy', ('Grenade', 1))], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Bash", "Launch", "Hammer"), player) and has_enough_resources([('db', 120)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Launch"), player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player) and has_enough_resources([('db', 130)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Launch", "Hammer"), player) and has_enough_resources([('db', 130)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Bash", "Launch"), player) and has_enough_resources([('db', 140)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Bash", "Grapple"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 160)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Hammer"), player) and has_enough_resources([('db', 120)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Double Jump"), player) and has_enough_resources([('db', 130)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Bash", "Sword"), player) and has_enough_resources([('db', 140)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Bash", "Sword"), player) and has_enough_resources([('db', 180)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> C.PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> C.PoolsApproach.OnTopOfWheel", player), lambda s: s.has_any(("Launch", "Grapple", "Double Jump", "Hammer", "PoolsApproach.WheelFreed"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('energy', ('Spear', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.UnderwaterWallBroken", player), lambda s: has_enough_resources([('energy', ('Spear', 1))], [('db', 180)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 80), ('energy', ('Spear', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 200)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([('db', 160)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathECWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash"), player) and has_enough_resources([('db', 140)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has_all(("Bash", "Dash", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has_all(("PoolsApproach.WheelFreed", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshPathCurrentEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 60)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathEC", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "PoolsApproach.MillPathECWall", "Water Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathEC", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "PoolsApproach.MillPathECWall", "Water Dash"), player) and has_enough_resources([], [('db', 140)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and has_enough_resources([('db', 40)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Glide"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and has_enough_resources([('db', 80)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple"), player) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump"), player) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple"), player) and has_enough_resources([('db', 40)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Glide"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and has_enough_resources([('db', 80)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 220)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and has_enough_resources([], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 2)), ('db', 20)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple", "Hammer"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Dash"), player) and has_enough_resources([('db', 20)], [('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and s.has("Hammer", player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Hammer"), player) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 3)), ('energy', ('Flash', 3)), ('energy', ('Sentry', 3))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Hammer"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('db', 40)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Hammer"), player) and has_enough_resources([('db', 40)], [('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has_any(("Dash", "Double Jump", "Sword"), player) and has_enough_resources([('db', 40)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Glide"), player) and has_enough_resources([('db', 40)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has_any(("Glide", "Hammer"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and has_enough_resources([('db', 80)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and has_enough_resources([('db', 60)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and has_enough_resources([('db', 40)], [('energy', ('Shuriken', 3)), ('energy', ('Sentry', 4))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Double Jump"), player) and has_enough_resources([], [('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Dash"), player) and has_enough_resources([], [('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Sword"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Sword"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Hammer"), player) and has_enough_resources([('energy', ('Sentry', 2))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Hammer"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Glide"), player) and s.has("Sword", player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Glide"), player) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Sword"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump"), player) and has_enough_resources([('db', 40)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple"), player) and has_enough_resources([('db', 40)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 40)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Dash"), player) and has_enough_resources([('db', 40)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Sword"), player) and s.has_any(("Glide", "Hammer"), player) and has_enough_resources([('db', 40)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Sword"), player) and has_enough_resources([('db', 40)], [('energy', ('Shuriken', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Hammer", "Glide"), player) and has_enough_resources([('db', 40)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("Grapple", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Glide"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and s.has_any(("Grapple", "Glide"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Double Jump"), player) and has_enough_resources([('db', 80)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Dash"), player) and has_enough_resources([('db', 80)], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Sword"), player) and s.has("Hammer", player) and has_enough_resources([('db', 80)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Sword"), player) and has_enough_resources([('db', 80)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Hammer"), player) and has_enough_resources([('db', 80), ('energy', ('Sentry', 2))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Glide"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Double Jump"), player) and has_enough_resources([('db', 80)], [('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Dash"), player) and has_enough_resources([('db', 80)], [('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Sword"), player) and s.has("Hammer", player) and has_enough_resources([('db', 80)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Sword"), player) and has_enough_resources([('db', 80)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Hammer"), player) and has_enough_resources([('db', 80), ('energy', ('Sentry', 2))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and has_enough_resources([('db', 100)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Hammer"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Glide"), player) and s.has("Sword", player) and has_enough_resources([('db', 100)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Glide"), player) and has_enough_resources([('db', 100)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Sword"), player) and has_enough_resources([('db', 100)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and has_enough_resources([('db', 120)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and has_enough_resources([('db', 120)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 120)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and has_enough_resources([('db', 120)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and s.has_any(("Glide", "Hammer"), player) and has_enough_resources([('db', 120)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and has_enough_resources([('db', 120)], [('energy', ('Shuriken', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Hammer", "Glide"), player) and has_enough_resources([('db', 120)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Water Dash", player) and s.has_any(("Grapple", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 140)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Glide"), player) and has_enough_resources([('db', 160)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 200)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Glide"), player) and has_enough_resources([('db', 200)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 200)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Double Jump"), player) and has_enough_resources([('db', 200)], [('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 200)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Dash"), player) and has_enough_resources([('db', 200)], [('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Sword"), player) and s.has("Hammer", player) and has_enough_resources([('db', 200)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Sword"), player) and has_enough_resources([('db', 200)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Hammer"), player) and has_enough_resources([('db', 200), ('energy', ('Sentry', 2))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 220)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('db', 220)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Hammer"), player) and has_enough_resources([('db', 220)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and s.has("Sword", player) and has_enough_resources([('db', 220)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and has_enough_resources([('db', 220)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Double Jump", "Sword"), player) and has_enough_resources([('db', 220)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Launch", player) and s.has_any(("Grapple", "Glide"), player) and has_enough_resources([('db', 160)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 160)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and has_enough_resources([('db', 160)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 160)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Dash"), player) and has_enough_resources([('db', 160)], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Sword"), player) and s.has("Hammer", player) and has_enough_resources([('db', 160)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Sword"), player) and has_enough_resources([('db', 160)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Hammer"), player) and has_enough_resources([('db', 160), ('energy', ('Sentry', 2))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 180)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has("Launch", player) and s.has("Sword", player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has("Launch", player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([], [('energy', ('Blaze', 9)), ('db', 20)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Launch", "Bash"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has("Hammer", player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Launch", "Dash"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Hammer"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Launch", "Hammer"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('energy', ('Spear', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Bash", "Glide"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("PoolsApproach.WheelFreed", "Glide"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash", "Sword"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash", "Hammer"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([], [('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash", "Hammer"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Bash", "Dash", "PoolsApproach.WheelFreed"), player) and s.has_any(("Double Jump", "Sword"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Double Jump", "Sword"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Grenade', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Bash", "Dash", "Hammer"), player) and s.has("PoolsApproach.WheelFreed", player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Bash", "Dash", "Hammer"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [('energy', ('Grenade', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has_any(("Triple Jump", "Hammer"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Hammer"), player) and s.has("Double Jump", player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Hammer"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([], [('db', 20)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Hammer"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has("Water Dash", player) and s.has_any(("Double Jump", "Hammer"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('db', 60)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('db', 40)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Water Dash", "Hammer", "Dash"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('db', 40)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Water Dash", "Hammer", "Dash", "Double Jump"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash"), player) and s.has_any(("Launch", "Double Jump", "Bash"), player) and has_enough_resources([('db', 120)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water", "Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 10), ('combat', 'SpinCrab')], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water", "Grapple", "Dash"), player) and has_enough_resources([('db', 10), ('combat', 'SpinCrab')], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has("Dash", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('combat', 'CorruptSlug'), ('db', 10)], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'CorruptSlug')], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has_all(("Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and has_enough_resources([('db', 20)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.TwoCrushersEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap"), player) and has_enough_resources([], [('db', 30)], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap"), player) and has_enough_resources([('combat', 'CorruptSlug')], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.RightOre", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.BubbleCurrentEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.BelowLeverEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.BelowLeverEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('combat', 'CorruptSlug')], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.MarshPathCurrentEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('energy', ('Spear', 1))], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water Dash", player) and s.has_any(("PoolsApproach.WheelFreed", "Double Jump", "Hammer"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('db', 100)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water Dash", player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('db', 100)], [('energy', ('Spear', 1))], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Double Jump", player) and s.has("Sword", player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('db', 20)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Double Jump", player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 2)), ('energy', ('Blaze', 5)), ('energy', ('Sentry', 3))], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 3)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 1))], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Bash", "Dash", "Hammer"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Glide", "Dash", "Hammer"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Launch", player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([], [('energy', ('Spear', 3)), ('energy', ('Blaze', 3)), ('energy', ('Sentry', 3))], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.AboveDoorOre", player), lambda s: s.has_all(("EastPools.TokkBubbleFree", "EastPools.TokkBubblePurpleWall", "Grapple", "Flap"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.AboveDoorOre", player), lambda s: s.has_all(("EastPools.TokkBubbleFree", "EastPools.TokkBubblePurpleWall", "Grapple", "Flap"), player) and has_enough_resources([], [('combat', 'Crab'), ('db', 10)], "EastPools.BehindEntryDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TokkBubble", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.BehindEntryDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.BehindEntryDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.TPArea", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubbleFree", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 100)], [], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubbleFree", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('combat', 'Crab'), ('db', 60)], [], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubbleFree", player), lambda s: s.has_all(("EastPools.TokkBubblePurpleWall", "Water Dash"), player) and has_enough_resources([('db', 60)], [], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubblePurpleWall", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('combat', 'Crab')], [], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubblePurpleWall", player), lambda s: has_enough_resources([('combat', 'Crab')], [('db', 120)], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubblePurpleWall", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('combat', 'Crab'), ('db', 100)], [], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubblePurpleWall", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 100)], [], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubblePurpleWall", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([('db', 80)], [], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.AboveDoorOre", player), lambda s: s.has_all(("EastPools.TokkBubbleFree", "EastPools.TokkBubblePurpleWall", "Grapple", "Flap"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TPArea", player), lambda s: s.has_all(("EastPools.TokkBubbleFree", "EastPools.TokkBubblePurpleWall", "Flap", "Grapple"), player) and has_enough_resources([('combat', 'Crab')], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TPArea", player), lambda s: s.has_all(("EastPools.TokkBubbleFree", "EastPools.TokkBubblePurpleWall", "Flap", "Bash", "Grapple"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.BehindEntryDoor", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.BehindEntryDoor", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.BehindEntryDoor", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('combat', 'CorruptSlug'), ('combat', 'Crab')], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.LowerWaterDrained", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 120)], [], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.FishingPool", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.FishingPool", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.FishingPool", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.FishingPool", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.FishingPool", player), lambda s: s.has_all(("Double Jump", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and has_enough_resources([('db', 60)], [], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.WaterdashArena", player), lambda s: s.has_all(("EastPools.ArenaWall", "Water Dash"), player) and has_enough_resources([('db', 40)], [], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.NextToLupoOre", player), lambda s: has_enough_resources([('db', 140)], [], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.NextToLupoOre", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 60)], [], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.BehindEntryDoor", player), lambda s: has_enough_resources([('energy', ('Spear', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.BehindEntryDoor", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.BehindEntryDoor", player), lambda s: s.has("Hammer", player) and has_enough_resources([('combat', 'CorruptSlug')], [], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.UltraBashWall", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Clean Water"), player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.UltraBashWall", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Water Dash"), player) and has_enough_resources([('db', 180)], [], "EastPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.UltraBashWall", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Bash"), player) and has_enough_resources([('db', 200)], [], "EastPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.UltraBashWall", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Bash", "Water Dash"), player) and has_enough_resources([('db', 140)], [], "EastPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.UltraBashShard", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "EastPools.UltraBashWall"), player) and has_enough_resources([('db', 160)], [], "EastPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.UltraBashShard", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "EastPools.UltraBashWall", "Water Dash"), player) and has_enough_resources([('db', 80)], [], "EastPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.WaterdashArena", player), lambda s: s.has_all(("EastPools.ArenaWall", "EastPools.LowerWaterDrained"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.WaterdashArena", player), lambda s: s.has_all(("EastPools.ArenaWall", "EastPools.LowerWaterDrained"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.NextToLupoOre", player), lambda s: s.has("EastPools.LowerWaterDrained", player) and has_enough_resources([('db', 100)], [], "EastPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.NextToLupoOre", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Water Dash"), player) and has_enough_resources([('db', 40)], [], "EastPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.FishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.FishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Clean Water", "Sword"), player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Clean Water", "Hammer"), player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Clean Water", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 2))], "EastPools.FishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Clean Water", "Glide"), player) and has_enough_resources([('energy', ('Shuriken', 2))], [], "EastPools.FishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> EastPools.AboveTpEX", player), lambda s: has_enough_resources([('db', 80)], [], "EastPools.AboveFishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> EastPools.AboveTpEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "EastPools.AboveFishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Clean Water", "Water Dash", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and can_enter_area(UpperPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Clean Water", "Water Dash", "Double Jump", "Triple Jump"), player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.AboveFishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Water Dash", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('db', 20)], [], "EastPools.AboveFishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Water Dash", "Double Jump", "Triple Jump"), player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.AboveFishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Bash", "Double Jump"), player) and can_enter_area(UpperPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Bash", "Water Dash"), player) and s.has("Clean Water", player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.AboveFishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Bash", "Water Dash"), player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 20)], "EastPools.AboveFishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.UltraBashWall", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Water Dash"), player) and has_enough_resources([('db', 200)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.UltraBashWall", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Bash"), player) and has_enough_resources([('db', 240)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.UltraBashWall", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Bash", "Water Dash"), player) and has_enough_resources([('db', 160)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.UltraBashShard", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "EastPools.UltraBashWall"), player) and has_enough_resources([('db', 200)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.UltraBashShard", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "EastPools.UltraBashWall", "Water Dash"), player) and has_enough_resources([('db', 100)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.Teleporter", player), lambda s: s.has("EastPools.LowerWaterDrained", player) and has_enough_resources([('db', 100)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.Teleporter", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Water Dash"), player) and has_enough_resources([('db', 40)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.TPArea", player), lambda s: has_enough_resources([('db', 160)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.TPArea", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 60)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and has_enough_resources([('db', 120)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.WaterdashArena", player), lambda s: s.has_all(("EastPools.ArenaWall", "Water Dash"), player) and has_enough_resources([('db', 60)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.WaterdashArena", player), lambda s: s.has_all(("EastPools.ArenaWall", "EastPools.LowerWaterDrained"), player) and has_enough_resources([('db', 100)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.WaterdashArena", player), lambda s: s.has_all(("EastPools.ArenaWall", "EastPools.LowerWaterDrained", "Water Dash"), player) and has_enough_resources([('db', 40)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.LupoEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.BehindCrusherEX", player), lambda s: s.has("EastPools.LupoPurpleFloor", player) and has_enough_resources([('db', 160)], [], "EastPools.LupoArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.BehindCrusherEX", player), lambda s: s.has_all(("EastPools.LupoPurpleFloor", "Water Dash"), player) and has_enough_resources([('db', 80)], [], "EastPools.LupoArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.MissilePuzzle", player), lambda s: s.has_all(("EastPools.LupoPurpleFloor", "Water Dash"), player) and has_enough_resources([('db', 80)], [], "EastPools.LupoArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.CentralRoom", player), lambda s: s.has_all(("EastPools.LupoPurpleFloor", "EastPools.CentralRoomPurpleWall", "Water Dash"), player) and has_enough_resources([('db', 100)], [], "EastPools.LupoArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.FightRoomHC", player), lambda s: s.has_all(("EastPools.FightArenas", "Water Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.TPArea", player), lambda s: s.has("EastPools.ArenaWall", player) and has_enough_resources([('db', 80)], [], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.TPArea", player), lambda s: s.has_all(("EastPools.ArenaWall", "Water Dash"), player) and has_enough_resources([('db', 40)], [], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.Teleporter", player), lambda s: s.has_all(("EastPools.ArenaWall", "EastPools.LowerWaterDrained"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.Teleporter", player), lambda s: s.has_all(("EastPools.ArenaWall", "EastPools.LowerWaterDrained", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.NextToLupoOre", player), lambda s: s.has("EastPools.ArenaWall", player) and has_enough_resources([('db', 120)], [], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.NextToLupoOre", player), lambda s: s.has_all(("EastPools.ArenaWall", "Water Dash"), player) and has_enough_resources([('db', 60)], [], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.NextToLupoOre", player), lambda s: s.has_all(("EastPools.ArenaWall", "EastPools.LowerWaterDrained"), player) and has_enough_resources([('db', 100)], [], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.NextToLupoOre", player), lambda s: s.has_all(("EastPools.ArenaWall", "EastPools.LowerWaterDrained", "Water Dash"), player) and has_enough_resources([('db', 40)], [], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.FightArenas", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.CentralRoomPurpleWall", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.LupoPurpleFloor", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and has_enough_resources([], [('db', 20)], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.EnergyHarvestShard", player), lambda s: s.has("Water Dash", player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Spear', 1))], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.EnergyHarvestShard", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('energy', ('Spear', 1))], [('db', 20)], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.BehindCrusherEX", player), lambda s: has_enough_resources([('db', 160)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.BehindCrusherEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 100)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.SpiritTrial", player), lambda s: s.has_all(("UpperPools.TrialActivation", "EastPools.CentralRoomPurpleWall", "Clean Water", "Grapple", "Water Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.SpiritTrial", player), lambda s: s.has_all(("UpperPools.TrialActivation", "EastPools.CentralRoomPurpleWall", "Clean Water", "Grapple", "Water Dash", "Glide", "Dash"), player) and s.has_any(("Bash", "Launch", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.SpiritTrial", player), lambda s: s.has_all(("UpperPools.TrialActivation", "EastPools.CentralRoomPurpleWall", "Clean Water", "Grapple", "Water Dash", "Glide", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.CentralRoom", player), lambda s: s.has("EastPools.CentralRoomPurpleWall", player) and has_enough_resources([('db', 180)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.CentralRoom", player), lambda s: s.has_all(("EastPools.CentralRoomPurpleWall", "Water Dash"), player) and has_enough_resources([('db', 80)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.LupoArea", player), lambda s: s.has("EastPools.LupoPurpleFloor", player) and has_enough_resources([('db', 100)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.LupoArea", player), lambda s: s.has_all(("EastPools.LupoPurpleFloor", "Water Dash"), player) and has_enough_resources([('db', 40)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.CentralRoomPurpleWall", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.CentralRoomPurpleWall", player), lambda s: has_enough_resources([], [('db', 60)], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.CentralRoomBubbleFree", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 100)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.CentralRoomBubbleFree", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has("EastPools.CentralRoomBubbleFree", player) and s.has_any(("Clean Water", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has("EastPools.CentralRoomBubbleFree", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 100)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has("Bash", player) and s.has("EastPools.CentralRoomBubbleFree", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 3)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has_all(("Bash", "Sword"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has_all(("Bash", "Hammer"), player) and has_enough_resources([('energy', ('Sentry', 3))], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 1))], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Launch", player) and can_enter_area(UpperPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("EastPools.CentralRoomBubbleFree", "Double Jump", "Triple Jump"), player) and can_enter_area(UpperPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("EastPools.CentralRoomBubbleFree", "Bash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and can_enter_area(UpperPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("EastPools.CentralRoomBubbleFree", "Bash", "Double Jump"), player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("EastPools.CentralRoomBubbleFree", "Bash"), player) and s.has_any(("Clean Water", "Sword", "Hammer"), player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("EastPools.CentralRoomBubbleFree", "Bash"), player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Grenade', 1)), ('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> WestPools.Teleporter", player), lambda s: s.has_all(("Water Dash", "Clean Water"), player) and can_enter_area(WestPools, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> WestPools.Teleporter", player), lambda s: s.has("Water Dash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch", "Sword", "Hammer"), player) and can_enter_area(WestPools, s, player, options) and has_enough_resources([('db', 160)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> WestPools.Teleporter", player), lambda s: s.has("Water Dash", player) and can_enter_area(WestPools, s, player, options) and has_enough_resources([('db', 160)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> WestPools.Teleporter", player), lambda s: s.has("Water Dash", player) and can_enter_area(WestPools, s, player, options) and has_enough_resources([('db', 180)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.CentralRoomPurpleWall", player) and has_enough_resources([('db', 180)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.MissilePuzzle", player), lambda s: s.has_all(("EastPools.CentralRoomPurpleWall", "Water Dash"), player) and has_enough_resources([('db', 80)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.LupoArea", player), lambda s: s.has_all(("EastPools.CentralRoomPurpleWall", "EastPools.LupoPurpleFloor", "Water Dash"), player) and has_enough_resources([('db', 80)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleFree", player), lambda s: has_enough_resources([('combat', 'SpinCrab')], [('energy', ('Bow', 1)), ('energy', ('Grenade', 1)), ('energy', ('Spear', 1))], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Bow', 1)), ('energy', ('Grenade', 1)), ('energy', ('Spear', 1))], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> EastPools.GrassSeed", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.LowerKS", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 60)], [], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.LowerKS", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 120)], [], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player) and has_enough_resources([('db', 160)], [], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 160)], [('energy', ('Spear', 1))], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('db', 180)], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> EastPools.CentralRoom", player), lambda s: can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Dash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Glide", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Hammer", player) and has_enough_resources([('energy', ('Sentry', 2))], [], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("UpperPools.KeystoneRoomBubbleFree", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("UpperPools.KeystoneRoomBubbleFree", player) and has_enough_resources([], [('energy', ('Sentry', 2))], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoom", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoomBubbleFree", player), lambda s: has_enough_resources([], [('energy', ('Grenade', 1)), ('energy', ('Spear', 1)), ('energy', ('Bow', 1))], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoomBubbleFree", player), lambda s: has_enough_resources([('energy', ('Shuriken', 1))], [('db', 20)], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoomBubbleFree", player), lambda s: has_enough_resources([('energy', ('Sentry', 1))], [('db', 20)], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.UpperLeftKS", player), lambda s: s.has_all(("UpperPools.KeystoneRoomBubbleFree", "Flap"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.UpperLeftKS", player), lambda s: s.has_all(("UpperPools.KeystoneRoomBubbleFree", "Flap"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.LowerKS", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 60)], [], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.LowerKS", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 120)], [], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player) and has_enough_resources([('db', 160)], [], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 160)], [('energy', ('Spear', 1))], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 180)], [], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoom", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoom", player), lambda s: s.has_all(("UpperPools.KeystoneRoomBubbleFree", "Water Dash", "Flap"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoom", player), lambda s: s.has_all(("UpperPools.KeystoneRoomBubbleFree", "Water Dash", "Flap"), player) and has_enough_resources([], [('db', 20)], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoomEntrance", player), lambda s: has_enough_resources([('db', 30)], [], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoomEntrance", player), lambda s: has_enough_resources([('db', 20), ('combat', 'SpinCrab')], [], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Clean Water"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Clean Water"), player) and has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and has_enough_resources([('db', 20)], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperMidKS", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperMidKS", player), lambda s: s.has_all(("Water Dash", "Clean Water"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperMidKS", player), lambda s: s.has_all(("Water Dash", "Clean Water"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperMidKS", player), lambda s: s.has("Water Dash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 40)], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperMidKS", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Grenade', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1))], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([], [('db', 20)], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Clean Water", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Grenade', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('db', 20)], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.UpperMidKS", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.UpperMidKS", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.UpperLeftKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 40)], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Spear', 1)), ('db', 20)], [], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> UpperPools.AboveTree", player), lambda s: s.has_all(("UpperPools.TreeRoomLeftBubbleFree", "Flap", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> UpperPools.AboveTree", player), lambda s: s.has_all(("UpperPools.TreeRoomLeftBubbleFree", "Flap", "Glide"), player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "UpperPools.TreeRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> UpperPools.AboveTree", player), lambda s: s.has_all(("UpperPools.TreeRoomLeftBubbleFree", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.TreeRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> UpperPools.AboveTree", player), lambda s: s.has_all(("UpperPools.TreeRoomLeftBubbleFree", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 20)], [], "UpperPools.TreeRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomLeftBubbleFree", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomLeftBubbleFree", player), lambda s: has_enough_resources([], [('energy', ('Bow', 1)), ('energy', ('Grenade', 1)), ('energy', ('Spear', 1))], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomLeftBubbleFree", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomLeftBubbleFree", player), lambda s: has_enough_resources([('energy', ('Shuriken', 1))], [('db', 20)], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomRightBubbleFree", player), lambda s: has_enough_resources([], [('energy', ('Bow', 1)), ('energy', ('Grenade', 1)), ('energy', ('Spear', 1))], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomRightBubbleFree", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomRightBubbleFree", player), lambda s: s.has("Shuriken", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomRightBubbleFree", player), lambda s: s.has("Shuriken", player) and has_enough_resources([], [('db', 20)], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.ButtonDoorAboveTree", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 60)], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.SwimDashCurrentEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 60)], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.AboveTree", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.AboveTree", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomEntrance", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomEntrance", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.ButtonDoorAboveTree", "Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.ButtonDoorAboveTree", "Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1))], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.ButtonDoorAboveTree", "UpperPools.TreeRoomRightBubbleFree"), player), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree -> UpperPools.RoofEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide"), player) and has_enough_resources([('combat', 'CorruptSlug')], [], "UpperPools.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree -> UpperPools.RoofEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree -> UpperPools.RoofEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "UpperPools.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree -> UpperPools.TreeRoomEntrance", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has("Water Dash", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and has_enough_resources([], [('db', 20)], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Hammer"), player) and has_enough_resources([('db', 120)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and has_enough_resources([('db', 120)], [('energy', ('Spear', 1))], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 140)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and has_enough_resources([('db', 80)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 80)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and has_enough_resources([('db', 80)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Grapple", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 120)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 60)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Sword"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Sword"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1))], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Hammer"), player) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 1))], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Hammer", "UpperPools.UpperWaterDrained"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 1))], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Hammer", "Clean Water"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 1))], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "UpperPools.DrainRoomPurpleWall", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "UpperPools.DrainRoomPurpleWall", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 40)], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainRoomPurpleWall", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 100)], [], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainRoomPurpleWall", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([('db', 80)], [], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Water Dash", "Bash", "Double Jump"), player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Water Dash", "Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 60)], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Sentry', 3))], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Double Jump"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Double Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Glide"), player) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Glide", "UpperPools.UpperWaterDrained"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Glide", "Clean Water"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainRoomPurpleWall", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 100)], [], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainRoomPurpleWall", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([('db', 80)], [], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> EastPools.PurpleWallHC", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Bash"), player) and s.has_any(("Launch", "Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 60)], [], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> EastPools.PurpleWallHC", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Bash"), player) and has_enough_resources([('db', 60)], [('energy', ('Grenade', 1)), ('energy', ('Sentry', 2))], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> EastPools.PurpleWallHC", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Bash"), player) and has_enough_resources([('db', 60), ('db', 60)], [], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> EastPools.PurpleWallHC", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleRight", player), lambda s: s.has("Launch", player) and s.has_any(("UpperPools.UpperWaterDrained", "Clean Water"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleRight", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 60)], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("UpperPools.UpperWaterDrained", "Clean Water"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 60)], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([], [('db', 60)], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("UpperPools.UpperWaterDrained", "Clean Water"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 60)], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and has_enough_resources([], [('db', 60)], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Bash", "Glide", "UpperPools.UpperWaterDrained"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Bash", "Glide", "Clean Water"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Bash", "Glide"), player) and has_enough_resources([('db', 60), ('db', 20), ('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamLever", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Bee'), ('combat', 'Skeeto')], [], "UpperPools.RightBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 60)], [], "UpperPools.RightBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolEX", player), lambda s: has_enough_resources([('db', 20)], [], "UpperPools.RightBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.RightBubblesEX", player), lambda s: s.has("UpperPools.BubbleSpamWall", player) and has_enough_resources([('db', 80)], [], "UpperPools.RightBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.RightBubblesEX", player), lambda s: s.has_all(("UpperPools.BubbleSpamWall", "Water Dash"), player) and has_enough_resources([('db', 40)], [], "UpperPools.RightBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has("Launch", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 200)], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('db', 200)], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has("Bash", player) and s.has("Launch", player) and has_enough_resources([('db', 160)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 160)], [('energy', ('Grenade', 1))], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 160)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide"), player) and has_enough_resources([('db', 220)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.LeftBubblesEX", player), lambda s: has_enough_resources([('db', 80)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.LeftBubblesEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('db', 60)], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Water Dash"), player) and has_enough_resources([('db', 40)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Spear', 1))], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and has_enough_resources([('energy', ('Spear', 1))], [('db', 60)], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 60)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 60), ('energy', ('Grenade', 1))], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide"), player) and has_enough_resources([('db', 160)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Hammer"), player) and has_enough_resources([('db', 60)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Launch", "Water Dash"), player) and has_enough_resources([('db', 40)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and has_enough_resources([('db', 40), ('energy', ('Grenade', 1))], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and s.has_any(("Double Jump", "Glide"), player) and has_enough_resources([('db', 100)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.TpEX", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.TpEX", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.TpEX", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.TpEX", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and has_enough_resources([('db', 20)], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.TpEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.TpEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1)), ('energy', ('Shuriken', 1))], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.BurrowEX", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 60)], [], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.BurrowOre", player), lambda s: s.has_all(("WestPools.ForestsStrength", "Water Dash", "Burrow"), player) and has_enough_resources([('db', 100), ('db', 80), ('db', 100)], [], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.LeftKwolokPlatform", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.LeftKwolokPlatform", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 100)], [], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.LeftKwolokPlatform", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 220)], [], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> EastPools.CentralRoom", player), lambda s: s.has("Water Dash", player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('db', 160)], [], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform -> WestPools.Teleporter", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 100)], [], "WestPools.LeftKwolokPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform -> WestPools.Teleporter", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 220)], [], "WestPools.LeftKwolokPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> WestPools.EscapeRevisitEX", player), lambda s: has_enough_resources([('db', 80)], [], "WestPools.RightKwolokPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> WestPools.EscapeRevisitEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "WestPools.RightKwolokPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> UpperPools.LowerKS", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 80)], [], "WestPools.RightKwolokPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Water Dash", player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('db', 120)], [], "WestPools.RightKwolokPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("KwolokEscape -> KwolokFight", player), lambda s: s.has_all(("Launch", "Clean Water"), player), "or")
    add_rule(world.get_entrance("KwolokEscape -> KwolokFight", player), lambda s: s.has_all(("Launch", "Bash"), player) and has_enough_resources([('db', 180)], [], "KwolokEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("KwolokEscape -> KwolokFight", player), lambda s: s.has_all(("Launch", "Water Dash"), player) and has_enough_resources([('db', 100)], [], "KwolokEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("KwolokEscape -> KwolokFight", player), lambda s: s.has_all(("Dash", "Water Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("KwolokEscape -> KwolokFight", player), lambda s: s.has_all(("Dash", "Water Dash"), player) and has_enough_resources([], [('db', 120)], "KwolokEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("KwolokFight -> WestPools.ForestsStrength", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash"), player) and s.has_any(("Double Jump", "Launch", "Dash"), player) and has_enough_resources([('wall', ('Boss', 250)), ('db', 85)], [], "KwolokFight", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has("Double Jump", player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and s.has_any(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and has_enough_resources([], [('energy', ('Shuriken', 2))], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and s.has("Sword", player) and has_enough_resources([('db', 30)], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 30)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has_all(("Burrow", "Glide"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has_all(("Burrow", "Glide"), player) and has_enough_resources([], [('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has_all(("Burrow", "Sword"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('Sentry', 2))], [('energy', ('Shuriken', 1)), ('db', 30)], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Glide"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Glide"), player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Glide"), player) and has_enough_resources([('db', 30)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Sword"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 30)], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "WindtornRuins.Seir", "Glide", "Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and can_enter_area(WeepingRidge, s, player, options), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "WindtornRuins.Seir", "Glide", "Double Jump", "Hammer"), player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "WindtornRuins.Seir", "Glide", "Bash", "Double Jump"), player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Bash", "Dash", "Double Jump", "WindtornRuins.Seir"), player) and s.has_any(("Sword", "Hammer"), player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump", "Hammer", "WindtornRuins.Seir"), player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and s.has("WindtornRuins.Seir", player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.WestTP", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.SunsetView", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.Shovel", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.SunsetView", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.Shovel", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel -> E.LowerWastes.Shovel", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel -> LowerWastes.SunsetView", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.Shovel", player), lambda s: s.has_any(("Bash", "Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.SandPot", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.SandPot", player), lambda s: has_enough_resources([], [('combat', 'ShieldSlug'), ('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.MuncherTunnel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.SandPot", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotHC", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotHC", player), lambda s: s.has("Bash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotHC", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Grenade', 1))], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotEX", player), lambda s: s.has("Burrow", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and has_enough_resources([], [('energy', ('Blaze', 3))], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Hammer", player) and s.has_any(("Glide", "Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 30)], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 30)], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 30)], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Spear', 2))], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Dash", "Glide"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Dash", player) and has_enough_resources([('db', 30)], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.MuncherPitEX", player), lambda s: has_enough_resources([('energy', ('Spear', 1))], [], "LowerWastes.WoodenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.MuncherPitEX", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.WoodenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.MuncherPitEX", player), lambda s: s.has_all(("Glide", "Sword"), player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.MuncherPitEX", player), lambda s: s.has_all(("Glide", "Sword"), player) and has_enough_resources([], [('db', 30)], "LowerWastes.WoodenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPot", player), lambda s: has_enough_resources([('db', 60)], [], "LowerWastes.WoodenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPot", player), lambda s: s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 30)], [], "LowerWastes.WoodenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPot", player), lambda s: has_enough_resources([('db', 30)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.WoodenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPot", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPot", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.WoodenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.LeverArea", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.LeverArea", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.LeverArea", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.WoodenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.MinesEntranceEnemyPaths", player), lambda s: has_enough_resources([('combat', 'MaceMiner'), ('combat', 'Mantis')], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.BeforeMinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.BeforeMinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.WoodenBridge", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerWastes.BeforeMinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.LeverArea", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.BeforeMinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntranceEnemyPaths -> LowerWastes.BottomRightEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightEX", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightEX", player), lambda s: s.has_all(("Sword", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'MaceMiner'), ('combat', 'Mantis'), ('energy', ('Spear', 1))], [], "LowerWastes.MinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightHC", player), lambda s: has_enough_resources([('db', 40)], [], "LowerWastes.MinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightHC", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 30)], [], "LowerWastes.MinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightHC", player), lambda s: has_enough_resources([('db', 30)], [('combat', 'MaceMiner'), ('combat', 'Mantis')], "LowerWastes.MinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightHC", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightHC", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "LowerWastes.MinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightHC", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightHC", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "LowerWastes.MinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BeforeMinesEntrance", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Grapple", "Glide"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.MinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.SandPlatformLever", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.LeverArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.LastStandArea", player), lambda s: s.has("Bash", player) and s.has_any(("LowerWastes.SandPlatformLever", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.LeverArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.LastStandArea", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1))], "LowerWastes.LeverArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.LastStandArea", player), lambda s: s.has_all(("LowerWastes.SandPlatformLever", "Burrow"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.LastStandArea", player), lambda s: s.has_all(("LowerWastes.SandPlatformLever", "Burrow"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.LeverArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.MuncherClimbEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.MuncherClimbEX", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.MuncherClimbEX", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Sentry', 2))], "LowerWastes.MuncherClimb", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.MuncherClimbEX", player), lambda s: s.has_all(("Grapple", "Sword"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.MuncherClimb", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.MuncherClimbEX", player), lambda s: s.has_all(("Grapple", "Glide"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.MuncherClimb", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.LastStandArea", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.LastStandArea", player), lambda s: s.has("LowerWastes.SandPlatformLever", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.LastStandArea", player), lambda s: s.has("LowerWastes.SandPlatformLever", player) and has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2))], "LowerWastes.MuncherClimb", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Sentry', 3)), ('db', 90)], "LowerWastes.MuncherClimb", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player) and has_enough_resources([('db', 30)], [], "LowerWastes.MuncherClimb", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and has_enough_resources([('db', 30)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "LowerWastes.MuncherClimb", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.SkeetoHive", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.MuncherClimb", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.SkeetoHive", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.SkeetoHive", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 30)], "LowerWastes.MuncherClimb", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea -> LowerWastes.LastStandShard", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea -> LowerWastes.LastStandEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea -> LowerWastes.LastStandEX", player), lambda s: s.has("Burrow", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 30)], "LowerWastes.LastStandArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea -> LowerWastes.MuncherClimb", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.ThirstyGorlek", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.ThirstyGorlek", player), lambda s: s.has_all(("Sword", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and has_enough_resources([], [('energy', ('Spear', 1))], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.UpperPath", player), lambda s: s.has_all(("Burrow", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.UpperPath", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.MuncherClimb", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.MuncherClimb", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 60)], [], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.MuncherClimb", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Triple Jump", "Sword"), player) and has_enough_resources([('db', 30)], [], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Hammer", player) and has_enough_resources([('db', 30)], [], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and has_enough_resources([('db', 30)], [('energy', ('Shuriken', 1))], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.LupoMap", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and can_buy_map(s, player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.ThirstyGorlek", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and s.has_any(("Hammer", "Triple Jump"), player) and has_enough_resources([('energy', ('Spear', 2))], [], "LowerWastes.ThirstyGorlek", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.SkeetoHive", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.SkeetoHive", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.ThirstyGorlek", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath -> LowerWastes.UpperPathEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath -> LowerWastes.UpperPathHiddenEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath -> LowerWastes.UpperPathHiddenEX", player), lambda s: s.has("Burrow", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.UpperPath", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> Tokk", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.EastTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> UpperWastes.KeystoneRoom", player), lambda s: s.has("Burrow", player) and can_enter_area(UpperWastes, s, player, options), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KeystoneDoor", player), lambda s: s.has("Burrow", player) and can_open_door(UpperWastes.KeystoneDoor, s, player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KeystoneDoor", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and can_open_door(UpperWastes.KeystoneDoor, s, player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KeystoneDoor", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and can_open_door(UpperWastes.KeystoneDoor, s, player) and has_enough_resources([], [('energy', ('Spear', 1))], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.LowerKS", player), lambda s: has_enough_resources([('db', 30)], [], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Launch"), player) and has_enough_resources([('db', 30)], [], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 120)], [], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KSDoorEX", player), lambda s: s.has("Burrow", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KSDoorEX", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KSDoorEX", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1)), ('energy', ('Spear', 1))], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KSDoorEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KSDoorEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 30)], [], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> LowerWastes.EastTP", player), lambda s: s.has("Burrow", player) and can_enter_area(LowerWastes, s, player, options), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.MissilePuzzleLeft", player), lambda s: s.has_all(("UpperWastes.KeystoneDoor", "Burrow"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.LedgeEC", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperWastes.MissilePuzzleLeft", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.LedgeEC", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.LedgeEC", player), lambda s: s.has_all(("Burrow", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.LedgeEC", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.LedgeEC", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "UpperWastes.MissilePuzzleLeft", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle -> UpperWastes.PurpleWallEX", player), lambda s: s.has("Burrow", player) and has_enough_resources([('combat', 'MaceMiner')], [], "UpperWastes.MissilePuzzleMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle -> UpperWastes.MissilePuzzleLeft", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight -> UpperWastes.SpinLasers", player), lambda s: s.has("Burrow", player) and s.has_any(("Dash", "Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight -> UpperWastes.SpinLasers", player), lambda s: s.has("Burrow", player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2)), ('db', 60)], "UpperWastes.MissilePuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight -> UpperWastes.SpinLasers", player), lambda s: s.has("Burrow", player) and s.has_any(("Bash", "Glide", "Sword"), player) and has_enough_resources([('db', 30)], [], "UpperWastes.MissilePuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight -> UpperWastes.SpinLasers", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 30)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.MissilePuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.SpinLasers", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has_all(("Double Jump", "Burrow"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has_all(("Double Jump", "Burrow"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.SpinLasers", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has_all(("Glide", "Burrow"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has_all(("Glide", "Burrow"), player) and has_enough_resources([], [('energy', ('Shuriken', 1))], "UpperWastes.SpinLasers", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has_all(("Burrow", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player) and s.has_any(("Bash", "Glide", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.MissilePuzzleRight", player), lambda s: s.has_all(("Burrow", "Sword"), player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "UpperWastes.SpinLasers", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 60)], [], "UpperWastes.SpinLasers", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player) and s.has("Sword", player) and has_enough_resources([('db', 30)], [], "UpperWastes.SpinLasers", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 30)], [('energy', ('Shuriken', 1)), ('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Blaze', 1))], "UpperWastes.SpinLasers", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Sentry', 2)), ('db', 30)], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.WallOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('db', 30), ('energy', ('Grenade', 1)), ('db', 30), ('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.WallOre", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 30), ('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.WallOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Sentry', 3)), ('db', 30), ('energy', ('Grenade', 1))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.WallOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('db', 30), ('energy', ('Grenade', 3))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.WallOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Glide", player) and has_enough_resources([('energy', ('Grenade', 3))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.WallOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 3))], [('energy', ('Sentry', 2))], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.WallOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 4))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 30)], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump", "Hammer"), player) and s.has_any(("Glide", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 2)), ('db', 30)], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Dash"), player) and has_enough_resources([], [('db', 30)], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Burrow", "Triple Jump", "Dash", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('db', 30), ('energy', ('Grenade', 1)), ('db', 30), ('energy', ('Sentry', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('db', 30), ('energy', ('Grenade', 1)), ('db', 30), ('energy', ('Flash', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('db', 30), ('energy', ('Grenade', 1)), ('db', 30), ('energy', ('Shuriken', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('db', 30), ('energy', ('Grenade', 1)), ('db', 30), ('energy', ('Spear', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 30), ('energy', ('Sentry', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 30), ('energy', ('Flash', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 30), ('energy', ('Shuriken', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 30), ('energy', ('Spear', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Sentry', 3)), ('db', 30), ('energy', ('Sentry', 1))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('db', 30), ('energy', ('Grenade', 2))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 2))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 2)), ('energy', ('Sentry', 3))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 3))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('db', 30), ('energy', ('Grenade', 3)), ('db', 30)], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 3))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 4)), ('db', 30)], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WallOre", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer", "Burrow"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WallOre", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WallOre", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WallOre", player), lambda s: s.has("Burrow", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WallOre", player), lambda s: s.has("Burrow", player) and has_enough_resources([], [('energy', ('Sentry', 3))], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WallOre", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 30)], [], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.NorthTP", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.NorthTP", player), lambda s: has_enough_resources([], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 2))], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.NorthTP", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.NorthTP", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('combat', 'Mantis')], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.NorthTP", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural -> WindtornRuins.RuinsTP", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural -> WindtornRuins.RuinsTP", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and has_enough_resources([], [('energy', ('Sentry', 2))], "WindtornRuins.BrokenMural", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural -> WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Burrow", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural -> WindtornRuins.RuinsTP", player), lambda s: s.has("Burrow", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WindtornRuins.BrokenMural", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Burrow", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WindtornRuins.FallenPillar", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.LowerRuins", player), lambda s: s.has("WindtornRuins.Seir", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WindtornRuins.FallenPillar", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Double Jump"), player) and has_enough_resources([], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 2))], "WindtornRuins.RuinsTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Dash"), player) and has_enough_resources([], [('energy', ('Sentry', 2))], "WindtornRuins.RuinsTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Sword"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Sword"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WindtornRuins.RuinsTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Hammer"), player) and has_enough_resources([('energy', ('Sentry', 2))], [], "WindtornRuins.RuinsTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Sword"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and has_enough_resources([], [('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "WindtornRuins.RuinsTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WindtornRuins.RuinsTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WindtornRuins.RuinsTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Grapple"), player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Grapple"), player) and has_enough_resources([], [('energy', ('Sentry', 5)), ('energy', ('Shuriken', 5))], "WindtornRuins.Escape", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Grapple"), player) and has_enough_resources([('db', 30)], [('energy', ('Sentry', 3)), ('energy', ('Shuriken', 3))], "WindtornRuins.Escape", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Grapple"), player) and has_enough_resources([('db', 70)], [('energy', ('Sentry', 2)), ('energy', ('Shuriken', 2))], "WindtornRuins.Escape", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins -> WindtornRuins.FallenPillar", player), lambda s: s.has_all(("WindtornRuins.Seir", "Double Jump"), player) and s.has_any(("Burrow", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins -> WindtornRuins.FallenPillar", player), lambda s: s.has_all(("WindtornRuins.Seir", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1))], "WindtornRuins.LowerRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins -> WindtornRuins.FallenPillar", player), lambda s: s.has_all(("WindtornRuins.Seir", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins -> WindtornRuins.FallenPillar", player), lambda s: s.has_all(("WindtornRuins.Seir", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1))], "WindtornRuins.LowerRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has_any(("Dash", "Hammer"), player) and has_enough_resources([('combat', 'CrystalMiner'), ('combat', 'CrystalMiner'), ('combat', 'ShieldCrystalMiner'), ('combat', 'ShieldCrystalMiner')], [], "WeepingRidge.Bottom", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has("Sword", player) and has_enough_resources([('combat', 'CrystalMiner'), ('combat', 'CrystalMiner'), ('combat', 'ShieldCrystalMiner'), ('combat', 'ShieldCrystalMiner')], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WeepingRidge.Bottom", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> WeepingRidge.LaunchArea", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Sword"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WeepingRidge.Bottom", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Ore", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Ore", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Ore", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Ore", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 40)], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has("Sword", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.WillowEntranceLedge", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Launch"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.WillowEntranceLedge", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Launch"), player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 3))], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.WillowEntranceLedge", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Launch", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.WillowEntranceLedge", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 3))], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Bottom", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Glide", "Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Bottom", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Bottom", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and has_enough_resources([('energy', ('Sentry', 5))], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Bottom", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.SpikeClimbEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.Ore", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 2)), ('db', 20)], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.Ore", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 60)], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.LaunchArea", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.LaunchArea", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 20)], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.WillowEntranceLedge -> WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Launch", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.WillowEntranceLedge -> WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and has_enough_resources([], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 2))], "WeepingRidge.WillowEntranceLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.WillowEntranceLedge -> WeepingRidge.LaunchArea", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WeepingRidge.WillowEntranceLedge -> WeepingRidge.LaunchArea", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WeepingRidge.WillowEntranceLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.EntryEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [('energy', ('Bow', 1)), ('energy', ('Grenade', 1))], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 40)], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump", "WillowsEnd.PortalShortcut"), player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has("Launch", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 40)], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Launch", "Bash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.BoulderHeartPath", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.BoulderHeartPath", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Launch", "Grapple"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump", "Grapple"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1))], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [('energy', ('Sentry', 2))], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 3))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 40)], "WillowsEnd.GrappleHeartMidPoint", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Glide"), player) and has_enough_resources([('db', 20)], [], "WillowsEnd.GrappleHeartMidPoint", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 60)], [], "WillowsEnd.GrappleHeartMidPoint", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 60)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "WillowsEnd.GrappleHeartMidPoint", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 100)], [], "WillowsEnd.GrappleHeartMidPoint", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.Entry", player), lambda s: s.has_all(("Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.Entry", player), lambda s: s.has_all(("Launch", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> E.WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("BreakCrystal", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> E.WillowsEnd.GrappleHeart", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.PoisonfallHC", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 4)], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.PoisonfallHC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.PoisonfallHC", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.PoisonfallHC", player), lambda s: s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.PoisonfallHC", player), lambda s: s.has("WillowsEnd.GrappleWheelsHeart", player) and has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.PoisonfallHC", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Hammer"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.Entry", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.Entry", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.Entry", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.Entry", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.Entry", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Dash"), player) and s.has_any(("Double Jump", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.Entry", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Dash"), player) and has_enough_resources([], [('energy', ('Sentry', 2))], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.BoulderHeart", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 30))], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 40)], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 40)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 40)], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 40)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.EntryEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Glide"), player) and has_enough_resources([('db', 40)], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.EntryEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 40)], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.EntryEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([('db', 40)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.EntryEX", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.EntryEX", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.Entry", player), lambda s: has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2)), ('db', 80)], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.Entry", player), lambda s: has_enough_resources([('db', 40)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 40)], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump", "WillowsEnd.PortalShortcut"), player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump", "WillowsEnd.PortalShortcut"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump", "Bash"), player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump", "Bash"), player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 40)], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump", "Bash"), player) and has_enough_resources([('db', 40)], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.Entry", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.Entry", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.Entry", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.InnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('db', 40)], "WillowsEnd.InnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.AboveInnerTP", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.InnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> E.WillowsEnd.AboveInnerTP", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Grenade', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.AboveInnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> E.WillowsEnd.AboveInnerTP", player), lambda s: s.has_any(("Double Jump", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "WillowsEnd.AboveInnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> E.WillowsEnd.AboveInnerTP", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Hammer"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WillowsEnd.AboveInnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.East", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.East", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.AboveInnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.East", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.East", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.AboveInnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.East", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.RedirectHeartPath", player), lambda s: s.has_any(("Glide", "Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "WillowsEnd.East", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.RedirectHeartPath", player), lambda s: has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.East", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath -> WillowsEnd.East", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.RedirectHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectHeart", player), lambda s: s.has_all(("Launch", "Bash", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 10)), ('wall', ('BreakWall', 30))], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('wall', ('BreakWall', 10))], [('db', 40)], "WillowsEnd.RedirectHeartPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump", "Dash"), player) and s.has("Hammer", player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 10))], [('energy', ('Sentry', 2)), ('energy', ('Blaze', 4))], "WillowsEnd.RedirectHeartPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('wall', ('BreakWall', 10))], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 40)], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> E.WillowsEnd.Upper", player), lambda s: s.has_all(("BreakCrystal", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> E.WillowsEnd.Upper", player), lambda s: s.has_all(("BreakCrystal", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> E.WillowsEnd.Upper", player), lambda s: s.has_all(("BreakCrystal", "Double Jump"), player) and has_enough_resources([('combat', 'CrystalMiner')], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.BurrowHeart", player), lambda s: s.has_all(("Burrow", "Launch", "Bash"), player) and s.has_any(("Double Jump", "Glide", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 30))], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.MiniBossFight", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.East", player), lambda s: s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('combat', 'CrystalMiner')], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.East", player), lambda s: has_enough_resources([('combat', 'CrystalMiner')], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Sentry', 2))], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.West", player), lambda s: has_enough_resources([('db', 90), ('combat', 'CrystalMiner')], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.West", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.UpperHeartPath", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.MiniBossFight -> WillowsEnd.MinibossHeart", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('wall', ('Boss', 300)), ('db', 60)], [], "WillowsEnd.MiniBossFight", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.MiniBossFight -> WillowsEnd.Upper", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.MiniBossFight -> WillowsEnd.Upper", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Blaze', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1))], "WillowsEnd.MiniBossFight", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.SpinLasersHeart", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.Upper", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 10))], [('energy', ('Grenade', 1)), ('db', 40)], "WillowsEnd.West", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "Double Jump", "Hammer"), player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "WillowsEnd.West", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.Upper", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "WillowsEnd.West", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.GlideHeartPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath -> WillowsEnd.GlideRooms", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms -> E.WillowsEnd.GlideRooms", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Grenade', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.GlideRooms", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms -> WillowsEnd.GlideHeart", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and has_enough_resources([('wall', ('BreakWall', 30)), ('db', 40)], [], "WillowsEnd.GlideRooms", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms -> WillowsEnd.WindSpinOre", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and has_enough_resources([('db', 40), ('db', 80)], [], "WillowsEnd.GlideRooms", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperLeftEX", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 80)], [], "WillowsEnd.UpperHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperLeftEX", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Sword"), player) and has_enough_resources([('db', 40)], [], "WillowsEnd.UpperHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Grapple"), player) and has_enough_resources([('db', 60)], [], "WillowsEnd.UpperHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("WillowsEnd.SpinPortalsHeart", "Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 160)], [], "WillowsEnd.UpperHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 120)], [], "WillowsEnd.UpperHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Glide"), player) and has_enough_resources([('db', 80)], [], "WillowsEnd.UpperHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Grapple"), player) and has_enough_resources([('db', 80)], [], "WillowsEnd.UpperHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Sword"), player) and has_enough_resources([('db', 40)], [], "WillowsEnd.UpperHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Glide", "Dash"), player) and has_enough_resources([('db', 40)], [], "WillowsEnd.UpperHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Grapple", "Bash"), player) and has_enough_resources([('db', 100)], [], "WillowsEnd.UpperHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("WillowsEnd.SpinPortalsHeart", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("WillowsEnd.SpinPortalsHeart", "Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.UpperHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint -> WillowsEnd.UpperRightEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint -> WillowsEnd.UpperRightEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.UpperHeartCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint -> WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("Launch", "Bash"), player), "or")


def set_kii_glitched_rules(world: Multiworld, player: int, options: WotWOptions):
    """Kii (or hard) rules with glitches."""
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has("Water Dash", player) and s.has_any(("Dash", "Double Jump"), player) and has_enough_resources([('db', 20), ('energy', ('SentryJump', 1))], [], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('wall', ('shuriken', 10))], [('energy', ('Blaze', 4)), ('energy', ('Sentry', 3))], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has("Dash", player) and has_enough_resources([('wall', ('shuriken', 10))], [('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and has_enough_resources([('wall', ('shuriken', 10))], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('wall', ('shuriken', 10)), ('db', 20)], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('shuriken', 10)), ('db', 60), ('energy', ('Grenade', 1))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has("Water Dash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('wall', ('shuriken', 10)), ('db', 40)], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([('wall', ('shuriken', 10)), ('db', 40), ('energy', ('Grenade', 1))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has("InnerWellspring.DrainLever", player) and has_enough_resources([('wall', ('shuriken', 10)), ('db', 45)], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has_all(("InnerWellspring.DrainLever", "Bash"), player) and has_enough_resources([('wall', ('shuriken', 10)), ('energy', ('Grenade', 1))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowballEnemyPaths -> LowerReach.TPLantern", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "LowerReach.SnowballEnemyPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.TPLantern", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.RolledSnowball", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide", "Hammer"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.RolledSnowball", player), lambda s: s.has_all(("Bash", "Dash"), player) and has_enough_resources([('energy', ('Sentry', 1)), ('db', 20)], [], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.RolledSnowball", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.RolledSnowball", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Sentry', 1))], [('energy', ('Sentry', 2)), ('db', 20)], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> C.PoolsApproach.OnTopOfWheel", player), lambda s: s.has_any(("Launch", "Grapple", "Double Jump", "Hammer", "PoolsApproach.WheelFreed"), player) and has_enough_resources([('db', 20), ('energy', ('SentryJump', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Bash", "Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump", "Hammer"), player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and s.has("WindtornRuins.Seir", player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerWastes.WestTP", s, player, options, False), "or")


def set_unsafe_rules(world: Multiworld, player: int, options: WotWOptions):
    """Unsafe rules."""
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.ToOpherBarrier", player), lambda s: s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Blaze', 2))], "MarshSpawn.Main", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Bash"), player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.Main", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.ResilienceShard", player), lambda s: s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.ResilienceOre", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Clean Water"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.ResilienceOre", player), lambda s: s.has("HowlsDen.RainLifted", player) and has_enough_resources([('db', 40)], [], "MarshSpawn.BrokenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.ResilienceOre", player), lambda s: has_enough_resources([('db', 40)], [('wall', ('BreakWall', 16))], "MarshSpawn.BrokenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.ResilienceOre", player), lambda s: s.has("Water Dash", player) and s.has("HowlsDen.RainLifted", player) and has_enough_resources([('db', 20)], [], "MarshSpawn.BrokenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.ResilienceOre", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [('wall', ('BreakWall', 16))], "MarshSpawn.BrokenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.BashEC", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.BashEC", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.OpherBarrier", player), lambda s: s.has("MarshSpawn.LogBroken", player) and has_enough_resources([('energy', ('Sentry', 2))], [], "MarshSpawn.BrokenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.TokkBarrier", player), lambda s: s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1))], "MarshSpawn.CaveEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has("Grapple", player) and s.has_any(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.BrokenBridge", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("MarshSpawn.CaveFight", player) and has_enough_resources([('energy', ('Spear', 1))], [], "MarshSpawn.Cave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.BurrowArena", player), lambda s: has_enough_resources([('combat', 'Hornbug'), ('combat', 'Bat'), ('combat', 'Sandworm'), ('combat', 'Sandworm'), ('combat', 'Lizard'), ('combat', 'Lizard'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'SneezeSlug')], [], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LifepactLedge", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge -> MarshSpawn.BurrowFightArena", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge -> MarshSpawn.BurrowFightArena", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2))], "MarshSpawn.LifepactLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.CaveOre", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.CaveOre", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.CaveOre", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.CaveOre", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.LifepactLedge", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.CrusherSwimEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 10)], [], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Sword", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and has_enough_resources([], [('db', 10)], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('db', 20), ('energy', ('Shuriken', 2))], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BurrowsOpen", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.CrusherSwimEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.CrusherSwimEX", player), lambda s: has_enough_resources([], [('db', 10)], "MarshSpawn.BurrowsEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry -> MarshSpawn.BeforeBurrows", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.LongSwimEX", player), lambda s: has_enough_resources([('db', 90)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.LongSwimEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.LongSwimEX", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Water Dash"), player) and has_enough_resources([('db', 35)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Clean Water"), player) and has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 10)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Double Jump", "Deflector", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Double Jump", "Deflector", "Sword"), player) and has_enough_resources([], [('db', 10)], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Deflector", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Clean Water"), player) and has_enough_resources([], [('energy', ('Bow', 1)), ('energy', ('Grenade', 1)), ('energy', ('Spear', 1))], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 20)], [('energy', ('Bow', 1)), ('energy', ('Grenade', 1)), ('energy', ('Spear', 1))], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and has_enough_resources([('db', 10)], [('energy', ('Bow', 1)), ('energy', ('Grenade', 1)), ('energy', ('Spear', 1))], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Bash"), player) and has_enough_resources([], [('db', 20)], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Bash", "Water Dash"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has_any(("Bash", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has_any(("Double Jump", "Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2)), ('db', 10)], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water Dash", player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('db', 160)], [], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Sentry', 1))], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 6)], [], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor -> MarshSpawn.HowlApproach", player), lambda s: has_enough_resources([('energy', ('Spear', 1))], [], "MarshSpawn.RegenDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach -> MarshSpawn.RecklessShard", player), lambda s: s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach -> MarshSpawn.RegenDoor", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.RecklessShard", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and has_enough_resources([('wall', ('BreakWall', 10))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.RecklessShard", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "HowlsDen.RainLifted"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.HowlApproach", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.HowlApproach", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "HowlsDen.RainLifted", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.HowlApproach", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.HowlApproach", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and s.has_any(("Dash", "Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangEC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangEC", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.AboveHowlArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangEC", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Bash", "Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangPlatform", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1))], "MarshSpawn.AboveHowlArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 3)), ('energy', ('Flash', 3)), ('energy', ('Sentry', 3))], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: has_enough_resources([('db', 10)], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: has_enough_resources([('db', 10), ('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: has_enough_resources([('db', 10), ('energy', ('Spear', 1)), ('db', 10)], [], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: has_enough_resources([('db', 10), ('db', 10), ('db', 10)], [], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance -> MarshSpawn.MokkTheBrave", player), lambda s: s.has("MarshSpawn.HowlBurnt", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit -> MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Double Jump", player) and s.has("Dash", player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.UpperLoopEntranceBarrier", player), lambda s: has_enough_resources([('wall', ('BreakWall', 12))], [], "HowlsDen.UpperLoopEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and has_enough_resources([], [('energy', ('Spear', 1))], "HowlsDen.UpperLoopEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.BoneOre", player), lambda s: has_enough_resources([('energy', ('Spear', 1))], [], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveDoorKS", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveDoorKS", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveDoorKS", player), lambda s: has_enough_resources([('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.MagnetShard", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.UpperLoopEntrance", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.UpperLoopEntrance", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.UpperLoopEntrance", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveBoneBridge", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveBoneBridge", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Bash", "Grapple"), player) and has_enough_resources([], [('energy', ('Grenade', 1))], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor -> HowlsDen.OutsideSecretRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.BoneBridgeDoor", player), lambda s: has_enough_resources([], [('energy', ('Blaze', 1)), ('energy', ('Bow', 1)), ('energy', ('Grenade', 1))], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: has_enough_resources([('energy', ('Shuriken', 2))], [], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: has_enough_resources([('db', 10)], [('energy', ('Spear', 1))], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: has_enough_resources([('wall', ('BreakWall', 16)), ('energy', ('Spear', 1))], [('energy', ('Spear', 1)), ('db', 10)], "HowlsDen.MidwayBottomLoop", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 16)), ('energy', ('Grenade', 1))], [], "HowlsDen.MidwayBottomLoop", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom -> HowlsDen.SecretRoomWall", player), lambda s: s.has_any(("Sword", "Hammer", "Bow", "Spear", "Shuriken", "Sentry"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "HowlsDen.SecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom -> HowlsDen.LeftSecretRoom", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "HowlsDen.SecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has_any(("Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has_any(("Clean Water", "Grapple"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: has_enough_resources([('energy', ('Spear', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: has_enough_resources([('db', 20), ('energy', ('Spear', 1))], [], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has("Glide", player) and has_enough_resources([('db', 10), ('energy', ('Spear', 1))], [], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has("Water Dash", player) and s.has_any(("Clean Water", "Grapple"), player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.SecretRoom", player), lambda s: s.has("Water Dash", player) and has_enough_resources([], [('db', 10)], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter -> HowlsDen.AboveTPEX", player), lambda s: s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.LaserKS", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.LaserKS", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('Spear', 1))], [], "HowlsDen.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.DoubleJumpApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.AboveTeleporter", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.AboveTeleporter", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1))], "HowlsDen.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge -> HowlsDen.DoubleJumpEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge -> HowlsDen.DoubleJumpApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> HowlsDen.BoneBarrier", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Blaze', 4)), ('energy', ('Sentry', 2))], "HowlsDen.DoubleJumpTreeArea", s, player, options, False), "or")
    add_rule(world.get_entrance("DenShrine -> HowlsDen.CombatShrineCompleted", player), lambda s: has_enough_resources([('combat', 'Mantis'), ('combat', 'Lizard'), ('combat', 'Lizard'), ('combat', 'SneezeSlug'), ('combat', 'SneezeSlug'), ('combat', 'Mantis'), ('combat', 'Skeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Lizard'), ('combat', 'Lizard'), ('combat', 'Mantis'), ('combat', 'Mantis')], [], "DenShrine", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.MillView", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.OpherSkipBranch", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 20)], [], "MarshPastOpher.OpherSkipBranch", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart -> MarshPastOpher.TrunkWall", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart -> MarshPastOpher.SpiritTrial", player), lambda s: s.has_all(("MarshPastOpher.TrialActivation", "Grapple"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk -> MarshPastOpher.TrunkWall", player), lambda s: s.has_any(("Sword", "Hammer", "Blaze", "Sentry", "Grenade"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "MarshPastOpher.UnderTrunk", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk -> MarshPastOpher.TrialLeftEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialActivation", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialEC", player), lambda s: has_enough_resources([('db', 10)], [], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialEC", player), lambda s: has_enough_resources([], [('energy', ('Grenade', 1))], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialHC", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialRightEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialRightEX", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1))], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.UnderTrunk", player), lambda s: s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.UnderTrunk", player), lambda s: has_enough_resources([], [('db', 10)], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.UnderTrunk", player), lambda s: has_enough_resources([('energy', ('Spear', 1))], [], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.UnderTrunk", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.UnderTrunk", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.BowPath", player), lambda s: s.has_any(("Bash", "Double Jump", "Dash", "Glide", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.BowPath", player), lambda s: has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshShrine -> MarshPastOpher.CombatShrineCompleted", player), lambda s: has_enough_resources([('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Mantis'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'SmallSkeeto'), ('combat', 'Mantis'), ('combat', 'Skeeto')], [], "MarshShrine", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.SwingPoleEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.SwingPoleEX", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Sentry', 2))], "MarshPastOpher.BowPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.BowApproach", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.BowApproach", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 2))], "MarshPastOpher.BowPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.BowApproach", player), lambda s: has_enough_resources([('energy', ('Blaze', 2))], [('energy', ('Spear', 1)), ('energy', ('Flash', 1))], "MarshPastOpher.BowPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.MillView", player), lambda s: has_enough_resources([], [('energy', ('Bow', 1)), ('energy', ('Grenade', 1))], "MarshPastOpher.BowPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.SwingPoleEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.BowArea", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Blaze', 2))], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Spear', 2))], [], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Bow', 2))], [], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([], [('energy', ('Bow', 1)), ('energy', ('Spear', 1)), ('energy', ('Grenade', 1)), ('energy', ('Shuriken', 1))], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.UpperBowArea", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.UpperBowArea", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.UpperBowArea", player), lambda s: has_enough_resources([], [('energy', ('Bow', 2))], "MarshPastOpher.BowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.BowApproach", player), lambda s: has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.BowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.CeilingEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "MarshPastOpher.PoolsPathEast", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEC", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 2))], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Clean Water", "Sword"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Spear', 1))], [('db', 10)], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Hammer", player) and s.has_any(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 10), ('db', 20)], [], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Hammer", "Clean Water"), player) and has_enough_resources([('db', 20)], [], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEast", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1))], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 5)], [], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEast", player), lambda s: has_enough_resources([('db', 5)], [('energy', ('Blaze', 2))], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.PoolsPathOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 20)], [], "MarshPastOpher.PoolsPathOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: has_enough_resources([('db', 20)], [('energy', ('Sentry', 2))], "MarshPastOpher.PoolsPathOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: has_enough_resources([('db', 30)], [], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Sword", player) and has_enough_resources([('db', 20)], [], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Spear', 2))], [], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Double Jump", player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Spear', 1))], [], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Spear', 1))], [('db', 10), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 10), ('energy', ('Spear', 1))], [], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_any(("Double Jump", "Hammer", "Bash"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("MarshSpawn.BurrowsOpen", "Bash"), player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo -> MidnightBurrows.Central", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.Lever", player), lambda s: has_enough_resources([('db', 15)], [], "MidnightBurrows.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.Lever", player), lambda s: has_enough_resources([('energy', ('Shuriken', 1))], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "MidnightBurrows.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.DeflectorShard", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.DeflectorShard", player), lambda s: s.has_all(("Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.DeflectorShard", player), lambda s: s.has("MidnightBurrows.Lever", player) and has_enough_resources([('db', 15)], [], "MidnightBurrows.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.TabletRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword"), player) and has_enough_resources([('db', 15)], [], "MidnightBurrows.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central -> MidnightBurrows.TabletRoom", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "MidnightBurrows.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.LeverRoom", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("MidnightBurrows.Lever", "Double Jump"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("MidnightBurrows.Lever", "Double Jump"), player) and has_enough_resources([], [('db', 15)], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("MidnightBurrows.Lever", "Bash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.East", player), lambda s: s.has("MidnightBurrows.Lever", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.East", player), lambda s: s.has("MidnightBurrows.Lever", player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Spear', 1))], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.LowerKS", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has("Bash", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Sword"), player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 30)], [], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 60)], [], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom -> MidnightBurrows.PortalRoom", player), lambda s: has_enough_resources([('db', 75)], [], "MidnightBurrows.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor -> MidnightBurrows.BelowUpperKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.PurpleDoorOpen", player), lambda s: s.has("Glide", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1)), ('energy', ('Blaze', 1))], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and can_enter_area(MarshPastOpher, s, player, options), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.HollowDrainMiddle", player), lambda s: has_enough_resources([('db', 60)], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen -> WestHollow.UpperDrainLeverPulled", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1))], "WestHollow.MokiByTwillen", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.PurpleDoorOpen", player), lambda s: has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 10)], [], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.Entrance", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 3))], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.HollowDrainMiddle", player), lambda s: has_enough_resources([('db', 60)], [], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoorEnemyPaths -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Regenerate", player) and has_enough_resources([('db', 40)], [], "WestHollow.InFrontPurpleDoorEnemyPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoorEnemyPaths -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "Regenerate"), player) and has_enough_resources([('db', 20)], [], "WestHollow.InFrontPurpleDoorEnemyPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("Dash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Blaze', 4)), ('energy', ('Sentry', 2))], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Blaze', 4)), ('energy', ('Sentry', 2))], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.HollowDrainLower", player), lambda s: has_enough_resources([('db', 60)], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.HollowDrainLower", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has_any(("Launch", "Double Jump", "Dash", "Sword"), player) and has_enough_resources([('db', 40)], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("Water Dash", player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("Water Dash", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has_any(("Glide", "Hammer"), player) and has_enough_resources([('db', 60)], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: has_enough_resources([('db', 60)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("Bash", player) and s.has("Water Dash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 60)], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> E.WestHollow.RockPuzzle", player), lambda s: s.has_all(("Magnet", "WestHollow.FullyDrained"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Spear', 1)), ('energy', ('Bow', 1)), ('energy', ('Grenade', 1))], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> E.WestHollow.RockPuzzle", player), lambda s: s.has_all(("Magnet", "WestHollow.UpperDrainLeverPulled"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Spear', 1)), ('energy', ('Bow', 1)), ('energy', ('Grenade', 1))], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> E.WestHollow.RockPuzzle", player), lambda s: s.has_all(("Magnet", "Sword", "WestHollow.FullyDrained"), player) and s.has_any(("Hammer", "Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> E.WestHollow.RockPuzzle", player), lambda s: s.has_all(("Magnet", "Sword", "WestHollow.FullyDrained"), player) and has_enough_resources([], [('energy', ('Sentry', 2)), ('db', 20)], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> E.WestHollow.RockPuzzle", player), lambda s: s.has_all(("Magnet", "Sword", "WestHollow.UpperDrainLeverPulled"), player) and s.has_any(("Hammer", "Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> E.WestHollow.RockPuzzle", player), lambda s: s.has_all(("Magnet", "Sword", "WestHollow.UpperDrainLeverPulled"), player) and has_enough_resources([], [('energy', ('Sentry', 2)), ('db', 20)], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 2))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleSolved", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.UpperTongueExtended", player), lambda s: has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleEX", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and has_enough_resources([('db', 40)], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.RockPuzzleEX", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Water Dash"), player) and has_enough_resources([('db', 20)], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has("Launch", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.FullyDrained"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.FullyDrained"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.UpperDrainLeverPulled"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.UpperDrainLeverPulled"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Double Jump", "Sword"), player) and has_enough_resources([('db', 20)], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Double Jump"), player) and has_enough_resources([('db', 20), ('energy', ('Spear', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.UpperTongueRetracted", "Bash"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 90)], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 90)], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 90)], [('energy', ('Spear', 1))], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and has_enough_resources([('db', 20)], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1))], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.HollowDrainLower", player), lambda s: has_enough_resources([('db', 80)], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.HollowDrainLower", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.Entrance", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Bash"), player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and has_enough_resources([('energy', ('Bow', 2))], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Dash"), player) and s.has_any(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Dash"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('db', 10)], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Dash"), player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has_any(("Bash", "Launch", "Double Jump"), player) and has_enough_resources([('db', 50)], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Bash", "Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has_any(("Dash", "Double Jump", "Glide", "Hammer"), player) and has_enough_resources([('energy', ('Bow', 1)), ('db', 50)], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: has_enough_resources([('energy', ('Bow', 1)), ('db', 50)], [('energy', ('Shuriken', 3)), ('energy', ('Sentry', 3))], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Dash", "Double Jump", "Glide", "Hammer"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('energy', ('Bow', 1))], [('energy', ('Shuriken', 3)), ('energy', ('Sentry', 3))], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("Sword", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("Sword", player) and has_enough_resources([], [('db', 50)], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("Water Dash", player) and s.has_any(("Bash", "Launch", "Double Jump"), player) and has_enough_resources([('db', 30)], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("Water Dash", player) and s.has_any(("Dash", "Double Jump", "Glide", "Hammer"), player) and has_enough_resources([('db', 30), ('energy', ('Bow', 1))], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 30), ('energy', ('Bow', 1))], [('energy', ('Shuriken', 3)), ('energy', ('Sentry', 3))], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and has_enough_resources([('db', 30)], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.UpperTongueExtended", player), lambda s: has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.LowerTongueExtended", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Double Jump"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.UpperTongueExtended"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.UpperTongueExtended"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.LowerTongueRetracted", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.AboveJumppad", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.LowerTongueExtended"), player) and s.has_any(("Sword", "Hammer", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.LowerTongueExtended"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('db', 10)], "WestHollow.AboveJumppad", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.LowerTongueExtended", "Glide"), player) and has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.AboveJumppad", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Double Jump"), player) and s.has("Hammer", player) and has_enough_resources([('db', 10)], [], "WestHollow.AboveJumppad", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.QuickshotShard", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.SwimEC", player), lambda s: has_enough_resources([('db', 105)], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.SwimEC", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 70)], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.SwimEC", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 50)], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: s.has("Dash", player) and can_buy_map(s, player) and has_enough_resources([], [('energy', ('Spear', 1))], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: can_buy_map(s, player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Blaze', 3))], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_any(("HammerJump", "Launch"), player) and has_enough_resources([('db', 90)], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 90), ('energy', ('Bow', 1)), ('energy', ('Grenade', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Dash", player) and has_enough_resources([('db', 90), ('energy', ('Bow', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_any(("Blaze", "Glide"), player) and has_enough_resources([('db', 90), ('energy', ('Bow', 1)), ('energy', ('Shuriken', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: has_enough_resources([('db', 90), ('energy', ('Bow', 1)), ('energy', ('Shuriken', 1))], [('energy', ('Spear', 1))], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Triple Jump", "Glide"), player) and has_enough_resources([('db', 90)], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and s.has_any(("HammerJump", "Launch"), player) and has_enough_resources([('db', 40)], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([('db', 40), ('energy', ('Bow', 1)), ('energy', ('Grenade', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and s.has("Dash", player) and has_enough_resources([('db', 40), ('energy', ('Bow', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and s.has_any(("Blaze", "Glide"), player) and has_enough_resources([('db', 40), ('energy', ('Bow', 1)), ('energy', ('Shuriken', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40), ('energy', ('Bow', 1)), ('energy', ('Shuriken', 1))], [('energy', ('Spear', 1))], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Bash"), player) and s.has_any(("Triple Jump", "Glide"), player) and has_enough_resources([('db', 40)], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.RockPuzzle", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 90)], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.RockPuzzle", player), lambda s: s.has("Dash", player) and s.has("HammerJump", player) and has_enough_resources([('db', 90)], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.RockPuzzle", player), lambda s: s.has("Water Dash", player) and s.has_any(("HammerJump", "Launch"), player) and has_enough_resources([('db', 40)], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.RockPuzzle", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 60), ('energy', ('Bow', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "WestHollow.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1))], "WestHollow.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.TrialStart -> WestHollow.SpiritTrial", player), lambda s: s.has_all(("WestHollow.TrialActivation", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.BelowLupoEX", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.BelowLupoEX", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.BelowLupoEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has("Glide", player) and has_enough_resources([('db', 10)], [], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: has_enough_resources([('db', 10)], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: has_enough_resources([('db', 20)], [('energy', ('Spear', 2)), ('energy', ('Blaze', 2))], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has("Water Dash", player) and s.has("Bash", player) and has_enough_resources([('db', 10)], [], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.DoorLever", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.HollowDrainLower", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.HollowDrainLower", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.HollowDrainLower", player), lambda s: s.has("Double Jump", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.HollowDrainLower", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('db', 10), ('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestHollow.DashApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashArea -> WestHollow.DashCrushers", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashRightEX", player), lambda s: s.has_any(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashRightEX", player), lambda s: s.has("Glide", player) and has_enough_resources([('combat', 'WeakSlug'), ('energy', ('Sentry', 2))], [], "WestHollow.DashRoomTopRight", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashCrushers", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.AboveDashSemisolid", player), lambda s: s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.AboveDashSemisolid", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 2)), ('db', 10)], "WestHollow.DashRoomTopRight", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.AboveDashSemisolid -> WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("WestHollow.DoorLever", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.HornBeetleFightEX", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.HornBeetleFightEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Sentry', 3))], [], "EastHollow.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.HornBeetleFightEX", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Spear', 2))], [], "EastHollow.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.HornBeetleFightEX", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Double Jump"), player) and has_enough_resources([('energy', ('Sentry', 4))], [], "EastHollow.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.VoiceDoorPlatform", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.VoiceDoorPlatform", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Spear', 2))], [], "EastHollow.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.VoiceDoorPlatform", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Double Jump"), player) and has_enough_resources([('energy', ('Sentry', 3))], [], "EastHollow.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("BeetleFight -> EastHollow.BeetleDefeated", player), lambda s: has_enough_resources([('wall', ('Boss', 250))], [], "BeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.HornBeetleFightEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Sentry', 2))], [], "EastHollow.VoiceDoorPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.HornBeetleFightEX", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Double Jump"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "EastHollow.VoiceDoorPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.HornBeetleFightEX", player), lambda s: s.has_all(("EastHollow.BeetleDefeated", "Double Jump"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "EastHollow.VoiceDoorPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.AfterBeetleFight", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.GladesApproachOre", player), lambda s: s.has_all(("Deflector", "Hammer"), player) and s.has_any(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastHollow.MapMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.MapMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and has_enough_resources([('db', 10)], [], "EastHollow.MapMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 20)], [], "EastHollow.MapMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has_all(("Hammer", "Dash"), player) and has_enough_resources([('db', 10)], [], "EastHollow.MapMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.OutsideGlades -> GladesTown.GromsWall", player), lambda s: s.has("Deflector", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SpikeLanternEX", player), lambda s: s.has_all(("Grapple", "Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SpikeLanternEX", player), lambda s: s.has("Double Jump", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SpikeLanternEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SecretRoofEX", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('Shuriken', 2))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SecretRoofEX", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.MortarEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.MortarEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Kwolok", player), lambda s: s.has_all(("Grapple", "Dash"), player) and has_enough_resources([('db', 10)], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Kwolok", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and has_enough_resources([('energy', ('Shuriken', 3))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Kwolok", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.DepthsLever", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.DepthsLever", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashEC", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashEC", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashEC", player), lambda s: s.has("Sword", player) and s.has("Dash", player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "EastHollow.AboveBash", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashEC", player), lambda s: s.has("Sword", player) and has_enough_resources([('energy', ('Shuriken', 1))], [('energy', ('Shuriken', 1))], "EastHollow.AboveBash", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.AfterBeetleFight", player), lambda s: s.has("Sword", player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "EastHollow.AboveBash", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.BashEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.AboveBash", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.AboveBash", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword", "Deflector"), player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.AboveBash", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash", "Sword"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "EastHollow.BashTreeCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.SilentSwimWall", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 120), ('db', 120)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.SilentSwimWall", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 50), ('db', 80)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.RightKwolokEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.RightKwolokEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.SilentSwimEC", player), lambda s: s.has("Clean Water", player) and s.has("Double Jump", player) and has_enough_resources([('db', 10)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.SilentSwimEC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Hammer"), player) and has_enough_resources([('db', 10)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.SilentSwimEC", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and has_enough_resources([('db', 20)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimOre", player), lambda s: has_enough_resources([('db', 120)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimOre", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 60)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimOre", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 100)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimOre", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([('db', 40)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimLeftEX", player), lambda s: s.has("Double Jump", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimLeftEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('db', 220)], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimLeftEX", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 200)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimLeftEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 100)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimLeftEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('db', 200)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimLeftEX", player), lambda s: s.has_all(("Bash", "Launch"), player) and has_enough_resources([('db', 180)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimLeftEX", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([('db', 80)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimRightEX", player), lambda s: has_enough_resources([('db', 120)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimRightEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 60)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimRightEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 80)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.KwolokSwimRightEX", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([('db', 40)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.SecretRoofEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.AfterBeetleFight", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 2)), ('db', 10)], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Grapple"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('energy', ('Sentry', 3))], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Grapple"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('energy', ('Shuriken', 2))], [('combat', 'Balloon'), ('db', 20)], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Grapple", "Double Jump"), player) and can_enter_area(WoodsEntry, s, player, options), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Double Jump", "Triple Jump"), player) and can_enter_area(WoodsEntry, s, player, options), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Water Dash", "Dash"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 10)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water", "Water Dash", "Sword"), player) and can_enter_area(WoodsEntry, s, player, options), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Launch"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 210)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Sword"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 210)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Grapple"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 210)], [('energy', ('Sentry', 3))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Grapple", "Hammer"), player) and s.has("Glide", player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 210)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Grapple", "Hammer"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 210)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Grapple", "Glide"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 210)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Grapple"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 210), ('energy', ('Shuriken', 2))], [('combat', 'Balloon'), ('db', 20)], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Double Jump", "Triple Jump"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 210)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Water Dash"), player) and s.has_any(("Launch", "Double Jump"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 50), ('db', 100)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Water Dash", "Grapple"), player) and s.has_any(("Dash", "Sword"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 50), ('db', 100)], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Water Dash", "Grapple"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 50), ('db', 100)], [('energy', ('Sentry', 3))], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.BashHC", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.DepthsExteriorEX", player), lambda s: s.has_all(("Glide", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths -> EastHollow.DepthsExteriorEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastHollow.AboveDepths", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.ArcingShard", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoSwimMiddleEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoSwimMiddleEX", player), lambda s: has_enough_resources([], [('db', 60)], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoSwimMiddleEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoSwimLeftEX", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Bash"), player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoSwimLeftEX", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 100)], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoSwimLeftEX", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Double Jump"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoSwimLeftEX", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Double Jump"), player) and has_enough_resources([], [('db', 100)], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoSwimLeftEX", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Water Dash"), player) and has_enough_resources([('db', 40)], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.UpperWest", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.UpperWest", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.BelowBountyShard", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.AboveOpher", player), lambda s: s.has("Sword", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.AboveOpher", player), lambda s: s.has_all(("Dash", "Burrow"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoHouse", player), lambda s: has_enough_resources([('db', 160)], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoHouse", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 80)], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.LowerOre", player), lambda s: has_enough_resources([('energy', ('Spear', 1))], [], "GladesTown.TwillenHome", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.West", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.Teleporter", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.Teleporter", player), lambda s: has_enough_resources([], [('db', 10)], "GladesTown.TwillenHome", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Bash"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "TuleyShop.Lightcatchers", "Bash"), player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Bash", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Bash"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.SpringPlants", "Hammer", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Sword"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Hammer", "Glide"), player) and has_enough_resources([], [('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has("Bash", player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug'), ('db', 10)], [('db', 10), ('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug')], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has_all(("Dash", "Hammer"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has_any(("Bash", "Sword"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('db', 10)], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('db', 10)], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperWest", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.BlueMoon", "Grapple", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.BlueMoon", "Grapple", "Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.MotayHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.BlueMoon", "Grapple", "Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.MotayHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperWest", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.Lightcatchers", "Bash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.UpperLeftEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.AboveGromHC", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.AboveGromHC", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.UpperWest", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.AboveGromHC", player), lambda s: s.has("Sword", player) and has_enough_resources([], [('energy', ('Grenade', 1)), ('energy', ('Shuriken', 2))], "GladesTown.UpperWest", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.InsideThirdHut -> GladesTown.BraveMokiHutEX", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("GladesTown.InsideThirdHut -> GladesTown.BraveMokiHutEX", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1))], "GladesTown.InsideThirdHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.AboveCaveEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki -> GladesTown.Teleporter", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has("Flash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has("Flash", player) and has_enough_resources([], [('db', 36)], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Bow', 2))], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Bow', 2)), ('energy', ('Grenade', 1))], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Bow', 2))], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has_any(("Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Bow', 2))], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and has_enough_resources([('energy', ('Bow', 2))], [('db', 10)], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 2))], [('db', 10)], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 10)], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.BountyShard", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.BelowBountyShard", player), lambda s: s.has_all(("TuleyShop.Lightcatchers", "Bash"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.AboveOpher", player), lambda s: has_enough_resources([('energy', ('Blaze', 1))], [], "GladesTown.LeftAboveCoals", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> GladesTown.PlayfulMoki", player), lambda s: s.has("TuleyShop.SpringPlants", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "GladesTown.AboveOpher", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and has_enough_resources([('energy', ('Spear', 2))], [], "GladesTown.AboveOpher", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki -> GladesTown.HoleHut", player), lambda s: s.has_any(("Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki -> GladesTown.HoleHut", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "GladesTown.PlayfulMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.LupoHouse -> GladesTown.LupoSwimMiddleEX", player), lambda s: has_enough_resources([('db', 100)], [], "GladesTown.LupoHouse", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.LupoHouse -> GladesTown.LupoSwimMiddleEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "GladesTown.LupoHouse", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.LupoHouse -> GladesTown.Teleporter", player), lambda s: has_enough_resources([('db', 180)], [], "GladesTown.LupoHouse", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.LupoHouse -> GladesTown.Teleporter", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 60)], [], "GladesTown.LupoHouse", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("TuleyShop.BlueMoon", "Grapple"), player) and can_enter_area(LowerReach, s, player, options) and has_enough_resources([('energy', ('Blaze', 1))], [], "GladesTown.HoleHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("TuleyShop.SpringPlants", "Hammer"), player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple"), player) and s.has_any(("Sword", "Hammer", "Flash"), player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grapple"), player) and can_enter_area(LowerReach, s, player, options) and has_enough_resources([], [('energy', ('Blaze', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1))], "GladesTown.HoleHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.GromsWall", player), lambda s: s.has_all(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has("Bash", player) and s.has_any(("Clean Water", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('db', 40)], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has("Bash", player) and s.has_any(("Water Dash", "Glide"), player) and has_enough_resources([('db', 20)], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Bow', 1))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'Tentacle'), ('energy', ('Spear', 2))], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPoolEX", player), lambda s: has_enough_resources([('db', 40)], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPoolEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.LowerPool", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.Center", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.Center", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([], [('combat', 'Tentacle')], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and can_enter_area(GladesTown, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: s.has("Glide", player) and can_enter_area(GladesTown, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: s.has_all(("Sword", "Dash"), player) and can_enter_area(GladesTown, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player) and can_enter_area(GladesTown, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: s.has_all(("Hammer", "Glide"), player) and can_enter_area(GladesTown, s, player, options) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1)), ('db', 20)], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('db', 10), ('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2))], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 10), ('db', 10)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 10), ('db', 10)], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 20), ('db', 10)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LowerPoolEX", player), lambda s: has_enough_resources([('db', 60)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LowerPoolEX", player), lambda s: has_enough_resources([('db', 20), ('db', 30)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LowerPoolEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch", "Bash", "Sword", "Hammer"), player) and has_enough_resources([('db', 30)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LowerPoolEX", player), lambda s: has_enough_resources([('db', 30)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LowerPoolEX", player), lambda s: s.has("Water Dash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch", "Bash", "Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LowerPoolEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LowerPoolEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20), ('db', 10)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.Center", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.Center", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Grapple", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.Center", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump", "Glide"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.Center", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.LeftOre", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and has_enough_resources([('energy', ('Spear', 2)), ('db', 10)], [], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.RightOre", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and has_enough_resources([('db', 10)], [], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.RightOre", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 10)], [], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.UpperPoolEX", player), lambda s: has_enough_resources([('db', 90)], [], "WestGlades.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.UpperPoolEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "WestGlades.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.RightOre", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.RightOre", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "WestGlades.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.RightOre", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.SwimOre", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.SwimOre", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Bash", "Grapple"), player) and can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: can_enter_area(OuterWellspring, s, player, options) and has_enough_resources([('energy', ('Sentry', 5))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Glide", player) and can_enter_area(OuterWellspring, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("Hammer", "Double Jump"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Grapple", "Sword"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Sword"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Sword"), player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and has_enough_resources([('energy', ('Shuriken', 2))], [], "WestGlades.ShrineArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has_all(("Grapple", "Hammer", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has_all(("Hammer", "Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesShrine -> WestGlades.CombatShrineCompleted", player), lambda s: has_enough_resources([('combat', 'Crab'), ('combat', 'Crab'), ('combat', 'Bee'), ('combat', 'Hornbug'), ('combat', 'Tentacle'), ('combat', 'Tentacle'), ('combat', 'SpinCrab'), ('combat', 'SpinCrab'), ('combat', 'Bee'), ('combat', 'Bee'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Tentacle'), ('combat', 'SpinCrab')], [], "GladesShrine", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> E.OuterWellspring.EntranceDoor", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.FallingWheel", player), lambda s: s.has("Bow", player) and has_enough_resources([('wall', ('BreakWall', 16))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.EntranceRoofEX", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.BasementEC", player), lambda s: has_enough_resources([('db', 10)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.SwimEX", player), lambda s: has_enough_resources([('db', 80)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.SwimEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.SwimEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 60)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.SwimEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 40)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 5))], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('Shuriken', 2))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('db', 15)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: has_enough_resources([('db', 95)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.Basement", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 75)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("OuterWellspring.FallingWheel", player) and has_enough_resources([('db', 15)], [('energy', ('Shuriken', 5)), ('energy', ('Sentry', 5))], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("OuterWellspring.FallingWheel", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("OuterWellspring.FallingWheel", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Blaze', 2))], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("OuterWellspring.FallingWheel", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Blaze', 2))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("OuterWellspring.FallingWheel", "Dash", "Hammer"), player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has("Double Jump", player) and s.has_any(("Bash", "OuterWellspring.FallingWheel"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> WestGlades.MillApproach", player), lambda s: s.has("Bash", player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has_all(("OuterWellspring.LifeHarvestWallBroken", "Bash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Sword", player) and has_enough_resources([('energy', ('Shuriken', 2))], [], "OuterWellspring.LifeHarvestEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.BasementEC", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 20)], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.BasementEC", player), lambda s: s.has_all(("Dash", "Grapple"), player) and has_enough_resources([('db', 20)], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.BasementEC", player), lambda s: s.has_all(("Dash", "Grapple", "Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1))], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and has_enough_resources([], [('combat', 'WeakSlug')], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Bash"), player) and has_enough_resources([('db', 15)], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Water Dash"), player) and has_enough_resources([('db', 15), ('db', 20)], [('combat', 'WeakSlug'), ('db', 5)], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Water Dash", "Clean Water"), player) and has_enough_resources([('db', 15)], [('combat', 'WeakSlug'), ('db', 5)], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Water Dash"), player) and has_enough_resources([('energy', ('Blaze', 2)), ('db', 20)], [('combat', 'WeakSlug'), ('db', 5)], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("OuterWellspring.EntranceDoorOpen", "Water Dash", "Clean Water"), player) and has_enough_resources([('energy', ('Blaze', 2))], [('combat', 'WeakSlug'), ('db', 5)], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.EntranceRoofEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.EastDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('Shuriken', 2))], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.WestDoor", player), lambda s: s.has("Double Jump", player) and s.has_any(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Dash", "Hammer"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Sword", player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has("Bow", player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and has_enough_resources([('wall', ('BreakWall', 3))], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "OuterWellspring.WestDoorBlueMoonFree"), player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "OuterWellspring.WestDoorBlueMoonFree"), player) and has_enough_resources([('db', 15)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 15)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has_any(("Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Sentry', 2))], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.EastDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has("Dash", player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('wall', ('BreakWall', 20))], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1))], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallEC", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('Grenade', 1)), ('db', 15)], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("InnerWellspring.TopDoorOpen", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 25)], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("InnerWellspring.TopDoorOpen", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 15)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.AboveWestDoor", player), lambda s: s.has("Grapple", player) and has_enough_resources([('db', 15)], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.WestDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 15), ('energy', ('Shuriken', 1))], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Sentry', 2)), ('db', 10)], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.RightWallMidpoint", player), lambda s: has_enough_resources([('db', 15)], [], "OuterWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has("Grapple", player) and has_enough_resources([('db', 15)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.TopDoor", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor -> OuterWellspring.EastDoor", player), lambda s: has_enough_resources([], [('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "OuterWellspring.AboveWestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and has_enough_resources([('db', 15)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "OuterWellspring.TopDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Sword"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "OuterWellspring.TopDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and has_enough_resources([('energy', ('Shuriken', 2))], [], "OuterWellspring.TopDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint -> OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2)), ('db', 15), ('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], [], "OuterWellspring.RightWallMidpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEX", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEC", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.RightWallEC", player), lambda s: has_enough_resources([('wall', ('BreakWall', 20))], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "OuterWellspring.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.EastDoor", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach -> OuterWellspring.AboveEntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom -> OuterWellspring.TrialStart", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom -> OuterWellspring.TrialStart", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2))], "OuterWellspring.TrialRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> OuterWellspring.SpiritTrial", player), lambda s: s.has_all(("OuterWellspring.TrialActivation", "Double Jump", "Glide"), player) and has_enough_resources([('db', 60)], [], "OuterWellspring.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> OuterWellspring.TrialRoom", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart -> OuterWellspring.TrialRoom", player), lambda s: has_enough_resources([], [('db', 30)], "OuterWellspring.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.WaterDashSwitch", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThreeWheelsEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.WaterSwitchEX", player), lambda s: s.has("InnerWellspring.WaterDashSwitch", player) and has_enough_resources([('db', 60)], [], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThornShardArea", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.ThreeWheels", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ShortcutLever", player), lambda s: s.has_all(("InnerWellspring.ThreeWheels", "Double Jump"), player) and has_enough_resources([('db', 30)], [], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ShortcutLever", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 45)], [], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ShortcutLever", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and has_enough_resources([('db', 45)], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ShortcutLever", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and has_enough_resources([('db', 60)], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "InnerWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has_all(("Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has("Dash", player) and s.has("Glide", player) and has_enough_resources([('db', 15)], [], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: s.has("Dash", player) and has_enough_resources([('db', 15)], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2))], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ShortcutLever", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 30)], [], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ShortcutLever", player), lambda s: s.has_any(("Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 45)], [], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ShortcutLever", player), lambda s: has_enough_resources([('db', 45)], [('energy', ('Shuriken', 3)), ('energy', ('Flash', 3)), ('energy', ('Sentry', 3))], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ShortcutLever", player), lambda s: has_enough_resources([('db', 60), ('energy', ('Spear', 3))], [], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and has_enough_resources([], [('energy', ('Sentry', 2)), ('energy', ('Shuriken', 2))], "InnerWellspring.ShortcutLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever -> InnerWellspring.ThornShardArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Sword", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("Dash", "Hammer"), player) and has_enough_resources([('energy', ('Shuriken', 2))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("Dash", "Sword"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Grenade', 3)), ('wall', ('BreakWall', 10))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 3)), ('wall', ('BreakWall', 10))], [('db', 20)], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Grenade', 2)), ('db', 15), ('wall', ('BreakWall', 10))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2)), ('db', 15), ('wall', ('BreakWall', 10))], [('db', 20)], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and has_enough_resources([], [('energy', ('Shuriken', 3)), ('energy', ('Blaze', 5)), ('energy', ('Flash', 3)), ('energy', ('Sentry', 3))], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("InnerWellspring.DrainRoomBottomWheel", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainLever", player) and has_enough_resources([], [('energy', ('Shuriken', 3))], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainHC", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has("Dash", player) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug')], [], "InnerWellspring.DrainAreaEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Shuriken', 1))], [], "InnerWellspring.DrainAreaEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainHC", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 15)], [], "InnerWellspring.DrainAreaEX", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainHC", player), lambda s: has_enough_resources([('db', 15)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.DrainAreaEX", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainHC", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX -> InnerWellspring.DrainAreaExit", player), lambda s: has_enough_resources([('wall', ('BreakWall', 10))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.DrainAreaEX", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Blaze', 3)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has("Grapple", player) and has_enough_resources([('db', 15)], [], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainLever", player) and has_enough_resources([('db', 15)], [('energy', ('Blaze', 2))], "InnerWellspring.DrainAreaExit", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit -> InnerWellspring.DrainRoom", player), lambda s: s.has_all(("InnerWellspring.DrainRoomBottomWheel", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoom", player), lambda s: has_enough_resources([('db', 20)], [], "InnerWellspring.DrainRoomCenter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter -> InnerWellspring.DrainRoomTop", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.DrainRoomCenter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.LaserOre", player), lambda s: s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.LaserOre", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 3)), ('energy', ('Sentry', 2)), ('db', 15)], "InnerWellspring.DrainRoomTop", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.LaserOre", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainRoomTop", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop -> InnerWellspring.BelowDrainLever", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.DrainRoomTop", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.AbovePole", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.WestDoor", player), lambda s: has_enough_resources([('energy', ('Grenade', 2))], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.WestDoor", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 30)], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.MiddleDoorsOpen", player), lambda s: s.has_all(("Hammer", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('Sentry', 2))], [], "InnerWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.GrappleTreeEX", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "InnerWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor -> InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("InnerWellspring.TopDoorOpen", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "InnerWellspring.EastDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('db', 15)], "InnerWellspring.SpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.PastSpinPuzzle", player), lambda s: s.has_all(("InnerWellspring.SpinPuzzleSolved", "Dash"), player) and has_enough_resources([('db', 15)], [], "InnerWellspring.SpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.PastSpinPuzzle", player), lambda s: s.has_all(("InnerWellspring.SpinPuzzleSolved", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.PastSpinPuzzle", player), lambda s: s.has_all(("InnerWellspring.SpinPuzzleSolved", "Double Jump"), player) and has_enough_resources([], [('db', 15)], "InnerWellspring.SpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.EastDoor", player), lambda s: s.has("InnerWellspring.SpinningRoomOpen", player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('db', 15)], "InnerWellspring.PastSpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_any(("Double Jump", "Grapple", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 2))], "InnerWellspring.PastSpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Sword", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "InnerWellspring.PastSpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.SpinPuzzle", player), lambda s: s.has_any(("InnerWellspring.SpinPuzzleSolved", "Clean Water"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.TopSecondRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes -> InnerWellspring.PastSpinPuzzle", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom -> InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.BlueMoonSeed", player), lambda s: s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.AboveTpEX", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.AboveTpEX", player), lambda s: s.has_all(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.AboveTpEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Shuriken', 2))], [], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.SwimOre", player), lambda s: has_enough_resources([('db', 80)], [], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.SwimOre", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Water Dash"), player) and has_enough_resources([('db', 80)], [], "InnerWellspring.EscapeSequence", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Water Dash"), player) and has_enough_resources([('db', 40), ('energy', ('Sentry', 2))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1))], "InnerWellspring.EscapeSequence", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Water Dash"), player) and has_enough_resources([('db', 20), ('energy', ('Sentry', 2))], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2))], "InnerWellspring.EscapeSequence", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash"), player) and has_enough_resources([('energy', ('Sentry', 4))], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2))], "InnerWellspring.EscapeSequence", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> EastHollow.SilentSwimWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> EastHollow.SilentSwimWall", player), lambda s: s.has_all(("Clean Water", "Sword", "Deflector"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> EastHollow.SilentSwimWall", player), lambda s: has_enough_resources([('db', 90), ('energy', ('Spear', 1))], [], "WoodsEntry.ShriekMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> EastHollow.SilentSwimWall", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 50), ('energy', ('Spear', 1))], [], "WoodsEntry.ShriekMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> EastHollow.SilentSwimWall", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 160)], [], "WoodsEntry.ShriekMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> EastHollow.SilentSwimWall", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and has_enough_resources([('db', 140)], [], "WoodsEntry.ShriekMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> EastHollow.SilentSwimWall", player), lambda s: s.has_all(("Sword", "Deflector"), player) and has_enough_resources([('db', 160)], [], "WoodsEntry.ShriekMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> EastHollow.SilentSwimWall", player), lambda s: s.has_all(("Water Dash", "Sword", "Deflector"), player) and has_enough_resources([('db', 140)], [], "WoodsEntry.ShriekMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> EastHollow.Kwolok", player), lambda s: s.has("EastHollow.SilentSwimWall", player) and can_enter_area(EastHollow, s, player, options) and has_enough_resources([('db', 240), ('db', 120)], [], "WoodsEntry.ShriekMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> EastHollow.Kwolok", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Water Dash"), player) and can_enter_area(EastHollow, s, player, options) and has_enough_resources([('db', 100), ('db', 60)], [], "WoodsEntry.ShriekMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> EastHollow.Kwolok", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Bash"), player) and can_enter_area(EastHollow, s, player, options) and has_enough_resources([('db', 210), ('db', 120)], [], "WoodsEntry.ShriekMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.BelowTeleporter", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud -> WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsEntry.FamilyHut -> WoodsEntry.Teleporter", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WoodsEntry.FamilyHut -> WoodsEntry.Teleporter", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1))], "WoodsEntry.FamilyHut", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.FirstMud", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.Teleporter", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter -> WoodsEntry.TwoKeystoneRoom", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 2)), ('energy', ('Blaze', 2))], "WoodsEntry.BelowTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter -> WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> WoodsEntry.UpperKS", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom -> WoodsEntry.BelowTeleporter", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "WoodsEntry.TwoKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.LowerKS", player), lambda s: s.has_all(("Sword", "Deflector", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.LowerKS", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has_all(("Hammer", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('combat', 'Tentacle')], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "WoodsMain.AfterKuMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("WoodsMain.KSRoomYellowBarrierBroken", "Sword", "Deflector", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet -> WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("WoodsMain.KSRoomYellowBarrierBroken", "Double Jump", "Bash"), player) and has_enough_resources([('db', 15)], [], "WoodsMain.AfterKuMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 15)], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Tentacle'), ('energy', ('Spear', 1))], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'Tentacle'), ('energy', ('Shuriken', 2))], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge -> WoodsMain.FourKeystoneRoom", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.WallOreLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.RightKS", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.UpperKS", player), lambda s: s.has("Hammer", player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LeftKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LowerKS", player), lambda s: s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Sentry', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LowerKS", player), lambda s: s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and has_enough_resources([('db', 15)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.LowerKS", player), lambda s: s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('db', 15)], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: has_enough_resources([], [('energy', ('Grenade', 1)), ('energy', ('Bow', 1))], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Glide", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Glide", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "WoodsMain.GiantSkull", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BalloonLure", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull -> WoodsMain.BalloonLure", player), lambda s: has_enough_resources([('combat', 'Tentacle'), ('db', 15)], [], "WoodsMain.GiantSkull", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Triple Jump"), player) and has_enough_resources([('combat', 'Balloon')], [], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.has_all(("WoodsMain.BalloonLureBlobDestroyed", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.has_all(("WoodsMain.BalloonLureBlobDestroyed", "Double Jump", "Dash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("WoodsMain.BalloonLureBlobDestroyed", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("WoodsMain.BalloonLureBlobDestroyed", "Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("WoodsMain.BalloonLureBlobDestroyed", "Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("WoodsMain.BalloonLureBlobDestroyed", "Dash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("WoodsMain.BalloonLureBlobDestroyed", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 3))], [], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.BalloonLureBlobDestroyed", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 1))], "WoodsMain.BelowHiddenOre", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.HiddenOre", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.PetrifiedHowl", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 30)], [], "WoodsMain.BelowHiddenOre", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.PetrifiedHowl", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 15)], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "WoodsMain.BelowHiddenOre", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.BalloonLure", player), lambda s: s.has("WoodsMain.BalloonLureBlobDestroyed", player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.AboveHowl", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.AboveHowl", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl -> WoodsMain.BelowHiddenOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl -> WoodsMain.AboveHowl", player), lambda s: s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl -> WoodsMain.AboveHowl", player), lambda s: has_enough_resources([], [('db', 15)], "WoodsMain.BrokenOwl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl -> WoodsMain.TrialStart", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart -> C.WoodsMain.TrialStart", player), lambda s: s.has("WoodsMain.TrialActivation", player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart -> WoodsMain.MidwayTrial", player), lambda s: s.has_all(("Hammer", "Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart -> WoodsMain.MidwayTrial", player), lambda s: s.has_all(("Sword", "Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart -> WoodsMain.AboveHowl", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('Shuriken', 3))], [], "WoodsMain.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.TrialEnd", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 30)], [], "WoodsMain.MidwayTrial", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial -> WoodsMain.BeforeLog", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 15)], [], "WoodsMain.MidwayTrial", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.OrangeTree", player), lambda s: s.has("Burrow", player) and has_enough_resources([('energy', ('Shuriken', 4))], [], "WoodsMain.TrialEnd", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd -> WoodsMain.OrangeTree", player), lambda s: s.has_all(("Burrow", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.BeforeLog", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.BeforeLog", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "WoodsMain.AboveHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog -> WoodsMain.LogBlobDestroyed", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog -> WoodsMain.OrangeTree", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.BeforeLog", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.LogBlobDestroyed", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and has_enough_resources([('db', 20)], [], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.AbovePit", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 45)], [], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.AbovePit", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Bash"), player) and has_enough_resources([('db', 15)], [], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.AbovePit", player), lambda s: s.has("Double Jump", player) and s.has("Dash", player) and has_enough_resources([('db', 45)], [], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.AbovePit", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 45)], [('energy', ('Shuriken', 2))], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.AbovePit", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Bash"), player) and has_enough_resources([('db', 15)], [], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.BeforeLog", player), lambda s: s.has_all(("WoodsMain.LogBlobDestroyed", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree -> WoodsMain.AbovePit", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.OrangeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> E.WoodsMain.AbovePit", player), lambda s: s.has_all(("BreakCrystal", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsMain.OrangeTree", player), lambda s: has_enough_resources([('db', 30)], [], "WoodsMain.AbovePit", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit -> WoodsShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> WoodsShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([('db', 30)], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("Glide", "Double Jump", "Hammer"), player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([('energy', ('Shuriken', 1))], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("Bash", "Double Jump", "Hammer"), player) and can_enter_area(LowerWastes, s, player, options) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Shuriken', 1))], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> WoodsMain.AbovePit", player), lambda s: s.has_all(("Dash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> WoodsMain.AbovePit", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WoodsMain.FeedingGrounds", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> WoodsMain.AbovePit", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WoodsShrine -> WoodsMain.CombatShrineCompleted", player), lambda s: has_enough_resources([('combat', 'Hornbug'), ('combat', 'Lizard'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'Skeeto'), ('combat', 'CrystalMiner'), ('combat', 'CrystalMiner'), ('combat', 'Bat'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Balloon'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Mantis'), ('combat', 'Bat')], [], "WoodsShrine", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.BelowBaurEX", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken", "Double Jump", "Triple Jump"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.BelowBaurEX", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "LowerReach.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.BelowBaurEX", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken", "Double Jump", "Dash"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.BelowBaurEX", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken", "Double Jump", "Dash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "LowerReach.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Sentry', 3)), ('db', 20)], [], "LowerReach.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.Icefall", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has("LowerReach.ThawBaurFurnace", player) and s.has_any(("Hammer", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has("LowerReach.ThawBaurFurnace", player) and has_enough_resources([], [('energy', ('Sentry', 2))], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has("Bash", player) and s.has("Glide", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 2))], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 20)], [], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has_any(("Hammer", "Sword"), player) and has_enough_resources([('db', 20)], [], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Sentry', 2)), ('db', 20)], [], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Double Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 2))], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Dash", "Sword"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Dash", "Sword"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurUpperEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurUpperEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurUpperEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurUpperEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Dash", "Sword"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurUpperEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Dash", "Sword"), player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Icefall", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Bash"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Hammer"), player) and has_enough_resources([('db', 20)], [], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Glide"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Glide"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1))], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("LowerReach.Lever", "Dash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2)), ('db', 20)], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.LeftFurnace", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.LeftFurnace", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Spear', 1))], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Dash"), player) and has_enough_resources([('combat', 'Nest')], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 40)], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump"), player) and s.has("Clean Water", player) and has_enough_resources([('combat', 'Nest')], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'Nest')], [('db', 20)], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Grapple"), player) and s.has_any(("Dash", "Glide", "Sword"), player) and has_enough_resources([('db', 20)], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Grapple"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Grapple"), player) and s.has_any(("Dash", "Glide", "Sword"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Grapple"), player) and has_enough_resources([('energy', ('Spear', 1))], [('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Grapple"), player) and has_enough_resources([('energy', ('Spear', 3))], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Grapple", "Glide"), player) and has_enough_resources([], [('energy', ('Blaze', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Grapple", "Dash"), player) and has_enough_resources([], [('energy', ('Blaze', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Sword"), player) and s.has_any(("Clean Water", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Sword"), player) and has_enough_resources([], [('db', 20)], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Clean Water", "Water Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Clean Water", "Water Dash"), player) and has_enough_resources([], [('db', 20)], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Water Dash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Water Dash"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('db', 20)], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Clean Water", "Water Dash"), player) and has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 1))], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump"), player) and s.has("Hammer", player) and has_enough_resources([('db', 20)], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1))], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.AboveEntry", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Sword", "Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths -> LowerReach.Entry", player), lambda s: s.has_all(("LowerReach.Lever", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has_all(("Sword", "Hammer"), player) and has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Blaze', 1)), ('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Sword", "Dash"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.AboveDoorEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Sword", "Hammer"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.LupoMap", player), lambda s: s.has_all(("Dash", "Sword"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.LupoMap", player), lambda s: can_buy_map(s, player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and has_enough_resources([('energy', ('Shuriken', 1))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: s.has_all(("LowerReach.Lever", "Double Jump", "Sword"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: s.has("Hammer", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: has_enough_resources([('energy', ('Grenade', 2))], [('energy', ('Spear', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Dash", "Glide"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.TPLeftEX", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "LowerReach.Lever", "Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Grenade', 2))], [('energy', ('Spear', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.Entry", player), lambda s: s.has_all(("LowerReach.Lever", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.Entry", player), lambda s: s.has_all(("LowerReach.Lever", "Glide"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.TPLeftEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.TPLeftEX", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 2))], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword"), player) and has_enough_resources([('db', 20)], [], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.BelowTokk", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 40)], [], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.BelowTokk", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.KeystoneRoom", player), lambda s: s.has_all(("LowerReach.ThawCentralFurnace", "Dash"), player) and can_enter_area(UpperReach, s, player, options) and has_enough_resources([('combat', 'Mantis')], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "LowerReach.BelowTokk", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has("Hammer", player) and can_enter_area(UpperReach, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and can_enter_area(UpperReach, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1))], "LowerReach.BelowTokk", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and can_enter_area(UpperReach, s, player, options) and has_enough_resources([('db', 20)], [], "LowerReach.BelowTokk", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk -> UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "LowerReach.ThawCentralFurnace", "Dash"), player) and can_enter_area(UpperReach, s, player, options) and has_enough_resources([('combat', 'Mantis'), ('energy', ('Spear', 1))], [], "LowerReach.BelowTokk", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.ThawCentralFurnace", player), lambda s: s.has_all(("Flap", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.WindLantern", player), lambda s: s.has_all(("Flap", "Bash"), player) and s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.BelowLupoEX", player), lambda s: s.has_all(("Flap", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.BelowLupoEX", player), lambda s: s.has_all(("Flap", "Bash"), player) and has_enough_resources([], [('db', 20)], "LowerReach.SecondSoup", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Burrow", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has("Burrow", player) and has_enough_resources([('energy', ('Sentry', 4))], [], "LowerReach.SecondSoup", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "LowerReach.SecondSoup", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.CentralEnemyPaths", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup -> LowerReach.BelowLupo", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.BelowLupoEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.BelowLupo", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal -> LowerReach.WindChannel", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindBottomEX", player), lambda s: s.has("LowerReach.WindLantern", player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer", "Bash"), player) and has_enough_resources([('db', 20)], [], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.SoupMoki", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.SoupMoki", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer", "Bash"), player) and has_enough_resources([('db', 40)], [], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindHiddenEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindHiddenEX", player), lambda s: has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1))], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindHiddenEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.WindChannel", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Hammer"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1))], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.East -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.PastSnowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerReach.PastSnowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("LowerReach.RolledSnowball", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("LowerReach.RolledSnowball", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 20)], [], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has("Dash", player) and s.has("LowerReach.ThawEastFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.HalfwayIceCavern", player), lambda s: s.has("Dash", player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "LowerReach.IceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.EastDoorLantern", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.IceCavern", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.IceCavern", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2)), ('energy', ('Shuriken', 1))], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.EastFurnace", player), lambda s: s.has_all(("LowerReach.ThawEastFurnace", "Bash"), player) and has_enough_resources([('db', 100)], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.HalfwayIceCavern", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.HalfwayIceCavern", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("LowerReach.ThawEastFurnace", "Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.ArenaBeaten", player), lambda s: has_enough_resources([('combat', 'ShieldMiner'), ('combat', 'ShieldMiner'), ('combat', 'ShieldMiner'), ('combat', 'Hornbug'), ('combat', 'Bee'), ('combat', 'Bee')], [], "LowerReach.ArenaArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.SwimmingPool", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Sword"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.SwimmingPool", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Double Jump", "Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 1)), ('energy', ('Flash', 1))], "LowerReach.WindSpinners", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 20)], [], "LowerReach.WindSpinners", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.WindSpinners", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> H.LowerReach.WispPathCheckpoint", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> H.LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> E.LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> E.LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.WispPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 20)], [], "LowerReach.WispPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.WindSpinners", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.SnowEscape", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Grapple", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.SnowEscape", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.BridgeWispPath", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.SnowEscape", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Shuriken', 2))], [], "LowerReach.BridgeWispPath", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.SnowEscape", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('Sentry', 2))], [], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has_all(("Dash", "Glide"), player) and has_enough_resources([('db', 20)], [], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('Sentry', 2))], [], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has_all(("Dash", "Glide"), player) and has_enough_resources([('db', 20)], [], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.CatalystShard", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40), ('energy', ('Grenade', 1))], [], "LowerReach.VeralHome", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.CatalystShard", player), lambda s: s.has_all(("Water Dash", "Bash", "Flap"), player) and has_enough_resources([('db', 40)], [], "LowerReach.VeralHome", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.TownEntry", player), lambda s: s.has_all(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.TownEntry", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.TrialStart", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump", "Dash"), player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.TownEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.TrialStart", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 20)], "LowerReach.TownEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.TrialStart", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Spear', 1)), ('db', 20)], [], "LowerReach.TownEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.TrialStart", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 40)], [], "LowerReach.TownEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.TrialStart", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has("Hammer", player) and has_enough_resources([('db', 80)], [], "LowerReach.TownEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.TrialStart", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 80)], [('energy', ('Spear', 1))], "LowerReach.TownEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.TrialStart", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and s.has("Hammer", player) and has_enough_resources([('db', 60)], [], "LowerReach.TownEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.TrialStart", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([('db', 60)], [('energy', ('Spear', 1))], "LowerReach.TownEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.TrialStart", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Dash", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry -> LowerReach.TrialStart", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 20)], [], "LowerReach.TownEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.SpiritTrial", player), lambda s: s.has_all(("LowerReach.TrialActivation", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.RightKS", player), lambda s: s.has_all(("Dash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.RightKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.UpperLeftKS", player), lambda s: s.has_all(("Launch", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 20)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.UpperLeftKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'BombSlug'), ('db', 60)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.MiddleLeftKS", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 20)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.MiddleLeftKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 40)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.BottomLeftKS", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.BottomLeftKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.BottomLeftKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TrialEX", player), lambda s: s.has_all(("Launch", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TownEntry", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 20)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TownEntry", player), lambda s: has_enough_resources([('db', 10), ('db', 40)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 10)], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.ArenaBeaten", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Bash"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Sentry', 2)), ('energy', ('Flash', 2))], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Sword"), player) and has_enough_resources([], [('energy', ('Sentry', 2)), ('energy', ('Flash', 2))], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and has_enough_resources([('db', 20)], [], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1))], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Sword"), player) and has_enough_resources([('db', 20)], [], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Bash"), player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Blaze', 2)), ('energy', ('Sentry', 2)), ('energy', ('Flash', 2))], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Sword"), player) and has_enough_resources([], [('energy', ('Sentry', 2)), ('energy', ('Flash', 2))], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and has_enough_resources([('db', 20)], [], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1))], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Sword"), player) and has_enough_resources([('db', 20)], [], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.ThawFurnace", player), lambda s: s.has_all(("Flap", "Bash"), player) and has_enough_resources([], [('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.LowerKS", player), lambda s: s.has("UpperReach.ThawFurnace", player) and has_enough_resources([('energy', ('Spear', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.LowerKS", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Dash"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1))], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.SwimEX", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Water Dash"), player) and has_enough_resources([('db', 20)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.SwimEX", player), lambda s: s.has("UpperReach.ThawFurnace", player) and has_enough_resources([('db', 60)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: s.has_all(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoupFrozen", player), lambda s: s.has("UpperReach.FreezeFurnace", player) and has_enough_resources([], [('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Water Dash", "Sword"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Water Dash", "Sword"), player) and has_enough_resources([], [('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Water Dash", "Hammer"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Water Dash", "Hammer"), player) and has_enough_resources([], [('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Water Dash", "Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Water Dash", "Dash"), player) and has_enough_resources([], [('db', 20)], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has("UpperReach.ThawFurnace", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer", "Glide", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.OutsideTreeRoom", player), lambda s: s.has("UpperReach.ThawFurnace", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Spear', 1))], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Sword"), player) and has_enough_resources([('db', 20)], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.UpperSoup", player), lambda s: has_enough_resources([('db', 40)], [], "UpperReach.KeystoneSnapPlant", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.UpperSoup", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant -> UpperReach.UpperSoup", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed -> UpperReach.UpperSoupThawed", player), lambda s: has_enough_resources([('db', 40)], [], "UpperReach.KeystoneSnapPlantThawed", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths -> UpperReach.LowerKS", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths -> UpperReach.LowerKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.LowerKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.LowerKS", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Sentry', 1))], "UpperReach.UpperSoupPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.LowerKS", player), lambda s: s.has("Sword", player) and has_enough_resources([('db', 20), ('db', 20)], [], "UpperReach.UpperSoupPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.SwingPoleEX", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.SwingPoleEX", player), lambda s: has_enough_resources([('db', 20)], [], "UpperReach.UpperSoupPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.KeystoneSnapPlant", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.KeystoneSnapPlant", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 20)], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1))], "UpperReach.UpperSoupPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.KeystoneSnapPlant", player), lambda s: s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Glide"), player) and has_enough_resources([('db', 20), ('energy', ('Grenade', 1))], [], "UpperReach.UpperSoupPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozenPaths -> UpperReach.SwingPoleEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozenPaths -> UpperReach.UpperSoupThawedPaths", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.UpperSoupFrozenPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozenPaths -> UpperReach.UpperSoupThawedPaths", player), lambda s: s.has_all(("Flap", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths -> UpperReach.LowerKS", player), lambda s: has_enough_resources([('db', 20)], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2))], "UpperReach.UpperSoupThawedPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths -> UpperReach.MiddleRightKS", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths -> UpperReach.MiddleRightKS", player), lambda s: has_enough_resources([('db', 20)], [], "UpperReach.UpperSoupThawedPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom -> UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("UpperReach.ThawFurnace", "Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge -> UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperReach.TreeRoomLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge -> UpperReach.TreeOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom -> C.UpperReach.TreeRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> UpperDepths.EntrySpikesEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> EastHollow.AboveDepths", player), lambda s: s.has_all(("EastHollow.DepthsOpen", "Launch"), player) and can_enter_area(EastHollow, s, player, options), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> EastHollow.AboveDepths", player), lambda s: s.has_all(("EastHollow.DepthsOpen", "Bash", "Double Jump", "Triple Jump"), player) and can_enter_area(EastHollow, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperDepths.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> EastHollow.AboveDepths", player), lambda s: s.has_all(("EastHollow.DepthsOpen", "Bash", "Double Jump"), player) and can_enter_area(EastHollow, s, player, options) and has_enough_resources([('energy', ('Grenade', 2))], [], "UpperDepths.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryRoofEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryOre", player), lambda s: s.has_all(("Hammer", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryOre", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "UpperDepths.FirstFirefly", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryOre", player), lambda s: s.has_all(("Double Jump", "Shuriken", "Sword", "Deflector"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.LeftEntryKS", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.LeftEntryKS", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and has_enough_resources([('db', 30)], [], "UpperDepths.FirstFirefly", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> C.UpperDepths.FirstKSRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom -> E.UpperDepths.FirstKSRoom", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.FirstKSRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.RightKeystonePath", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 3))], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.BelowHive", player), lambda s: s.has_all(("UpperDepths.EntryKeystoneDoor", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge -> UpperDepths.BelowHive", player), lambda s: s.has("UpperDepths.EntryKeystoneDoor", player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player) and has_enough_resources([('db', 10)], [], "UpperDepths.KeydoorLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath -> UpperDepths.RightEntryKS", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([('energy', ('Flash', 2))], [], "UpperDepths.RightKeystonePath", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Central -> E.UpperDepths.Central", player), lambda s: s.has_all(("BreakCrystal", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.BossPathEX", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.MoraPath", player), lambda s: s.has("DepthsLight", player) and has_enough_resources([('db', 60)], [('energy', ('Sentry', 3)), ('energy', ('Shuriken', 3))], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> UpperDepths.MoraPath", player), lambda s: has_enough_resources([('db', 60), ('energy', ('Flash', 3))], [], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight -> UpperDepths.Teleporter", player), lambda s: s.has("Glide", player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "UpperDepths.OutsideMoraFight", s, player, options, False), "or")
    add_rule(world.get_entrance("MoraFirstPhase -> MoraEscape", player), lambda s: has_enough_resources([('wall', ('Boss', 165))], [], "MoraFirstPhase", s, player, options, False), "or")
    add_rule(world.get_entrance("MoraEscape -> MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("MoraEscape -> MoraSecondPhase", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MoraSecondPhase -> UpperDepths.ForestsEyes", player), lambda s: has_enough_resources([('wall', ('Boss', 165))], [], "MoraSecondPhase", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.LeftEX", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 3)), ('energy', ('Spear', 4))], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> UpperDepths.BelowHive", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('db', 10)], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.West", player), lambda s: can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('energy', ('Shuriken', 3))], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Sword"), player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Spear', 2))], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has("DepthsLight", player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('db', 30)], [('energy', ('Sentry', 2)), ('energy', ('Spear', 3))], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has("DepthsLight", player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('db', 60)], [('energy', ('Sentry', 1)), ('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 2))], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection -> LowerDepths.Central", player), lambda s: s.has("DepthsLight", player) and can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('db', 90)], [], "UpperDepths.LowerConnection", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Shuriken', 2))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: s.has_all(("Sword", "Clean Water"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: s.has("Sword", player) and has_enough_resources([('db', 140), ('db', 20)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has("BreakCrystal", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Shuriken', 2))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has_all(("BreakCrystal", "Sword", "Clean Water"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has_all(("BreakCrystal", "Sword"), player) and has_enough_resources([('db', 140), ('db', 20)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.SwimEC", player), lambda s: s.has("Water Dash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.SwimEC", player), lambda s: s.has("Water Dash", player) and has_enough_resources([], [('db', 120)], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.LeftEX", player), lambda s: s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Dash", "Flash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Dash", "UpperDepths.ForestsEyes"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Bash", "Clean Water", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Dash"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('db', 20)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('db', 10)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and s.has_any(("Sword", "Dash"), player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.West -> UpperDepths.LowerConnection", player), lambda s: s.has("Launch", player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and has_enough_resources([], [('wall', ('BreakWall', 1))], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("DepthsShrine -> LowerDepths.CombatShrineCompleted", player), lambda s: has_enough_resources([('combat', 'Bat'), ('combat', 'Bat'), ('combat', 'Bat'), ('combat', 'SneezeSlug'), ('combat', 'SneezeSlug'), ('combat', 'Tentacle'), ('combat', 'Tentacle'), ('combat', 'Bat'), ('combat', 'Bat'), ('combat', 'Tentacle'), ('combat', 'Tentacle'), ('combat', 'Bat'), ('combat', 'SneezeSlug')], [], "DepthsShrine", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2))], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Bow', 1))], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.SpiritTrial", player), lambda s: s.has_all(("LowerDepths.TrialActivation", "Dash", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.SpiritTrial", player), lambda s: s.has_all(("LowerDepths.TrialActivation", "Double Jump", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.SpiritTrial", player), lambda s: s.has_all(("LowerDepths.TrialActivation", "Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Flash', 1))], [], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 3)), ('db', 30)], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Spear', 1))], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Hammer", "Sword"), player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Dash", "Glide"), player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.East -> E.LowerDepths.East", player), lambda s: s.has_all(("BreakCrystal", "Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> E.LowerDepths.East", player), lambda s: s.has_all(("BreakCrystal", "Grapple", "UltraGrapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> E.LowerDepths.East", player), lambda s: s.has_all(("BreakCrystal", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Flash', 2))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Grapple", player) and has_enough_resources([('db', 30), ('db', 30)], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Sentry', 2))], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Shuriken', 4)), ('energy', ('Flash', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: can_buy_map(s, player) and has_enough_resources([('energy', ('Flash', 1)), ('db', 30)], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has("DepthsLight", player) and can_buy_map(s, player) and has_enough_resources([('energy', ('Shuriken', 3))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has("DepthsLight", player) and can_buy_map(s, player) and has_enough_resources([('db', 30), ('db', 30)], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has("DepthsLight", player) and can_buy_map(s, player) and has_enough_resources([('db', 30)], [('energy', ('Blaze', 1)), ('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Shuriken', 1))], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has("DepthsLight", player) and can_buy_map(s, player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Double Jump", "Glide"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Bash", "Grapple"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "Grapple", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('db', 20)], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.Central", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.Central", player), lambda s: s.has_all(("DepthsLight", "Double Jump"), player) and has_enough_resources([('db', 60)], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TrialActivation", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has_any(("Sword", "Double Jump", "Bash"), player) and has_enough_resources([('db', 10)], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Hammer", player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has_all(("DepthsLight", "Hammer"), player) and has_enough_resources([('db', 10)], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2))], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: has_enough_resources([('energy', ('Flash', 2)), ('db', 30)], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has("Launch", player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("Hammer", player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [('energy', ('Sentry', 5))], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has("Dash", player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [('energy', ('Shuriken', 3))], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1)), ('db', 30)], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has("Bash", player) and has_enough_resources([('wall', ('BreakWall', 1)), ('db', 30), ('db', 30)], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea -> LowerDepths.BeforeTree", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and s.has("Glide", player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([], [('db', 45)], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Triple Jump"), player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Hammer"), player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('db', 15)], [], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: s.has_any(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2)), ('db', 20)], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_any(("Bash", "Water Dash"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.UnderwaterWallBroken", player), lambda s: has_enough_resources([('db', 100)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathECWall", player), lambda s: has_enough_resources([('db', 20)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEX", player), lambda s: s.has("Sword", player) and has_enough_resources([], [('db', 5), ('combat', 'CorruptSlug')], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEX", player), lambda s: s.has("Dash", player) and has_enough_resources([('combat', 'SpinCrab'), ('combat', 'CorruptSlug')], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEX", player), lambda s: s.has_all(("Dash", "Grapple"), player) and has_enough_resources([('combat', 'CorruptSlug')], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEC", player), lambda s: s.has("PoolsApproach.MillPathECWall", player) and has_enough_resources([('db', 40)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEC", player), lambda s: s.has_all(("PoolsApproach.MillPathECWall", "Water Dash"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and has_enough_resources([('combat', 'Crab'), ('combat', 'SmallSkeeto'), ('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and has_enough_resources([('combat', 'CorruptSlug')], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("PoolsApproach.UnderwaterWallBroken", player) and has_enough_resources([('db', 240)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Bash"), player) and has_enough_resources([('db', 200)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Launch"), player) and has_enough_resources([('db', 120)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Double Jump", "Hammer"), player) and s.has_any(("Grapple", "Glide"), player) and has_enough_resources([('db', 120)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Double Jump", "Hammer"), player) and s.has_any(("Dash", "Triple Jump"), player) and has_enough_resources([('db', 140)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Launch"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Grapple"), player) and has_enough_resources([('db', 60), ('energy', ('Sentry', 3))], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Grapple", "Sword"), player) and has_enough_resources([('db', 60)], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Grapple"), player) and has_enough_resources([('db', 80), ('energy', ('Blaze', 3))], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash"), player) and s.has("Sword", player) and has_enough_resources([('db', 100)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash"), player) and has_enough_resources([('db', 100)], [('energy', ('Blaze', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash", "Hammer"), player) and has_enough_resources([('db', 100)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Bash", "Grapple", "Double Jump"), player) and has_enough_resources([('db', 200)], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Spear', 1))], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('energy', ('Spear', 1)), ('db', 20)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Double Jump", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Spear', 1)), ('db', 20)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_any(("Double Jump", "Dash", "Hammer"), player) and has_enough_resources([('energy', ('Spear', 1)), ('db', 40)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Sword", player) and has_enough_resources([('energy', ('Spear', 1)), ('db', 60)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: has_enough_resources([('energy', ('Spear', 1)), ('db', 80)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Grapple", "Hammer"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Launch", "Sword"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Grapple", "Sword", "Double Jump"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Launch"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('db', 20), ('db', 100)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 20), ('db', 80)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has("Water Dash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has("Water Dash", player) and has_enough_resources([], [('db', 40)], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('db', 100)], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has_any(("Triple Jump", "Sticky"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.MillPathHC", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 80)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Bash", "Dash"), player) and s.has_any(("Double Jump", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('Grenade', 1))], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Bash", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('Grenade', 1))], [('db', 20)], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and has_enough_resources([('db', 40)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Sword"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('db', 100)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and has_enough_resources([('db', 140)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and has_enough_resources([('db', 160)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 180)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> C.PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> C.PoolsApproach.OnTopOfWheel", player), lambda s: has_enough_resources([], [('db', 20)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.WheelWall", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and has_enough_resources([('db', 140)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.WheelWall", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 200)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.WheelFreed", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Grenade', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.WheelFreed", player), lambda s: s.has_all(("PoolsApproach.WheelWall", "Water Dash"), player) and has_enough_resources([('db', 120)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 140)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.UnderwaterWallBroken", player), lambda s: has_enough_resources([('db', 120), ('energy', ('Spear', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Flap", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Flap", player) and has_enough_resources([], [('db', 180)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Flap", "Water Dash"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathECWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathECWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathECWall", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Bash"), player) and has_enough_resources([('db', 160)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Spear', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshPathCurrentEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathEC", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "PoolsApproach.MillPathECWall", "Clean Water"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathEC", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "PoolsApproach.MillPathECWall", "Bash"), player) and has_enough_resources([('db', 180)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathEC", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "PoolsApproach.MillPathECWall", "Water Dash"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and has_enough_resources([('db', 60)], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 3))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Bash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Hammer", "Sword"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and has_enough_resources([('db', 60), ('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Hammer"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Hammer"), player) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Sword", "Glide"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple"), player) and has_enough_resources([('energy', ('Flash', 2)), ('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Dash"), player) and has_enough_resources([('db', 40)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Sword"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Hammer"), player) and has_enough_resources([('db', 40)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has_any(("Water Dash", "Bash"), player) and has_enough_resources([('db', 20)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Grapple", "Water Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Grapple", "Bash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and has_enough_resources([('db', 60)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 60)], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and has_enough_resources([('db', 60), ('energy', ('Shuriken', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('db', 80)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and has_enough_resources([('db', 80)], [('energy', ('Shuriken', 2)), ('energy', ('Blaze', 4)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and has_enough_resources([('db', 100)], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and has_enough_resources([('db', 100)], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Sword"), player) and has_enough_resources([('db', 160)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple"), player) and has_enough_resources([('db', 180)], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 160)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has("Launch", player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Dash", "Hammer"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has("Water Dash", player) and s.has("Clean Water", player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has("Water Dash", player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([], [('db', 20)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Bash", "Dash", "PoolsApproach.WheelFreed"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 2)), ('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Grenade', 1))], [('energy', ('Spear', 2)), ('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Bash", "Dash", "PoolsApproach.WheelFreed"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20), ('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Water Dash"), player) and has_enough_resources([('db', 100)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPath", player), lambda s: s.has_all(("PoolsApproach.UnderwaterWallBroken", "Clean Water", "Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> MarshSpawn.PoolsPath", player), lambda s: s.has("Water Dash", player) and can_enter_area(MarshSpawn, s, player, options) and has_enough_resources([('db', 180)], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.EntryLever", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.BelowEntryLeverBubble", player), lambda s: s.has_all(("Sword", "Flap"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.WheelWall", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and has_enough_resources([('db', 140)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.WheelWall", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 200)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.WheelFreed", player), lambda s: s.has_all(("PoolsApproach.WheelWall", "Water Dash"), player) and has_enough_resources([('db', 120)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.WheelFreed", player), lambda s: has_enough_resources([('db', 60), ('energy', ('Spear', 1))], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.WheelFreed", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40), ('energy', ('Spear', 1))], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.TwoCrushersEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.TwoCrushersEX", player), lambda s: has_enough_resources([], [('db', 100)], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.TwoCrushersEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.RightOre", player), lambda s: s.has_all(("Grapple", "Flap"), player) and s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.RightOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.BelowLeverEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'CorruptSlug')], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.MarshPathCurrentEX", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.MarshPathCurrentEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 140)], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('db', 240)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water Dash", player) and can_enter_area(PoolsApproach, s, player, options) and has_enough_resources([('db', 100)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Launch", player) and can_enter_area(PoolsApproach, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> MarshSpawn.PoolsPath", player), lambda s: s.has("Water Dash", player) and can_enter_area(MarshSpawn, s, player, options) and has_enough_resources([('db', 160)], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.AboveDoorOre", player), lambda s: s.has_all(("Sword", "Bash"), player) and s.has_any(("Hammer", "Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.AboveDoorOre", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor -> EastPools.LeverRoom", player), lambda s: s.has("EastPools.EntryLever", player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubbleFree", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 60)], [], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubbleFree", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('combat', 'Crab'), ('db', 40)], [], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubbleFree", player), lambda s: s.has_all(("EastPools.TokkBubblePurpleWall", "Water Dash"), player) and has_enough_resources([('db', 20)], [], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubbleFree", player), lambda s: s.has("EastPools.TokkBubblePurpleWall", player) and has_enough_resources([], [('energy', ('Bow', 1)), ('energy', ('Grenade', 1))], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubblePurpleWall", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubblePurpleWall", player), lambda s: has_enough_resources([('combat', 'Crab'), ('db', 100)], [], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.TokkBubblePurpleWall", player), lambda s: has_enough_resources([('db', 90)], [], "EastPools.TokkBubble", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.LowerWaterDrained", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.TokkBubble -> EastPools.Teleporter", player), lambda s: s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.AboveDoorOre", player), lambda s: s.has_all(("Sword", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.FishingPool", player), lambda s: s.has("Grapple", player) and has_enough_resources([('db', 40)], [], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.FishingPool", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.ArenaWall", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Clean Water"), player) and s.has_any(("Launch", "Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.ArenaWall", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Clean Water"), player) and has_enough_resources([], [('db', 14)], "EastPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.ArenaWall", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Bash"), player) and has_enough_resources([('db', 180)], [], "EastPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.ArenaWall", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.UltraBashShard", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "EastPools.UltraBashWall", "Water Dash"), player) and has_enough_resources([('db', 60)], [], "EastPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.UltraBashShard", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "EastPools.UltraBashWall", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 140)], [], "EastPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.WaterdashArena", player), lambda s: s.has_all(("EastPools.ArenaWall", "EastPools.LowerWaterDrained"), player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter -> EastPools.NextToLupoOre", player), lambda s: s.has("EastPools.LowerWaterDrained", player) and has_enough_resources([('db', 80)], [], "EastPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.FishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and has_enough_resources([], [('db', 20)], "EastPools.FishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> EastPools.AboveTpEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 60)], [], "EastPools.AboveFishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> EastPools.PurpleWallHC", player), lambda s: s.has("Bash", player) and s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> EastPools.PurpleWallHC", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Grenade', 1))], "EastPools.AboveFishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> EastPools.PurpleWallHC", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "EastPools.AboveFishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Double Jump", "Triple Jump"), player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('db', 20)], [], "EastPools.AboveFishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.UltraBashWall", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Water Dash"), player) and has_enough_resources([('db', 180)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.UltraBashWall", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Bash", "Water Dash"), player) and has_enough_resources([('db', 140)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.UltraBashWall", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Bash"), player) and has_enough_resources([('db', 200)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.UltraBashShard", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "EastPools.UltraBashWall", "Water Dash"), player) and has_enough_resources([('db', 80)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.Teleporter", player), lambda s: s.has("EastPools.LowerWaterDrained", player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 60)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.Teleporter", player), lambda s: s.has("EastPools.LowerWaterDrained", player) and has_enough_resources([('db', 60)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.Teleporter", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "EastPools.ArenaWall", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 60)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.TPArea", player), lambda s: s.has_any(("Launch", "Grapple", "Glide", "Double Jump", "Dash", "Sword", "Hammer"), player) and has_enough_resources([('db', 120)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.TPArea", player), lambda s: has_enough_resources([('db', 120)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and has_enough_resources([('db', 100)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.WaterdashArena", player), lambda s: s.has_all(("EastPools.ArenaWall", "Water Dash"), player) and has_enough_resources([('db', 40)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre -> EastPools.WaterdashArena", player), lambda s: s.has_all(("EastPools.ArenaWall", "EastPools.LowerWaterDrained"), player) and has_enough_resources([('db', 80)], [], "EastPools.NextToLupoOre", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.LupoPurpleFloor", player), lambda s: s.has_all(("EastPools.LowerWaterDrained", "Clean Water", "Bash", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "EastPools.LupoArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.BehindCrusherEX", player), lambda s: s.has("EastPools.LupoPurpleFloor", player) and has_enough_resources([('db', 80)], [], "EastPools.LupoArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.BehindCrusherEX", player), lambda s: s.has_all(("EastPools.LupoPurpleFloor", "Water Dash"), player) and has_enough_resources([('db', 40)], [], "EastPools.LupoArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.LupoPurpleFloor", player) and has_enough_resources([('db', 180)], [], "EastPools.LupoArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.CentralRoom", player), lambda s: s.has_all(("EastPools.LupoPurpleFloor", "EastPools.CentralRoomPurpleWall"), player) and has_enough_resources([('db', 240)], [], "EastPools.LupoArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LupoArea -> EastPools.CentralRoom", player), lambda s: s.has_all(("EastPools.LupoPurpleFloor", "EastPools.CentralRoomPurpleWall", "Water Dash"), player) and has_enough_resources([('db', 80)], [], "EastPools.LupoArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.FightArenas", player), lambda s: s.has("Clean Water", player) and s.has_any(("Launch", "Dash"), player) and has_enough_resources([('combat', 'Crab'), ('combat', 'Crab'), ('combat', 'Crab'), ('combat', 'Crab'), ('combat', 'Tentacle'), ('combat', 'Skeeto'), ('combat', 'Skeeto')], [], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.FightArenas", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('combat', 'Crab'), ('combat', 'Crab'), ('combat', 'Crab'), ('combat', 'Crab'), ('combat', 'Tentacle'), ('combat', 'Skeeto'), ('combat', 'Skeeto')], [('db', 20)], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.FightRoomHC", player), lambda s: s.has_all(("EastPools.FightArenas", "Water Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.FightRoomHC", player), lambda s: s.has_all(("EastPools.FightArenas", "Water Dash"), player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.NextToLupoOre", player), lambda s: s.has("EastPools.ArenaWall", player) and has_enough_resources([('db', 100)], [], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.NextToLupoOre", player), lambda s: s.has_all(("EastPools.ArenaWall", "Water Dash"), player) and has_enough_resources([('db', 40)], [], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.NextToLupoOre", player), lambda s: s.has_all(("EastPools.ArenaWall", "EastPools.LowerWaterDrained"), player) and has_enough_resources([('db', 80)], [], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.MissilePuzzle", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.MissilePuzzle", player), lambda s: has_enough_resources([('db', 40)], [], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.MissilePuzzle", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "EastPools.WaterdashArena", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena -> EastPools.MissilePuzzle", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.CentralRoomPurpleWall", player), lambda s: has_enough_resources([('db', 240)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.CentralRoomPurpleWall", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 200)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.CentralRoomPurpleWall", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and has_enough_resources([('db', 100)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.LupoPurpleFloor", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 220)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.LupoPurpleFloor", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and has_enough_resources([('db', 160)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and has_enough_resources([], [('db', 20)], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.EnergyHarvestShard", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.EnergyHarvestShard", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('db', 220)], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.BehindCrusherEX", player), lambda s: has_enough_resources([('db', 140)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.BehindCrusherEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 80)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.SpiritTrial", player), lambda s: s.has_all(("UpperPools.TrialActivation", "EastPools.CentralRoomPurpleWall", "Clean Water", "Grapple", "Water Dash", "Glide"), player) and s.has_any(("Bash", "Launch", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.SpiritTrial", player), lambda s: s.has_all(("UpperPools.TrialActivation", "EastPools.CentralRoomPurpleWall", "Clean Water", "Grapple", "Water Dash", "Glide"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.SpiritTrial", player), lambda s: s.has_all(("UpperPools.TrialActivation", "EastPools.CentralRoomPurpleWall", "Clean Water", "Grapple", "Water Dash", "Dash"), player) and s.has_any(("Bash", "Launch", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.SpiritTrial", player), lambda s: s.has_all(("UpperPools.TrialActivation", "EastPools.CentralRoomPurpleWall", "Clean Water", "Grapple", "Water Dash", "Dash"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.CentralRoom", player), lambda s: s.has("EastPools.CentralRoomPurpleWall", player) and has_enough_resources([('db', 160)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.CentralRoom", player), lambda s: s.has_all(("EastPools.CentralRoomPurpleWall", "Water Dash"), player) and has_enough_resources([('db', 60)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.WaterdashArena", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.WaterdashArena", player), lambda s: has_enough_resources([], [('db', 60)], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.WaterdashArena", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle -> EastPools.LupoArea", player), lambda s: s.has("EastPools.LupoPurpleFloor", player) and has_enough_resources([('db', 80)], [], "EastPools.MissilePuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.CentralRoomPurpleWall", player), lambda s: has_enough_resources([('db', 40)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.CentralRoomPurpleWall", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.CentralRoomBubbleFree", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 80)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.CentralRoomBubbleFree", player), lambda s: s.has_all(("Clean Water", "Deflector", "Sword"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.CentralRoomBubbleFree", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('energy', ('Bow', 1))], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.CentralRoomBubbleFree", player), lambda s: s.has_all(("Clean Water", "Fracture"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has("EastPools.CentralRoomBubbleFree", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has_all(("Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("EastPools.CentralRoomBubbleFree", "Bash", "Double Jump"), player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('energy', ('Blaze', 1))], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("EastPools.CentralRoomBubbleFree", "Bash"), player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('energy', ('Grenade', 1))], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> WestPools.Teleporter", player), lambda s: s.has("Water Dash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch", "Sword", "Hammer"), player) and can_enter_area(WestPools, s, player, options) and has_enough_resources([('db', 120)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> WestPools.Teleporter", player), lambda s: s.has("Water Dash", player) and can_enter_area(WestPools, s, player, options) and has_enough_resources([('db', 120)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> WestPools.Teleporter", player), lambda s: s.has("Water Dash", player) and can_enter_area(WestPools, s, player, options) and has_enough_resources([('db', 140)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Launch"), player) and can_enter_area(WestPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Double Jump", "Triple Jump"), player) and can_enter_area(WestPools, s, player, options) and has_enough_resources([('db', 20)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.CentralRoomPurpleWall", player) and has_enough_resources([('db', 160)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.MissilePuzzle", player), lambda s: s.has_all(("EastPools.CentralRoomPurpleWall", "Water Dash"), player) and has_enough_resources([('db', 60)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.LupoArea", player), lambda s: s.has_all(("EastPools.CentralRoomPurpleWall", "EastPools.LupoPurpleFloor"), player) and has_enough_resources([('db', 180)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.LowerKS", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 20)], [], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.LowerKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 120)], [], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.LowerKS", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.LowerKS", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 100)], [], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 140)], [], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and can_enter_area(WestPools, s, player, options), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Triple Jump"), player) and can_enter_area(WestPools, s, player, options) and has_enough_resources([('db', 20)], [], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.UpperLeftKS", player), lambda s: s.has("UpperPools.KeystoneRoomBubbleFree", player) and has_enough_resources([('db', 20)], [], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.LowerKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 120)], [], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.LowerKS", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.LowerKS", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 100)], [], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 140)], [], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("UpperPools.KeystoneRoomBubbleFree", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("UpperPools.KeystoneRoomBubbleFree", "Flap", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("UpperPools.KeystoneRoomBubbleFree", "Flap", "Grapple"), player) and has_enough_resources([], [('energy', ('Shuriken', 3))], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("UpperPools.KeystoneRoomBubbleFree", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and has_enough_resources([], [('db', 20)], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperMidKS", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperMidKS", player), lambda s: s.has_all(("Water Dash", "Clean Water"), player) and has_enough_resources([('db', 20)], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has("Grapple", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.UpperRightKS", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Water Dash", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Water Dash", "Clean Water"), player) and s.has_any(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Water Dash", "Clean Water"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Dash", "Hammer", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.TrialActivation", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.UpperMidKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.UpperLeftKS", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.UpperLeftKS", player), lambda s: s.has("Double Jump", player) and has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Grapple", "UltraGrapple"), player) and s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Grapple", "UltraGrapple"), player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1))], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> UpperPools.TreeRoomLeftBubbleFree", player), lambda s: has_enough_resources([], [('energy', ('Bow', 1)), ('energy', ('Grenade', 1)), ('energy', ('Spear', 1))], "UpperPools.TreeRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> UpperPools.RoofEX", player), lambda s: s.has_all(("UpperPools.TreeRoomLeftBubbleFree", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> UpperPools.AboveTree", player), lambda s: s.has_all(("UpperPools.TreeRoomLeftBubbleFree", "Flap"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance -> UpperPools.AboveTree", player), lambda s: s.has_all(("UpperPools.TreeRoomLeftBubbleFree", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomLeftBubbleFree", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1))], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomLeftBubbleFree", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomRightBubbleFree", player), lambda s: has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 1))], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomRightBubbleFree", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.ButtonDoorAboveTree", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.SwimDashCurrentEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.TreeRoomEntrance", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.ButtonDoorAboveTree", "Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Sentry', 1))], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree -> UpperPools.RoofEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and has_enough_resources([('combat', 'CorruptSlug')], [], "UpperPools.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Launch", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 40)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Sword"), player) and has_enough_resources([('db', 20)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Hammer"), player) and has_enough_resources([('db', 100)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and has_enough_resources([('db', 100)], [('energy', ('Spear', 1)), ('energy', ('Sentry', 1))], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Launch", "Dash"), player) and has_enough_resources([('db', 100)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 120)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and has_enough_resources([('db', 60)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 60)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and has_enough_resources([('db', 60)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 100)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: s.has_all(("Grapple", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: s.has_all(("Grapple", "Dash"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Grapple", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Grapple", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 80)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2)), ('db', 20)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has("UpperPools.DrainRoomPurpleWall", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Hammer"), player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('energy', ('Spear', 1))], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "UpperPools.UpperWaterDrained", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "UpperPools.DrainRoomPurpleWall", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainRoomPurpleWall", player), lambda s: s.has_all(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Water Dash", "Bash", "Clean Water"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Water Dash", "Bash", "Clean Water"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 1))], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Water Dash", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 60)], [], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Water Dash", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 60)], [('energy', ('Spear', 1))], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> EastPools.PurpleWallHC", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Clean Water"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Bash", "Launch", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> EastPools.PurpleWallHC", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Clean Water"), player) and has_enough_resources([], [('energy', ('Shuriken', 2))], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> EastPools.PurpleWallHC", player), lambda s: s.has("UpperPools.UpperWaterDrained", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> EastPools.PurpleWallHC", player), lambda s: s.has("UpperPools.UpperWaterDrained", player) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 2))], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit -> EastPools.PurpleWallHC", player), lambda s: s.has_all(("UpperPools.UpperWaterDrained", "Bash"), player) and has_enough_resources([('db', 20), ('db', 20)], [], "UpperPools.DrainPuzzleExit", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamLever", player), lambda s: s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamLever", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 2)), ('energy', ('Shuriken', 1))], "UpperPools.RightBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamLever", player), lambda s: s.has_all(("Grapple", "UltraGrapple"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: has_enough_resources([], [('energy', ('Grenade', 1)), ('energy', ('Bow', 2))], "UpperPools.RightBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40)], [], "UpperPools.RightBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.RightBubblesEX", player), lambda s: s.has("UpperPools.BubbleSpamWall", player) and has_enough_resources([('db', 60)], [], "UpperPools.RightBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.RightBubblesEX", player), lambda s: s.has_all(("UpperPools.BubbleSpamWall", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 40)], [], "UpperPools.RightBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 160)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer", "Triple Jump"), player) and has_enough_resources([('db', 160)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 160)], [('energy', ('Spear', 1))], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 100)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has("Bash", player) and s.has("Launch", player) and has_enough_resources([('db', 60)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has("Bash", player) and has_enough_resources([('db', 60)], [('energy', ('Grenade', 1))], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Sword", "Hammer", "Triple Jump"), player) and has_enough_resources([('db', 60)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('db', 60)], [('energy', ('Spear', 1))], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.LeftBubblesEX", player), lambda s: has_enough_resources([('db', 60)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.LeftBubblesEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 40)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('db', 100)], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and has_enough_resources([], [('db', 100)], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and has_enough_resources([], [('energy', ('Spear', 1))], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 60)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 60)], [('energy', ('Spear', 1))], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 40)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and has_enough_resources([('db', 40)], [('energy', ('Spear', 1))], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.TpEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.TpEX", player), lambda s: s.has_all(("Water Dash", "Dash", "Hammer"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.TpEX", player), lambda s: s.has_all(("Water Dash", "Dash", "Hammer"), player) and has_enough_resources([], [('db', 20)], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.TpEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.TpEX", player), lambda s: has_enough_resources([], [('energy', ('Sentry', 2)), ('energy', ('Blaze', 2))], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.BurrowEX", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 40)], [], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.BurrowOre", player), lambda s: s.has_all(("WestPools.ForestsStrength", "Clean Water", "Burrow"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.BurrowOre", player), lambda s: s.has_all(("WestPools.ForestsStrength", "Water Dash", "Burrow"), player) and has_enough_resources([('db', 80), ('db', 60), ('db', 80)], [], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.LeftKwolokPlatform", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.LeftKwolokPlatform", player), lambda s: s.has_all(("WestPools.ForestsStrength", "Bash"), player) and has_enough_resources([('db', 160)], [], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> WestPools.LeftKwolokPlatform", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Launch"), player) and has_enough_resources([('db', 200), ('energy', ('Blaze', 1))], [], "WestPools.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.Teleporter -> EastPools.CentralRoom", player), lambda s: s.has_all(("Clean Water", "Water Breath"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform -> WestPools.Teleporter", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform -> WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform -> WestPools.RightKwolokPlatform", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform -> WestPools.RightKwolokPlatform", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> WestPools.EscapeRevisitEX", player), lambda s: has_enough_resources([('db', 60)], [], "WestPools.RightKwolokPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> WestPools.EscapeRevisitEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 20)], [], "WestPools.RightKwolokPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> WestPools.LeftKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> WestPools.LeftKwolokPlatform", player), lambda s: s.has("Launch", player) and s.has_any(("Clean Water", "Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> WestPools.LeftKwolokPlatform", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1)), ('db', 20)], "WestPools.RightKwolokPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Water Dash", player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('db', 100)], [], "WestPools.RightKwolokPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Clean Water", player) and s.has_any(("Shuriken", "Grenade", "Bow"), player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [], "WestPools.RightKwolokPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("KwolokEscape -> KwolokFight", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 160)], [], "KwolokEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("KwolokEscape -> KwolokFight", player), lambda s: s.has_all(("Dash", "Double Jump", "Triple Jump"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("KwolokEscape -> KwolokFight", player), lambda s: s.has_all(("Dash", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('db', 160)], "KwolokEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("KwolokEscape -> KwolokFight", player), lambda s: s.has_all(("Water Dash", "Bash", "Double Jump"), player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "KwolokEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("KwolokEscape -> KwolokFight", player), lambda s: s.has_all(("Water Dash", "Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('db', 100)], "KwolokEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("KwolokFight -> WestPools.ForestsStrength", player), lambda s: has_enough_resources([('wall', ('Boss', 250))], [], "KwolokFight", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 30)], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and has_enough_resources([], [('energy', ('Sentry', 3)), ('energy', ('Shuriken', 1))], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Glide"), player) and has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Blaze', 2))], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> LowerWastes.SunsetView", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Shuriken', 3)), ('energy', ('Sentry', 4))], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("WindtornRuins.Seir", "Burrow", "Double Jump", "Triple Jump"), player) and can_enter_area(WeepingRidge, s, player, options), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.PurpleWallEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.WestTP", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.SunsetView", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.WestTP", player), lambda s: has_enough_resources([('energy', ('Blaze', 1))], [], "LowerWastes.SunsetView", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.Shovel", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel -> LowerWastes.SunsetView", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel -> LowerWastes.SandPot", player), lambda s: has_enough_resources([('energy', ('Blaze', 1))], [], "LowerWastes.MuncherTunnel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.SandPotEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Spear', 1))], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Hammer", player) and has_enough_resources([('energy', ('Spear', 1))], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Spear', 1))], [], "LowerWastes.SandPot", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.MuncherPitEX", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.MuncherPitEX", player), lambda s: has_enough_resources([], [('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.WoodenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.MuncherPitEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPot", player), lambda s: has_enough_resources([('db', 30)], [], "LowerWastes.WoodenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.SandPot", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "LowerWastes.WoodenBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.MinesEntranceEnemyPaths", player), lambda s: has_enough_resources([('combat', 'MaceMiner'), ('combat', 'Mantis')], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "LowerWastes.BeforeMinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance -> LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Bash", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "LowerWastes.BeforeMinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntranceEnemyPaths -> LowerWastes.BottomRightEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('combat', 'MaceMiner')], [], "LowerWastes.MinesEntranceEnemyPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BottomRightEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance -> LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Grapple", "Glide"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "LowerWastes.MinesEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.SandPlatformLever", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.MuncherClimb", player), lambda s: s.has_all(("LowerWastes.SandPlatformLever", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.LastStandArea", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "LowerWastes.LeverArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.LastStandArea", player), lambda s: s.has_all(("LowerWastes.SandPlatformLever", "Burrow"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.MuncherClimbEX", player), lambda s: s.has_all(("Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.MuncherClimbEX", player), lambda s: s.has_all(("Grapple", "Glide"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "LowerWastes.MuncherClimb", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.MuncherClimbEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 30)], [], "LowerWastes.MuncherClimb", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.LastStandArea", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.LastStandArea", player), lambda s: has_enough_resources([], [('energy', ('Spear', 1))], "LowerWastes.MuncherClimb", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.LastStandArea", player), lambda s: s.has_all(("LowerWastes.SandPlatformLever", "Burrow"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.SkeetoHive", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and has_enough_resources([], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 2)), ('db', 30)], "LowerWastes.MuncherClimb", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and has_enough_resources([('db', 30)], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.MuncherClimb", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb -> LowerWastes.SkeetoHive", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 30)], [], "LowerWastes.MuncherClimb", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea -> LowerWastes.LastStandEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.ThirstyGorlek", player), lambda s: s.has("Sword", player) and has_enough_resources([('db', 30)], [], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.ThirstyGorlek", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 30)], [], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.MuncherClimb", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.MuncherClimb", player), lambda s: s.has("Grapple", player) and has_enough_resources([('db', 30)], [('energy', ('Shuriken', 2)), ('energy', ('Sentry', 3))], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.MuncherClimb", player), lambda s: s.has("Grapple", player) and has_enough_resources([('db', 60)], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2))], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and has_enough_resources([('energy', ('Spear', 1)), ('db', 30)], [], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.LupoMap", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and can_buy_map(s, player) and has_enough_resources([('energy', ('Spear', 2))], [], "LowerWastes.ThirstyGorlek", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.LupoMap", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and can_buy_map(s, player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.LupoMap", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and can_buy_map(s, player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.ThirstyGorlek", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.SkeetoHive", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Spear', 1))], [], "LowerWastes.ThirstyGorlek", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.SkeetoHive", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath -> LowerWastes.UpperPathHiddenEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> LowerWastes.EastTPOre", player), lambda s: s.has("Dash", player) and has_enough_resources([('wall', ('BreakWall', 20)), ('db', 60)], [('energy', ('Spear', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerWastes.EastTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> LowerWastes.EastTPOre", player), lambda s: s.has_all(("Dash", "Sword"), player) and has_enough_resources([('wall', ('BreakWall', 20)), ('db', 30)], [], "LowerWastes.EastTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> LowerWastes.EastTPOre", player), lambda s: s.has("Dash", player) and s.has("Hammer", player) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerWastes.EastTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP -> LowerWastes.EastTPOre", player), lambda s: s.has("Dash", player) and has_enough_resources([('wall', ('BreakWall', 20))], [('energy', ('Spear', 2))], "LowerWastes.EastTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KeystoneDoor", player), lambda s: s.has("Burrow", player) and can_open_door(UpperWastes.KeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KeystoneDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and can_open_door(UpperWastes.KeystoneDoor, s, player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KeystoneDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and can_open_door(UpperWastes.KeystoneDoor, s, player) and has_enough_resources([], [('db', 30)], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KeystoneDoor", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and can_open_door(UpperWastes.KeystoneDoor, s, player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KeystoneDoor", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and can_open_door(UpperWastes.KeystoneDoor, s, player) and has_enough_resources([('db', 30)], [], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.LowerKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 36)], [], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump", "Dash"), player) and s.has_any(("Hammer", "Sword"), player) and has_enough_resources([('db', 6)], [], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KSDoorEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KSDoorEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KSDoorEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.MissilePuzzleLeft", player), lambda s: s.has_all(("UpperWastes.KeystoneDoor", "Burrow"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.LedgeEC", player), lambda s: s.has_all(("Burrow", "Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.LedgeEC", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle -> C.UpperWastes.MissilePuzzleMiddle", player), lambda s: s.has("Burrow", player) and s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle -> UpperWastes.LeverDoor", player), lambda s: s.has("Burrow", player) and s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle -> UpperWastes.PurpleWallEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight -> UpperWastes.SpinLasers", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has_all(("Dash", "Burrow"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has("Burrow", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: s.has("Burrow", player) and has_enough_resources([], [('energy', ('Shuriken', 3))], "UpperWastes.SpinLasers", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Shuriken', 1))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Glide", "Sword"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Sentry', 2)), ('db', 30)], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 2))], [('energy', ('Spear', 2)), ('energy', ('Shuriken', 2)), ('energy', ('Flash', 2)), ('energy', ('Sentry', 2))], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Dash"), player) and has_enough_resources([('db', 30)], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Double Jump", "Dash"), player) and has_enough_resources([('db', 30)], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Double Jump", "Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WormEscapeEnd", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WormEscapeEnd", player), lambda s: s.has_all(("Launch", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.NorthTP", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor -> WindtornRuins.RuinsLever", player), lambda s: s.has("Burrow", player) and has_enough_resources([], [('energy', ('Sentry', 2)), ('energy', ('Grenade', 1)), ('energy', ('Blaze', 1))], "WindtornRuins.UpperRuinsDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural -> WindtornRuins.RuinsTP", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.RuinsTP", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.LowerRuins", player), lambda s: s.has("WindtornRuins.Seir", player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Sword", "WindtornRuins.HeartBarrier"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "WindtornRuins.RuinsTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Sword", "Burrow"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "WindtornRuins.RuinsTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has("Burrow", player) and has_enough_resources([('energy', ('Sentry', 3))], [], "WindtornRuins.RuinsTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP -> WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Hammer"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], "WindtornRuins.RuinsTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Grapple"), player) and has_enough_resources([('db', 10)], [], "WindtornRuins.Escape", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Grapple"), player) and has_enough_resources([], [('energy', ('Blaze', 5)), ('energy', ('Flash', 5))], "WindtornRuins.Escape", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Dash"), player) and has_enough_resources([('db', 40)], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1))], "WindtornRuins.Escape", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("UpperWastes.WormEscapeEnd", "Burrow"), player) and s.has("Launch", player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("UpperWastes.WormEscapeEnd", "Burrow", "Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WindtornRuins.Escape", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins -> WindtornRuins.FallenPillar", player), lambda s: s.has("WindtornRuins.Seir", player) and s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has("Sword", player) and has_enough_resources([('combat', 'CrystalMiner'), ('combat', 'CrystalMiner'), ('combat', 'ShieldCrystalMiner'), ('combat', 'ShieldCrystalMiner')], [], "WeepingRidge.Bottom", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has("Glide", player) and has_enough_resources([('combat', 'CrystalMiner'), ('combat', 'CrystalMiner'), ('combat', 'ShieldCrystalMiner'), ('combat', 'ShieldCrystalMiner')], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WeepingRidge.Bottom", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom -> WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Ore", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Ore", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Ore", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and has_enough_resources([('db', 40), ('energy', ('Bow', 1))], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Ore", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 40)], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has("Dash", player) and s.has_any(("Hammer", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.WillowEntranceLedge", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Launch"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.WillowEntranceLedge", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 3))], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Bottom", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and has_enough_resources([], [('energy', ('Shuriken', 3)), ('energy', ('Sentry', 3))], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.PortalEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 40)], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.PortalEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 40), ('db', 80)], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('Grenade', 3))], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player) and s.has_any(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.Ore", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.Ore", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Hammer"), player) and has_enough_resources([('db', 40)], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.Ore", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.Ore", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 40)], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.LaunchArea", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player) and has_enough_resources([('db', 40)], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 40)], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.WillowEntranceLedge -> WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.EntryEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.EntryEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 20)], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Launch", "Bash"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and s.has_any(("Dash", "WillowsEnd.PortalShortcut"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Grenade', 1)), ('db', 40)], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "WillowsEnd.PortalShortcut"), player) and has_enough_resources([('db', 20)], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Bash"), player) and s.has("Dash", player) and has_enough_resources([('db', 20)], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Bash"), player) and has_enough_resources([('db', 20)], [('energy', ('Grenade', 1)), ('db', 40)], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.BoulderHeartPath", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Bash", "Glide", "Double Jump", "Triple Jump", "Grapple"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Sword", "Double Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Bash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 20)], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "WillowsEnd.GrappleHeartMidPoint", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 20)], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 3)), ('energy', ('Sentry', 2))], "WillowsEnd.GrappleHeartMidPoint", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.Entry", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.Entry", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.PoisonfallHC", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.PoisonfallHC", player), lambda s: s.has("WillowsEnd.GrappleWheelsHeart", player) and has_enough_resources([('energy', ('Blaze', 1)), ('energy', ('Spear', 1))], [], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.PoisonfallHC", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.Entry", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.Entry", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart -> WillowsEnd.Entry", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Dash"), player) and has_enough_resources([('db', 40)], [], "WillowsEnd.GrappleHeart", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.BoulderHeart", player), lambda s: s.has("Launch", player) and has_enough_resources([('wall', ('BreakWall', 30))], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.BoulderHeart", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and has_enough_resources([('wall', ('BreakWall', 30)), ('energy', ('Grenade', 2))], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 40)], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 40)], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 40)], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.EntryEX", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump"), player) and has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump", "WillowsEnd.PortalShortcut"), player) and has_enough_resources([], [('energy', ('Spear', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [('energy', ('Spear', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump", "Bash"), player) and has_enough_resources([('db', 40)], [('energy', ('Spear', 2)), ('energy', ('Blaze', 2)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump", "Triple Jump", "Bash"), player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.Entry", player), lambda s: s.has_any(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.InnerTP", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.East", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP -> WillowsEnd.East", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.AboveInnerTP", player), lambda s: s.has("Dash", player) and s.has_any(("Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.Upper", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath -> E.WillowsEnd.RedirectHeartPath", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath -> WillowsEnd.RedirectHeart", player), lambda s: s.has_all(("Launch", "Bash", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 30))], [], "WillowsEnd.RedirectHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectHeart", player), lambda s: has_enough_resources([('energy', ('Spear', 2))], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectHeart", player), lambda s: s.has_all(("Glide", "Bash"), player) and has_enough_resources([('wall', ('BreakWall', 10)), ('wall', ('BreakWall', 30))], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectHeart", player), lambda s: s.has_all(("Launch", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 2))], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectHeart", player), lambda s: s.has_all(("Sword", "Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectHeart", player), lambda s: s.has_all(("Deflector", "Sword", "Bash"), player) and has_enough_resources([('db', 20)], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectEX", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Grenade', 1)), ('wall', ('BreakWall', 10)), ('db', 160)], [], "WillowsEnd.RedirectHeartPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle -> WillowsEnd.RedirectHeartPath", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.BurrowHeart", player), lambda s: s.has_all(("Burrow", "Bash", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 30))], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.BurrowHeart", player), lambda s: s.has_all(("Burrow", "Sword", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.MiniBossFight", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 40)], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.West", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.West", player), lambda s: has_enough_resources([('db', 90)], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.UpperHeartPath", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.MiniBossFight -> WillowsEnd.MinibossHeart", player), lambda s: s.has_any(("Launch", "Double Jump"), player) and has_enough_resources([('wall', ('Boss', 300))], [], "WillowsEnd.MiniBossFight", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.MiniBossFight -> WillowsEnd.Upper", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.SpinLasersHeart", player), lambda s: s.has("Double Jump", player) and s.has_any(("Glide", "Dash"), player) and has_enough_resources([('wall', ('BreakWall', 30))], [], "WillowsEnd.West", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.Upper", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and has_enough_resources([('wall', ('BreakWall', 10)), ('combat', 'MaceMiner')], [], "WillowsEnd.West", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.Upper", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('wall', ('BreakWall', 10)), ('combat', 'MaceMiner')], [('db', 40)], "WillowsEnd.West", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.Upper", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath -> WillowsEnd.GlideRooms", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms -> WillowsEnd.WindSpinOre", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms -> WillowsEnd.WindSpinOre", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and has_enough_resources([], [('db', 40)], "WillowsEnd.GlideRooms", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperLeftEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Grapple", "Bash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Launch", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Launch", player) and has_enough_resources([], [('db', 40)], "WillowsEnd.UpperHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Grapple", "Bash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath -> WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("WillowsEnd.SpinPortalsHeart", "Bash"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('Spear', 1))], [], "WillowsEnd.UpperHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint -> WillowsEnd.UpperRightEX", player), lambda s: s.has("Double Jump", player), "or")


def set_unsafe_glitched_rules(world: Multiworld, player: int, options: WotWOptions):
    """Unsafe rules with glitches."""
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.Main", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 2))], [], "MarshSpawn.Main", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: has_enough_resources([('energy', ('HammerSJump', 2))], [], "MarshSpawn.Main", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: has_enough_resources([('energy', ('HammerSJump', 2))], [('energy', ('Sentry', 1)), ('energy', ('Shuriken', 1)), ('db', 10)], "MarshSpawn.Main", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "MarshSpawn.Main", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Grapple", "Grenade"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Triple Jump", "Hammer"), player) and can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Triple Jump", "Hammer"), player) and can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.GrappleHC", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.BridgeEX", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main -> MarshSpawn.BridgeEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.Main", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier -> MarshSpawn.Main", player), lambda s: s.has("Flash", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.BashEC", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.BashEC", player), lambda s: can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.BashEC", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.BashEC", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge -> MarshSpawn.OpherBarrier", player), lambda s: s.has_all(("MarshSpawn.LogBroken", "Grenade"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.CaveEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("Double Jump", "Grenade"), player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("Glide", "Grenade", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.LeverEC", player), lambda s: s.has_all(("Grenade", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.BrokenBridge", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.BrokenBridge", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance -> MarshSpawn.BrokenBridge", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.TokkBarrier", player), lambda s: has_enough_resources([('wall', ('sentry', 16))], [], "MarshSpawn.Cave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.TokkBarrier", player), lambda s: has_enough_resources([('energy', ('Spear', 1))], [], "MarshSpawn.Cave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.TokkBarrier", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.CaveKS", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.CaveKS", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 10), ('energy', ('Blaze', 1))], [], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 20), ('energy', ('Blaze', 1))], [], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('db', 20)], [], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Clean Water"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "MarshSpawn.BurrowFightArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena -> MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Clean Water"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.CaveOre", player), lambda s: s.has("Grenade", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.CaveOre", player), lambda s: s.has("Sword", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.CaveOre", player), lambda s: s.has("Glide", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Double Jump", player) and s.has("Dash", player) and has_enough_resources([('db', 20), ('energy', ('SwordSJump', 1))], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 20), ('energy', ('SwordSJump', 1))], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Grenade", player) and has_enough_resources([('db', 30)], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Grenade", "Double Jump"), player) and s.has_any(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Grenade", "Double Jump"), player) and s.has_any(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Grenade", "Double Jump"), player) and has_enough_resources([], [('db', 10)], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: s.has("Grenade", player) and has_enough_resources([('db', 30)], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1)), ('db', 10)], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: has_enough_resources([('energy', ('HammerSJump', 1)), ('db', 20)], [], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: can_hammerjump(s, player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost -> MarshSpawn.BeforeBurrows", player), lambda s: can_hammerjump(s, player) and has_enough_resources([], [('db', 10)], "MarshSpawn.PoolsBurrowsSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Hammer", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Hammer", player) and can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Water Dash", "Grenade"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Water Dash", "Grenade"), player) and has_enough_resources([], [('db', 10)], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has("Grenade", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has("Grenade", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.BurrowsEntry", player), lambda s: s.has("Grenade", player) and has_enough_resources([('db', 10)], [('energy', ('Spear', 1)), ('energy', ('Blaze', 2))], "MarshSpawn.BeforeBurrows", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows -> MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Grenade", "Double Jump"), player) and s.has_any(("Triple Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Clean Water", "Flash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Clean Water"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Flash"), player) and has_enough_resources([('db', 20)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 20)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Water Dash", "Flash"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has("Hammer", player) and can_hammerjump(s, player) and has_enough_resources([('db', 6)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.PoolsPath", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Clean Water", "Flash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Clean Water"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Flash"), player) and has_enough_resources([('db', 20)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has("Burrow", player) and has_enough_resources([('db', 20)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Water Dash", "Flash"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost -> MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and has_enough_resources([('db', 10)], [], "MarshSpawn.LeftSpawnSignpost", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has_any(("Bash", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has_any(("Bash", "Dash", "Sword"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has_any(("Bash", "Dash", "Sword"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "MarshSpawn.PoolsPath", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath -> MarshSpawn.PoolsPathEX", player), lambda s: s.has("Flash", player) and s.has_any(("Bash", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor -> MarshSpawn.HowlApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor -> MarshSpawn.HowlApproach", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor -> MarshSpawn.HowlApproach", player), lambda s: has_enough_resources([('energy', ('Blaze', 1))], [], "MarshSpawn.RegenDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor -> MarshSpawn.HowlApproach", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor -> MarshSpawn.HowlApproach", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach -> MarshSpawn.RegenDoor", player), lambda s: s.has("Grenade", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach -> MarshSpawn.RegenDoor", player), lambda s: s.has("Glide", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach -> MarshSpawn.RegenDoor", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "MarshSpawn.HowlApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach -> MarshSpawn.RegenDoor", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.RecklessShard", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.RecklessShard", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and has_enough_resources([('wall', ('BreakWall', 10)), ('energy', ('Blaze', 1))], [], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.RecklessShard", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "HowlsDen.RainLifted", "Grenade"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.RecklessShard", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "HowlsDen.RainLifted", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.RecklessShard", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "HowlsDen.RainLifted"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.RecklessShard", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "HowlsDen.RainLifted"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.HowlApproach", player), lambda s: s.has_all(("MarshSpawn.HowlBurnt", "Grenade"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and s.has_any(("Dash", "Glide", "Hammer"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "MarshSpawn.MokkTheBrave", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangEC", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangEC", player), lambda s: can_wavedash(s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangEC", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "MarshSpawn.AboveHowlArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangEC", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "MarshSpawn.AboveHowlArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangEC", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "MarshSpawn.AboveHowlArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangEC", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "MarshSpawn.AboveHowlArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangEC", player), lambda s: has_enough_resources([('energy', ('Sentry', 2))], [], "MarshSpawn.AboveHowlArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangEC", player), lambda s: has_enough_resources([('energy', ('Blaze', 2))], [], "MarshSpawn.AboveHowlArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangEC", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangPlatform", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangPlatform", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangPlatform", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena -> MarshSpawn.FangPlatform", player), lambda s: has_enough_resources([('energy', ('Blaze', 1))], [], "MarshSpawn.AboveHowlArena", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.FangEC", player), lambda s: has_enough_resources([('energy', ('Sentry', 2))], [], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.FangEC", player), lambda s: has_enough_resources([('energy', ('Blaze', 2))], [], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.FangEC", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.FangEC", player), lambda s: can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.FangEC", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.FangEC", player), lambda s: s.has("Grenade", player) and s.has_any(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.FangEC", player), lambda s: s.has("Grenade", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshSpawn.FangPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform -> MarshSpawn.AboveHowlArena", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> MarshSpawn.HowlsDenEntrance", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Dash", player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Glide", player) and s.has("Dash", player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Glide", player) and can_enter_area(MarshSpawn, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.AboveBoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Grenade", player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Flash", player) and can_enter_area(MarshSpawn, s, player, options), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> MarshSpawn.HowlsDenEntrance", player), lambda s: can_enter_area(MarshSpawn, s, player, options) and has_enough_resources([('energy', ('Blaze', 1))], [], "HowlsDen.AboveBoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> MarshSpawn.HowlsDenEntrance", player), lambda s: can_enter_area(MarshSpawn, s, player, options) and has_enough_resources([('energy', ('Sentry', 1))], [], "HowlsDen.AboveBoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> HowlsDen.MidwayBottomLoop", player), lambda s: has_enough_resources([('wall', ('sentry', 16))], [], "HowlsDen.AboveBoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> HowlsDen.MidwayBottomLoop", player), lambda s: has_enough_resources([('energy', ('Spear', 1))], [], "HowlsDen.AboveBoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.AboveBoneBridge", player), lambda s: has_enough_resources([('energy', ('Sentry', 1))], [], "HowlsDen.UpperLoopEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.AboveBoneBridge", player), lambda s: has_enough_resources([('energy', ('Blaze', 1))], [], "HowlsDen.UpperLoopEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.UpperLoopEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance -> HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "HowlsDen.UpperLoopEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveDoorKS", player), lambda s: has_enough_resources([('energy', ('Sentry', 1))], [], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveDoorKS", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveDoorKS", player), lambda s: has_enough_resources([('energy', ('Blaze', 1))], [], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveDoorKS", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.MagnetShard", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('wall', ('BreakWall', 10)), ('energy', ('Sentry', 2))], [], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.MagnetShard", player), lambda s: s.has("Flash", player) and s.has("Double Jump", player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.MagnetShard", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('wall', ('BreakWall', 10)), ('energy', ('Blaze', 2))], [], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.MagnetShard", player), lambda s: s.has("Grenade", player) and s.has("Double Jump", player) and has_enough_resources([('wall', ('BreakWall', 10))], [], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.UpperLoopEntrance", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.UpperLoopEntrance", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.UpperLoopEntrance", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.UpperLoopEntrance", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.UpperLoopEntrance", player), lambda s: can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.UpperLoopEntrance", player), lambda s: has_enough_resources([('energy', ('Sentry', 4))], [], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.UpperLoopEntrance", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.UpperLoopEntrance", player), lambda s: has_enough_resources([('energy', ('Blaze', 4))], [], "HowlsDen.BoneBridge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge -> HowlsDen.AboveBoneBridge", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Bash", "Grapple", "Grenade"), player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.BoneBridgeDoor", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.BoneBridgeDoor", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.BoneBridgeDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: has_enough_resources([('energy', ('Sentry', 1)), ('energy', ('Sentry', 1))], [], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: has_enough_resources([('db', 10), ('energy', ('Blaze', 1))], [], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: has_enough_resources([('energy', ('Blaze', 2))], [], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Grenade", player) and has_enough_resources([('db', 10)], [], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has_all(("HowlsDen.RainLifted", "Grenade", "Bash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Grenade", player) and has_enough_resources([('energy', ('Blaze', 1)), ('energy', ('Blaze', 1))], [], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Grenade", player) and has_enough_resources([('energy', ('Blaze', 1))], [('db', 10)], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom -> HowlsDen.MidwayBottomLoop", player), lambda s: s.has_all(("Grenade", "HowlsDen.RainLifted", "Bash"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "HowlsDen.OutsideSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: has_enough_resources([('wall', ('BreakWall', 16)), ('energy', ('Spear', 1))], [], "HowlsDen.MidwayBottomLoop", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: has_enough_resources([('wall', ('BreakWall', 16))], [('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "HowlsDen.MidwayBottomLoop", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop -> HowlsDen.AboveBoneBridge", player), lambda s: s.has("Grenade", player) and has_enough_resources([('wall', ('BreakWall', 16))], [], "HowlsDen.MidwayBottomLoop", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom -> HowlsDen.LeftSecretRoom", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom -> HowlsDen.LeftSecretRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: has_enough_resources([('energy', ('Sentry', 1))], [], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: has_enough_resources([('energy', ('Blaze', 1))], [], "HowlsDen.LeftSecretRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom -> HowlsDen.LeftHC", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter -> HowlsDen.BoneBarrier", player), lambda s: has_enough_resources([('energy', ('Spear', 1))], [], "HowlsDen.AboveTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter -> HowlsDen.BoneBarrier", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter -> HowlsDen.BoneBarrier", player), lambda s: has_enough_resources([('wall', ('sentry', 16))], [], "HowlsDen.AboveTeleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.LaserKS", player), lambda s: s.has("Glide", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.LaserKS", player), lambda s: s.has("Grenade", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.AboveTeleporter", player), lambda s: s.has("Glide", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.AboveTeleporter", player), lambda s: s.has("Flash", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.AboveTeleporter", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "HowlsDen.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.AboveTeleporter", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "HowlsDen.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter -> HowlsDen.AboveTeleporter", player), lambda s: s.has("Grenade", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "HowlsDen.DoubleJumpApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Grenade", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('Spear', 1))], [], "HowlsDen.DoubleJumpApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge -> HowlsDen.DoubleJumpEX", player), lambda s: s.has("Glide", player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge -> HowlsDen.DoubleJumpEX", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Spear', 1))], "HowlsDen.DoubleJumpTreeLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge -> HowlsDen.DoubleJumpEX", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge -> HowlsDen.DoubleJumpEX", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge -> HowlsDen.DoubleJumpEX", player), lambda s: can_swordjump(s, player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> MidnightBurrows.HowlsDenShortcut", player), lambda s: has_enough_resources([('wall', ('shuriken', 10))], [], "HowlsDen.DoubleJumpTreeArea", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Flash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Hammer", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "HowlsDen.DoubleJumpTreeArea", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Hammer", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "HowlsDen.DoubleJumpTreeArea", s, player, options, False), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea -> HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Hammer", player) and has_enough_resources([('energy', ('Spear', 1))], [], "HowlsDen.DoubleJumpTreeArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> MarshSpawn.ToOpherBarrier", player), lambda s: has_enough_resources([('energy', ('Spear', 1))], [], "MarshPastOpher.MillView", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> MarshSpawn.ToOpherBarrier", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> MarshPastOpher.OpherSkipBranch", player), lambda s: can_swordjump(s, player) and has_enough_resources([('db', 20)], [], "MarshPastOpher.MillView", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> MarshPastOpher.OpherSkipBranch", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView -> MarshPastOpher.OpherSkipBranch", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "MarshPastOpher.MillView", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch -> MarshPastOpher.PoolsPathEast", player), lambda s: can_hammerjump(s, player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.OpherSkipBranch", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Hammer", player) and can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Hammer", player) and has_enough_resources([], [('db', 10)], "MarshPastOpher.OpherSkipBranch", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch -> MarshPastOpher.PoolsPathEast", player), lambda s: can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch -> MarshPastOpher.PoolsPathEast", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshPastOpher.OpherSkipBranch", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk -> MarshPastOpher.TrunkWall", player), lambda s: has_enough_resources([('wall', ('shuriken', 20))], [], "MarshPastOpher.UnderTrunk", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialEC", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialRightEX", player), lambda s: s.has("Flash", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialRightEX", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialRightEX", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialRightEX", player), lambda s: s.has("Glide", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.TrialRightEX", player), lambda s: s.has("Grenade", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.UnderTrunk", player), lambda s: s.has("Flash", player) and s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.UnderTrunk", player), lambda s: s.has_any(("Dash", "Double Jump"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.UnderTrunk", player), lambda s: s.has_any(("Dash", "Double Jump"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "MarshPastOpher.TrialArea", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea -> MarshPastOpher.BowPath", player), lambda s: s.has_any(("Bash", "Double Jump", "Dash", "Glide", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.BowApproach", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.MillView", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath -> MarshPastOpher.MillView", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.BowArea", player), lambda s: has_enough_resources([('energy', ('Blaze', 1))], [], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.BowArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.BowArea", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Hammer"), player) and has_enough_resources([], [('energy', ('Bow', 1)), ('energy', ('Spear', 1)), ('energy', ('Grenade', 1))], "MarshPastOpher.BowApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.OpherSkipBranch", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.OpherSkipBranch", player), lambda s: s.has("Glide", player) and can_wavedash(s, player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach -> MarshPastOpher.OpherSkipBranch", player), lambda s: s.has("Double Jump", player) and can_wavedash(s, player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.BowApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea -> MarshPastOpher.BowApproach", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.CeilingEX", player), lambda s: has_enough_resources([('energy', ('HammerSJump', 1))], [], "MarshPastOpher.PoolsPathEast", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.CeilingEX", player), lambda s: s.has("Grenade", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast -> MarshPastOpher.CeilingEX", player), lambda s: s.has("Grenade", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "MarshPastOpher.PoolsPathEast", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Grenade", player) and s.has("Double Jump", player) and has_enough_resources([('wall', ('shuriken', 20))], [], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Glide", player) and s.has("Double Jump", player) and has_enough_resources([('wall', ('shuriken', 20))], [], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('wall', ('shuriken', 20))], [], "MarshPastOpher.PoolsPathMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Flash", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 10)], [], "MarshPastOpher.PoolsPathOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 10), ('energy', ('Sentry', 1))], [], "MarshPastOpher.PoolsPathOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall -> MarshPastOpher.PoolsPathWest", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('db', 10), ('energy', ('Blaze', 1))], [], "MarshPastOpher.PoolsPathOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: has_enough_resources([('energy', ('Sentry', 1))], [], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: has_enough_resources([('energy', ('Blaze', 1))], [], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall -> MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Double Jump", player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('Spear', 1)), ('energy', ('Blaze', 1))], [], "MarshPastOpher.PoolsPathBellowOneWayWall", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest -> MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: has_enough_resources([('energy', ('HammerSJump', 1))], [('db', 10)], "MarshPastOpher.PoolsPathWest", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has("MidnightBurrows.Lever", player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom -> MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("MidnightBurrows.Lever", "Double Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 15)], [], "MidnightBurrows.PortalRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.PurpleDoorOpen", player), lambda s: s.has("Glide", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.PurpleDoorOpen", player), lambda s: s.has("Grenade", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.MokiByTwillen", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.MokiByTwillen", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Grenade", player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: has_enough_resources([('energy', ('Bow', 1)), ('energy', ('Blaze', 1))], [], "WestHollow.Entrance", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.Entrance -> WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Glide", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen -> WestHollow.UpperDrainLeverPulled", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen -> WestHollow.UpperDrainLeverPulled", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen -> WestHollow.UpperDrainLeverPulled", player), lambda s: has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.MokiByTwillen", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen -> WestHollow.UpperDrainLeverPulled", player), lambda s: has_enough_resources([('energy', ('Sentry', 1))], [], "WestHollow.MokiByTwillen", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Flash", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Glide", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor -> WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('db', 10)], [], "WestHollow.InFrontPurpleDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Flash"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Flash"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Grenade"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Grenade"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("Flash", player) and s.has_any(("Launch", "Double Jump", "Dash", "Sword"), player) and has_enough_resources([('db', 40)], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has_any(("Launch", "Double Jump", "Dash", "Sword"), player) and has_enough_resources([('db', 40), ('energy', ('Sentry', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has_any(("Launch", "Double Jump", "Dash", "Sword"), player) and has_enough_resources([('db', 40), ('energy', ('Blaze', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("Water Dash", player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has_all(("Water Dash", "Grenade"), player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("Water Dash", player) and s.has_any(("Glide", "Hammer"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has_any(("Glide", "Hammer"), player) and has_enough_resources([('db', 60)], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has("Grenade", player) and s.has_any(("Glide", "Hammer"), player) and has_enough_resources([('db', 60)], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle -> WestHollow.Entrance", player), lambda s: s.has_any(("Glide", "Hammer"), player) and has_enough_resources([('db', 60), ('energy', ('Blaze', 1))], [], "WestHollow.HollowDrainMiddle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> E.WestHollow.RockPuzzle", player), lambda s: s.has_all(("Magnet", "Sword", "WestHollow.FullyDrained"), player) and s.has_any(("Hammer", "Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> E.WestHollow.RockPuzzle", player), lambda s: s.has_all(("Magnet", "Sword", "WestHollow.UpperDrainLeverPulled"), player) and s.has_any(("Hammer", "Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.FullyDrained", "Flash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.FullyDrained"), player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.FullyDrained"), player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.FullyDrained", "Grenade"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.UpperDrainLeverPulled", "Flash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.UpperDrainLeverPulled"), player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.UpperDrainLeverPulled"), player) and s.has("Hammer", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has_all(("WestHollow.RockPuzzleSolved", "WestHollow.UpperDrainLeverPulled", "Grenade"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle -> WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and has_enough_resources([('energy', ('Bow', 1))], [], "WestHollow.RockPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FullyDrained", player), lambda s: s.has_all(("WestHollow.UpperDrainLeverPulled", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("Grenade", player) and has_enough_resources([('db', 50)], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: can_glidehammerjump(s, player) and has_enough_resources([('db', 50)], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 50)], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: can_hammerjump(s, player) and has_enough_resources([('db', 50)], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: has_enough_resources([('db', 50), ('energy', ('HammerSJump', 1))], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Grenade"), player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has_all(("Water Dash", "Grenade"), player) and has_enough_resources([('db', 30)], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("Water Dash", player) and can_glidehammerjump(s, player) and has_enough_resources([('db', 30)], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and has_enough_resources([('db', 30)], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("Water Dash", player) and can_hammerjump(s, player) and has_enough_resources([('db', 30)], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom -> WestHollow.FarLeftEX", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 30), ('energy', ('HammerSJump', 1))], [], "WestHollow.FarLeftRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Glide", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("HammerJump", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("HammerJump", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Flash"), player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.UpperTongueExtended", "Glide"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Grenade"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Glide"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Sword", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.SubmergedPlatform", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform -> WestHollow.RockPuzzle", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Flash"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.LowerTongueExtended"), player) and s.has_any(("Sword", "Hammer", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "WestHollow.LowerTongueExtended", "Glide"), player) and s.has_any(("Sword", "Hammer", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Grenade"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Grenade"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("HammerJump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WestHollow.AboveJumppad", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad -> WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Double Jump", "Glide"), player) and s.has("Hammer", player) and has_enough_resources([('db', 10)], [], "WestHollow.AboveJumppad", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: s.has("Dash", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: s.has("Grenade", player) and can_buy_map(s, player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: s.has("Glide", player) and can_buy_map(s, player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: s.has("Flash", player) and can_buy_map(s, player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: can_buy_map(s, player) and s.has("HammerJump", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.LupoMap", player), lambda s: can_buy_map(s, player) and s.has("HammerJump", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.TrialApproach", player), lambda s: s.has_all(("WestHollow.FullyDrained", "Flash"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_any(("HammerJump", "Launch"), player) and has_enough_resources([('db', 90), ('energy', ('HammerSJump', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_any(("HammerJump", "Launch"), player) and has_enough_resources([('db', 90), ('energy', ('SwordSJump', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Dash", player) and has_enough_resources([('db', 90), ('energy', ('Bow', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Grenade", player) and s.has("Dash", player) and has_enough_resources([('db', 90), ('energy', ('Bow', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Flash", player) and has_enough_resources([('db', 90)], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: has_enough_resources([('db', 90), ('energy', ('Blaze', 4))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and s.has_any(("HammerJump", "Launch"), player) and has_enough_resources([('db', 40), ('energy', ('HammerSJump', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and s.has_any(("HammerJump", "Launch"), player) and has_enough_resources([('db', 40), ('energy', ('SwordSJump', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and s.has("Dash", player) and has_enough_resources([('db', 40), ('energy', ('Bow', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "Grenade"), player) and s.has("Dash", player) and has_enough_resources([('db', 40), ('energy', ('Bow', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "Flash"), player) and has_enough_resources([('db', 40)], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40), ('energy', ('Blaze', 4))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.RockPuzzle", player), lambda s: s.has("Dash", player) and s.has("HammerJump", player) and has_enough_resources([('db', 90), ('energy', ('HammerSJump', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.RockPuzzle", player), lambda s: s.has("Dash", player) and s.has("HammerJump", player) and has_enough_resources([('db', 90), ('energy', ('SwordSJump', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.RockPuzzle", player), lambda s: s.has("Water Dash", player) and s.has_any(("HammerJump", "Launch"), player) and has_enough_resources([('db', 40), ('energy', ('HammerSJump', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower -> WestHollow.RockPuzzle", player), lambda s: s.has("Water Dash", player) and s.has_any(("HammerJump", "Launch"), player) and has_enough_resources([('db', 40), ('energy', ('SwordSJump', 1))], [], "WestHollow.HollowDrainLower", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach -> WestHollow.TrialStart", player), lambda s: s.has_any(("Bash", "Hammer"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.TrialApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.BelowLupoEX", player), lambda s: has_enough_resources([('db', 10), ('energy', ('SwordSJump', 1))], [], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has("Flash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Sentry', 2))], [], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Blaze', 2))], [], "WestHollow.PolesPound", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound -> WestHollow.HollowDrainLower", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach -> WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashArea", player), lambda s: has_enough_resources([('energy', ('Sentry', 2))], [], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashArea", player), lambda s: has_enough_resources([('energy', ('Blaze', 2))], [], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashArea", player), lambda s: has_enough_resources([('energy', ('HammerSJump', 1))], [], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: has_enough_resources([('energy', ('Sentry', 3))], [], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers -> WestHollow.DashRoomTopRight", player), lambda s: has_enough_resources([('energy', ('Blaze', 3))], [], "WestHollow.DashCrushers", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashRightEX", player), lambda s: s.has("Flash", player) and s.has_any(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashRightEX", player), lambda s: s.has_any(("Bash", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "WestHollow.DashRoomTopRight", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.DashRightEX", player), lambda s: s.has_any(("Bash", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.DashRoomTopRight", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.AboveDashSemisolid", player), lambda s: s.has("Flash", player) and s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.AboveDashSemisolid", player), lambda s: s.has_any(("Bash", "Hammer"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "WestHollow.DashRoomTopRight", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.AboveDashSemisolid", player), lambda s: s.has_any(("Bash", "Hammer"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestHollow.DashRoomTopRight", s, player, options, False), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight -> WestHollow.AboveDashSemisolid", player), lambda s: s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.HornBeetleFightEX", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.AfterBeetleFight", player), lambda s: s.has("Double Jump", player) and can_wavedash(s, player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter -> EastHollow.VoiceDoorPlatform", player), lambda s: s.has("Triple Jump", player) and can_swordjump(s, player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.HornBeetleFightEX", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform -> EastHollow.HornBeetleFightEX", player), lambda s: can_swordjump(s, player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki -> EastHollow.OutsideGlades", player), lambda s: s.has("Hammer", player) and has_enough_resources([('db', 10)], [], "EastHollow.MapMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.OutsideGlades -> GladesTown.GromsWall", player), lambda s: has_enough_resources([('energy', ('Sentry', 1))], [], "EastHollow.OutsideGlades", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.OutsideGlades -> GladesTown.GromsWall", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "EastHollow.OutsideGlades", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SpikeLanternEX", player), lambda s: s.has("Double Jump", player) and s.has("Dash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SpikeLanternEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.SecretRoofEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.MortarEX", player), lambda s: s.has("Triple Jump", player) and can_swordjump(s, player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.MortarEX", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.MortarEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 3))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.MortarEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 4))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Teleporter", player), lambda s: can_swordjump(s, player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Kwolok", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([('db', 10), ('energy', ('SentryJump', 1))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight -> EastHollow.Kwolok", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 3))], [], "EastHollow.AfterBeetleFight", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.DepthsLever", player), lambda s: has_enough_resources([('combat', 'SneezeSlug'), ('energy', ('Grenade', 1))], [], "EastHollow.AboveBash", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.DepthsLever", player), lambda s: has_enough_resources([('combat', 'SneezeSlug'), ('energy', ('Sentry', 1))], [], "EastHollow.AboveBash", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash -> EastHollow.BashEC", player), lambda s: has_enough_resources([('energy', ('HammerSJump', 1))], [], "EastHollow.AboveBash", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint -> EastHollow.BashEX", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastHollow.BashTreeCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> EastHollow.SilentSwimEC", player), lambda s: s.has("Clean Water", player) and s.has("Double Jump", player) and has_enough_resources([('db', 10), ('energy', ('SentryJump', 1))], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Clean Water"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok -> WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("EastHollow.SilentSwimWall", "Water Dash"), player) and can_enter_area(WoodsEntry, s, player, options) and has_enough_resources([('db', 50), ('db', 100), ('energy', ('SwordSJump', 1))], [], "EastHollow.Kwolok", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.ArcingShard", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Grenade"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoSwimLeftEX", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Grenade"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.LupoSwimLeftEX", player), lambda s: s.has_all(("GladesTown.ClearThorns", "Grenade"), player) and has_enough_resources([], [('db', 100)], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.UpperWest", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.BelowBountyShard", player), lambda s: s.has("Grenade", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.BelowBountyShard", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1))], [], "GladesTown.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.AboveOpher", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.AboveOpher", player), lambda s: can_wavedash(s, player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> GladesTown.AboveOpher", player), lambda s: s.has_all(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> TuleyShop", player), lambda s: s.has_all(("GladesTown.TuleySpawned", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter -> TuleyShop", player), lambda s: s.has_all(("GladesTown.TuleySpawned", "Grenade"), player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.Teleporter", player), lambda s: s.has("Grenade", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome -> GladesTown.Teleporter", player), lambda s: s.has("Glide", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Double Jump", "Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> GladesTown.MotayHut", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Grenade"), player), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: can_enter_area(WestGlades, s, player, options) and has_enough_resources([('combat', 'WeakSlug'), ('combat', 'WeakSlug'), ('db', 10)], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('SwordSJump', 1)), ('db', 10)], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.West -> WestGlades.PastTown", player), lambda s: can_enter_area(WestGlades, s, player, options) and has_enough_resources([('energy', ('HammerSJump', 1)), ('db', 20)], [], "GladesTown.West", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperOre", player), lambda s: s.has_all(("TuleyShop.StickyGrass", "Grenade"), player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Grenade"), player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperOre", player), lambda s: s.has_all(("GladesTown.BuildHuts", "TuleyShop.BlueMoon", "Grapple", "Bash", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "GladesTown.MotayHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperWest", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Grenade"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut -> GladesTown.UpperWest", player), lambda s: s.has_all(("GladesTown.BuildHuts", "Dash"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "GladesTown.MotayHut", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest -> GladesTown.AboveGromHC", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "GladesTown.UpperWest", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.InsideThirdHut -> GladesTown.BraveMokiHutEX", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Grenade"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: has_enough_resources([('energy', ('Bow', 2)), ('energy', ('SentryJump', 1))], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.AcornCave -> GladesTown.AcornQI", player), lambda s: s.has("Grenade", player) and has_enough_resources([('energy', ('Bow', 2))], [], "GladesTown.AcornCave", s, player, options, False), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard -> GladesTown.BountyShard", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Glide", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Grenade", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.UpdraftCeilingEX", player), lambda s: s.has("TuleyShop.SpringPlants", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals -> GladesTown.BelowBountyShard", player), lambda s: s.has("TuleyShop.SpringPlants", player) and can_wavedash(s, player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> GladesTown.PlayfulMoki", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> GladesTown.PlayfulMoki", player), lambda s: can_swordjump(s, player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher -> GladesTown.PlayfulMoki", player), lambda s: s.has_all(("TuleyShop.SpringPlants", "Grenade"), player), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki -> GladesTown.HoleHut", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> GladesTown.HoleHutEntrance", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut -> LowerReach.VeralHome", player), lambda s: s.has("Grenade", player) and can_enter_area(LowerReach, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has("Bash", player) and s.has_any(("Clean Water", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has_any(("Clean Water", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has("Glide", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: has_enough_resources([('energy', ('Sentry', 1))], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: has_enough_resources([('energy', ('Blaze', 1))], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.GrappleEX", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: has_enough_resources([('combat', 'Tentacle'), ('energy', ('SwordSJump', 1))], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and has_enough_resources([('combat', 'Tentacle')], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> WestGlades.Center", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 2)), ('db', 20)], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.PastTown -> GladesTown.West", player), lambda s: can_enter_area(GladesTown, s, player, options) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "WestGlades.PastTown", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has_all(("Bash", "Glide"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has("Grenade", player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has("Grenade", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: s.has("Grenade", player) and has_enough_resources([], [('db', 10)], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.LeftOre", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool -> WestGlades.Center", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 2)), ('db', 20)], [], "WestGlades.LowerPool", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.LeftOre", player), lambda s: s.has("Glide", player) and has_enough_resources([('db', 10), ('energy', ('SwordSJump', 1))], [], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Center -> WestGlades.RightOre", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "WestGlades.Center", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.RightOre", player), lambda s: s.has("Glide", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.Upper -> WestGlades.MillApproach", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.SwimOre", player), lambda s: s.has_all(("Clean Water", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: has_enough_resources([('energy', ('Sentry', 3))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.ShrineArea", player), lambda s: has_enough_resources([('energy', ('Blaze', 3))], [], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> WestGlades.Upper", player), lambda s: s.has("Grenade", player) and has_enough_resources([], [('energy', ('Sentry', 1)), ('energy', ('Flash', 1)), ('energy', ('Blaze', 1)), ('energy', ('Shuriken', 1))], "WestGlades.MillApproach", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach -> OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Grenade", "Hammer"), player) and can_enter_area(OuterWellspring, s, player, options), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has_all(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has("Grenade", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: has_enough_resources([('energy', ('Blaze', 2))], [], "WestGlades.ShrineArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: has_enough_resources([('energy', ('Sentry', 2))], [], "WestGlades.ShrineArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has_all(("Hammer", "Double Jump"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "WestGlades.ShrineArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea -> WestGlades.ShrineHC", player), lambda s: s.has_all(("Hammer", "Double Jump"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "WestGlades.ShrineArea", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.EntranceRoofEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Grenade", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Grenade", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 15)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 2))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('HammerSJump', 2))], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: has_enough_resources([('energy', ('HammerSJump', 2))], [('db', 15)], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("OuterWellspring.FallingWheel", "Glide"), player) and has_enough_resources([('db', 10)], [], "OuterWellspring.EntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor -> OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Grenade", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestWallBroken", player), lambda s: has_enough_resources([('wall', ('sentry', 20))], [], "OuterWellspring.LifeHarvestEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry -> OuterWellspring.LifeHarvestShard", player), lambda s: can_swordjump(s, player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Bash"), player) and has_enough_resources([('db', 15), ('energy', ('SwordSJump', 1))], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Clean Water", player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement -> OuterWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.EntranceDoorOpen", player) and has_enough_resources([('energy', ('SwordSJump', 1))], [('db', 60)], "OuterWellspring.Basement", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.EastDoor", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 15)], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('energy', ('Grenade', 1))], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor -> OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Glide", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 2)), ('energy', ('Grenade', 1))], [], "OuterWellspring.AboveEntranceDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor -> OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Bash", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('energy', ('SentryJump', 1))], [], "OuterWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor -> OuterWellspring.TrialApproach", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "OuterWellspring.TopDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has("Grenade", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has("Grenade", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor -> OuterWellspring.UltraGrappleShard", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor -> InnerWellspring.ThreeWheelsEX", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea -> InnerWellspring.ThornEX", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1)), ('db', 15)], [], "InnerWellspring.ThornShardArea", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('wall', ('shuriken', 10))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has("Dash", player) and has_enough_resources([('wall', ('shuriken', 10)), ('db', 15)], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has_all(("InnerWellspring.DrainRoomBottomWheel", "Bash"), player) and has_enough_resources([('wall', ('shuriken', 10)), ('energy', ('Grenade', 2))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has("Sword", player) and has_enough_resources([('wall', ('shuriken', 10))], [], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom -> InnerWellspring.DrainAreaExit", player), lambda s: s.has("InnerWellspring.DrainLever", player) and has_enough_resources([('wall', ('shuriken', 10))], [('energy', ('Shuriken', 2))], "InnerWellspring.DrainRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance -> InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.DrainLever", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.LeverEC", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever -> InnerWellspring.WestDoor", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1)), ('db', 15)], [], "InnerWellspring.BelowDrainLever", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor -> InnerWellspring.MiddleDoorsOpen", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.WestDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.SpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle -> InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.PastSpinPuzzle", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.BlueMoonSeed", player), lambda s: s.has("Flash", player) and s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.AboveTpEX", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has_any(("Dash", "Double Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: has_enough_resources([('energy', ('Sentry', 2))], [], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: has_enough_resources([('energy', ('Blaze', 2))], [], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has_any(("Sword", "Hammer", "Glide"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has_any(("Sword", "Hammer", "Glide"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: has_enough_resources([('energy', ('Sentry', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Spear', 1)), ('energy', ('Flash', 1))], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has_any(("Sword", "Hammer", "Glide"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has_any(("Sword", "Hammer", "Glide"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: has_enough_resources([('energy', ('Blaze', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Spear', 1)), ('energy', ('Flash', 1))], "InnerWellspring.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter -> InnerWellspring.EscapeSequence", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence -> InnerWellspring.WaterEscape", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> EastHollow.SilentSwimWall", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('energy', ('Sentry', 1))], [], "WoodsEntry.ShriekMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet -> EastHollow.SilentSwimWall", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "WoodsEntry.ShriekMeet", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom -> WoodsMain.WallOreLedge", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "WoodsMain.BelowFourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom -> WoodsMain.UpperKS", player), lambda s: has_enough_resources([('wall', ('BreakWall', 3)), ('energy', ('SentryJump', 1))], [], "WoodsMain.FourKeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("WoodsMain.BalloonLureBlobDestroyed", "Double Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure -> WoodsMain.BelowHiddenOre", player), lambda s: s.has("WoodsMain.BalloonLureBlobDestroyed", player) and has_enough_resources([('energy', ('SentryJump', 3))], [], "WoodsMain.BalloonLure", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.BalloonLureBlobDestroyed", player), lambda s: has_enough_resources([('wall', ('shuriken', 3))], [], "WoodsMain.BelowHiddenOre", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.HiddenOre", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1))], [], "WoodsMain.BelowHiddenOre", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.HiddenOre", player), lambda s: has_enough_resources([('energy', ('HammerSJump', 2))], [], "WoodsMain.BelowHiddenOre", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.HiddenOre", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "WoodsMain.BelowHiddenOre", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.HiddenOre", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('HammerSJump', 1)), ('energy', ('Blaze', 1))], [], "WoodsMain.BelowHiddenOre", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.HiddenOre", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "WoodsMain.BelowHiddenOre", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.HiddenOre", player), lambda s: has_enough_resources([('energy', ('HammerSJump', 1))], [('energy', ('Shuriken', 1)), ('db', 15)], "WoodsMain.BelowHiddenOre", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.HiddenOre", player), lambda s: s.has("Triple Jump", player) and can_swordjump(s, player) and has_enough_resources([('db', 15)], [], "WoodsMain.BelowHiddenOre", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.HiddenOre", player), lambda s: s.has_all(("Double Jump", "Grenade"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.HiddenOre", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.HiddenOre", player), lambda s: has_enough_resources([('energy', ('Blaze', 6))], [], "WoodsMain.BelowHiddenOre", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.HiddenOre", player), lambda s: can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre -> WoodsMain.HiddenOre", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl -> WoodsMain.BeforeLog", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsMain.AboveHowl", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog -> WoodsMain.OrangeTree", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "WoodsMain.BeforeLog", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter -> WoodsMain.LogBlobDestroyed", player), lambda s: has_enough_resources([('wall', ('shuriken', 3))], [], "WoodsMain.Teleporter", s, player, options, False), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds -> LowerWastes.WestTP", player), lambda s: s.has_all(("Double Jump", "Grenade"), player) and can_enter_area(LowerWastes, s, player, options), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.BelowBaurEX", player), lambda s: s.has_all(("LowerReach.BearSneezed", "LowerReach.BearBridgeBroken", "Grenade"), player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: s.has("Hammer", player) and can_hammerjump(s, player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: s.has("Hammer", player) and can_hammerjump(s, player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: can_hammerjump(s, player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: can_hammerjump(s, player) and has_enough_resources([], [('db', 20)], "LowerReach.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerReach.Entry -> LowerReach.AboveEntry", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.Lever", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurLowerEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurUpperEX", player), lambda s: s.has("LowerReach.ThawBaurFurnace", player) and s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurUpperEX", player), lambda s: s.has("LowerReach.ThawBaurFurnace", player) and has_enough_resources([('energy', ('SentryJump', 2))], [('db', 20)], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurUpperEX", player), lambda s: s.has("LowerReach.ThawBaurFurnace", player) and has_enough_resources([('energy', ('SwordSJump', 2))], [], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry -> LowerReach.AboveBaurUpperEX", player), lambda s: s.has_all(("LowerReach.ThawBaurFurnace", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.AboveEntry", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump", "Glide"), player) and s.has("Clean Water", player) and has_enough_resources([('combat', 'Nest')], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump"), player) and has_enough_resources([('combat', 'Nest'), ('energy', ('SwordSJump', 1))], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallOre", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([('combat', 'Nest'), ('energy', ('HammerSJump', 1))], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has("LowerReach.LeftFurnace", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('combat', 'Nest'), ('energy', ('SwordSJump', 1))], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Glide"), player) and s.has_any(("Dash", "Double Jump"), player) and has_enough_resources([('combat', 'Nest'), ('energy', ('SentryJump', 1))], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Icefall -> LowerReach.IcefallEX", player), lambda s: s.has_all(("LowerReach.LeftFurnace", "Dash", "Double Jump"), player) and has_enough_resources([('combat', 'Nest'), ('energy', ('SentryJump', 1))], [], "LowerReach.Icefall", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Central -> LowerReach.OutsideTPRoom", player), lambda s: s.has("LowerReach.ThawCentralFurnace", player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "LowerReach.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.AboveDoorEX", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.AboveDoorEX", player), lambda s: has_enough_resources([('energy', ('Sentry', 1))], [], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.TPLeftEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.TPLeftEX", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.OutsideTPRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom -> LowerReach.HiddenOre", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo -> LowerReach.BelowLupoEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.BelowLupo", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindLantern", player), lambda s: s.has_any(("Double Jump", "Bash", "Hammer"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 20)], [], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 20)], [], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1)), ('db', 20), ('db', 20)], [], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.WindHiddenEX", player), lambda s: s.has("Grenade", player) and has_enough_resources([('db', 20), ('db', 20)], [], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.SoupMoki", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2)), ('db', 20)], [], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.SoupMoki", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.SoupMoki", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel -> LowerReach.SoupMoki", player), lambda s: s.has("Grenade", player) and has_enough_resources([('db', 20), ('db', 20), ('db', 20)], [], "LowerReach.WindChannel", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.EastEnemyPaths", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.SoupMoki", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki -> LowerReach.EastEnemyPaths", player), lambda s: s.has("Triple Jump", player) and can_swordjump(s, player), "or")
    add_rule(world.get_entrance("LowerReach.East -> LowerReach.SnowballEnemyPaths", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.TPLantern", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.RolledSnowball", player), lambda s: has_enough_resources([('energy', ('Sentry', 1)), ('db', 20), ('energy', ('SentryJump', 1))], [], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.Snowball -> LowerReach.RolledSnowball", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Sentry', 1))], [('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1))], "LowerReach.Snowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "LowerReach.PastSnowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.PastSnowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "LowerReach.PastSnowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: can_hammerjump(s, player) and s.has_any(("Triple Jump", "Glide", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: can_hammerjump(s, player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Blaze', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "LowerReach.PastSnowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball -> LowerReach.RoofLeftEX", player), lambda s: has_enough_resources([('energy', ('Blaze', 5))], [], "LowerReach.PastSnowball", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.RoofRightEX", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.RoofRightEX", player), lambda s: can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern -> LowerReach.RoofRightEX", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.EastDoorLantern", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('SentryJump', 2)), ('energy', ('Grenade', 1))], [], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.EastDoorLantern", player), lambda s: has_enough_resources([('energy', ('Sentry', 1)), ('energy', ('SwordSJump', 2))], [], "LowerReach.HalfwayIceCavern", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern -> LowerReach.IceCavern", player), lambda s: s.has("Glide", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.EastDoorLantern", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has("LowerReach.EastDoorLantern", player) and s.has_any(("Double Jump", "Glide", "Dash"), player) and has_enough_resources([('energy', ('SwordSJump', 2))], [], "LowerReach.SwimmingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has("LowerReach.EastDoorLantern", player) and can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.ArenaArea", player), lambda s: s.has("LowerReach.EastDoorLantern", player) and can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool -> LowerReach.HalfwayIceCavern", player), lambda s: can_swordjump(s, player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea -> LowerReach.WindSpinners", player), lambda s: s.has_all(("LowerReach.ArenaBeaten", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners -> LowerReach.WispPathCheckpoint", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.BridgeWispPath", player), lambda s: s.has("Bash", player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "LowerReach.WispPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.BridgeWispPath", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "LowerReach.WispPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.BridgeWispPath", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint -> LowerReach.BridgeWispPath", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath -> LowerReach.SnowEscape", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has_all(("Double Jump", "Dash", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has("Dash", player) and s.has("Grapple", player) and has_enough_resources([('energy', ('SentryJump', 3))], [], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('SentryJump', 3))], [('db', 20)], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('SentryJump', 4))], [], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.ForestsMemory", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has_all(("Double Jump", "Dash", "Triple Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has("Dash", player) and s.has("Grapple", player) and has_enough_resources([('energy', ('SentryJump', 3))], [], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('SentryJump', 3))], [('db', 20)], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('SentryJump', 4))], [], "LowerReach.SnowEscape", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape -> LowerReach.BearSneezed", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome -> LowerReach.TownEntry", player), lambda s: s.has("Grenade", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.RightKS", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.RightKS", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TrialEX", player), lambda s: s.has_all(("Grenade", "Double Jump", "Triple Jump"), player) and has_enough_resources([('db', 20)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TrialEX", player), lambda s: s.has("Triple Jump", player) and can_hammerjump(s, player) and has_enough_resources([('db', 20)], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TrialEX", player), lambda s: has_enough_resources([('energy', ('Blaze', 9))], [], "LowerReach.TrialStart", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.TrialEX", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart -> LowerReach.ArenaArea", player), lambda s: s.has_all(("LowerReach.ArenaBeaten", "Flash"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has("Burrow", player) and has_enough_resources([('energy', ('SwordSJump', 2))], [], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has("Burrow", player) and s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has("Burrow", player) and has_enough_resources([('energy', ('SentryJump', 1))], [('db', 20)], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Dash"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Dash"), player) and has_enough_resources([('energy', ('HammerSJump', 1)), ('db', 20)], [], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has("Burrow", player) and has_enough_resources([('energy', ('SwordSJump', 2))], [], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has("Burrow", player) and s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has("Burrow", player) and has_enough_resources([('energy', ('SentryJump', 1))], [('db', 20)], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Dash"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea -> UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Dash"), player) and has_enough_resources([('energy', ('HammerSJump', 1)), ('db', 20)], [], "UpperReach.BurrowArea", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.LowerKS", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom -> UpperReach.UpperSoup", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperReach.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.UpperKS", player), lambda s: s.has_any(("Double Jump", "Hammer"), player) and has_enough_resources([('energy', ('SwordSJump', 1)), ('db', 20)], [], "UpperReach.UpperSoupPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.UpperKS", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths -> UpperReach.KeystoneSnapPlant", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1)), ('db', 20)], [], "UpperReach.UpperSoupPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozenPaths -> UpperReach.UpperKS", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1)), ('db', 20)], [], "UpperReach.UpperSoupFrozenPaths", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge -> UpperReach.TreeOre", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperReach.TreeRoomLedge", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.Entry -> EastHollow.AboveDepths", player), lambda s: s.has_all(("EastHollow.DepthsOpen", "Double Jump"), player) and can_enter_area(EastHollow, s, player, options) and has_enough_resources([('energy', ('SentryJump', 2))], [], "UpperDepths.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly -> UpperDepths.EntryRoofEX", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1)), ('combat', 'Bat'), ('db', 30)], [], "UpperDepths.FirstFirefly", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom -> LowerDepths.East", player), lambda s: can_enter_area(LowerDepths, s, player, options) and has_enough_resources([('wall', ('shuriken', 20))], [], "UpperDepths.SecondKSRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("MoraEscape -> MoraSecondPhase", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: has_enough_resources([('energy', ('Blaze', 2))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> H.LowerDepths.West", player), lambda s: has_enough_resources([('energy', ('Sentry', 2))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has("BreakCrystal", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has("BreakCrystal", player) and can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has_all(("BreakCrystal", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has("BreakCrystal", player) and has_enough_resources([('energy', ('Blaze', 2))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> E.LowerDepths.West", player), lambda s: s.has("BreakCrystal", player) and has_enough_resources([('energy', ('Sentry', 2))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has("Glide", player) and has_enough_resources([('wall', ('shuriken', 20))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has("Glide", player) and has_enough_resources([('wall', ('shuriken', 20))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('wall', ('shuriken', 20)), ('energy', ('Shuriken', 2))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: can_hammerjump(s, player) and has_enough_resources([('wall', ('shuriken', 20))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Sword", "Clean Water"), player) and has_enough_resources([('wall', ('shuriken', 20))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has("Sword", player) and has_enough_resources([('wall', ('shuriken', 20)), ('db', 140)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has("Flash", player) and has_enough_resources([('wall', ('shuriken', 20))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: has_enough_resources([('wall', ('shuriken', 20)), ('energy', ('Blaze', 1))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: has_enough_resources([('wall', ('shuriken', 20)), ('energy', ('Sentry', 1))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Glide", "Flash"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Glide", "Flash"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Glide", "UpperDepths.ForestsEyes"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Glide", "UpperDepths.ForestsEyes"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Flash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Flash"), player) and can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Flash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Flash"), player) and can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "UpperDepths.ForestsEyes", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "UpperDepths.ForestsEyes"), player) and can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "UpperDepths.ForestsEyes", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "UpperDepths.ForestsEyes"), player) and can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has("Clean Water", player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Flash"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> UpperDepths.LowerConnection", player), lambda s: s.has("Launch", player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has("Dash", player) and s.has("DepthsLight", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has("Dash", player) and has_enough_resources([('energy', ('SentryJump', 1))], [('wall', ('BreakWall', 1))], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has("DepthsLight", player) and s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 10)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has("DepthsLight", player) and s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 10)], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 10), ('wall', ('BreakWall', 1))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 10), ('wall', ('BreakWall', 1))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has("Glide", player) and s.has("DepthsLight", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has("Glide", player) and has_enough_resources([('energy', ('SentryJump', 1))], [('wall', ('BreakWall', 1))], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has("DepthsLight", player) and can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: s.has("DepthsLight", player) and can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: can_glidehammerjump(s, player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.West -> LowerDepths.Central", player), lambda s: can_hammerjump(s, player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.West", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has_all(("DepthsLight", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has_all(("DepthsLight", "Grenade"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerDepths.Central", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.RaceStartHC", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: s.has_all(("Bash", "Grenade"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> LowerDepths.East", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has("DepthsLight", player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has_all(("DepthsLight", "Glide"), player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has("DepthsLight", player) and can_hammerjump(s, player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.Central -> UpperDepths.LowerConnection", player), lambda s: s.has("Launch", player) and can_enter_area(UpperDepths, s, player, options), "or")
    add_rule(world.get_entrance("LowerDepths.East -> E.LowerDepths.East", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> E.LowerDepths.East", player), lambda s: s.has_all(("BreakCrystal", "Grenade"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("DepthsLight", "Double Jump", "Glide"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("DepthsLight", "Grenade", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has_any(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("Bash", "Grapple", "Grenade"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: can_buy_map(s, player) and s.has_any(("DepthsLight", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has_all(("Bash", "Grenade"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has_all(("Double Jump", "Grenade"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: s.has("Glide", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.LupoMap", player), lambda s: can_buy_map(s, player) and can_wavedash(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('SentryJump', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and s.has_any(("Double Jump", "Glide"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Bash"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20)), ('energy', ('HammerSJump', 1))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Hammer"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("DepthsLight", "Hammer"), player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has("DepthsLight", player) and can_glidehammerjump(s, player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> UpperDepths.SecondKSRoom", player), lambda s: s.has("DepthsLight", player) and can_hammerjump(s, player) and can_enter_area(UpperDepths, s, player, options) and has_enough_resources([('wall', ('BreakWall', 20))], [], "LowerDepths.East", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.East -> LowerDepths.BeforeTree", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Grenade", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Grenade", player) and has_enough_resources([], [('db', 20)], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('Blaze', 1))], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: has_enough_resources([('energy', ('Blaze', 1))], [('db', 10)], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: has_enough_resources([('energy', ('Blaze', 2))], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.East", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree -> LowerDepths.TreeArea", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Grapple", "Glide"), player) and has_enough_resources([('wall', ('BreakWall', 1))], [], "LowerDepths.BeforeTree", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea -> LowerDepths.RightEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerDepths.TreeArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea -> LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has("Clean Water", player) and can_swordjump(s, player) and can_enter_area(WestGlades, s, player, options) and has_enough_resources([('db', 15)], [], "PoolsApproach.MillPathCheckpoint", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> WestGlades.MillApproach", player), lambda s: s.has("Clean Water", player) and can_hammerjump(s, player) and can_enter_area(WestGlades, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint -> PoolsApproach.MillPath", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathEX", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1))], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Grenade", "Grapple"), player) and s.has_any(("Sword", "Hammer", "Glide"), player) and has_enough_resources([('combat', 'Crab')], [], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath -> PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Grenade", "Grapple"), player) and has_enough_resources([('combat', 'Crab')], [('db', 20)], "PoolsApproach.MillPath", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Launch", player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 120)], [], "PoolsApproach.MarshBreakableWall", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('energy', ('Grenade', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.UnderwaterWallBroken", player), lambda s: has_enough_resources([('energy', ('Grenade', 1))], [('db', 180)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has("Glide", player) and has_enough_resources([], [('energy', ('Spear', 1)), ('energy', ('Shuriken', 1)), ('energy', ('Flash', 1)), ('energy', ('Sentry', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: can_swordjump(s, player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has_all(("PoolsApproach.WheelFreed", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.AboveWheelEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has("Clean Water", player) and can_hammerjump(s, player) and s.has_any(("Dash", "Triple Jump", "Sword", "Glide", "Grapple"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MillPathHC", player), lambda s: s.has("Clean Water", player) and can_hammerjump(s, player) and has_enough_resources([], [('db', 20)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Clean Water", player) and can_hammerjump(s, player) and s.has_any(("Dash", "Triple Jump", "Sword", "Glide", "Grapple"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Clean Water", player) and can_hammerjump(s, player) and has_enough_resources([], [('db', 20)], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has("Clean Water", player) and can_hammerjump(s, player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Hammer"), player) and can_enter_area(EastPools, s, player, options), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel -> EastPools.LeverRoom", player), lambda s: s.has("Glide", player) and can_enter_area(EastPools, s, player, options) and has_enough_resources([], [('energy', ('Spear', 1))], "PoolsApproach.OnTopOfWheel", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.BelowLeverEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom -> EastPools.BelowLeverEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [('db', 20)], "EastPools.LeverRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.TPArea -> EastPools.FishingPool", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "EastPools.TPArea", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.FishingPool -> EastPools.AboveFishingPool", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "EastPools.FishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool -> EastPools.PurpleWallHC", player), lambda s: s.has("Bash", player) and s.has("Launch", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastPools.AboveFishingPool", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> EastPools.GrassSeed", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("EastPools.CentralRoomBubbleFree", player) and can_enter_area(UpperPools, s, player, options) and has_enough_resources([('energy', ('SentryJump', 1))], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("EastPools.CentralRoomBubbleFree", "Grenade"), player) and s.has_any(("Double Jump", "Glide"), player) and can_enter_area(UpperPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("EastPools.CentralRoomBubbleFree", player) and can_enter_area(UpperPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> UpperPools.KeystoneRoomEntrance", player), lambda s: can_enter_area(UpperPools, s, player, options) and has_enough_resources([('energy', ('SentryJump', 2))], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Double Jump"), player) and can_hammerjump(s, player) and can_enter_area(WestPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Double Jump", "Grenade"), player) and can_enter_area(WestPools, s, player, options), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom -> WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Water Breath"), player) and can_swordjump(s, player) and can_enter_area(WestPools, s, player, options) and has_enough_resources([('db', 20)], [], "EastPools.CentralRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Glide", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and can_hammerjump(s, player) and can_enter_area(WestPools, s, player, options), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Grenade"), player) and can_enter_area(WestPools, s, player, options), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> WestPools.Teleporter", player), lambda s: s.has("Clean Water", player) and can_swordjump(s, player) and can_enter_area(WestPools, s, player, options) and has_enough_resources([('db', 20)], [], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance -> WestPools.RightKwolokPlatform", player), lambda s: s.has("Clean Water", player) and can_enter_area(WestPools, s, player, options) and has_enough_resources([('wall', ('shuriken', 20)), ('db', 20), ('db', 20), ('db', 20)], [], "UpperPools.KeystoneRoomEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner -> UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("UpperPools.KeystoneRoomBubbleFree", "Flap"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "UpperPools.KeystoneRoomBubbleSpawner", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: has_enough_resources([('energy', ('HammerSJump', 1))], [], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Grapple", "UltraGrapple"), player) and s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Grapple", "UltraGrapple", "Flash"), player) and s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Grapple", "UltraGrapple"), player) and s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Bash", "Glide"), player) and has_enough_resources([('energy', ('Spear', 1))], [], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Grapple", "UltraGrapple"), player) and s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Bash", "Glide"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Grenade", "Flash"), player) and s.has_any(("Hammer", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grenade", player) and s.has_any(("Hammer", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grenade", player) and s.has_any(("Hammer", "Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grenade", player) and s.has_any(("Hammer", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grenade", player) and has_enough_resources([], [('energy', ('Shuriken', 1)), ('db', 20)], "UpperPools.BeforeKeystoneDoor", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor -> UpperPools.RightBubbleSpamRoom", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("UpperPools.ButtonDoorAboveTree", player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "UpperPools.TreeRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('HammerSJump', 1)), ('energy', ('HammerSJump', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.WaterfallEC", player), lambda s: s.has("Grapple", player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "UpperPools.DrainPuzzleEntrance", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance -> UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Glide"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Water Dash", "Bash", "Clean Water", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("UpperPools.DrainRoomPurpleWall", "Water Dash", "Bash", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and has_enough_resources([('energy', ('Grenade', 1)), ('db', 60)], [], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight -> UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has_any(("Double Jump", "Dash"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperPools.DrainPuzzleRight", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamLever", player), lambda s: s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamLever", player), lambda s: s.has("Flash", player) and s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamLever", player), lambda s: s.has("Grenade", player) and s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamLever", player), lambda s: s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Sentry', 1))], [], "UpperPools.RightBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.BubbleSpamLever", player), lambda s: s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('Blaze', 1))], [], "UpperPools.RightBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: has_enough_resources([('energy', ('Blaze', 2))], [], "UpperPools.RightBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: has_enough_resources([('energy', ('Sentry', 2))], [], "UpperPools.RightBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: can_glidehammerjump(s, player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom -> UpperPools.FishPoolOre", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has("Launch", player) and has_enough_resources([('db', 160), ('energy', ('SwordSJump', 1))], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has("Grenade", player) and s.has("Launch", player) and has_enough_resources([('db', 160)], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.BubbleSpamWall", player), lambda s: s.has("Bash", player) and s.has("Launch", player) and has_enough_resources([('db', 60), ('energy', ('SwordSJump', 1))], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Clean Water", player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1))], [('db', 60)], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom -> UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Water Dash", player) and has_enough_resources([('db', 40), ('energy', ('SwordSJump', 1))], [], "UpperPools.LeftBubbleSpamRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform -> WestPools.RightKwolokPlatform", player), lambda s: can_hammerjump(s, player) and s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform -> WestPools.LeftKwolokPlatform", player), lambda s: s.has_all(("Triple Jump", "Dash"), player) and can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("WindtornRuins.Seir", "Burrow", "Double Jump", "Dash", "Hammer"), player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("WindtornRuins.Seir", "Burrow", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide"), player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('SentryJump', 2))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP -> WeepingRidge.Bottom", player), lambda s: s.has_all(("WindtornRuins.Seir", "Burrow"), player) and s.has_any(("Dash", "Glide"), player) and can_enter_area(WeepingRidge, s, player, options) and has_enough_resources([('energy', ('SentryJump', 2))], [], "LowerWastes.WestTP", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.Shovel", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.SunsetView", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView -> LowerWastes.Shovel", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot -> LowerWastes.WoodenBridge", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge -> LowerWastes.LeverArea", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea -> LowerWastes.LastStandArea", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.LeverArea", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive -> LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and has_enough_resources([('db', 30)], [], "LowerWastes.SkeetoHive", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.LupoMap", player), lambda s: can_buy_map(s, player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "LowerWastes.ThirstyGorlek", s, player, options, False), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek -> LowerWastes.LupoMap", player), lambda s: s.has("Grenade", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KeystoneDoor", player), lambda s: s.has("Bash", player) and can_open_door(UpperWastes.KeystoneDoor, s, player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KeystoneDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and can_open_door(UpperWastes.KeystoneDoor, s, player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Double Jump", "Bash"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 30)], [], "UpperWastes.KeystoneRoom", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom -> UpperWastes.KSDoorEX", player), lambda s: s.has("Triple Jump", player) and can_swordjump(s, player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft -> UpperWastes.LedgeEC", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperWastes.MissilePuzzleLeft", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers -> UpperWastes.RoofEX", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "UpperWastes.SpinLasers", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.FlowersSeed", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 30)], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP -> UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and has_enough_resources([('energy', ('SentryJump', 2)), ('db', 30)], [], "UpperWastes.NorthTP", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WormEscapeEnd", player), lambda s: s.has_all(("Bash", "Grenade", "Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('Grenade', 1))], [], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WormEscapeEnd", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SwordSJump', 1)), ('energy', ('Spear', 1))], [], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WormEscapeEnd", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('HammerSJump', 1))], [], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WormEscapeEnd", player), lambda s: has_enough_resources([('energy', ('Sentry', 6))], [], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WormEscapeEnd", player), lambda s: has_enough_resources([('energy', ('Blaze', 6))], [], "UpperWastes.OutsideRuins", s, player, options, False), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WormEscapeEnd", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WormEscapeEnd", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins -> UpperWastes.WormEscapeEnd", player), lambda s: can_glidehammerjump(s, player) and can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.HeartBarrier", player), lambda s: has_enough_resources([('wall', ('sentry', 16))], [], "WindtornRuins.FallenPillar", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar -> WindtornRuins.HeartBarrier", player), lambda s: has_enough_resources([('wall', ('shuriken', 16))], [], "WindtornRuins.FallenPillar", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("WindtornRuins.HeartBarrier", "Burrow", "Flash"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("UpperWastes.WormEscapeEnd", "Burrow"), player) and s.has("Launch", player) and has_enough_resources([('energy', ('Blaze', 4))], [], "WindtornRuins.Escape", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("UpperWastes.WormEscapeEnd", "Burrow"), player) and s.has("Launch", player) and has_enough_resources([('energy', ('Sentry', 4))], [], "WindtornRuins.Escape", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("UpperWastes.WormEscapeEnd", "Burrow", "Flash"), player) and s.has("Launch", player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("UpperWastes.WormEscapeEnd", "Burrow"), player) and s.has("Launch", player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WindtornRuins.Escape", s, player, options, False), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("UpperWastes.WormEscapeEnd", "Burrow", "Hammer"), player) and can_hammerjump(s, player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("UpperWastes.WormEscapeEnd", "Burrow", "Hammer"), player) and can_hammerjump(s, player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("UpperWastes.WormEscapeEnd", "Burrow"), player) and can_hammerjump(s, player) and can_glidehammerjump(s, player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("UpperWastes.WormEscapeEnd", "Burrow"), player) and can_hammerjump(s, player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape -> WindtornRuins.Seir", player), lambda s: s.has_all(("UpperWastes.WormEscapeEnd", "Burrow", "Grenade", "Double Jump", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Ore", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 2)), ('energy', ('Bow', 1)), ('db', 40)], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.Ore", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide"), player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea -> WeepingRidge.WillowEntranceLedge", player), lambda s: s.has_all(("WeepingRidge.ElevatorFightCompleted", "Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 3))], [], "WeepingRidge.LaunchArea", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.PortalEX", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 2)), ('db', 40)], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.SpikeClimbEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Bash", "Sword"), player) and has_enough_resources([('energy', ('SentryJump', 3))], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.SpikeClimbEX", player), lambda s: s.has("Double Jump", player) and has_enough_resources([('energy', ('SentryJump', 3))], [('db', 40)], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree -> WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Double Jump", "Triple Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "WeepingRidge.AboveTree", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleWheelsHeart", player), lambda s: s.has("Launch", player) and has_enough_resources([('wall', ('shuriken', 30))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.EntryEX", player), lambda s: s.has_all(("Triple Jump", "Dash"), player) and can_swordjump(s, player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Glide", "Double Jump", "Triple Jump", "Grapple"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 20)], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Dash"), player) and has_enough_resources([('energy', ('SwordSJump', 2))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Double Jump"), player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Double Jump"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("WillowsEnd.GrappleWheelsHeart", "Double Jump"), player) and has_enough_resources([('energy', ('SentryJump', 1)), ('db', 20)], [], "WillowsEnd.Entry", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: can_hammerjump(s, player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Double Jump", "Grenade"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint -> WillowsEnd.Entry", player), lambda s: s.has_all(("Double Jump", "Grenade"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 1))], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Grapple", "Double Jump", "Glide"), player) and has_enough_resources([('energy', ('SwordSJump', 1))], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and has_enough_resources([('energy', ('SentryJump', 2))], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and has_enough_resources([('energy', ('SwordSJump', 2))], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath -> WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and has_enough_resources([('energy', ('HammerSJump', 3))], [], "WillowsEnd.BoulderHeartPath", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP -> WillowsEnd.AboveInnerTP", player), lambda s: has_enough_resources([('energy', ('SwordSJump', 1)), ('db', 40)], [], "WillowsEnd.InnerTP", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.East -> WillowsEnd.Upper", player), lambda s: s.has_all(("Double Jump", "Triple Jump"), player) and has_enough_resources([('energy', ('SwordSJump', 1)), ('db', 20)], [], "WillowsEnd.East", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath -> WillowsEnd.East", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.West", player), lambda s: s.has("Triple Jump", player) and can_swordjump(s, player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper -> WillowsEnd.UpperHeartPath", player), lambda s: has_enough_resources([('energy', ('SentryJump', 1))], [], "WillowsEnd.Upper", s, player, options, False), "or")
    add_rule(world.get_entrance("WillowsEnd.West -> WillowsEnd.Upper", player), lambda s: has_enough_resources([('energy', ('SentryJump', 2))], [], "WillowsEnd.West", s, player, options, False), "or")
