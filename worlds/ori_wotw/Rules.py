"""
File generated with `extract_rules.py` with an `areas.wotw` file.

You can find such a file at https://github.com/ori-community/wotw-seedgen/tree/main/wotw_seedgen .

Do not edit manually.
"""

from .Rules_Functions import *

from worlds.generic.Rules import add_rule


def set_moki_rules(world, player, options):
    """Moki (or easy, default) rules."""
    add_rule(world.get_location("DepthsLight", player), lambda state: state.has_any(("UpperDepths.ForestsEyes", "Flash"), player))
    add_rule(world.get_location("SkipKwolok", player), lambda s: s.can_reach_region("HeaderStates") and s.has("Impossible", player))
    add_rule(world.get_location("SkipMora1", player), lambda s: s.can_reach_region("HeaderStates") and s.has("Impossible", player))
    add_rule(world.get_location("SkipMora2", player), lambda s: s.can_reach_region("HeaderStates") and s.has("Impossible", player))
    add_rule(world.get_entrance("Teleporters_to_MidnightBurrows.Teleporter", player), lambda s: s.has("Bash", player) and s.has("BurrowsTP", player) and can_keystones(s, player))
    add_rule(world.get_entrance("Teleporters_to_MarshSpawn.Main", player), lambda s: s.has("MarshTP", player))
    add_rule(world.get_entrance("Teleporters_to_HowlsDen.Teleporter", player), lambda s: s.has("DenTP", player))
    add_rule(world.get_entrance("Teleporters_to_EastHollow.Teleporter", player), lambda s: s.has("HollowTP", player))
    add_rule(world.get_entrance("Teleporters_to_GladesTown.Teleporter", player), lambda s: s.has("GladesTP", player))
    add_rule(world.get_entrance("Teleporters_to_InnerWellspring.Teleporter", player), lambda s: s.has("WellspringTP", player))
    add_rule(world.get_entrance("Teleporters_to_WoodsEntry.Teleporter", player), lambda s: s.has("WestWoodsTP", player))
    add_rule(world.get_entrance("Teleporters_to_WoodsMain.Teleporter", player), lambda s: s.has("EastWoodsTP", player))
    add_rule(world.get_entrance("Teleporters_to_LowerReach.Teleporter", player), lambda s: s.has("Flap", player) and s.has("ReachTP", player))
    add_rule(world.get_entrance("Teleporters_to_UpperDepths.Teleporter", player), lambda s: s.has("Glide", player) and s.has("DepthsTP", player))
    add_rule(world.get_entrance("Teleporters_to_EastPools.Teleporter", player), lambda s: s.has("Water", player) and s.has("EastPoolsTP", player))
    add_rule(world.get_entrance("Teleporters_to_WestPools.Teleporter", player), lambda s: s.has("Water", player) and s.has("WestPoolsTP", player))
    add_rule(world.get_entrance("Teleporters_to_LowerWastes.WestTP", player), lambda s: s.has("WestWastesTP", player))
    add_rule(world.get_entrance("Teleporters_to_LowerWastes.EastTP", player), lambda s: s.has("Burrow", player) and s.has("EastWastesTP", player))
    add_rule(world.get_entrance("Teleporters_to_UpperWastes.NorthTP", player), lambda s: s.has("Burrow", player) and s.has("OuterRuinsTP", player))
    add_rule(world.get_entrance("Teleporters_to_WindtornRuins.RuinsTP", player), lambda s: s.has("Burrow", player) and s.has("InnerRuinsTP", player) and s.has("EastHollow.ForestsVoice", player) and s.has("LowerReach.ForestsMemory", player) and s.has("UpperDepths.ForestsEyes", player) and s.has("WestPools.ForestsStrength", player))
    add_rule(world.get_entrance("Teleporters_to_WillowsEnd.InnerTP", player), lambda s: s.has("Burrow", player) and s.has("WillowTP", player))
    add_rule(world.get_entrance("Teleporters_to_WillowsEnd.Upper", player), lambda s: s.has("Burrow", player) and s.has("ShriekTP", player))
    add_rule(world.get_location("F.MarshSpawn.Main", player), lambda s: s.can_reach_region("MarshSpawn.Main"))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda s: s.can_reach_region("MarshSpawn.Main"))
    add_rule(world.get_location("MarshSpawn.FirstPickupEX", player), lambda s: s.can_reach_region("MarshSpawn.Main"))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has("Grapple", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("MarshSpawn.BridgeEX", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("MarshSpawn.BridgeEX", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.Main", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.Main_to_Teleporters", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.OpherBarrier", player), lambda s: True)
    add_rule(world.get_location("C.MarshSpawn.OpherBarrier", player), lambda s: s.can_reach_region("MarshSpawn.OpherBarrier"))
    add_rule(world.get_location("MarshSpawn.ToOpherBarrier", player), lambda s: s.can_reach_region("MarshSpawn.OpherBarrier") and cost_all(s, player, options, "MarshSpawn.OpherBarrier", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_location("MarshSpawn.LogBroken", player), lambda s: s.can_reach_region("MarshSpawn.OpherBarrier"))
    add_rule(world.get_location("MarshSpawn.BridgeEX", player), lambda s: s.can_reach_region("MarshSpawn.OpherBarrier") and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshPastOpher.MillView", player), lambda s: s.has("MarshSpawn.ToOpherBarrier", player))
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.BrokenBridge", player), lambda s: s.has("MarshSpawn.LogBroken", player))
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda s: s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.OpherBarrier", "MarshSpawn.Main", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("C.MarshSpawn.BrokenBridge", player), lambda s: s.can_reach_region("MarshSpawn.BrokenBridge"))
    add_rule(world.get_location("MarshSpawn.ResilienceShard", player), lambda s: s.can_reach_region("MarshSpawn.BrokenBridge") and cost_all(s, player, options, "MarshSpawn.BrokenBridge", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_location("MarshSpawn.ResilienceOre", player), lambda s: s.can_reach_region("MarshSpawn.BrokenBridge") and s.has("Water", player) and cost_all(s, player, options, "MarshSpawn.BrokenBridge", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_location("MarshSpawn.BashEC", player), lambda s: s.can_reach_region("MarshSpawn.BrokenBridge") and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_location("MarshSpawn.PreLupoEX", player), lambda s: s.can_reach_region("MarshSpawn.BrokenBridge"))
    add_rule(world.get_location("MarshSpawn.LupoMap", player), lambda s: s.can_reach_region("MarshSpawn.BrokenBridge") and s.has("SpiritLight", player))
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.CaveEntrance", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("MarshSpawn.LogBroken", player) and s.has_any(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.LogBroken", player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.LogBroken", player) and cost_all(s, player, options, "MarshSpawn.BrokenBridge", "MarshSpawn.OpherBarrier", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("C.MarshSpawn.CaveEntrance", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance"))
    add_rule(world.get_location("MarshSpawn.KeystoneDoor", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and can_keystones(s, player))
    add_rule(world.get_location("MarshSpawn.TokkBarrier", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and cost_all(s, player, options, "MarshSpawn.CaveEntrance", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has_all(("Grapple", "DoubleJump", "Bash"), player))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has_all(("Launch", "Bash"), player))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has_all(("Grapple", "Launch"), player))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.RegenDoor", player), lambda s: can_keystones(s, player))
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", "MarshSpawn.BrokenBridge", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.Cave", player), lambda s: s.has("MarshSpawn.TokkBarrier", player))
    add_rule(world.get_location("C.MarshSpawn.Cave", player), lambda s: s.can_reach_region("MarshSpawn.Cave"))
    add_rule(world.get_location("H.MarshSpawn.Cave", player), lambda s: s.can_reach_region("MarshSpawn.Cave"))
    add_rule(world.get_location("MarshSpawn.CaveFight", player), lambda s: s.can_reach_region("MarshSpawn.Cave") and cost_all(s, player, options, "MarshSpawn.Cave", "", [], [], [[24, 'Combat', 24, 'Combat', 24, 'Combat']], []))
    add_rule(world.get_location("MarshSpawn.CaveKS", player), lambda s: s.can_reach_region("MarshSpawn.Cave") and s.has("DoubleJump", player) and s.has_any(("Dash", "Grapple"), player))
    add_rule(world.get_location("MarshSpawn.CaveKS", player), lambda s: s.can_reach_region("MarshSpawn.Cave") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Grapple"), player))
    add_rule(world.get_location("MarshSpawn.CaveKS", player), lambda s: s.can_reach_region("MarshSpawn.Cave") and s.has("Launch", player))
    add_rule(world.get_location("MarshSpawn.CaveKS", player), lambda s: s.can_reach_region("MarshSpawn.Cave") and s.has("MarshSpawn.CaveFight", player))
    add_rule(world.get_location("MarshSpawn.TokkKeystoneQuest", player), lambda s: s.can_reach_region("MarshSpawn.Cave") and s.has("MarshSpawn.CaveKS", player))
    add_rule(world.get_location("MarshSpawn.LeftTokkEX", player), lambda s: s.can_reach_region("MarshSpawn.Cave") and cost_all(s, player, options, "MarshSpawn.Cave", "", [], [], [[10, 'Wall']], []))
    add_rule(world.get_location("MarshSpawn.FightRoomEX", player), lambda s: s.can_reach_region("MarshSpawn.Cave") and cost_all(s, player, options, "MarshSpawn.Cave", "", [], [], [[10, 'Wall']], []))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_Tokk", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.CaveEntrance", player), lambda s: s.has("MarshSpawn.TokkBarrier", player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Grapple"), player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Grapple"), player) and cost_all(s, player, options, "MarshSpawn.Cave", "MarshSpawn.PoolsBurrowsSignpost", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("MarshSpawn.CaveFight", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.CaveFight", player) and cost_all(s, player, options, "MarshSpawn.Cave", "MarshSpawn.PoolsBurrowsSignpost", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("H.MarshSpawn.BurrowFightArena", player), lambda s: s.can_reach_region("MarshSpawn.BurrowFightArena"))
    add_rule(world.get_location("MarshSpawn.BurrowArena", player), lambda s: s.can_reach_region("MarshSpawn.BurrowFightArena") and s.has("Regenerate", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Sand", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "", [40], [], [[40, 'Combat'], [32, 'Ranged'], [20, 'Combat', 20, 'Combat'], [24, 'Combat', 24, 'Combat'], [20, 'Combat', 20, 'Combat', 20, 'Combat'], [32, 'Combat']], []))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.BurrowFightArena") and s.has_all(("Burrow", "DoubleJump", "Bash"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.BurrowFightArena") and s.has_all(("Burrow", "DoubleJump", "Bash"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.BurrowFightArena") and s.has_all(("Burrow", "Bash", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LifepactLedge", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Launch", "Glide"), player))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Water", "Burrow", "Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Water", "Burrow", "Bash", "Launch"), player))
    add_rule(world.get_location("MarshSpawn.LifepactShard", player), lambda s: s.can_reach_region("MarshSpawn.LifepactLedge") and s.has("MarshSpawn.BurrowArena", player))
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Dash", "Glide"), player))
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("C.MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost"))
    add_rule(world.get_location("MarshSpawn.CaveKS", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost"))
    add_rule(world.get_location("MarshSpawn.CaveOre", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("MarshSpawn.CaveOre", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and s.has_all(("Bash", "DoubleJump"), player))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.Cave", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_location("C.MarshSpawn.BeforeBurrows", player), lambda s: s.can_reach_region("MarshSpawn.BeforeBurrows"))
    add_rule(world.get_location("MarshSpawn.CrusherSwimEX", player), lambda s: s.can_reach_region("MarshSpawn.BeforeBurrows") and s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_location("MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.can_reach_region("MarshSpawn.BeforeBurrows") and s.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Water", "WaterDash", "Bash"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "MarshSpawn.BurrowsEntry", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Water", "WaterDash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Launch", "Bash"), player))
    add_rule(world.get_location("C.MarshSpawn.BurrowsEntry", player), lambda s: s.can_reach_region("MarshSpawn.BurrowsEntry"))
    add_rule(world.get_location("MarshSpawn.BurrowsOpen", player), lambda s: s.can_reach_region("MarshSpawn.BurrowsEntry") and s.has_all(("Bash", "DoubleJump", "Glide"), player))
    add_rule(world.get_location("MarshSpawn.BurrowsOpen", player), lambda s: s.can_reach_region("MarshSpawn.BurrowsEntry") and s.has_all(("Bash", "Launch"), player))
    add_rule(world.get_location("MarshSpawn.DamageTreeOpen", player), lambda s: s.can_reach_region("MarshSpawn.BurrowsEntry") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("MarshSpawn.TokkTabletQuest", player), lambda s: s.can_reach_region("MarshSpawn.BurrowsEntry") and s.has("MidnightBurrows.TabletQI", player))
    add_rule(world.get_location("MarshSpawn.DamageTree", player), lambda s: s.can_reach_region("MarshSpawn.BurrowsEntry") and s.has("MarshSpawn.DamageTreeOpen", player))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_Tokk", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MidnightBurrows.Teleporter", player), lambda s: s.has("MarshSpawn.BurrowsOpen", player) and has_health("25", s, player))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_any(("Glide", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Water", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_location("C.MarshSpawn.LeftSpawnSignpost", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost"))
    add_rule(world.get_location("MarshSpawn.RockHC", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost"))
    add_rule(world.get_location("MarshSpawn.LongSwimEX", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has("Water", player))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has_all(("Water", "Burrow", "Bash"), player) and s.has_any(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has_all(("Water", "Burrow", "Bash", "Dash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.Main", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("DoubleJump", "Bash", "Glide"), player))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Bash", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Water", "Burrow"), player) and s.has_any(("DoubleJump", "Glide", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Water", "Burrow", "Dash", "Bash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.BurrowFightArena", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("C.MarshSpawn.PoolsPath", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath"))
    add_rule(world.get_location("PoolsApproach.WheelFreed", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and s.has_all(("Water", "WaterBreath", "Bash"), player))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and s.has_all(("DoubleJump", "Bash", "Glide"), player))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and s.has_all(("Bash", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Water"), player) and s.has_any(("WaterBreath", "WaterDash"), player) and s.has_any(("PoolsApproach.WheelFreed", "DoubleJump", "Launch"), player) and has_health("25", s, player))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Water", "Bash"), player) and s.has_any(("WaterBreath", "WaterDash"), player) and has_health("25", s, player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Water", player) and s.has_any(("WaterDash", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Glide", player) and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_location("MarshSpawn.KeystoneDoor", player), lambda s: s.can_reach_region("MarshSpawn.RegenDoor") and can_keystones(s, player))
    add_rule(world.get_location("MarshSpawn.RegenTree", player), lambda s: s.can_reach_region("MarshSpawn.RegenDoor"))
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.CaveEntrance", player), lambda s: can_keystones(s, player))
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.RegenDoor", "MarshSpawn.HowlApproach", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: s.has("WaterDash", player))
    add_rule(world.get_location("C.MarshSpawn.HowlApproach", player), lambda s: s.can_reach_region("MarshSpawn.HowlApproach"))
    add_rule(world.get_location("MarshSpawn.HowlBurnt", player), lambda s: s.can_reach_region("MarshSpawn.HowlApproach"))
    add_rule(world.get_location("MarshSpawn.RegenTree", player), lambda s: s.can_reach_region("MarshSpawn.HowlApproach"))
    add_rule(world.get_location("MarshSpawn.RecklessShard", player), lambda s: s.can_reach_region("MarshSpawn.HowlApproach") and cost_all(s, player, options, "MarshSpawn.HowlApproach", "", [], [], [[10, 'Wall']], []))
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.HowlApproach", "MarshSpawn.RegenDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.MokkTheBrave", player), lambda s: s.has("MarshSpawn.HowlBurnt", player))
    add_rule(world.get_location("MarshSpawn.HowlBurnt", player), lambda s: s.can_reach_region("MarshSpawn.MokkTheBrave"))
    add_rule(world.get_location("MarshSpawn.MokkFangQuest", player), lambda s: s.can_reach_region("MarshSpawn.MokkTheBrave") and s.has("MarshSpawn.HowlBurnt", player) and s.has("MarshSpawn.FangQI", player))
    add_rule(world.get_location("MarshSpawn.RecklessShard", player), lambda s: s.can_reach_region("MarshSpawn.MokkTheBrave") and s.has("Bash", player) and s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "", [], [['Grenade', 1]], [[10, 'Wall']], []))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("MarshSpawn.HowlBurnt", player))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.HowlBurnt", player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "MarshSpawn.HowlApproach", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "MarshSpawn.HowlApproach", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and s.has_any(("DoubleJump", "Bash"), player))
    add_rule(world.get_location("C.MarshSpawn.AboveHowlArena", player), lambda s: s.can_reach_region("MarshSpawn.AboveHowlArena"))
    add_rule(world.get_location("H.MarshSpawn.AboveHowlArena", player), lambda s: s.can_reach_region("MarshSpawn.AboveHowlArena"))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.AboveHowlArena") and s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.AboveHowlArena") and s.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.MokkTheBrave", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: s.has_any(("Launch", "DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.AboveHowlArena", "MarshSpawn.FangPlatform", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("H.MarshSpawn.FangPlatform", player), lambda s: s.can_reach_region("MarshSpawn.FangPlatform"))
    add_rule(world.get_location("MarshSpawn.FangQI", player), lambda s: s.can_reach_region("MarshSpawn.FangPlatform"))
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("MarshSpawn.MokkEX", player), lambda s: s.can_reach_region("MarshSpawn.HowlsDenEntrance"))
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance_to_HowlsDen.AboveBoneBridge", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance_to_MarshSpawn.MokkTheBrave", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and s.has_any(("DoubleJump", "Dash", "Launch", "Glide"), player))
    add_rule(world.get_location("C.HowlsDen.UpperLoopExit", player), lambda s: s.can_reach_region("HowlsDen.UpperLoopExit") and s.has("HowlsDen.UpperLoopExitBarrier", player))
    add_rule(world.get_location("H.HowlsDen.UpperLoopExit", player), lambda s: s.can_reach_region("HowlsDen.UpperLoopExit"))
    add_rule(world.get_location("HowlsDen.UpperLoopExitBarrier", player), lambda s: s.can_reach_region("HowlsDen.UpperLoopExit") and cost_all(s, player, options, "HowlsDen.UpperLoopExit", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_location("HowlsDen.RightHC", player), lambda s: s.can_reach_region("HowlsDen.UpperLoopExit") and s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "HowlsDen.UpperLoopExit", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("HowlsDen.RightHC", player), lambda s: s.can_reach_region("HowlsDen.UpperLoopExit") and cost_all(s, player, options, "HowlsDen.UpperLoopExit", "", [], [], [[20, 'Wall']], [[0, [[13, 'Combat']], []]]))
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player))
    add_rule(world.get_location("C.HowlsDen.AboveBoneBridge", player), lambda s: s.can_reach_region("HowlsDen.AboveBoneBridge"))
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_HowlsDen.UpperLoopEntrance", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.HowlsDen.UpperLoopEntrance", player), lambda s: s.can_reach_region("HowlsDen.UpperLoopEntrance") and s.has("HowlsDen.UpperLoopEntranceBarrier", player))
    add_rule(world.get_location("HowlsDen.UpperLoopEntranceBarrier", player), lambda s: s.can_reach_region("HowlsDen.UpperLoopEntrance") and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_location("HowlsDen.RightHC", player), lambda s: s.can_reach_region("HowlsDen.UpperLoopEntrance") and s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("HowlsDen.RightHC", player), lambda s: s.can_reach_region("HowlsDen.UpperLoopEntrance") and s.has("HowlsDen.UpperLoopEntranceBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", "", [], [], [[20, 'Wall']], [[0, [[13, 'Combat']], []]]))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.BoneBridge", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", "HowlsDen.AboveBoneBridge", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", "HowlsDen.UpperLoopExit", [], [], [[13, 'Combat']], []))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("Bash", player) and s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("C.HowlsDen.BoneBridge", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge"))
    add_rule(world.get_location("HowlsDen.KeystoneDoor", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and can_keystones(s, player))
    add_rule(world.get_location("HowlsDen.RainLifted", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and s.has("HowlsDen.SwordTree", player))
    add_rule(world.get_location("HowlsDen.BoneBarrier", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and cost_all(s, player, options, "HowlsDen.BoneBridge", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_location("HowlsDen.SwordTree", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge"))
    add_rule(world.get_location("HowlsDen.BoneOre", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and s.has("Hammer", player))
    add_rule(world.get_location("HowlsDen.BoneOre", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and cost_all(s, player, options, "HowlsDen.BoneBridge", "", [], [['Spear', 1]], [[32, 'Combat'], [13, 'Combat']], []))
    add_rule(world.get_location("HowlsDen.AboveDoorKS", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("HowlsDen.MagnetShard", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and s.has("Launch", player) and cost_all(s, player, options, "HowlsDen.BoneBridge", "", [], [], [[10, 'Wall']], []))
    add_rule(world.get_location("HowlsDen.MagnetShard", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and cost_all(s, player, options, "HowlsDen.BoneBridge", "", [], [], [[10, 'Wall']], []))
    add_rule(world.get_location("HowlsDen.AboveTPEX", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and s.has("HowlsDen.BoneBarrier", player) and cost_all(s, player, options, "HowlsDen.BoneBridge", "", [], [], [[10, 'Wall']], []))
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.BoneBridgeDoor", player), lambda s: can_keystones(s, player))
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveTeleporter", player), lambda s: s.has("HowlsDen.BoneBarrier", player))
    add_rule(world.get_location("C.HowlsDen.BoneBridgeDoor", player), lambda s: s.can_reach_region("HowlsDen.BoneBridgeDoor"))
    add_rule(world.get_location("HowlsDen.KeystoneDoor", player), lambda s: s.can_reach_region("HowlsDen.BoneBridgeDoor") and can_keystones(s, player))
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor_to_HowlsDen.BoneBridge", player), lambda s: can_keystones(s, player))
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor_to_HowlsDen.OutsideSecretRoom", player), lambda s: s.has_any(("Water", "Launch", "DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("HowlsDen.SecretRoomWall", player), lambda s: s.can_reach_region("HowlsDen.OutsideSecretRoom") and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("HowlsDen.SecretRoomWall", player))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.BoneBridgeDoor", player), lambda s: s.has_any(("Water", "Launch", "DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", "HowlsDen.MidwayBottomLoop", [], [], [[13, 'Combat']], []))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", "HowlsDen.MidwayBottomLoop", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", "HowlsDen.MidwayBottomLoop", [], [['Grenade', 1]], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("H.HowlsDen.MidwayBottomLoop", player), lambda s: s.can_reach_region("HowlsDen.MidwayBottomLoop"))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.OutsideSecretRoom", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", "HowlsDen.AboveBoneBridge", [], [], [[16, 'Wall']], []))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("DoubleJump", player) and s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", "HowlsDen.AboveBoneBridge", [], [], [[16, 'Wall']], []))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", "HowlsDen.AboveBoneBridge", [], [], [[16, 'Wall']], [[0, [[13, 'Combat']], []]]))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Dash", player) and s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", "HowlsDen.AboveBoneBridge", [], [], [[16, 'Wall']], []))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", "HowlsDen.AboveBoneBridge", [], [], [[16, 'Wall']], [[0, [[13, 'Combat']], []]]))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", "HowlsDen.AboveBoneBridge", [], [['Grenade', 1]], [[16, 'Wall']], []))
    add_rule(world.get_location("C.HowlsDen.SecretRoom", player), lambda s: s.can_reach_region("HowlsDen.SecretRoom"))
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: s.has_any(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.OutsideSecretRoom", player), lambda s: s.has("HowlsDen.SecretRoomWall", player))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom") and s.has("Combat.Dangerous", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "", [], [], [[32, 'Combat']], []))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom") and s.has("Launch", player))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("DoubleJump", player) and s.has("Bash", player))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "HowlsDen.SecretRoom", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "HowlsDen.SecretRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("HowlsDen.AboveTPEX", player), lambda s: s.can_reach_region("HowlsDen.AboveTeleporter") and cost_all(s, player, options, "HowlsDen.AboveTeleporter", "", [], [], [[10, 'Wall']], []))
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter_to_HowlsDen.Teleporter", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter_to_HowlsDen.BoneBridge", player), lambda s: s.has("HowlsDen.BoneBarrier", player) and s.has_any(("DoubleJump", "Bash", "Launch"), player))
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter_to_HowlsDen.BoneBridge", player), lambda s: s.has("HowlsDen.BoneBarrier", player) and cost_all(s, player, options, "HowlsDen.AboveTeleporter", "HowlsDen.BoneBridge", [], [], [], [[0, [[13, 'Combat']], []]]))
    add_rule(world.get_location("F.HowlsDen.Teleporter", player), lambda s: s.can_reach_region("HowlsDen.Teleporter"))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda s: s.can_reach_region("HowlsDen.Teleporter"))
    add_rule(world.get_location("HowlsDen.LaserKS", player), lambda s: s.can_reach_region("HowlsDen.Teleporter") and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("HowlsDen.LaserKS", player), lambda s: s.can_reach_region("HowlsDen.Teleporter") and s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.Teleporter", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_Teleporters", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_DenShrine", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_DenShrine", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has_all(("Glide", "Dash"), player))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.Teleporter", "HowlsDen.DoubleJumpApproach", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.Teleporter", "HowlsDen.AboveTeleporter", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("C.HowlsDen.DoubleJumpApproach", player), lambda s: s.can_reach_region("HowlsDen.DoubleJumpApproach"))
    add_rule(world.get_location("HowlsDen.DoubleJumpTreeCombat", player), lambda s: s.can_reach_region("HowlsDen.DoubleJumpApproach") and s.has("Combat.Aerial", player) and cost_all(s, player, options, "HowlsDen.DoubleJumpApproach", "", [], [], [[32, 'Combat'], [24, 'Combat', 24, 'Combat'], [8, 'Combat']], []))
    add_rule(world.get_location("HowlsDen.DoubleJumpEX", player), lambda s: s.can_reach_region("HowlsDen.DoubleJumpApproach") and s.has("HowlsDen.DoubleJumpTreeCombat", player))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has_any(("HowlsDen.DoubleJumpTreeCombat", "DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.Teleporter", player), lambda s: True)
    add_rule(world.get_location("C.HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.can_reach_region("HowlsDen.DoubleJumpTreeLedge"))
    add_rule(world.get_location("HowlsDen.DoubleJumpEX", player), lambda s: s.can_reach_region("HowlsDen.DoubleJumpTreeLedge") and s.has("Launch", player))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpTreeArea", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has_any(("DoubleJump", "Launch", "Dash", "Glide"), player))
    add_rule(world.get_location("HowlsDen.DoubleJumpTree", player), lambda s: s.can_reach_region("HowlsDen.DoubleJumpTreeArea"))
    add_rule(world.get_location("HowlsDen.StickyShard", player), lambda s: s.can_reach_region("HowlsDen.DoubleJumpTreeArea"))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has_any(("DoubleJump", "Glide", "Launch"), player))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.DoubleJumpTreeArea", "HowlsDen.DoubleJumpTreeLedge", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_MidnightBurrows.DenConnection", player), lambda s: s.has("MidnightBurrows.HowlsDenShortcut", player) and has_health("25", s, player))
    add_rule(world.get_location("F.DenShrine", player), lambda s: s.can_reach_region("DenShrine"))
    add_rule(world.get_location("HowlsDen.CombatShrineCompleted", player), lambda s: s.can_reach_region("DenShrine") and s.has("Regenerate", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("Combat.Aerial", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "DenShrine", "", [60], [], [[32, 'Combat'], [24, 'Combat', 24, 'Combat'], [32, 'Combat', 32, 'Combat'], [32, 'Combat'], [20, 'Combat'], [8, 'Combat', 8, 'Combat', 8, 'Combat', 8, 'Combat', 8, 'Combat', 8, 'Combat', 8, 'Combat'], [20, 'Combat', 20, 'Combat'], [24, 'Combat', 24, 'Combat'], [32, 'Combat', 32, 'Combat']], []))
    add_rule(world.get_location("HowlsDen.CombatShrineCompleted", player), lambda s: s.can_reach_region("DenShrine") and s.has("Regenerate", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("Combat.Aerial", player) and s.has("Combat.Aerial", player) and s.has_any(("Dash", "Bash", "Launch"), player) and cost_all(s, player, options, "DenShrine", "", [40], [], [[32, 'Combat'], [24, 'Combat', 24, 'Combat'], [32, 'Combat', 32, 'Combat'], [32, 'Combat'], [20, 'Combat'], [8, 'Combat', 8, 'Combat', 8, 'Combat', 8, 'Combat', 8, 'Combat', 8, 'Combat', 8, 'Combat'], [20, 'Combat', 20, 'Combat'], [24, 'Combat', 24, 'Combat'], [32, 'Combat', 32, 'Combat']], []))
    add_rule(world.get_location("HowlsDen.CombatShrine", player), lambda s: s.can_reach_region("DenShrine") and s.has("HowlsDen.CombatShrineCompleted", player))
    add_rule(world.get_location("C.MarshPastOpher.MillView", player), lambda s: s.can_reach_region("MarshPastOpher.MillView"))
    add_rule(world.get_location("E.MarshPastOpher.MillView", player), lambda s: s.can_reach_region("MarshPastOpher.MillView") and s.has("BreakCrystal", player))
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_OpherShop", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.TrialStart", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("MarshSpawn.ToOpherBarrier", player))
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.MillView", player), lambda s: True)
    add_rule(world.get_location("C.MarshPastOpher.TrialStart", player), lambda s: s.can_reach_region("MarshPastOpher.TrialStart"))
    add_rule(world.get_location("MarshPastOpher.TrunkWall", player), lambda s: s.can_reach_region("MarshPastOpher.TrialStart") and cost_all(s, player, options, "MarshPastOpher.TrialStart", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("MarshPastOpher.SpiritTrial", player), lambda s: s.can_reach_region("MarshPastOpher.TrialStart") and s.has_all(("DoubleJump", "Dash", "Grapple"), player) and s.has("MarshPastOpher.TrialActivation", player))
    add_rule(world.get_entrance("MarshPastOpher.TrialStart_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has("MarshPastOpher.TrunkWall", player))
    add_rule(world.get_entrance("MarshPastOpher.TrialStart_to_MarshPastOpher.BowPath", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("C.MarshPastOpher.UnderTrunk", player), lambda s: s.can_reach_region("MarshPastOpher.UnderTrunk"))
    add_rule(world.get_location("MarshPastOpher.TrialLeftEX", player), lambda s: s.can_reach_region("MarshPastOpher.UnderTrunk") and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk_to_MarshPastOpher.TrialArea", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk_to_MarshPastOpher.TrialStart", player), lambda s: s.has("MarshPastOpher.TrunkWall", player))
    add_rule(world.get_location("C.MarshPastOpher.TrialArea", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea"))
    add_rule(world.get_location("H.MarshPastOpher.TrialArea", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("MarshPastOpher.TrialActivation", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has("Grapple", player) and s.has("Combat.Dangerous", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", "", [], [], [[32, 'Combat'], [32, 'Combat']], []))
    add_rule(world.get_location("MarshPastOpher.TrialActivation", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has_all(("Bash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("MarshPastOpher.TrialOre", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea"))
    add_rule(world.get_location("MarshPastOpher.TrialEC", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("MarshPastOpher.TrialHC", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has("Hammer", player))
    add_rule(world.get_location("MarshPastOpher.TrialHC", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and cost_all(s, player, options, "MarshPastOpher.TrialArea", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("MarshPastOpher.TrialRightEX", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshShrine", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has_all(("Dash", "Glide"), player))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has_any(("Grapple", "Launch"), player))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Grapple", "Launch"), player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", "MarshPastOpher.BowPath", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: s.has("Combat.Dangerous", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Grapple", "Launch"), player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", "MarshPastOpher.BowPath", [], [], [[20, 'Wall'], [32, 'Combat'], [32, 'Combat']], []))
    add_rule(world.get_location("F.MarshShrine", player), lambda s: s.can_reach_region("MarshShrine"))
    add_rule(world.get_location("MarshPastOpher.CombatShrineCompleted", player), lambda s: s.can_reach_region("MarshShrine") and s.has("Regenerate", player) and s.has("Combat.Aerial", player) and s.has("Combat.Aerial", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "MarshShrine", "", [20], [], [[20, 'Combat', 20, 'Combat'], [32, 'Combat'], [8, 'Combat', 8, 'Combat', 8, 'Combat', 8, 'Combat'], [32, 'Combat'], [20, 'Combat']], []))
    add_rule(world.get_location("MarshPastOpher.CombatShrine", player), lambda s: s.can_reach_region("MarshShrine") and s.has("MarshPastOpher.CombatShrineCompleted", player))
    add_rule(world.get_location("C.MarshPastOpher.BowPath", player), lambda s: s.can_reach_region("MarshPastOpher.BowPath"))
    add_rule(world.get_location("H.MarshPastOpher.BowPath", player), lambda s: s.can_reach_region("MarshPastOpher.BowPath"))
    add_rule(world.get_location("E.MarshPastOpher.BowPath", player), lambda s: s.can_reach_region("MarshPastOpher.BowPath") and s.has("BreakCrystal", player))
    add_rule(world.get_location("MarshPastOpher.SwingPoleEX", player), lambda s: s.can_reach_region("MarshPastOpher.BowPath") and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "MarshPastOpher.BowPath", "", [10], [], [], []))
    add_rule(world.get_location("MarshPastOpher.SwingPoleEX", player), lambda s: s.can_reach_region("MarshPastOpher.BowPath") and s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowPath", "", [10], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowPath", "MarshPastOpher.MillView", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.TrialStart", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowPath", "MarshPastOpher.TrialStart", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("C.MarshPastOpher.BowApproach", player), lambda s: s.can_reach_region("MarshPastOpher.BowApproach"))
    add_rule(world.get_location("H.MarshPastOpher.BowApproach", player), lambda s: s.can_reach_region("MarshPastOpher.BowApproach"))
    add_rule(world.get_location("MarshPastOpher.SwingPoleEX", player), lambda s: s.can_reach_region("MarshPastOpher.BowApproach") and cost_all(s, player, options, "MarshPastOpher.BowApproach", "", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowPath", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", "MarshPastOpher.BowArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.MillView", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", "MarshPastOpher.MillView", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("DoubleJump", "Dash", "Bash", "Glide"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", "MarshPastOpher.PoolsPathEast", [], [['Bow', 4]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", "MarshPastOpher.PoolsPathEast", [], [['Bow', 4]], [], []))
    add_rule(world.get_location("E.MarshPastOpher.BowArea", player), lambda s: s.can_reach_region("MarshPastOpher.BowArea") and s.has("BreakCrystal", player))
    add_rule(world.get_location("MarshPastOpher.EyestoneDoor", player), lambda s: s.can_reach_region("MarshPastOpher.BowArea") and can_keystones(s, player))
    add_rule(world.get_location("MarshPastOpher.BowEC", player), lambda s: s.can_reach_region("MarshPastOpher.BowArea"))
    add_rule(world.get_location("MarshPastOpher.BowTree", player), lambda s: s.can_reach_region("MarshPastOpher.BowArea"))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has("DoubleJump", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "MarshPastOpher.BowArea", "MarshPastOpher.UpperBowArea", [], [['Bow', 2]], [[20, 'Combat']], []))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_WestHollow.Entrance", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and has_health("20", s, player))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: s.has_any(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: s.has("Combat.Aerial", player) and cost_all(s, player, options, "MarshPastOpher.BowArea", "MarshPastOpher.BowApproach", [], [['Bow', 1]], [[20, 'Combat']], []))
    add_rule(world.get_location("C.MarshPastOpher.UpperBowArea", player), lambda s: s.can_reach_region("MarshPastOpher.UpperBowArea"))
    add_rule(world.get_location("E.MarshPastOpher.UpperBowArea", player), lambda s: s.can_reach_region("MarshPastOpher.UpperBowArea") and s.has("BreakCrystal", player))
    add_rule(world.get_location("MarshPastOpher.LeftEyestone", player), lambda s: s.can_reach_region("MarshPastOpher.UpperBowArea") and s.has("Combat.Aerial", player) and cost_all(s, player, options, "MarshPastOpher.UpperBowArea", "", [], [['Bow', 1]], [[20, 'Combat']], []))
    add_rule(world.get_location("MarshPastOpher.RightEyestone", player), lambda s: s.can_reach_region("MarshPastOpher.UpperBowArea") and s.has("Combat.Aerial", player) and cost_all(s, player, options, "MarshPastOpher.UpperBowArea", "", [], [['Bow', 1]], [[20, 'Combat']], []))
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea_to_MarshPastOpher.BowArea", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea_to_MarshPastOpher.BowApproach", player), lambda s: True)
    add_rule(world.get_location("C.MarshPastOpher.PoolsPathEast", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathEast"))
    add_rule(world.get_location("H.MarshPastOpher.PoolsPathEast", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathEast") and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", "", [], [], [[32, 'Combat'], [32, 'Ranged']], []))
    add_rule(world.get_location("E.MarshPastOpher.PoolsPathEast", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathEast") and s.has("BreakCrystal", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", "", [], [], [[32, 'Combat'], [32, 'Ranged']], []))
    add_rule(world.get_location("MarshPastOpher.CeilingEX", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathEast") and s.has_all(("Bash", "DoubleJump", "Dash"), player))
    add_rule(world.get_location("MarshPastOpher.CeilingEX", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathEast") and s.has("Launch", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.OpherSkipBranch", player), lambda s: True)
    add_rule(world.get_location("C.MarshPastOpher.PoolsPathMiddle", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathMiddle"))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathMiddle") and s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathMiddle") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathMiddle") and s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathMiddle") and s.has("Launch", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Launch", "Water"), player) and s.has("Hammer", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Launch", "Water"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathBellowOneWayWall", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Bash", player))
    add_rule(world.get_location("C.MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathOneWayWall") and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_location("C.MarshPastOpher.PoolsPathWest", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathWest"))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEX", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathWest"))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Bash", "Glide"), player))
    add_rule(world.get_location("F.MidnightBurrows.Teleporter", player), lambda s: s.can_reach_region("MidnightBurrows.Teleporter"))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda s: s.can_reach_region("MidnightBurrows.Teleporter"))
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_Teleporters", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MidnightBurrows.BelowLupo", player), lambda s: s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MidnightBurrows.BelowLupo", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Launch", player) and s.has("MarshSpawn.BurrowsOpen", player))
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("MarshSpawn.BurrowsOpen", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("MidnightBurrows.LeftKS", player), lambda s: s.can_reach_region("MidnightBurrows.BelowLupo") and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Teleporter", player), lambda s: s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Teleporter", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda s: s.has_all(("DoubleJump", "Bash"), player))
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.MidnightBurrows.Central", player), lambda s: s.can_reach_region("MidnightBurrows.Central"))
    add_rule(world.get_location("MidnightBurrows.LupoMap", player), lambda s: s.can_reach_region("MidnightBurrows.Central") and s.has("SpiritLight", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("MidnightBurrows.DeflectorShard", player), lambda s: s.can_reach_region("MidnightBurrows.Central") and s.has("Launch", player))
    add_rule(world.get_location("MidnightBurrows.DeflectorShard", player), lambda s: s.can_reach_region("MidnightBurrows.Central") and s.has("DoubleJump", player) and s.has("MidnightBurrows.Lever", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.BelowLupo", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_any(("Launch", "Glide", "DoubleJump", "Dash"), player))
    add_rule(world.get_location("C.MidnightBurrows.TabletRoom", player), lambda s: s.can_reach_region("MidnightBurrows.TabletRoom"))
    add_rule(world.get_location("H.MidnightBurrows.TabletRoom", player), lambda s: s.can_reach_region("MidnightBurrows.TabletRoom"))
    add_rule(world.get_location("MidnightBurrows.KeystoneDoor", player), lambda s: s.can_reach_region("MidnightBurrows.TabletRoom") and can_keystones(s, player))
    add_rule(world.get_location("MidnightBurrows.TabletQI", player), lambda s: s.can_reach_region("MidnightBurrows.TabletRoom") and can_keystones(s, player))
    add_rule(world.get_entrance("MidnightBurrows.TabletRoom_to_MidnightBurrows.Central", player), lambda s: True)
    add_rule(world.get_location("C.MidnightBurrows.PortalRoom", player), lambda s: s.can_reach_region("MidnightBurrows.PortalRoom"))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Bash"), player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Launch", player) and s.has("MidnightBurrows.Lever", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("MidnightBurrows.Lever", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.Central", player), lambda s: s.has("MidnightBurrows.Lever", player))
    add_rule(world.get_location("C.MidnightBurrows.LeverRoom", player), lambda s: s.can_reach_region("MidnightBurrows.LeverRoom"))
    add_rule(world.get_location("MidnightBurrows.Lever", player), lambda s: s.can_reach_region("MidnightBurrows.LeverRoom"))
    add_rule(world.get_location("MidnightBurrows.LowerKS", player), lambda s: s.can_reach_region("MidnightBurrows.LeverRoom") and s.has_any(("Glide", "Launch"), player))
    add_rule(world.get_location("MidnightBurrows.LowerKS", player), lambda s: s.can_reach_region("MidnightBurrows.LeverRoom") and s.has("Bash", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Launch"), player))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player))
    add_rule(world.get_location("C.MidnightBurrows.East", player), lambda s: s.can_reach_region("MidnightBurrows.East"))
    add_rule(world.get_entrance("MidnightBurrows.East_to_MidnightBurrows.DenConnection", player), lambda s: s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("MidnightBurrows.East_to_MidnightBurrows.DenConnection", player), lambda s: True)
    add_rule(world.get_location("C.MidnightBurrows.DenConnection", player), lambda s: s.can_reach_region("MidnightBurrows.DenConnection"))
    add_rule(world.get_location("MidnightBurrows.HowlsDenShortcut", player), lambda s: s.can_reach_region("MidnightBurrows.DenConnection") and cost_all(s, player, options, "MidnightBurrows.DenConnection", "", [], [], [[10, 'Wall']], []))
    add_rule(world.get_location("MidnightBurrows.RightKS", player), lambda s: s.can_reach_region("MidnightBurrows.DenConnection"))
    add_rule(world.get_entrance("MidnightBurrows.DenConnection_to_MidnightBurrows.PortalCorridor", player), lambda s: s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("MidnightBurrows.DenConnection_to_MidnightBurrows.PortalCorridor", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.DenConnection_to_HowlsDen.DoubleJumpTreeArea", player), lambda s: s.has("MidnightBurrows.HowlsDenShortcut", player))
    add_rule(world.get_location("C.MidnightBurrows.PortalCorridor", player), lambda s: s.can_reach_region("MidnightBurrows.PortalCorridor"))
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.DenConnection", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "MidnightBurrows.PortalCorridor", "MidnightBurrows.BelowUpperKS", [15], [], [], []))
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("Launch", "Glide"), player) and cost_all(s, player, options, "MidnightBurrows.PortalCorridor", "MidnightBurrows.BelowUpperKS", [15], [], [], []))
    add_rule(world.get_location("MidnightBurrows.UpperKS", player), lambda s: s.can_reach_region("MidnightBurrows.BelowUpperKS") and s.has("Bash", player))
    add_rule(world.get_location("MidnightBurrows.UpperKS", player), lambda s: s.can_reach_region("MidnightBurrows.BelowUpperKS") and cost_all(s, player, options, "MidnightBurrows.BelowUpperKS", "", [], [], [], [[0, [[32, 'Ranged']], ['Combat.Bat', 'Combat.Aerial']]]))
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS_to_MidnightBurrows.PortalRoom", player), lambda s: True)
    add_rule(world.get_location("C.WestHollow.Entrance", player), lambda s: s.can_reach_region("WestHollow.Entrance"))
    add_rule(world.get_location("E.WestHollow.Entrance", player), lambda s: s.can_reach_region("WestHollow.Entrance") and s.has("BreakCrystal", player))
    add_rule(world.get_location("MarshPastOpher.EyestoneDoor", player), lambda s: s.can_reach_region("WestHollow.Entrance") and can_keystones(s, player))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.Entrance") and s.has_all(("DoubleJump", "Dash"), player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.Entrance") and s.has("Launch", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.Entrance") and s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", "", [], [['Bow', 1], ['Grenade', 1]], [], []))
    add_rule(world.get_location("WestHollow.CrusherHC", player), lambda s: s.can_reach_region("WestHollow.Entrance"))
    add_rule(world.get_entrance("WestHollow.Entrance_to_TwillenShop", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.Entrance_to_MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("WestHollow.Entrance_to_MarshPastOpher.BowArea", player), lambda s: s.has("Bash", player) and s.has("MarshPastOpher.EyestoneDoor", player) and cost_all(s, player, options, "WestHollow.Entrance", "MarshPastOpher.BowArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has_any(("Launch", "Bash"), player))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WestHollow.Entrance", "WestHollow.InFrontPurpleDoorEnemyPaths", [], [['Bow', 1]], [[13, 'Combat', 13, 'Combat']], []))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_location("H.WestHollow.MokiByTwillen", player), lambda s: s.can_reach_region("WestHollow.MokiByTwillen"))
    add_rule(world.get_location("WestHollow.UpperDrainLeverPulled", player), lambda s: s.can_reach_region("WestHollow.MokiByTwillen") and cost_all(s, player, options, "WestHollow.MokiByTwillen", "", [], [['Bow', 1]], [[1, 'Ranged']], []))
    add_rule(world.get_location("WestHollow.UpperDrainLeverPulled", player), lambda s: s.can_reach_region("WestHollow.MokiByTwillen") and s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.MokiByTwillen", "", [], [], [[1, 'Ranged']], []))
    add_rule(world.get_location("WestHollow.UpperDrainLeverPulled", player), lambda s: s.can_reach_region("WestHollow.MokiByTwillen") and s.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.Entrance", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has_any(("Launch", "Bash"), player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", "WestHollow.MokiByTwillen", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", "WestHollow.MokiByTwillen", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained", "DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", "WestHollow.Entrance", [], [], [[13, 'Combat', 13, 'Combat']], []))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.Entrance", player), lambda s: s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained", "DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_EastHollow.Teleporter", player), lambda s: s.has("WestHollow.PurpleDoorOpen", player) and has_health("20", s, player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoorEnemyPaths_to_WestHollow.InFrontPurpleDoor", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_location("C.WestHollow.HollowDrainMiddle", player), lambda s: s.can_reach_region("WestHollow.HollowDrainMiddle"))
    add_rule(world.get_location("E.WestHollow.HollowDrainMiddle", player), lambda s: s.can_reach_region("WestHollow.HollowDrainMiddle") and s.has("BreakCrystal", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_location("WestHollow.UpperTongueExtended", player), lambda s: s.can_reach_region("WestHollow.HollowDrainMiddle") and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.UpperTongueExtended", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.RockPuzzle", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Glide", "Launch"), player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.Entrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_location("C.WestHollow.RockPuzzle", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle"))
    add_rule(world.get_location("H.WestHollow.RockPuzzle", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle"))
    add_rule(world.get_location("E.WestHollow.RockPuzzle", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has("BreakCrystal", player) and s.has_any(("DoubleJump", "Dash", "Bash", "Glide", "Launch"), player))
    add_rule(world.get_location("WestHollow.RockPuzzleSolved", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has("Combat.Aerial", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [], [['Bow', 4]], [[20, 'Combat']], []))
    add_rule(world.get_location("WestHollow.RockPuzzleSolved", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [], [['Bow', 4]], [], []))
    add_rule(world.get_location("WestHollow.RockPuzzleEX", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has("Combat.Aerial", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.FarLeftRoom", [], [['Bow', 1]], [[20, 'Combat'], [13, 'Combat']], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_location("E.WestHollow.FarLeftRoom", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("BreakCrystal", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Bow', 2]], [], []))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("Launch", player) and s.has("WestHollow.UpperDrainLeverPulled", player))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WestHollow.FullyDrained", player) and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has_all(("DoubleJump", "Dash"), player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.SubmergedPlatform") and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_location("E.WestHollow.SubmergedPlatform", player), lambda s: s.can_reach_region("WestHollow.SubmergedPlatform") and s.has("WestHollow.FullyDrained", player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("WestHollow.UpperTongueExtended", player), lambda s: s.can_reach_region("WestHollow.SubmergedPlatform") and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "", [], [['Bow', 1]], [[1, 'Ranged']], []))
    add_rule(world.get_location("WestHollow.UpperTongueRetracted", player), lambda s: s.can_reach_region("WestHollow.SubmergedPlatform") and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "", [], [['Bow', 1]], [[1, 'Ranged']], []))
    add_rule(world.get_location("WestHollow.LowerTongueExtended", player), lambda s: s.can_reach_region("WestHollow.SubmergedPlatform") and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "", [], [['Bow', 1]], [[1, 'Ranged']], []))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Launch", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueRetracted", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.HollowDrainMiddle", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.AboveJumppad", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("WestHollow.LowerTongueExtended", "Launch", "Glide", "DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.AboveJumppad", player), lambda s: s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_location("WestHollow.LowerTongueExtended", player), lambda s: s.can_reach_region("WestHollow.AboveJumppad") and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.HiddenEC", player), lambda s: s.can_reach_region("WestHollow.AboveJumppad") and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", "", [], [], [[10, 'Wall']], []))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.HollowDrainLower", player), lambda s: s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Launch", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player))
    add_rule(world.get_location("C.WestHollow.HollowDrainLower", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower"))
    add_rule(world.get_location("WestHollow.QuickshotShard", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has_all(("DoubleJump", "Dash"), player) and s.has("WestHollow.FullyDrained", player) and s.has("Bash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.QuickshotShard", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has_all(("DoubleJump", "Dash"), player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "", [], [['Bow', 1]], [], [[0, [[20, 'Combat', 20, 'Combat']], ['Combat.Aerial']]]))
    add_rule(world.get_location("WestHollow.QuickshotShard", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has_all(("DoubleJump", "Launch"), player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.SwimEC", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("Water", player))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has_all(("DoubleJump", "Dash"), player) and s.has("SpiritLight", player))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("Bash", player) and s.has("SpiritLight", player))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("Launch", player) and s.has("SpiritLight", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("DoubleJump", player) and s.has("WestHollow.FullyDrained", player) and s.has("Combat.Aerial", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.TrialApproach", [], [], [[13, 'Combat'], [20, 'Combat', 20, 'Combat']], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("WestHollow.FullyDrained", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.TrialApproach", [], [], [[13, 'Combat'], [20, 'Combat', 20, 'Combat'], [40, 'Combat']], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.TrialApproach", [10], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has_all(("Water", "WaterDash"), player) and s.has("WestHollow.FullyDrained", player) and s.has("DoubleJump", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.TrialApproach", [], [], [[13, 'Combat']], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has_all(("Water", "WaterDash"), player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.TrialApproach", [], [], [[13, 'Combat']], [[0, [[40, 'Combat']], ['Combat.Dangerous', 'Combat.Shielded']]]))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has_all(("Water", "WaterDash", "Bash"), player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("Launch", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.PolesPound", player), lambda s: s.has_any(("DoubleJump", "Bash", "Launch"), player))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.PolesPound", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.AboveJumppad", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.AboveJumppad", player), lambda s: True)
    add_rule(world.get_location("C.WestHollow.TrialApproach", player), lambda s: s.can_reach_region("WestHollow.TrialApproach"))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.TrialApproach", "WestHollow.TrialStart", [], [], [[13, 'Combat']], []))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has_all(("DoubleJump", "Bash"), player))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_location("C.WestHollow.TrialStart", player), lambda s: s.can_reach_region("WestHollow.TrialStart"))
    add_rule(world.get_location("WestHollow.TrialHC", player), lambda s: s.can_reach_region("WestHollow.TrialStart"))
    add_rule(world.get_location("WestHollow.SpiritTrial", player), lambda s: s.can_reach_region("WestHollow.TrialStart") and s.has_all(("DoubleJump", "Dash"), player) and s.has("WestHollow.TrialActivation", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.TrialStart_to_WestHollow.TrialApproach", player), lambda s: True)
    add_rule(world.get_location("C.WestHollow.PolesPound", player), lambda s: s.can_reach_region("WestHollow.PolesPound"))
    add_rule(world.get_location("WestHollow.BelowLupoEX", player), lambda s: s.can_reach_region("WestHollow.PolesPound") and s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("WestHollow.BelowLupoEX", player), lambda s: s.can_reach_region("WestHollow.PolesPound") and s.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.DashApproach", player), lambda s: s.has_any(("DoubleJump", "Bash", "Launch", "Glide", "Dash"), player))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WestHollow.PolesPound", "WestHollow.HollowDrainLower", [], [], [[13, 'Combat']], []))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.WestHollow.DashApproach", player), lambda s: s.can_reach_region("WestHollow.DashApproach"))
    add_rule(world.get_location("E.WestHollow.DashApproach", player), lambda s: s.can_reach_region("WestHollow.DashApproach") and s.has("BreakCrystal", player))
    add_rule(world.get_location("WestHollow.TrialActivation", player), lambda s: s.can_reach_region("WestHollow.DashApproach") and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("WestHollow.DoorLever", player), lambda s: s.can_reach_region("WestHollow.DashApproach") and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WestHollow.DashApproach", "", [], [], [[20, 'Combat'], [32, 'Combat'], [24, 'Combat', 24, 'Combat'], [40, 'Combat']], []))
    add_rule(world.get_location("WestHollow.DoorLever", player), lambda s: s.can_reach_region("WestHollow.DashApproach") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("WestHollow.DoorLever", player), lambda s: s.can_reach_region("WestHollow.DashApproach") and s.has("Bash", player) and cost_all(s, player, options, "WestHollow.DashApproach", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("WestHollow.DoorLever", player), lambda s: s.can_reach_region("WestHollow.DashApproach") and s.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.DashApproach", "WestHollow.HollowDrainLower", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.DashArea", player), lambda s: s.has("WestHollow.DoorLever", player))
    add_rule(world.get_location("C.WestHollow.DashArea", player), lambda s: s.can_reach_region("WestHollow.DashArea"))
    add_rule(world.get_location("WestHollow.DashTree", player), lambda s: s.can_reach_region("WestHollow.DashArea"))
    add_rule(world.get_entrance("WestHollow.DashArea_to_WestHollow.DashApproach", player), lambda s: s.has("WestHollow.DoorLever", player))
    add_rule(world.get_entrance("WestHollow.DashArea_to_WestHollow.DashCrushers", player), lambda s: s.has_any(("Dash", "Launch"), player))
    add_rule(world.get_location("C.WestHollow.DashCrushers", player), lambda s: s.can_reach_region("WestHollow.DashCrushers"))
    add_rule(world.get_location("WestHollow.CrusherEX", player), lambda s: s.can_reach_region("WestHollow.DashCrushers") and s.has("Dash", player))
    add_rule(world.get_location("WestHollow.DashTree", player), lambda s: s.can_reach_region("WestHollow.DashCrushers") and s.has_any(("Dash", "Launch"), player))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashArea", player), lambda s: s.has_all(("Dash", "Bash"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.WestHollow.DashRoomTopRight", player), lambda s: s.can_reach_region("WestHollow.DashRoomTopRight"))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda s: s.can_reach_region("WestHollow.DashRoomTopRight") and s.has_all(("DoubleJump", "Dash"), player) and s.has("Bash", player))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda s: s.can_reach_region("WestHollow.DashRoomTopRight") and s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", "", [], [], [], [[0, [[12, 'Combat']], []]]))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda s: s.can_reach_region("WestHollow.DashRoomTopRight") and s.has("Launch", player))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashCrushers", player), lambda s: s.has_any(("Bash", "Glide", "Launch", "DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Glide", player) and s.has("Bash", player))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", "WestHollow.AboveDashSemisolid", [], [], [], [[0, [[40, 'Combat'], [20, 'Combat']], ['Combat.Dangerous', 'Combat.Shielded', 'Combat.Aerial']]]))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("WestHollow.AboveDashEX", player), lambda s: s.can_reach_region("WestHollow.AboveDashSemisolid"))
    add_rule(world.get_entrance("WestHollow.AboveDashSemisolid_to_WestHollow.DashArea", player), lambda s: True)
    add_rule(world.get_location("F.EastHollow.Teleporter", player), lambda s: s.can_reach_region("EastHollow.Teleporter"))
    add_rule(world.get_location("EastHollow.VoiceDoorOpen", player), lambda s: s.can_reach_region("EastHollow.Teleporter") and s.has("EastHollow.ForestsVoice", player))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda s: s.can_reach_region("EastHollow.Teleporter"))
    add_rule(world.get_entrance("EastHollow.Teleporter_to_Teleporters", player), lambda s: True)
    add_rule(world.get_entrance("EastHollow.Teleporter_to_BeetleFight", player), lambda s: s.has("Combat.Aerial", player) and cost_all(s, player, options, "EastHollow.Teleporter", "BeetleFight", [], [], [[20, 'Combat'], [32, 'Combat']], []))
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("EastHollow.BeetleDefeated", player) and s.has_any(("DoubleJump", "Bash", "Launch"), player))
    add_rule(world.get_entrance("EastHollow.Teleporter_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("WestHollow.PurpleDoorOpen", player) and has_health("20", s, player))
    add_rule(world.get_location("F.BeetleFight", player), lambda s: s.can_reach_region("BeetleFight"))
    add_rule(world.get_location("EastHollow.BeetleDefeated", player), lambda s: s.can_reach_region("BeetleFight") and s.has_all(("Regenerate", "Dash"), player) and cost_all(s, player, options, "BeetleFight", "", [45], [], [[250, 'Boss']], []))
    add_rule(world.get_location("EastHollow.VoiceDoorOpen", player), lambda s: s.can_reach_region("EastHollow.VoiceDoorPlatform") and s.has("EastHollow.ForestsVoice", player))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda s: s.can_reach_region("EastHollow.VoiceDoorPlatform") and s.has_all(("DoubleJump", "Dash", "Bash"), player))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda s: s.can_reach_region("EastHollow.VoiceDoorPlatform") and s.has("Bash", player) and cost_all(s, player, options, "EastHollow.VoiceDoorPlatform", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda s: s.can_reach_region("EastHollow.VoiceDoorPlatform") and s.has("Launch", player))
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.MapMoki", player), lambda s: s.has("EastHollow.VoiceDoorOpen", player))
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.Teleporter", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Bash", "Launch"), player))
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Glide", player) and s.has("EastHollow.BeetleDefeated", player))
    add_rule(world.get_location("C.EastHollow.MapMoki", player), lambda s: s.can_reach_region("EastHollow.MapMoki"))
    add_rule(world.get_location("EastHollow.HandToHandMap", player), lambda s: s.can_reach_region("EastHollow.MapMoki"))
    add_rule(world.get_location("EastHollow.GladesApproachOre", player), lambda s: s.can_reach_region("EastHollow.MapMoki") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("EastHollow.VoiceDoorOpen", player))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has_all(("DoubleJump", "Bash"), player))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("GladesTown.GromsWall", player), lambda s: s.can_reach_region("EastHollow.OutsideGlades") and s.has("Bash", player))
    add_rule(world.get_entrance("EastHollow.OutsideGlades_to_GladesTown.Teleporter", player), lambda s: s.has("GladesTown.GromsWall", player))
    add_rule(world.get_entrance("EastHollow.OutsideGlades_to_EastHollow.MapMoki", player), lambda s: True)
    add_rule(world.get_location("C.EastHollow.AfterBeetleFight", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight"))
    add_rule(world.get_location("EastHollow.VoiceDoorOpen", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("EastHollow.ForestsVoice", player))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("Bash", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("EastHollow.MortarEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("EastHollow.MortarEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("Launch", player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_BeetleFight", player), lambda s: True)
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.AboveBash", player), lambda s: True)
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("EastHollow.BeetleDefeated", player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("Bash", player) and s.has("EastHollow.BeetleDefeated", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "EastHollow.Teleporter", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("Glide", player) and s.has("EastHollow.BeetleDefeated", player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("Bash", player) and s.has("EastHollow.BeetleDefeated", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("Launch", player) and s.has("EastHollow.BeetleDefeated", player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Launch", "Dash", "Glide"), player))
    add_rule(world.get_location("EastHollow.DepthsLever", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has_all(("Bash", "DoubleJump", "Dash"), player))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has("Bash", player) and cost_all(s, player, options, "EastHollow.AboveBash", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has("Launch", player))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashTreeCheckpoint", player), lambda s: s.has("Combat.Dangerous", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "EastHollow.AboveBash", "EastHollow.BashTreeCheckpoint", [], [], [[32, 'Combat', 32, 'Combat']], []))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashTreeCheckpoint", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashTreeCheckpoint", player), lambda s: s.has_any(("Glide", "Launch"), player))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AboveDepths", player), lambda s: s.has("EastHollow.DepthsLever", player) and s.has("Combat.Dangerous", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "EastHollow.AboveBash", "EastHollow.AboveDepths", [], [], [[32, 'Combat', 32, 'Combat']], []))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AboveDepths", player), lambda s: s.has("Bash", player) and s.has("EastHollow.DepthsLever", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AboveDepths", player), lambda s: s.has("EastHollow.DepthsLever", player) and s.has_any(("Glide", "Launch"), player))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AfterBeetleFight", player), lambda s: s.has_any(("Launch", "Bash"), player))
    add_rule(world.get_location("C.EastHollow.BashTreeCheckpoint", player), lambda s: s.can_reach_region("EastHollow.BashTreeCheckpoint"))
    add_rule(world.get_location("EastHollow.BashTree", player), lambda s: s.can_reach_region("EastHollow.BashTreeCheckpoint"))
    add_rule(world.get_location("EastHollow.BashEX", player), lambda s: s.can_reach_region("EastHollow.BashTreeCheckpoint") and s.has_all(("DoubleJump", "Bash"), player))
    add_rule(world.get_location("EastHollow.BashEX", player), lambda s: s.can_reach_region("EastHollow.BashTreeCheckpoint") and s.has("Launch", player))
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Hammer"), player))
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", "EastHollow.AboveBash", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "DoubleJump", "Glide"), player))
    add_rule(world.get_location("C.EastHollow.Kwolok", player), lambda s: s.can_reach_region("EastHollow.Kwolok"))
    add_rule(world.get_location("EastHollow.ForestsVoice", player), lambda s: s.can_reach_region("EastHollow.Kwolok"))
    add_rule(world.get_location("EastHollow.KwolokAmuletQuest", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has("EastPools.KwolokAmuletQI", player) and s.has("WestPools.ForestsStrength", player))
    add_rule(world.get_location("GladesTown.TuleySpawned", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has("InnerWellspring.WaterEscape", player))
    add_rule(world.get_location("EastHollow.RightKwolokEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_location("EastHollow.SilentSwimEC", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has("Water", player) and s.has_any(("WaterDash", "Launch"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "", [], [], [[1, 'Combat']], []))
    add_rule(world.get_location("EastHollow.KwolokSwimOre", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has("Water", player) and s.has("Bash", player))
    add_rule(world.get_location("EastHollow.KwolokSwimOre", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has("Water", player) and cost_all(s, player, options, "EastHollow.Kwolok", "", [], [], [], [[2, 10]]))
    add_rule(world.get_location("EastHollow.KwolokSwimLeftEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has("Water", player) and s.has_any(("WaterDash", "Launch"), player))
    add_rule(world.get_location("EastHollow.KwolokSwimRightEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has("Water", player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "EastHollow.AfterBeetleFight", [10], [], [], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "Grapple", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player) and has_health("40", s, player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [], [], [[1, 'Combat']], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "Grapple", "Dash", "Glide"), player) and has_health("40", s, player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [], [], [[1, 'Combat']], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "Launch"), player) and has_health("40", s, player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [], [], [[1, 'Combat']], []))
    add_rule(world.get_location("C.EastHollow.AboveDepths", player), lambda s: s.can_reach_region("EastHollow.AboveDepths"))
    add_rule(world.get_location("E.EastHollow.AboveDepths", player), lambda s: s.can_reach_region("EastHollow.AboveDepths") and s.has("BreakCrystal", player))
    add_rule(world.get_location("EastHollow.DepthsOpen", player), lambda s: s.can_reach_region("EastHollow.AboveDepths") and s.has("Glide", player))
    add_rule(world.get_location("EastHollow.BashHC", player), lambda s: s.can_reach_region("EastHollow.AboveDepths") and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_location("EastHollow.SplinterShard", player), lambda s: s.can_reach_region("EastHollow.AboveDepths"))
    add_rule(world.get_location("EastHollow.DepthsExteriorEX", player), lambda s: s.can_reach_region("EastHollow.AboveDepths") and s.has_all(("Glide", "Launch"), player))
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_UpperDepths.Entry", player), lambda s: s.has("Regenerate", player) and s.has("EastHollow.DepthsOpen", player) and has_health("40", s, player))
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.BashTreeCheckpoint", player), lambda s: s.has("EastHollow.DepthsLever", player) and s.has_any(("DoubleJump", "Bash", "Launch"), player))
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.BashTreeCheckpoint", player), lambda s: s.has("EastHollow.DepthsLever", player) and cost_all(s, player, options, "EastHollow.AboveDepths", "EastHollow.BashTreeCheckpoint", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_location("F.GladesTown.Teleporter", player), lambda s: s.can_reach_region("GladesTown.Teleporter"))
    add_rule(world.get_location("GladesTown.BuildHuts", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("Ore", player))
    add_rule(world.get_location("GladesTown.RoofsOverHeads", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("GladesTown.BuildHuts", player) and s.has("Ore", player))
    add_rule(world.get_location("GladesTown.OnwardsAndUpwards", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("GladesTown.RoofsOverHeads", player) and s.has("Ore", player))
    add_rule(world.get_location("GladesTown.ClearThorns", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("Ore", player))
    add_rule(world.get_location("GladesTown.CaveEntrance", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("GladesTown.ClearThorns", player) and s.has("Ore", player))
    add_rule(world.get_location("GladesTown.RebuildTheGlades", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("Ore", player))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("Bash", player) and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.Teleporter", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("Launch", player) and s.has("GladesTown.ClearThorns", player))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("Bash", player) and s.has("GladesTown.ClearThorns", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("GladesTown.LupoSwimMiddleEX", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("Water", player) and s.has_any(("WaterDash", "Launch"), player))
    add_rule(world.get_location("GladesTown.LupoSwimLeftEX", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("Water", player) and s.has("GladesTown.ClearThorns", player) and s.has_any(("WaterDash", "Launch"), player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_Teleporters", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.TwillenHome", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.Teleporter", "GladesTown.UpperWest", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Grapple", "Launch"), player) and s.has("TuleyShop.BlueMoon", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has("TuleyShop.BlueMoon", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.Teleporter", "GladesTown.BelowBountyShard", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has("TuleyShop.StickyGrass", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has_any(("Launch", "TuleyShop.SpringPlants"), player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has_all(("Flap", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.Teleporter", "GladesTown.AboveOpher", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LeftAboveCoals", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("TuleyShop.BlueMoon", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LeftAboveCoals", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has("TuleyShop.BlueMoon", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoHouse", player), lambda s: s.has_any(("Burrow", "Water"), player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_OpherShop", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.Teleporter_to_Tokk", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and s.has_any(("DoubleJump", "Launch", "TuleyShop.SpringPlants"), player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has_all(("Flap", "Glide"), player) and s.has("GladesTown.TuleySpawned", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has("Bash", player) and s.has("GladesTown.TuleySpawned", player) and cost_all(s, player, options, "GladesTown.Teleporter", "TuleyShop", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_EastHollow.OutsideGlades", player), lambda s: s.has("GladesTown.GromsWall", player) and has_health("20", s, player))
    add_rule(world.get_location("C.GladesTown.TwillenHome", player), lambda s: s.can_reach_region("GladesTown.TwillenHome"))
    add_rule(world.get_location("GladesTown.HandToHandLantern", player), lambda s: s.can_reach_region("GladesTown.TwillenHome") and s.has("LowerReach.HandToHandHat", player))
    add_rule(world.get_location("GladesTown.FamilyReunionKey", player), lambda s: s.can_reach_region("GladesTown.TwillenHome") and s.has("GladesTown.BuildHuts", player))
    add_rule(world.get_location("GladesTown.LowerOre", player), lambda s: s.can_reach_region("GladesTown.TwillenHome") and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player) and s.has("Hammer", player))
    add_rule(world.get_location("GladesTown.LowerOre", player), lambda s: s.can_reach_region("GladesTown.TwillenHome") and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player) and cost_all(s, player, options, "GladesTown.TwillenHome", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("GladesTown.LowerOre", player), lambda s: s.can_reach_region("GladesTown.TwillenHome") and s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "GladesTown.TwillenHome", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.LowerOre", player), lambda s: s.can_reach_region("GladesTown.TwillenHome") and s.has("Bash", player) and cost_all(s, player, options, "GladesTown.TwillenHome", "", [], [['Grenade', 1]], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("GladesTown.AboveCaveEX", player), lambda s: s.can_reach_region("GladesTown.TwillenHome") and s.has("GladesTown.ClearThorns", player))
    add_rule(world.get_location("GladesTown.KeyMokiHutEX", player), lambda s: s.can_reach_region("GladesTown.TwillenHome") and s.has("GladesTown.BuildHuts", player) and s.has("WoodsEntry.DollQI", player))
    add_rule(world.get_location("GladesTown.DamageTree", player), lambda s: s.can_reach_region("GladesTown.TwillenHome") and s.has("TuleyShop.LastTree", player))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_TwillenShop", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.AcornMoki", player), lambda s: s.has("GladesTown.ClearThorns", player))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.TwillenHome", "GladesTown.West", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.StickyGrass", player))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.TwillenHome", "GladesTown.Teleporter", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: s.has_any(("GladesTown.ClearThorns", "DoubleJump", "Launch"), player))
    add_rule(world.get_location("C.GladesTown.West", player), lambda s: s.can_reach_region("GladesTown.West"))
    add_rule(world.get_location("GladesTown.HandToHandCanteen", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("EastPools.HandToHandSpyglass", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has_all(("Launch", "DoubleJump"), player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Grapple", "Launch"), player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has_all(("Bash", "Dash", "Glide"), player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has_all(("Bash", "Glide"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has_all(("DoubleJump", "Bash"), player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has_all(("DoubleJump", "Bash"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("DoubleJump", player) and s.has("GladesTown.BuildHuts", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", "GladesTown.MotayHut", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Launch", player) and s.has("GladesTown.BuildHuts", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Grapple", player) and s.has("GladesTown.BuildHuts", player) and s.has_any(("TuleyShop.StickyGrass", "TuleyShop.BlueMoon"), player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and has_health("20", s, player))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("Launch", player) and has_health("20", s, player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.TwillenHome", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.Teleporter", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.Teleporter", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.Teleporter", player), lambda s: s.has_all(("Grapple", "Glide"), player) and s.has("TuleyShop.StickyGrass", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("Launch", player) and s.has("TuleyShop.StickyGrass", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Grapple", "DoubleJump"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has("TuleyShop.StickyGrass", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("GladesTown.MotayHutEX", player), lambda s: s.can_reach_region("GladesTown.MotayHut"))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.MotayHut") and s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.MotayHut", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.MotayHut") and s.has("Launch", player) and s.has("GladesTown.BuildHuts", player))
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.West", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.MotayHut", "GladesTown.UpperWest", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has("Launch", player) and s.has("GladesTown.BuildHuts", player))
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("GladesTown.ClearThorns", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Bash", player) and s.has("GladesTown.ClearThorns", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Grapple", player) and s.has("GladesTown.ClearThorns", player) and s.has("TuleyShop.BlueMoon", player))
    add_rule(world.get_location("GladesTown.BraveMokiHutEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("GladesTown.OnwardsAndUpwards", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("GladesTown.UpperLeftEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Bash", player) and cost_all(s, player, options, "GladesTown.UpperWest", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperLeftEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Launch", player))
    add_rule(world.get_location("GladesTown.UpperLeftEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has_all(("DoubleJump", "Grapple"), player) and s.has_any(("TuleyShop.StickyGrass", "TuleyShop.BlueMoon"), player))
    add_rule(world.get_location("GladesTown.AboveGromHC", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "GladesTown.UpperWest", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.AboveGromHC", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Launch", player))
    add_rule(world.get_location("GladesTown.AboveGromHC", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Grapple", player) and s.has("TuleyShop.StickyGrass", player))
    add_rule(world.get_location("GladesTown.AboveGromHC", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("Dash", "DoubleJump", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.MotayHut", player), lambda s: s.has("GladesTown.BuildHuts", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.MotayHut", player), lambda s: s.has("Grapple", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.BlueMoon", player))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.West", player), lambda s: s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.West", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.TwillenHome", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.Teleporter", player), lambda s: s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.Teleporter", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.Teleporter", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player))
    add_rule(world.get_location("E.GladesTown.AcornMoki", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("GladesTown.CaveEntrance", player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has_all(("Water", "Glide"), player) and s.has("GladesTown.CaveEntrance", player))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has_all(("Water", "DoubleJump", "Dash"), player) and s.has("GladesTown.CaveEntrance", player))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("Bash", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("Launch", player) and s.has("GladesTown.CaveEntrance", player))
    add_rule(world.get_location("GladesTown.MokiAcornQuest", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("GladesTown.AcornQI", player))
    add_rule(world.get_location("GladesTown.AboveCaveEX", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has_any(("Launch", "DoubleJump"), player))
    add_rule(world.get_location("GladesTown.AboveCaveEX", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("Bash", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.AboveCaveEX", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("TuleyShop.SpringPlants", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [10], [], [], []))
    add_rule(world.get_location("GladesTown.CaveBurrowEX", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("Burrow", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has("GladesTown.ClearThorns", player) and s.has_any(("Launch", "DoubleJump"), player))
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "GladesTown.Teleporter", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has("GladesTown.ClearThorns", player) and s.has("TuleyShop.SpringPlants", player))
    add_rule(world.get_location("GladesTown.AboveTpEX", player), lambda s: s.can_reach_region("GladesTown.BelowBountyShard"))
    add_rule(world.get_location("GladesTown.BountyShard", player), lambda s: s.can_reach_region("GladesTown.BelowBountyShard") and s.has("Launch", player))
    add_rule(world.get_location("GladesTown.BountyShard", player), lambda s: s.can_reach_region("GladesTown.BelowBountyShard") and s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_location("GladesTown.BountyShard", player), lambda s: s.can_reach_region("GladesTown.BelowBountyShard") and s.has("Bash", player) and cost_all(s, player, options, "GladesTown.BelowBountyShard", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("GladesTown.BountyShard", player), lambda s: s.can_reach_region("GladesTown.BelowBountyShard") and s.has("Grapple", player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.Teleporter", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.LeftAboveCoals", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.LeftAboveCoals", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.LeftAboveCoals", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.LeftAboveCoals") and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.LeftAboveCoals") and s.has_all(("Flap", "Glide"), player))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.LeftAboveCoals") and s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Glide", "Dash"), player))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.LeftAboveCoals") and s.has("TuleyShop.SpringPlants", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.Teleporter", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.AboveOpher", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.LeftAboveCoals", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has_all(("Flap", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("DoubleJump", player) and s.has("TuleyShop.SpringPlants", player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("Bash", player) and s.has("GladesTown.RoofsOverHeads", player) and cost_all(s, player, options, "GladesTown.AboveOpher", "GladesTown.PlayfulMoki", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_TuleyShop", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_TuleyShop", player), lambda s: s.has("Dash", player) and s.has("GladesTown.RoofsOverHeads", player))
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: s.has_any(("TuleyShop.SpringPlants", "DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.PlayfulMoki", "GladesTown.HoleHut", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.AboveOpher", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_TuleyShop", player), lambda s: s.has("Dash", player) and s.has("GladesTown.TuleySpawned", player))
    add_rule(world.get_location("GladesTown.LupoSoupEX", player), lambda s: s.can_reach_region("GladesTown.LupoHouse"))
    add_rule(world.get_location("LupoShop.HCMapIcon", player), lambda s: s.can_reach_region("GladesTown.LupoHouse") and s.has("SpiritLight", player))
    add_rule(world.get_location("LupoShop.ECMapIcon", player), lambda s: s.can_reach_region("GladesTown.LupoHouse") and s.has("SpiritLight", player))
    add_rule(world.get_location("LupoShop.ShardMapIcon", player), lambda s: s.can_reach_region("GladesTown.LupoHouse") and s.has("SpiritLight", player))
    add_rule(world.get_location("GladesTown.LupoSwimHC", player), lambda s: s.can_reach_region("GladesTown.LupoHouse") and s.has_all(("Water", "Burrow"), player))
    add_rule(world.get_entrance("GladesTown.LupoHouse_to_GladesTown.Teleporter", player), lambda s: s.has_any(("Water", "Burrow"), player))
    add_rule(world.get_location("GladesTown.BelowHoleHutEX", player), lambda s: s.can_reach_region("GladesTown.HoleHut"))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.HoleHutEntrance", player), lambda s: s.has("Bash", player) and s.has("GladesTown.RoofsOverHeads", player) and cost_all(s, player, options, "GladesTown.HoleHut", "GladesTown.HoleHutEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.HoleHutEntrance", player), lambda s: s.has("GladesTown.RoofsOverHeads", player) and s.has_any(("TuleyShop.SpringPlants", "DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Launch", "Grapple"), player) and s.has_any(("TuleyShop.BlueMoon", "TuleyShop.StickyGrass"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("TuleyShop.SpringPlants", player) and has_health("40", s, player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Grapple"), player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("DoubleJump", "Dash"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Grapple"), player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("DoubleJump", "Dash"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Bash", "Grapple"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has("TuleyShop.BlueMoon", player) and has_health("40", s, player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Bash", "Grapple", "Glide"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has("TuleyShop.StickyGrass", player) and has_health("40", s, player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.PlayfulMoki", player), lambda s: True)
    add_rule(world.get_location("GladesTown.HoleHutEX", player), lambda s: s.can_reach_region("GladesTown.HoleHutEntrance") and s.has("GladesTown.RoofsOverHeads", player))
    add_rule(world.get_location("GladesTown.HoleHutEC", player), lambda s: s.can_reach_region("GladesTown.HoleHutEntrance") and s.has("GladesTown.RoofsOverHeads", player))
    add_rule(world.get_entrance("GladesTown.HoleHutEntrance_to_GladesTown.HoleHut", player), lambda s: True)
    add_rule(world.get_location("C.WestGlades.PastTown", player), lambda s: s.can_reach_region("WestGlades.PastTown"))
    add_rule(world.get_location("E.WestGlades.PastTown", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("DoubleJump", player) and s.has("BreakCrystal", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("E.WestGlades.PastTown", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("Launch", player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_any(("Grapple", "Launch"), player))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "Dash", "Glide"), player))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Water", "Bash"), player))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("Launch", player))
    add_rule(world.get_location("WestGlades.LowerPoolEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("Water", player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has_any(("Water", "Launch"), player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.LowerPool", [], [], [[40, 'Ranged']], []))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("WestGlades.SwimEC", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("Water", player))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has_all(("Bash", "DoubleJump"), player))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has_any(("Water", "Launch"), player))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WestGlades.LowerPool", "WestGlades.PastTown", [], [], [[40, 'Ranged']], []))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("C.WestGlades.Center", player), lambda s: s.can_reach_region("WestGlades.Center"))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has("Launch", player))
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.Center", "WestGlades.Upper", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.LowerPool", player), lambda s: s.has_any(("Water", "Launch", "DoubleJump", "Dash", "Glide", "Bash"), player))
    add_rule(world.get_location("C.WestGlades.Upper", player), lambda s: s.can_reach_region("WestGlades.Upper"))
    add_rule(world.get_location("H.WestGlades.Upper", player), lambda s: s.can_reach_region("WestGlades.Upper"))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("WestGlades.Upper") and s.has("Flap", player))
    add_rule(world.get_location("WestGlades.UpperPoolEX", player), lambda s: s.can_reach_region("WestGlades.Upper") and s.has("Water", player))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Upper") and s.has("Glide", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Upper") and s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.Center", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.Upper_to_LowerReach.Entry", player), lambda s: s.has("Regenerate", player) and s.has("LowerReach.BearSneezed", player) and has_health("40", s, player))
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_location("C.WestGlades.MillApproach", player), lambda s: s.can_reach_region("WestGlades.MillApproach"))
    add_rule(world.get_location("H.WestGlades.MillApproach", player), lambda s: s.can_reach_region("WestGlades.MillApproach"))
    add_rule(world.get_location("OuterWellspring.SwimOre", player), lambda s: s.can_reach_region("WestGlades.MillApproach") and s.has("Water", player) and s.has_any(("Grapple", "WaterDash", "Launch"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "WestGlades.MillApproach", "WestGlades.ShrineArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "WestGlades.MillApproach", "WestGlades.ShrineArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Grapple"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.MillApproach", "WestGlades.Upper", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has_all(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_any(("Launch", "Water"), player) and has_health("25", s, player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("DoubleJump", "Grapple"), player) and has_health("25", s, player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player) and has_health("25", s, player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Dash", "Glide"), player) and has_health("25", s, player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Water", "Grapple", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player) and has_health("25", s, player) and cost_all(s, player, options, "WestGlades.MillApproach", "PoolsApproach.MillPathCheckpoint", [15], [], [], []))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Water", "Grapple"), player) and s.has_any(("WaterDash", "Launch"), player) and has_health("25", s, player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Water", "Launch", "DoubleJump", "Dash"), player) and has_health("25", s, player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Water", "Launch", "Glide"), player) and has_health("25", s, player))
    add_rule(world.get_location("C.WestGlades.ShrineArea", player), lambda s: s.can_reach_region("WestGlades.ShrineArea"))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has("Bash", player) and cost_all(s, player, options, "WestGlades.ShrineArea", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has("Launch", player))
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_GladesShrine", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.MillApproach", player), lambda s: True)
    add_rule(world.get_location("F.GladesShrine", player), lambda s: s.can_reach_region("GladesShrine"))
    add_rule(world.get_location("WestGlades.CombatShrineCompleted", player), lambda s: s.can_reach_region("GladesShrine") and s.has("Regenerate", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "GladesShrine", "", [65], [], [[32, 'Combat', 32, 'Combat'], [24, 'Combat'], [40, 'Combat'], [40, 'Ranged', 40, 'Ranged'], [32, 'Combat', 32, 'Combat'], [24, 'Combat', 24, 'Combat'], [32, 'Combat', 32, 'Combat'], [40, 'Ranged'], [32, 'Combat']], []))
    add_rule(world.get_location("WestGlades.CombatShrineCompleted", player), lambda s: s.can_reach_region("GladesShrine") and s.has("Regenerate", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "GladesShrine", "", [55], [], [[32, 'Combat', 32, 'Combat'], [24, 'Combat'], [40, 'Combat'], [40, 'Ranged', 40, 'Ranged'], [32, 'Combat', 32, 'Combat'], [24, 'Combat', 24, 'Combat'], [32, 'Combat', 32, 'Combat'], [40, 'Ranged'], [32, 'Combat']], []))
    add_rule(world.get_location("WestGlades.CombatShrineCompleted", player), lambda s: s.can_reach_region("GladesShrine") and s.has_all(("Regenerate", "Launch"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "GladesShrine", "", [30], [], [[32, 'Combat', 32, 'Combat'], [24, 'Combat'], [40, 'Combat'], [40, 'Ranged', 40, 'Ranged'], [32, 'Combat', 32, 'Combat'], [24, 'Combat', 24, 'Combat'], [32, 'Combat', 32, 'Combat'], [40, 'Ranged'], [32, 'Combat']], []))
    add_rule(world.get_location("WestGlades.CombatShrine", player), lambda s: s.can_reach_region("GladesShrine") and s.has("WestGlades.CombatShrineCompleted", player))
    add_rule(world.get_location("C.OuterWellspring.EntranceDoor", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor"))
    add_rule(world.get_location("OuterWellspring.LifeHarvestWallBroken", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has("DoubleJump", player) and s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.LifeHarvestWallBroken", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has("DoubleJump", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [], [], [[20, 'Wall']], [[0, [[13, 'Combat'], [32, 'Combat']], []]]))
    add_rule(world.get_location("OuterWellspring.LifeHarvestWallBroken", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has("Launch", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has_all(("DoubleJump", "Grapple"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has_all(("Grapple", "Launch"), player))
    add_rule(world.get_location("OuterWellspring.WheelEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has("OuterWellspring.EntranceDoorOpen", player))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has("OuterWellspring.EntranceDoorOpen", player))
    add_rule(world.get_location("OuterWellspring.SwimEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has("Water", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestEntry", player), lambda s: s.has("DoubleJump", player) and s.has("OuterWellspring.LifeHarvestWallBroken", player) and s.has("Bash", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestEntry", player), lambda s: s.has("DoubleJump", player) and s.has("OuterWellspring.LifeHarvestWallBroken", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.LifeHarvestEntry", [], [], [], [[0, [[13, 'Combat'], [32, 'Combat']], []]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestEntry", player), lambda s: s.has("Launch", player) and s.has("OuterWellspring.LifeHarvestWallBroken", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_InnerWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.EntranceDoorOpen", player) and has_health("25", s, player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has_all(("Dash", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has_all(("Grapple", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.Basement", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("DoubleJump", "Grapple"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("DoubleJump", "Dash", "Glide"), player) and has_health("20", s, player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player) and has_health("20", s, player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "WestGlades.MillApproach", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player) and has_health("20", s, player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "WestGlades.MillApproach", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and has_health("20", s, player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "WestGlades.MillApproach", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_any(("Water", "Launch"), player) and has_health("20", s, player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has_all(("DoubleJump", "Bash"), player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has("Launch", player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has_all(("DoubleJump", "Bash"), player) and s.has("OuterWellspring.LifeHarvestLeverPulled", player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player) and s.has_any(("Launch", "Bash"), player))
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player) and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", "OuterWellspring.EntranceDoor", [], [], [], [[0, [[32, 'Combat'], [13, 'Combat']], []]]))
    add_rule(world.get_location("OuterWellspring.EntranceDoorOpen", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and cost_all(s, player, options, "OuterWellspring.Basement", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and s.has("Water", player))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Launch", player) and s.has_any(("OuterWellspring.EntranceDoorOpen", "DoubleJump", "Dash", "Glide", "Bash", "Grapple"), player))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("Grapple", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Water", "Grapple"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Bash", player))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Water", "Grapple"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [], [], [[0, [[12, 'Combat']], []]]))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Water", "WaterDash"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Bash", player))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Water", "WaterDash"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [], [], [[0, [[12, 'Combat']], []]]))
    add_rule(world.get_location("E.OuterWellspring.AboveEntranceDoor", player), lambda s: s.can_reach_region("OuterWellspring.AboveEntranceDoor") and s.has("BreakCrystal", player))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda s: s.can_reach_region("OuterWellspring.AboveEntranceDoor") and s.has_all(("DoubleJump", "Launch"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Grapple", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Grapple", player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EntranceDoor", player), lambda s: True)
    add_rule(world.get_location("C.OuterWellspring.WestDoor", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor"))
    add_rule(world.get_location("OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has("Launch", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [], [[3, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Dash", "Glide"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Launch"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.MiddleDoorsOpen", player) and has_health("25", s, player))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "OuterWellspring.EastDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EntranceDoor", player), lambda s: True)
    add_rule(world.get_location("C.OuterWellspring.EastDoor", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor"))
    add_rule(world.get_location("OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [], [[3, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Grenade', 0]]))
    add_rule(world.get_location("OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [['Grenade', 1]], [[3, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Grenade', 0]]))
    add_rule(world.get_location("OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has("Grapple", player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [], [[3, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Grenade', 0]]))
    add_rule(world.get_location("OuterWellspring.TheLostCompass", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has("InnerWellspring.NeedleQI", player))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has_any(("Glide", "Launch"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [['Grenade', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_InnerWellspring.EastDoor", player), lambda s: s.has("InnerWellspring.MiddleDoorsOpen", player) and has_health("25", s, player))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("Grapple", "Launch"), player))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.AboveWestDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.AboveWestDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_any(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has_any(("Grapple", "Launch"), player))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Grapple", "Launch"), player))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: True)
    add_rule(world.get_location("E.OuterWellspring.AboveWestDoor", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has("BreakCrystal", player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("Grapple", "Dash", "Glide"), player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Grapple", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda s: s.has_any(("Grapple", "Launch"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", "OuterWellspring.TopDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_any(("DoubleJump", "Dash", "Grapple", "Glide", "Launch"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.WestDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: True)
    add_rule(world.get_location("OuterWellspring.TrialActivation", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.TopDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_InnerWellspring.Teleporter", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player) and has_health("25", s, player))
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.EastDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: True)
    add_rule(world.get_location("OuterWellspring.RightWallOre", player), lambda s: s.can_reach_region("OuterWellspring.RightWallMidpoint"))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_WestGlades.MillApproach", player), lambda s: s.has_any(("Grapple", "Glide"), player) and has_health("20", s, player))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_any(("Water", "Glide", "Launch"), player))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("C.OuterWellspring.TrialApproach", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach"))
    add_rule(world.get_location("OuterWellspring.RightWallEX", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("OuterWellspring.RightWallEX", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.RightWallEX", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and s.has("Launch", player))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and s.has_any(("Glide", "Launch"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Grapple", "Launch"), player))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Grapple", "Launch"), player))
    add_rule(world.get_location("C.OuterWellspring.TrialRoom", player), lambda s: s.can_reach_region("OuterWellspring.TrialRoom"))
    add_rule(world.get_location("H.OuterWellspring.TrialRoom", player), lambda s: s.can_reach_region("OuterWellspring.TrialRoom"))
    add_rule(world.get_location("E.OuterWellspring.TrialRoom", player), lambda s: s.can_reach_region("OuterWellspring.TrialRoom") and s.has("BreakCrystal", player))
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialStart", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player))
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialStart", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialApproach", player), lambda s: True)
    add_rule(world.get_location("C.OuterWellspring.TrialStart", player), lambda s: s.can_reach_region("OuterWellspring.TrialStart"))
    add_rule(world.get_location("OuterWellspring.TrialOre", player), lambda s: s.can_reach_region("OuterWellspring.TrialStart"))
    add_rule(world.get_location("OuterWellspring.SpiritTrial", player), lambda s: s.can_reach_region("OuterWellspring.TrialStart") and s.has_all(("DoubleJump", "Dash", "Grapple"), player) and s.has("OuterWellspring.TrialActivation", player))
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has_all(("Grapple", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.InnerWellspring.EntranceDoor", player), lambda s: s.can_reach_region("InnerWellspring.EntranceDoor"))
    add_rule(world.get_location("E.InnerWellspring.EntranceDoor", player), lambda s: s.can_reach_region("InnerWellspring.EntranceDoor") and s.has("BreakCrystal", player))
    add_rule(world.get_location("InnerWellspring.ThreeWheels", player), lambda s: s.can_reach_region("InnerWellspring.EntranceDoor") and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "", [], [], [[3, 'Wall']], []))
    add_rule(world.get_location("InnerWellspring.ThreeWheelsEX", player), lambda s: s.can_reach_region("InnerWellspring.EntranceDoor") and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.ThreeWheelsEX", player), lambda s: s.can_reach_region("InnerWellspring.EntranceDoor") and s.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.ThreeWheelsEX", player), lambda s: s.can_reach_region("InnerWellspring.EntranceDoor") and s.has("InnerWellspring.ThreeWheels", player))
    add_rule(world.get_location("InnerWellspring.WaterSwitchEX", player), lambda s: s.can_reach_region("InnerWellspring.EntranceDoor") and s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_OuterWellspring.EntranceDoor", player), lambda s: has_health("25", s, player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "InnerWellspring.ThornShardArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Grapple", player) and s.has("InnerWellspring.ThreeWheels", player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.ThreeWheels", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "InnerWellspring.DrainRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.InnerWellspring.ThornShardArea", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea"))
    add_rule(world.get_location("InnerWellspring.ThornShard", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea"))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has("Launch", player))
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.EntranceDoor", player), lambda s: True)
    add_rule(world.get_location("InnerWellspring.ShortCutWheel", player), lambda s: s.can_reach_region("InnerWellspring.ShortcutLever"))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.EntranceDoor", player), lambda s: s.has_any(("Grapple", "Launch", "DoubleJump"), player))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("DoubleJump", player) and s.has("InnerWellspring.ShortCutWheel", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("InnerWellspring.ShortCutWheel", player))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("Launch", player) and s.has("InnerWellspring.ShortCutWheel", player))
    add_rule(world.get_location("C.InnerWellspring.DrainRoom", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoom"))
    add_rule(world.get_location("E.InnerWellspring.DrainRoom", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoom") and s.has("BreakCrystal", player))
    add_rule(world.get_location("InnerWellspring.DrainRoomBottomWheel", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoom") and s.has("InnerWellspring.ThreeWheels", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.EntranceDoor", player), lambda s: s.has_any(("DoubleJump", "Dash", "Grapple", "Glide", "Launch"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.EntranceDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("Grapple", "Launch"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Glide", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("DoubleJump", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Dash", "Bash"), player) and s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Water", "DoubleJump"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Water", "WaterDash", "Dash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaEntrance", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has_any(("DoubleJump", "Dash", "Grapple", "Glide", "Launch"), player))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEntrance") and s.has_any(("Water", "DoubleJump", "Grapple", "Launch"), player))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEntrance") and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Water", "Bash"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Dash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "InnerWellspring.DrainAreaEX", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Water", "Bash"), player) and s.has_any(("Grapple", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "InnerWellspring.DrainAreaEX", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.DrainEX", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEX"))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEX") and s.has_any(("Water", "Launch"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_any(("DoubleJump", "Dash", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", "InnerWellspring.DrainAreaExit", [], [], [[10, 'Wall']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", "InnerWellspring.DrainAreaExit", [], [['Grenade', 1]], [[10, 'Wall']], []))
    add_rule(world.get_location("C.InnerWellspring.DrainAreaExit", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaExit"))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainAreaEX", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Dash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoomCenter", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoomCenter", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Dash", "Glide", "Water"), player))
    add_rule(world.get_location("InnerWellspring.DrainRoomTopWheel", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoomCenter") and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", "", [], [], [[16, 'Wall']], [[1, 'Bow', 0], [1, 'Grenade', 0], [1, 'Spear', 0]]))
    add_rule(world.get_location("InnerWellspring.DrainRoomTopWheel", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoomCenter") and s.has("Launch", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has_any(("Grapple", "Glide", "Launch"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainAreaEntrance", player), lambda s: s.has("InnerWellspring.DrainLever", player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoomTop", player), lambda s: s.has_any(("InnerWellspring.DrainRoomTopWheel", "Grapple", "Launch"), player))
    add_rule(world.get_location("C.InnerWellspring.DrainRoomTop", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoomTop"))
    add_rule(world.get_location("H.InnerWellspring.DrainRoomTop", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoomTop"))
    add_rule(world.get_location("InnerWellspring.LaserOre", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoomTop") and s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("InnerWellspring.LaserOre", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoomTop") and s.has_all(("Dash", "Glide"), player) and s.has("Bash", player))
    add_rule(world.get_location("InnerWellspring.LaserOre", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoomTop") and s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", "", [], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_location("InnerWellspring.LaserOre", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoomTop") and s.has("Launch", player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.DrainRoomCenter", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Grapple", player) and s.has("InnerWellspring.DrainRoomTopWheel", player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.InnerWellspring.BelowDrainLever", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever"))
    add_rule(world.get_location("InnerWellspring.DrainLever", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.DrainLever", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has("DoubleJump", player) and s.has("InnerWellspring.UpperCorruption", player))
    add_rule(world.get_location("InnerWellspring.DrainLever", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has_all(("Bash", "Grapple"), player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has_all(("DoubleJump", "Bash"), player) and s.has("InnerWellspring.UpperCorruption", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has_all(("DoubleJump", "Grapple"), player) and s.has("InnerWellspring.UpperCorruption", player))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has("Launch", player))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.AbovePole", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.AbovePole", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "InnerWellspring.WestDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: s.has_any(("InnerWellspring.UpperCorruption", "Launch"), player))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.DrainRoomTop", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.DrainRoomCenter", player), lambda s: True)
    add_rule(world.get_location("InnerWellspring.UpperCorruption", player), lambda s: s.can_reach_region("InnerWellspring.AbovePole") and cost_all(s, player, options, "InnerWellspring.AbovePole", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_location("InnerWellspring.LupoEX", player), lambda s: s.can_reach_region("InnerWellspring.AbovePole"))
    add_rule(world.get_entrance("InnerWellspring.AbovePole_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("C.InnerWellspring.WestDoor", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor"))
    add_rule(world.get_location("H.InnerWellspring.WestDoor", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor"))
    add_rule(world.get_location("E.InnerWellspring.WestDoor", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("BreakCrystal", player))
    add_rule(world.get_location("InnerWellspring.MiddleDoorsOpen", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("Grapple", player))
    add_rule(world.get_location("InnerWellspring.MiddleDoorsOpen", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.WestDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.ShortcutWheelEX", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("InnerWellspring.ShortCutWheel", player))
    add_rule(world.get_location("InnerWellspring.LupoMap", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("Grapple", player) and s.has("SpiritLight", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("InnerWellspring.LupoMap", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("Bash", player) and s.has("SpiritLight", player))
    add_rule(world.get_location("InnerWellspring.LupoMap", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("SpiritLight", player) and s.has("InnerWellspring.UpperCorruption", player))
    add_rule(world.get_location("InnerWellspring.GrappleTreeEX", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has_all(("DoubleJump", "Grapple"), player))
    add_rule(world.get_location("InnerWellspring.GrappleTreeEX", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("InnerWellspring.GrappleTreeEX", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Grapple"), player) and cost_all(s, player, options, "InnerWellspring.WestDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.GrappleTreeEX", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.GrappleTree", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has_any(("DoubleJump", "Dash", "Glide", "Grapple", "Launch"), player))
    add_rule(world.get_location("InnerWellspring.GrappleTree", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.MiddleDoorsOpen", player) and has_health("25", s, player))
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.BelowDrainLever", player), lambda s: True)
    add_rule(world.get_location("C.InnerWellspring.EastDoor", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor"))
    add_rule(world.get_location("H.InnerWellspring.EastDoor", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor"))
    add_rule(world.get_location("E.InnerWellspring.EastDoor", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and s.has("BreakCrystal", player))
    add_rule(world.get_location("InnerWellspring.SpinArena", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and s.has("Combat.Dangerous", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.EastDoor", "", [], [], [[24, 'Combat', 24, 'Combat'], [32, 'Combat', 32, 'Combat', 32, 'Combat'], [40, 'Combat']], []))
    add_rule(world.get_location("InnerWellspring.SpinningRoomOpen", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and s.has("InnerWellspring.SpinArena", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.EastDoor", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_location("InnerWellspring.HandToHandHerbs", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and s.has("GladesTown.HandToHandPouch", player))
    add_rule(world.get_location("InnerWellspring.AboveSpinArenaEX", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("InnerWellspring.AboveSpinArenaEX", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and s.has("Launch", player))
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_OuterWellspring.EastDoor", player), lambda s: has_health("25", s, player))
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.SpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinningRoomOpen", player))
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("Grapple", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("DoubleJump", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.EastDoor", "InnerWellspring.TopSecondRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has("InnerWellspring.TopDoorOpen", player))
    add_rule(world.get_location("C.InnerWellspring.SpinPuzzle", player), lambda s: s.can_reach_region("InnerWellspring.SpinPuzzle"))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.SpinPuzzle") and s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.SpinPuzzle") and s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.SpinPuzzle") and s.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.RotateRoomEX", player), lambda s: s.can_reach_region("InnerWellspring.SpinPuzzle") and s.has("InnerWellspring.SpinPuzzleSolved", player))
    add_rule(world.get_location("InnerWellspring.RotateRoomOre", player), lambda s: s.can_reach_region("InnerWellspring.SpinPuzzle") and s.has("InnerWellspring.SpinPuzzleSolved", player))
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player) and s.has_any(("Grapple", "Launch"), player))
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.EastDoor", player), lambda s: s.has("InnerWellspring.SpinningRoomOpen", player) and s.has_any(("Grapple", "Launch"), player))
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.EastDoor", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.SpinningRoomOpen", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", "InnerWellspring.EastDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("C.InnerWellspring.PastSpinPuzzle", player), lambda s: s.can_reach_region("InnerWellspring.PastSpinPuzzle"))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Grapple", player) and s.has("Combat.Dangerous", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [[40, 'Combat']], []))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player) and s.has_any(("DoubleJump", "Glide", "Launch"), player))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzle", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("InnerWellspring.SpinPuzzleSolved", player))
    add_rule(world.get_location("C.InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.can_reach_region("InnerWellspring.GrappleThroughZigZagSpikes"))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Grapple", "Launch"), player))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("Glide", player) and s.has_any(("DoubleJump", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.GrappleThroughZigZagSpikes", "InnerWellspring.PastSpinPuzzle", [], [], [[13, 'Combat', 13, 'Combat']], []))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has_all(("Glide", "Bash"), player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("InnerWellspring.TopDoorOpen", player), lambda s: s.can_reach_region("InnerWellspring.TopSecondRoom") and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_location("InnerWellspring.NeedleQI", player), lambda s: s.can_reach_region("InnerWellspring.TopSecondRoom") and s.has("InnerWellspring.TopDoorOpen", player))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.EastDoor", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Glide", player) and s.has_any(("Water", "DoubleJump", "Dash", "Grapple", "Launch"), player) and s.has("Bash", player))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Glide", player) and s.has_any(("Water", "DoubleJump", "Dash", "Grapple", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Dash"), player) and s.has("Bash", player))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Launch", "Water"), player))
    add_rule(world.get_location("F.InnerWellspring.Teleporter", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter"))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter"))
    add_rule(world.get_location("InnerWellspring.BlueMoonSeed", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("InnerWellspring.BlueMoonSeed", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.Teleporter", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.BlueMoonSeed", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.LibraryEX", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter"))
    add_rule(world.get_location("InnerWellspring.AboveTpEX", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("InnerWellspring.AboveTpEX", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.Teleporter", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.AboveTpEX", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.SwimOre", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has("Water", player))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_Teleporters", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_OuterWellspring.TopDoor", player), lambda s: has_health("25", s, player))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_OpherShop", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_all(("DoubleJump", "Dash", "Grapple"), player))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "InnerWellspring.Teleporter", "InnerWellspring.EscapeSequence", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.Teleporter", "InnerWellspring.EscapeSequence", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.Teleporter", "InnerWellspring.EscapeSequence", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("F.InnerWellspring.EscapeSequence", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence"))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has_all(("Bash", "Grapple", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has_all(("Bash", "Grapple", "Dash", "Glide"), player))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has_all(("Grapple", "Launch"), player))
    add_rule(world.get_location("InnerWellspring.EscapeRevisitEX", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has("InnerWellspring.WaterEscape", player))
    add_rule(world.get_location("C.WoodsEntry.ShriekMeet", player), lambda s: s.can_reach_region("WoodsEntry.ShriekMeet"))
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_WoodsEntry.FirstMud", player), lambda s: s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "WoodsEntry.ShriekMeet", "WoodsEntry.FirstMud", [], [], [[1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_WoodsEntry.FirstMud", player), lambda s: True)
    add_rule(world.get_location("C.WoodsEntry.FirstMud", player), lambda s: s.can_reach_region("WoodsEntry.FirstMud"))
    add_rule(world.get_location("WoodsEntry.MudPitEX", player), lambda s: s.can_reach_region("WoodsEntry.FirstMud") and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("WoodsEntry.MudPitEX", player), lambda s: s.can_reach_region("WoodsEntry.FirstMud") and s.has("Bash", player) and cost_all(s, player, options, "WoodsEntry.FirstMud", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WoodsEntry.FirstMud", "WoodsEntry.BelowTeleporter", [], [], [[1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WoodsEntry.FirstMud", "WoodsEntry.BelowTeleporter", [], [], [[1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "WoodsEntry.FirstMud", "WoodsEntry.ShriekMeet", [], [], [[1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.ShriekMeet", player), lambda s: True)
    add_rule(world.get_location("C.WoodsEntry.BelowTeleporter", player), lambda s: s.can_reach_region("WoodsEntry.BelowTeleporter"))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.FirstMud", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.FirstMud", [], [], [[1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.Teleporter", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.TwoKeystoneRoom", [], [], [[1, 'Combat', 1, 'Combat']], []))
    add_rule(world.get_location("F.WoodsEntry.Teleporter", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter"))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter"))
    add_rule(world.get_location("WoodsEntry.LastTreeBranch", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter"))
    add_rule(world.get_location("WoodsEntry.DollQI", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has("GladesTown.FamilyReunionKey", player))
    add_rule(world.get_location("WoodsEntry.TreeSeed", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has("TuleyShop.LastTreeBranchRejected", player))
    add_rule(world.get_location("WoodsEntry.TpEX", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter"))
    add_rule(world.get_location("WoodsEntry.LeafPileEX", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has("Flap", player))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has("Glide", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has("Bash", player) and s.has_any(("Glide", "Launch"), player) and cost_all(s, player, options, "WoodsEntry.Teleporter", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has_all(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_Teleporters", player), lambda s: True)
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.FirstMud", player), lambda s: True)
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.BelowTeleporter", player), lambda s: True)
    add_rule(world.get_location("C.WoodsEntry.TwoKeystoneRoom", player), lambda s: s.can_reach_region("WoodsEntry.TwoKeystoneRoom"))
    add_rule(world.get_location("E.WoodsEntry.TwoKeystoneRoom", player), lambda s: s.can_reach_region("WoodsEntry.TwoKeystoneRoom") and can_keystones(s, player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("WoodsEntry.KeystoneDoor", player), lambda s: s.can_reach_region("WoodsEntry.TwoKeystoneRoom") and can_keystones(s, player))
    add_rule(world.get_location("WoodsEntry.LowerKS", player), lambda s: s.can_reach_region("WoodsEntry.TwoKeystoneRoom") and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("WoodsEntry.UpperKS", player), lambda s: s.can_reach_region("WoodsEntry.TwoKeystoneRoom") and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Regenerate", player) and can_keystones(s, player) and s.has_any(("Bash", "Launch"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Regenerate", player) and can_keystones(s, player) and has_health("40", s, player) and cost_all(s, player, options, "WoodsEntry.TwoKeystoneRoom", "WoodsMain.AfterKuMeet", [], [], [], [[0, [[20, 'Combat', 20, 'Combat'], [40, 'Ranged']], ['Combat.Aerial']]]))
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has_any(("DoubleJump", "Glide", "Launch"), player) and cost_all(s, player, options, "WoodsEntry.TwoKeystoneRoom", "WoodsEntry.BelowTeleporter", [], [], [[1, 'Combat', 1, 'Combat']], []))
    add_rule(world.get_location("C.WoodsMain.AfterKuMeet", player), lambda s: s.can_reach_region("WoodsMain.AfterKuMeet"))
    add_rule(world.get_location("WoodsEntry.KeystoneDoor", player), lambda s: s.can_reach_region("WoodsMain.AfterKuMeet") and can_keystones(s, player) and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_location("WoodsEntry.KeystoneDoor", player), lambda s: s.can_reach_region("WoodsMain.AfterKuMeet") and can_keystones(s, player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", "", [], [], [], [[0, [[20, 'Combat', 20, 'Combat'], [40, 'Ranged']], ['Combat.Aerial']]]))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has_any(("Bash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("Regenerate", player) and can_keystones(s, player) and s.has_any(("Bash", "Launch"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("Regenerate", player) and can_keystones(s, player) and has_health("40", s, player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", "WoodsEntry.TwoKeystoneRoom", [], [], [], [[0, [[20, 'Combat', 20, 'Combat'], [40, 'Ranged']], ['Combat.Aerial']]]))
    add_rule(world.get_location("WoodsMain.LowerLeafPileEX", player), lambda s: s.can_reach_region("WoodsMain.BelowFourKeystoneRoom") and s.has("Flap", player))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Flap", "Glide"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.FourKeystoneRoom", [], [], [[1, 'Combat', 1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.WallOreLedge", [], [['Grenade', 3]], [[1, 'Combat', 1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.WallOreLedge", [], [['Grenade', 1]], [[1, 'Combat', 1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.WallOreLedge", [], [], [[1, 'Combat', 1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.AfterKuMeet", [10], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.AfterKuMeet", [10], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Bash", "Glide"), player))
    add_rule(world.get_location("WoodsMain.BehindWallOre", player), lambda s: s.can_reach_region("WoodsMain.WallOreLedge") and cost_all(s, player, options, "WoodsMain.WallOreLedge", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("WoodsMain.BelowKeystonesEX", player), lambda s: s.can_reach_region("WoodsMain.WallOreLedge") and s.has_all(("Glide", "DoubleJump"), player))
    add_rule(world.get_location("WoodsMain.BelowKeystonesEX", player), lambda s: s.can_reach_region("WoodsMain.WallOreLedge") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.WoodsMain.FourKeystoneRoom", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom"))
    add_rule(world.get_location("WoodsMain.KeystoneDoor", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and can_keystones(s, player))
    add_rule(world.get_location("WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Flap", player) and s.has("Combat.Aerial", player) and s.has_any(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [[20, 'Combat', 20, 'Combat', 20, 'Combat']], []))
    add_rule(world.get_location("WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has_all(("Bash", "Flap"), player) and s.has_any(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("WoodsMain.MiddleLeafPileEX", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Flap", player))
    add_rule(world.get_location("WoodsMain.RightKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has_any(("Glide", "Launch"), player))
    add_rule(world.get_location("WoodsMain.RightKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WoodsMain.UpperKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has_any(("Glide", "Launch"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [[3, 'Wall']], []))
    add_rule(world.get_location("WoodsMain.UpperKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [['Grenade', 1]], [[3, 'Wall']], []))
    add_rule(world.get_location("WoodsMain.LeftKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Glide", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [[1, 'Combat']], []))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and s.has_any(("Glide", "Launch"), player))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has_all(("DoubleJump", "Dash"), player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Bash", player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.GiantSkull", player), lambda s: can_keystones(s, player))
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: True)
    add_rule(world.get_location("C.WoodsMain.GiantSkull", player), lambda s: s.can_reach_region("WoodsMain.GiantSkull"))
    add_rule(world.get_location("WoodsMain.KeystoneDoor", player), lambda s: s.can_reach_region("WoodsMain.GiantSkull") and can_keystones(s, player))
    add_rule(world.get_location("WoodsMain.UpperLeafPileEX", player), lambda s: s.can_reach_region("WoodsMain.GiantSkull") and s.has("Flap", player))
    add_rule(world.get_location("WoodsMain.BehindDoorRoofEX", player), lambda s: s.can_reach_region("WoodsMain.GiantSkull") and s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", "", [], [], [[1, 'Combat']], []))
    add_rule(world.get_location("WoodsMain.BehindDoorRoofEX", player), lambda s: s.can_reach_region("WoodsMain.GiantSkull") and s.has_all(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", "", [], [], [[1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", "WoodsMain.BalloonLure", [], [], [[1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.FourKeystoneRoom", player), lambda s: can_keystones(s, player))
    add_rule(world.get_location("C.WoodsMain.BalloonLure", player), lambda s: s.can_reach_region("WoodsMain.BalloonLure"))
    add_rule(world.get_location("WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.BalloonLure") and s.has("Glide", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "", [], [], [[3, 'Wall']], []))
    add_rule(world.get_location("WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.can_reach_region("WoodsMain.BalloonLure") and s.has_all(("Flap", "Glide"), player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("Glide", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has_any(("Glide", "Launch"), player))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "", [], [], [[3, 'Wall']], [[1, 'Grenade', 0], [1, 'Blaze', 0]]))
    add_rule(world.get_location("WoodsMain.HiddenOre", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and s.has_all(("Flap", "Glide"), player))
    add_rule(world.get_location("WoodsMain.YellowWallEX", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and s.has("WoodsMain.BalloonLureYellowBarrierBroken", player))
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.PetrifiedHowl", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.BalloonLure", player), lambda s: s.has("WoodsMain.BalloonLureBlobDestroyed", player) and s.has("Bash", player))
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.BalloonLure", player), lambda s: s.has("WoodsMain.BalloonLureBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "WoodsMain.BalloonLure", [], [], [], [[0, [[40, 'Ranged']], []]]))
    add_rule(world.get_location("C.WoodsMain.PetrifiedHowl", player), lambda s: s.can_reach_region("WoodsMain.PetrifiedHowl"))
    add_rule(world.get_location("H.WoodsMain.PetrifiedHowl", player), lambda s: s.can_reach_region("WoodsMain.PetrifiedHowl"))
    add_rule(world.get_location("WoodsMain.PetrifiedHowlEX", player), lambda s: s.can_reach_region("WoodsMain.PetrifiedHowl"))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.AboveHowl", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Bash", "Glide"), player))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BrokenOwl", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "WoodsMain.PetrifiedHowl", "WoodsMain.BrokenOwl", [], [], [[3, 'Wall']], []))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("C.WoodsMain.BrokenOwl", player), lambda s: s.can_reach_region("WoodsMain.BrokenOwl"))
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda s: s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.BrokenOwl", "WoodsMain.AboveHowl", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.TrialStart", player), lambda s: s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.TrialStart", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.BrokenOwl", "WoodsMain.TrialStart", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WoodsMain.SpiritTrial", player), lambda s: s.can_reach_region("WoodsMain.TrialStart") and s.has_all(("DoubleJump", "Dash", "Bash", "Grapple", "Burrow"), player) and s.has("WoodsMain.TrialActivation", player))
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.BrokenOwl", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has_all(("DoubleJump", "Bash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has_all(("Launch", "Grapple", "Bash"), player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("C.WoodsMain.MidwayTrial", player), lambda s: s.can_reach_region("WoodsMain.MidwayTrial"))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has_all(("DoubleJump", "Bash", "Burrow"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("C.WoodsMain.TrialEnd", player), lambda s: s.can_reach_region("WoodsMain.TrialEnd"))
    add_rule(world.get_location("WoodsMain.TrialActivation", player), lambda s: s.can_reach_region("WoodsMain.TrialEnd") and s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("WoodsMain.OverflowShard", player), lambda s: s.can_reach_region("WoodsMain.TrialEnd") and s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("WoodsMain.OverflowShard", player), lambda s: s.can_reach_region("WoodsMain.TrialEnd") and s.has("Launch", player))
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.BeforeLog", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Bash", "Glide"), player))
    add_rule(world.get_location("WoodsMain.HiddenEX", player), lambda s: s.can_reach_region("WoodsMain.AboveHowl"))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.PetrifiedHowl", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BrokenOwl", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.AboveHowl", "WoodsMain.BeforeLog", [], [], [[1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.AboveHowl", "WoodsMain.BeforeLog", [], [['Grenade', 1]], [[1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.WoodsMain.BeforeLog", player), lambda s: s.can_reach_region("WoodsMain.BeforeLog") and cost_all(s, player, options, "WoodsMain.BeforeLog", "", [], [], [[1, 'Combat']], []))
    add_rule(world.get_location("WoodsMain.LogBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.BeforeLog") and cost_all(s, player, options, "WoodsMain.BeforeLog", "", [], [], [[1, 'Combat'], [3, 'Wall']], []))
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.Teleporter", player), lambda s: s.has("WoodsMain.LogBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BeforeLog", "WoodsMain.Teleporter", [], [], [[1, 'Combat', 1, 'Combat', 1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.AboveHowl", player), lambda s: True)
    add_rule(world.get_location("F.WoodsMain.Teleporter", player), lambda s: s.can_reach_region("WoodsMain.Teleporter"))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda s: s.can_reach_region("WoodsMain.Teleporter"))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_Teleporters", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has_all(("DoubleJump", "Bash", "Launch"), player))
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.AbovePit", player), lambda s: s.has_any(("Bash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.BeforeLog", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: s.has_any(("Bash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Bash"), player))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: s.has_any(("Glide", "Launch"), player))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.AbovePit", "WoodsMain.FeedingGrounds", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("C.WoodsMain.FeedingGrounds", player), lambda s: s.can_reach_region("WoodsMain.FeedingGrounds"))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsShrine", player), lambda s: s.has_any(("Glide", "Launch"), player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsShrine", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Grapple", "Glide"), player) and s.has_any(("DoubleJump", "Dash", "Launch"), player) and has_health("50", s, player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Bash", "Grapple"), player) and s.has("WindtornRuins.Seir", player) and has_health("50", s, player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "LowerWastes.WestTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Grapple", "Glide"), player) and s.has("WindtornRuins.Seir", player) and has_health("50", s, player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has("WindtornRuins.Seir", player) and has_health("50", s, player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("WindtornRuins.Seir", player) and has_health("50", s, player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has_all(("DoubleJump", "Bash"), player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("F.WoodsShrine", player), lambda s: s.can_reach_region("WoodsShrine"))
    add_rule(world.get_location("WoodsMain.CombatShrineCompleted", player), lambda s: s.can_reach_region("WoodsShrine") and s.has("Regenerate", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "WoodsShrine", "", [80], [], [[40, 'Combat'], [24, 'Combat'], [20, 'Combat', 20, 'Combat', 20, 'Combat'], [80, 'Combat', 80, 'Combat'], [32, 'Ranged'], [1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat'], [32, 'Combat', 32, 'Combat', 32, 'Combat', 32, 'Combat'], [32, 'Ranged']], []))
    add_rule(world.get_location("WoodsMain.CombatShrineCompleted", player), lambda s: s.can_reach_region("WoodsShrine") and s.has("Regenerate", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WoodsShrine", "", [65], [], [[40, 'Combat'], [24, 'Combat'], [20, 'Combat', 20, 'Combat', 20, 'Combat'], [80, 'Combat', 80, 'Combat'], [32, 'Ranged'], [1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat'], [32, 'Combat', 32, 'Combat', 32, 'Combat', 32, 'Combat'], [32, 'Ranged']], []))
    add_rule(world.get_location("WoodsMain.CombatShrineCompleted", player), lambda s: s.can_reach_region("WoodsShrine") and s.has_all(("Regenerate", "Launch"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "WoodsShrine", "", [50], [], [[40, 'Combat'], [24, 'Combat'], [20, 'Combat', 20, 'Combat', 20, 'Combat'], [80, 'Combat', 80, 'Combat'], [32, 'Ranged'], [1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat'], [32, 'Combat', 32, 'Combat', 32, 'Combat', 32, 'Combat'], [32, 'Ranged']], []))
    add_rule(world.get_location("WoodsMain.ShrineEX", player), lambda s: s.can_reach_region("WoodsShrine"))
    add_rule(world.get_location("WoodsMain.CombatShrine", player), lambda s: s.can_reach_region("WoodsShrine") and s.has("WoodsMain.CombatShrineCompleted", player))
    add_rule(world.get_location("C.LowerReach.Entry", player), lambda s: s.can_reach_region("LowerReach.Entry"))
    add_rule(world.get_location("H.LowerReach.Entry", player), lambda s: s.can_reach_region("LowerReach.Entry"))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has("Flap", player))
    add_rule(world.get_location("LowerReach.ThawBaurFurnace", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has_all(("Bash", "Flap"), player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player))
    add_rule(world.get_location("LowerReach.ThawBaurFurnace", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and cost_all(s, player, options, "LowerReach.Entry", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.FreezeBaurFurnace", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has("Flap", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has_all(("DoubleJump", "Dash", "Bash", "Flap"), player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has("Bash", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and cost_all(s, player, options, "LowerReach.Entry", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has("Launch", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player))
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has_all(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Entry", "LowerReach.AboveEntry", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("LowerReach.Entry_to_WestGlades.Upper", player), lambda s: s.has("LowerReach.BearSneezed", player) and has_health("20", s, player))
    add_rule(world.get_location("C.LowerReach.AboveEntry", player), lambda s: s.can_reach_region("LowerReach.AboveEntry"))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Launch", player))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("DoubleJump", player) and s.has("LowerReach.ThawBaurFurnace", player))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Launch", player))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Bash", player) and s.has("LowerReach.FreezeBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has_all(("DoubleJump", "Bash"), player) and s.has("LowerReach.ThawBaurFurnace", player))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("LowerReach.AboveBaurUpperEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Launch", player) and s.has("LowerReach.ThawBaurFurnace", player))
    add_rule(world.get_location("LowerReach.AboveBaurUpperEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has_all(("DoubleJump", "Dash", "Bash"), player) and s.has("LowerReach.ThawBaurFurnace", player))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Icefall", player), lambda s: s.has_any(("LowerReach.ThawBaurFurnace", "DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("LowerReach.Lever", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Launch", player) and s.has("LowerReach.Lever", player))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Entry", player), lambda s: True)
    add_rule(world.get_location("C.LowerReach.Icefall", player), lambda s: s.can_reach_region("LowerReach.Icefall"))
    add_rule(world.get_location("E.LowerReach.Icefall", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("BreakCrystal", player))
    add_rule(world.get_location("LowerReach.BearBridgeBroken", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("LowerReach.BearSneezed", player))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Grapple", player) and s.has("Combat.Aerial", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Grenade', 1]], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Launch", player) and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Launch", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Grenade', 1]], [], [[0, [[25, 'Combat']], ['Combat.Aerial']]]))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Bash", "Grapple"), player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Bash", "Launch"), player) and s.has("LowerReach.LeftFurnace", player))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "Bash"), player) and s.has("LowerReach.LeftFurnace", player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "Water", "WaterDash"), player) and s.has("LowerReach.LeftFurnace", player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "Grapple"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Launch", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Bash", player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Launch", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [], [[0, [[25, 'Combat']], ['Combat.Aerial']]]))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Launch", "Water", "WaterDash"), player) and s.has("LowerReach.LeftFurnace", player))
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.AboveEntry", player), lambda s: s.has_any(("LowerReach.ThawBaurFurnace", "DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.Entry", player), lambda s: True)
    add_rule(world.get_location("C.LowerReach.CentralEnemyPaths", player), lambda s: s.can_reach_region("LowerReach.CentralEnemyPaths"))
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.Central", player), lambda s: True)
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("Launch", player))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("DoubleJump", "Dash"), player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has("Hammer", player))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("DoubleJump", "Dash"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("Launch", player) and s.has("SpiritLight", player))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("DoubleJump", "Dash"), player) and s.has("SpiritLight", player))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("Bash", player) and s.has("SpiritLight", player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("DoubleJump", "Dash"), player) and s.has("LowerReach.ThawCentralFurnace", player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.SecondSoup", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("DoubleJump", "Dash", "Bash"), player) and s.has("LowerReach.ThawCentralFurnace", player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has("DoubleJump", player) and s.has("LowerReach.Lever", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has("Launch", player) and s.has("LowerReach.Lever", player))
    add_rule(world.get_location("C.LowerReach.OutsideTPRoom", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom"))
    add_rule(world.get_location("F.LowerReach.OutsideTPRoom", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("H.LowerReach.OutsideTPRoom", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom"))
    add_rule(world.get_location("E.LowerReach.OutsideTPRoom", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("BreakCrystal", player))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has_any(("Bash", "Hammer"), player))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("SpiritLight", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("Launch", player))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("Launch", player))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has_all(("DoubleJump", "Bash"), player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has_all(("DoubleJump", "Bash"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.SecondSoup", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_any(("DoubleJump", "Dash", "Bash", "Glide", "Launch", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.CentralEnemyPaths", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.Teleporter", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has_all(("DoubleJump", "Dash", "Bash"), player))
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.LowerReach.BelowTokk", player), lambda s: s.can_reach_region("LowerReach.BelowTokk"))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_LowerReach.OutsideTPRoom", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Dash", "Bash"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Bash"), player) and has_health("40", s, player) and cost_all(s, player, options, "LowerReach.BelowTokk", "UpperReach.KeystoneRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "DoubleJump", "Dash", "Bash"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "DoubleJump", "Bash"), player) and has_health("40", s, player) and cost_all(s, player, options, "LowerReach.BelowTokk", "UpperReach.BurrowArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Launch"), player) and has_health("40", s, player))
    add_rule(world.get_location("F.LowerReach.Teleporter", player), lambda s: s.can_reach_region("LowerReach.Teleporter"))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda s: s.can_reach_region("LowerReach.Teleporter"))
    add_rule(world.get_entrance("LowerReach.Teleporter_to_Teleporters", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.Teleporter_to_LowerReach.OutsideTPRoom", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.Teleporter_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("LowerReach.TPLantern", player))
    add_rule(world.get_location("LowerReach.ThawCentralFurnace", player), lambda s: s.can_reach_region("LowerReach.SecondSoup") and s.has_all(("Flap", "Bash", "DoubleJump", "Dash"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "LowerReach.SecondSoup", "", [], [], [[60, 'Combat']], []))
    add_rule(world.get_location("LowerReach.MeltIceEX", player), lambda s: s.can_reach_region("LowerReach.SecondSoup") and cost_all(s, player, options, "LowerReach.SecondSoup", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.BurrowEX", player), lambda s: s.can_reach_region("LowerReach.SecondSoup") and s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("Flap", player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "LowerReach.SecondSoup", "LowerReach.CentralEnemyPaths", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("DoubleJump", "Burrow"), player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: s.has_any(("Bash", "Burrow", "Launch"), player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: True)
    add_rule(world.get_location("LowerReach.ThawCentralFurnace", player), lambda s: s.can_reach_region("LowerReach.BelowLupo") and cost_all(s, player, options, "LowerReach.BelowLupo", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.FreezeCentralFurnace", player), lambda s: s.can_reach_region("LowerReach.BelowLupo") and s.has("Flap", player))
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda s: s.can_reach_region("LowerReach.BelowLupo") and s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "LowerReach.BelowLupo", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda s: s.can_reach_region("LowerReach.BelowLupo") and s.has("Launch", player))
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda s: s.can_reach_region("LowerReach.BelowLupo") and s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.SecondSoup", player), lambda s: s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.SecondSoup", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.CentralFurnacePedestal", player), lambda s: s.has_any(("LowerReach.ThawCentralFurnace", "DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("C.LowerReach.CentralFurnacePedestal", player), lambda s: s.can_reach_region("LowerReach.CentralFurnacePedestal"))
    add_rule(world.get_location("E.LowerReach.CentralFurnacePedestal", player), lambda s: s.can_reach_region("LowerReach.CentralFurnacePedestal") and s.has("BreakCrystal", player) and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_location("E.LowerReach.CentralFurnacePedestal", player), lambda s: s.can_reach_region("LowerReach.CentralFurnacePedestal") and s.has("Hammer", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("E.LowerReach.CentralFurnacePedestal", player), lambda s: s.can_reach_region("LowerReach.CentralFurnacePedestal") and s.has("Sword", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.CentralFurnacePedestal", "", [], [], [[60, 'Combat']], []))
    add_rule(world.get_location("E.LowerReach.CentralFurnacePedestal", player), lambda s: s.can_reach_region("LowerReach.CentralFurnacePedestal") and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "LowerReach.CentralFurnacePedestal", "", [], [['Bow', 1]], [[60, 'Combat']], []))
    add_rule(world.get_location("LowerReach.ThawCentralFurnace", player), lambda s: s.can_reach_region("LowerReach.CentralFurnacePedestal") and cost_all(s, player, options, "LowerReach.CentralFurnacePedestal", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.FreezeCentralFurnace", player), lambda s: s.can_reach_region("LowerReach.CentralFurnacePedestal") and s.has("Flap", player))
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.BelowLupo", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.BelowLupo", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.CentralFurnacePedestal", "LowerReach.BelowLupo", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.WindChannel", player), lambda s: s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.WindChannel", player), lambda s: True)
    add_rule(world.get_location("C.LowerReach.WindChannel", player), lambda s: s.can_reach_region("LowerReach.WindChannel"))
    add_rule(world.get_location("LowerReach.WindLantern", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and cost_all(s, player, options, "LowerReach.WindChannel", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.BreakWallEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and cost_all(s, player, options, "LowerReach.WindChannel", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("LowerReach.WindBottomEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has("Glide", player) and s.has("LowerReach.WindLantern", player))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has("Glide", player) and s.has("LowerReach.WindLantern", player))
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.CentralFurnacePedestal", player), lambda s: s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.CentralFurnacePedestal", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("Glide", player) and s.has("LowerReach.WindLantern", player))
    add_rule(world.get_location("E.LowerReach.SoupMoki", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and s.has("BreakCrystal", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("LowerReach.HandToHandHat", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and s.has("LowerReach.HandToHandSoup", player))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindChannel", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.SoupMoki", "LowerReach.EastEnemyPaths", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("F.LowerReach.EastEnemyPaths", player), lambda s: s.can_reach_region("LowerReach.EastEnemyPaths") and s.has("LowerReach.TPLantern", player))
    add_rule(world.get_entrance("LowerReach.EastEnemyPaths_to_LowerReach.East", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.Teleporter", player), lambda s: s.has("LowerReach.TPLantern", player))
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.East", "LowerReach.SnowballEnemyPaths", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SoupMoki", player), lambda s: True)
    add_rule(world.get_location("C.LowerReach.SnowballEnemyPaths", player), lambda s: s.can_reach_region("LowerReach.SnowballEnemyPaths"))
    add_rule(world.get_entrance("LowerReach.SnowballEnemyPaths_to_LowerReach.Snowball", player), lambda s: True)
    add_rule(world.get_location("LowerReach.TPLantern", player), lambda s: s.can_reach_region("LowerReach.Snowball") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Snowball", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.TPLantern", player), lambda s: s.can_reach_region("LowerReach.Snowball") and cost_all(s, player, options, "LowerReach.Snowball", "", [], [['Grenade', 1]], [], [[0, [[12, 'Combat']], []]]))
    add_rule(world.get_location("LowerReach.RolledSnowball", player), lambda s: s.can_reach_region("LowerReach.Snowball") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Snowball", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.RolledSnowball", player), lambda s: s.can_reach_region("LowerReach.Snowball") and cost_all(s, player, options, "LowerReach.Snowball", "", [], [['Grenade', 1]], [], [[0, [[32, 'Combat']], []]]))
    add_rule(world.get_location("LowerReach.SnowballHC", player), lambda s: s.can_reach_region("LowerReach.Snowball") and s.has("Burrow", player) and s.has("LowerReach.RolledSnowball", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("LowerReach.SnowballHC", player), lambda s: s.can_reach_region("LowerReach.Snowball") and s.has("Burrow", player) and s.has("LowerReach.RolledSnowball", player) and cost_all(s, player, options, "LowerReach.Snowball", "", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.Snowball", "LowerReach.EastEnemyPaths", [], [], [[12, 'Combat']], []))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.SoupMoki", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player) and s.has_any(("DoubleJump", "Glide", "Launch"), player))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("LowerReach.RolledSnowball", player) and cost_all(s, player, options, "LowerReach.Snowball", "LowerReach.PastSnowball", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda s: s.has("Bash", player) and s.has("LowerReach.RolledSnowball", player) and cost_all(s, player, options, "LowerReach.Snowball", "LowerReach.PastSnowball", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("C.LowerReach.PastSnowball", player), lambda s: s.can_reach_region("LowerReach.PastSnowball"))
    add_rule(world.get_location("E.LowerReach.PastSnowball", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and s.has("BreakCrystal", player))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "LowerReach.PastSnowball", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.IceCavern", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.PastSnowball", "LowerReach.IceCavern", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.IceCavern", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("LowerReach.RolledSnowball", player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has("Bash", player))
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("LowerReach.RolledSnowball", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.PastSnowball", "LowerReach.SnowballEnemyPaths", [], [], [], [[0, [[24, 'Combat']], []]]))
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Launch", player) and s.has("LowerReach.RolledSnowball", player))
    add_rule(world.get_location("LowerReach.RoofRightEX", player), lambda s: s.can_reach_region("LowerReach.IceCavern") and s.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.PastSnowball", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("LowerReach.EastDoorLantern", player), lambda s: s.can_reach_region("LowerReach.HalfwayIceCavern") and s.has_all(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.EastDoorLantern", player), lambda s: s.can_reach_region("LowerReach.HalfwayIceCavern") and s.has("Launch", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.SwimmingPool", player), lambda s: s.has("Glide", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.SwimmingPool", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("E.LowerReach.SwimmingPool", player), lambda s: s.can_reach_region("LowerReach.SwimmingPool") and s.has("BreakCrystal", player) and s.has_any(("LowerReach.FreezeEastFurnace", "Water"), player))
    add_rule(world.get_location("LowerReach.FractureShard", player), lambda s: s.can_reach_region("LowerReach.SwimmingPool") and s.has("Water", player) and s.has("LowerReach.ThawEastFurnace", player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Bash", player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.FreezeEastFurnace", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Launch", player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("LowerReach.FreezeEastFurnace", "DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.EastFurnace", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.LowerReach.EastFurnace", player), lambda s: s.can_reach_region("LowerReach.EastFurnace"))
    add_rule(world.get_location("LowerReach.ThawEastFurnace", player), lambda s: s.can_reach_region("LowerReach.EastFurnace") and cost_all(s, player, options, "LowerReach.EastFurnace", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.FreezeEastFurnace", player), lambda s: s.can_reach_region("LowerReach.EastFurnace") and s.has("Flap", player))
    add_rule(world.get_entrance("LowerReach.EastFurnace_to_LowerReach.PastSnowball", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.EastFurnace_to_LowerReach.SwimmingPool", player), lambda s: True)
    add_rule(world.get_location("C.LowerReach.ArenaArea", player), lambda s: s.can_reach_region("LowerReach.ArenaArea"))
    add_rule(world.get_location("H.LowerReach.ArenaArea", player), lambda s: s.can_reach_region("LowerReach.ArenaArea"))
    add_rule(world.get_location("E.LowerReach.ArenaArea", player), lambda s: s.can_reach_region("LowerReach.ArenaArea") and s.has_all(("DoubleJump", "Dash"), player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("E.LowerReach.ArenaArea", player), lambda s: s.can_reach_region("LowerReach.ArenaArea") and s.has("Launch", player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("LowerReach.ArenaBeaten", player), lambda s: s.can_reach_region("LowerReach.ArenaArea") and s.has("Regenerate", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.ArenaArea", "", [40], [], [[60, 'Combat', 60, 'Combat', 60, 'Combat'], [40, 'Combat'], [24, 'Combat', 24, 'Combat']], []))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.TrialStart", player), lambda s: s.has("LowerReach.ArenaBeaten", player))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.WindSpinners", player), lambda s: s.has("Glide", player) and s.has("LowerReach.ArenaBeaten", player))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has("LowerReach.EastDoorLantern", player) and s.has_any(("LowerReach.FreezeEastFurnace", "Water"), player))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Glide", player) and s.has_any(("Grapple", "Launch"), player))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "DoubleJump", "Bash"), player) and cost_all(s, player, options, "LowerReach.WindSpinners", "LowerReach.WispPathCheckpoint", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.ArenaArea", player), lambda s: s.has("Glide", player) and s.has("LowerReach.ArenaBeaten", player))
    add_rule(world.get_location("C.LowerReach.WispPathCheckpoint", player), lambda s: s.can_reach_region("LowerReach.WispPathCheckpoint"))
    add_rule(world.get_location("H.LowerReach.WispPathCheckpoint", player), lambda s: s.can_reach_region("LowerReach.WispPathCheckpoint") and s.has_any(("Grapple", "Launch"), player))
    add_rule(world.get_location("E.LowerReach.WispPathCheckpoint", player), lambda s: s.can_reach_region("LowerReach.WispPathCheckpoint") and s.has_all(("DoubleJump", "Grapple"), player))
    add_rule(world.get_location("E.LowerReach.WispPathCheckpoint", player), lambda s: s.can_reach_region("LowerReach.WispPathCheckpoint") and s.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Bash", player) and s.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", "LowerReach.BridgeWispPath", [], [], [], [[1, 'Grenade', 3]]))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.WindSpinners", player), lambda s: s.has("Glide", player))
    add_rule(world.get_location("C.LowerReach.BridgeWispPath", player), lambda s: s.can_reach_region("LowerReach.BridgeWispPath"))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has_any(("DoubleJump", "Grapple"), player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", "LowerReach.SnowEscape", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has_all(("Glide", "Launch"), player))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", "LowerReach.WispPathCheckpoint", [], [], [[12, 'Combat'], [40, 'Combat']], []))
    add_rule(world.get_location("F.LowerReach.SnowEscape", player), lambda s: s.can_reach_region("LowerReach.SnowEscape"))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Dash", "Bash", "Grapple", "Glide"), player) and s.has_any(("Water", "DoubleJump"), player))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Bash", "Glide", "Launch"), player))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Dash", "Bash", "Grapple", "Glide"), player) and s.has_any(("Water", "DoubleJump"), player))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Bash", "Glide", "Launch"), player))
    add_rule(world.get_location("LowerReach.EscapeRevisitEX", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has("LowerReach.ForestsMemory", player))
    add_rule(world.get_location("C.LowerReach.VeralHome", player), lambda s: s.can_reach_region("LowerReach.VeralHome"))
    add_rule(world.get_location("LowerReach.HandToHandSoup", player), lambda s: s.can_reach_region("LowerReach.VeralHome") and s.has("InnerWellspring.HandToHandHerbs", player))
    add_rule(world.get_location("GladesTown.LeafPileEX", player), lambda s: s.can_reach_region("LowerReach.VeralHome") and s.has("Flap", player))
    add_rule(world.get_location("LowerReach.CatalystShard", player), lambda s: s.can_reach_region("LowerReach.VeralHome") and s.has_all(("Water", "Bash", "Flap"), player))
    add_rule(world.get_location("LowerReach.CatalystShard", player), lambda s: s.can_reach_region("LowerReach.VeralHome") and s.has("Water", player) and cost_all(s, player, options, "LowerReach.VeralHome", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.VeralHome_to_GladesTown.HoleHut", player), lambda s: s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerReach.VeralHome_to_GladesTown.PlayfulMoki", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.VeralHome_to_TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player))
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and s.has("Flap", player))
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.VeralHome", "LowerReach.TownEntry", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.VeralHome", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has("Glide", player))
    add_rule(world.get_location("C.LowerReach.TrialStart", player), lambda s: s.can_reach_region("LowerReach.TrialStart"))
    add_rule(world.get_location("LowerReach.KeystoneDoor", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and can_keystones(s, player))
    add_rule(world.get_location("LowerReach.TrialActivation", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and can_keystones(s, player))
    add_rule(world.get_location("LowerReach.SpiritTrial", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has_all(("Dash", "Glide"), player) and s.has("LowerReach.TrialActivation", player))
    add_rule(world.get_location("LowerReach.RightKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("Glide", player))
    add_rule(world.get_location("LowerReach.RightKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has_all(("DoubleJump", "Dash", "Bash"), player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.RightKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("Launch", player) and s.has("DoubleJump", player))
    add_rule(world.get_location("LowerReach.RightKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("Launch", player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("LowerReach.UpperLeftKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("Glide", player))
    add_rule(world.get_location("LowerReach.MiddleLeftKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("Glide", player))
    add_rule(world.get_location("LowerReach.BottomLeftKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("Glide", player))
    add_rule(world.get_location("LowerReach.TrialEX", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("Glide", player))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.ArenaArea", player), lambda s: s.has("Glide", player) and s.has("LowerReach.ArenaBeaten", player))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Launch", "Bash"), player))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Launch", "Bash"), player))
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_LowerReach.BelowTokk", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and has_health("40", s, player))
    add_rule(world.get_location("C.UpperReach.KeystoneRoom", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom"))
    add_rule(world.get_location("UpperReach.ThawFurnace", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and cost_all(s, player, options, "UpperReach.KeystoneRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperReach.ThawFurnace", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has_all(("Flap", "Bash"), player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("UpperReach.FreezeFurnace", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has("Flap", player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has("DoubleJump", player) and s.has("UpperReach.ThawFurnace", player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has("Bash", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has_all(("Water", "WaterDash"), player) and s.has("UpperReach.ThawFurnace", player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has("Launch", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_Tokk", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Grenade', 1]], [[60, 'Combat']], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Water", "DoubleJump", "Grapple"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Water", "DoubleJump", "Bash"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("DoubleJump", "Dash", "Glide", "Grapple"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("DoubleJump", "Bash", "Glide"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("DoubleJump", "Bash", "Grapple", "Dash"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupFrozen", player), lambda s: s.has("DoubleJump", player) and s.has("UpperReach.FreezeFurnace", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupFrozen", player), lambda s: s.has("Bash", player) and s.has("UpperReach.FreezeFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoupFrozen", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Water", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("DoubleJump", "Bash"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Water", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.OutsideTreeRoom", [], [], [], [[0, [[60, 'Combat']], ['Combat.Dangerous', 'Combat.Shielded']]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("DoubleJump", "Dash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Grapple", "Glide"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Water", "WaterDash", "Dash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.KeystoneSnapPlantThawed", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("UpperReach.ThawFurnace", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("Regenerate", player) and has_health("40", s, player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.KeystoneSnapPlantPaths", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.KeystoneSnapPlantThawedPaths", player), lambda s: s.has("UpperReach.ThawFurnace", player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has_any(("Glide", "Launch"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.KeystoneSnapPlantPaths", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.KeystoneSnapPlantThawedPaths", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_any(("Glide", "Launch"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("UpperReach.MiddleLeftKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneSnapPlantPaths"))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths_to_UpperReach.KeystoneRoom", player), lambda s: s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneSnapPlantThawedPaths") and s.has("Glide", player))
    add_rule(world.get_entrance("UpperReach.UpperSoup_to_UpperReach.UpperSoupPaths", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.UpperSoup_to_UpperReach.UpperSoupFrozenPaths", player), lambda s: s.has("UpperReach.FreezeFurnace", player))
    add_rule(world.get_entrance("UpperReach.UpperSoup_to_UpperReach.UpperSoupThawedPaths", player), lambda s: s.has("UpperReach.ThawFurnace", player))
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozen_to_UpperReach.UpperSoupPaths", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozen_to_UpperReach.UpperSoupFrozenPaths", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.UpperSoupThawed_to_UpperReach.UpperSoupPaths", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.UpperSoupThawed_to_UpperReach.UpperSoupThawedPaths", player), lambda s: True)
    add_rule(world.get_location("C.UpperReach.UpperSoupPaths", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths"))
    add_rule(world.get_location("H.UpperReach.UpperSoupPaths", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths"))
    add_rule(world.get_location("UpperReach.SoupOre", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths"))
    add_rule(world.get_location("UpperReach.UpperKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and s.has_all(("DoubleJump", "Bash"), player))
    add_rule(world.get_location("UpperReach.UpperKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and s.has("Launch", player))
    add_rule(world.get_location("UpperReach.SwingPoleEX", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and s.has("DoubleJump", player))
    add_rule(world.get_location("UpperReach.SwingPoleEX", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and s.has("Bash", player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperReach.SwingPoleEX", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and s.has("Launch", player))
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneRoom", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("C.UpperReach.UpperSoupFrozenPaths", player), lambda s: s.can_reach_region("UpperReach.UpperSoupFrozenPaths"))
    add_rule(world.get_location("C.UpperReach.UpperSoupThawedPaths", player), lambda s: s.can_reach_region("UpperReach.UpperSoupThawedPaths"))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupThawedPaths") and s.has("Glide", player))
    add_rule(world.get_location("UpperReach.MiddleRightKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupThawedPaths") and s.has("DoubleJump", player))
    add_rule(world.get_location("UpperReach.MiddleRightKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupThawedPaths") and s.has("Bash", player) and cost_all(s, player, options, "UpperReach.UpperSoupThawedPaths", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperReach.MiddleRightKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupThawedPaths") and s.has("Launch", player))
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_UpperReach.OutsideTreeRoom", player), lambda s: True)
    add_rule(world.get_location("C.UpperReach.OutsideTreeRoom", player), lambda s: s.can_reach_region("UpperReach.OutsideTreeRoom"))
    add_rule(world.get_location("E.UpperReach.OutsideTreeRoom", player), lambda s: s.can_reach_region("UpperReach.OutsideTreeRoom") and s.has_all(("Water", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("BreakCrystal", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("E.UpperReach.OutsideTreeRoom", player), lambda s: s.can_reach_region("UpperReach.OutsideTreeRoom") and s.has("Launch", player) and s.has("UpperReach.ThawFurnace", player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("UpperReach.KeystoneDoor", player), lambda s: s.can_reach_region("UpperReach.OutsideTreeRoom") and can_keystones(s, player))
    add_rule(world.get_location("UpperReach.SwimEX", player), lambda s: s.can_reach_region("UpperReach.OutsideTreeRoom") and s.has("Water", player) and s.has("UpperReach.ThawFurnace", player))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("UpperReach.ThawFurnace", player))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", "UpperReach.UpperSoupThawed", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: can_keystones(s, player))
    add_rule(world.get_location("UpperReach.KeystoneDoor", player), lambda s: s.can_reach_region("UpperReach.TreeRoomLedge") and can_keystones(s, player))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoomLedge") and s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoomLedge") and s.has_all(("Bash", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoomLedge") and s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeRoom", player), lambda s: True)
    add_rule(world.get_location("E.UpperReach.TreeRoom", player), lambda s: s.can_reach_region("UpperReach.TreeRoom") and s.has("BreakCrystal", player))
    add_rule(world.get_location("UpperReach.SpringSeed", player), lambda s: s.can_reach_region("UpperReach.TreeRoom") and cost_all(s, player, options, "UpperReach.TreeRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperReach.LightBurstTree", player), lambda s: s.can_reach_region("UpperReach.TreeRoom"))
    add_rule(world.get_location("UpperReach.WellEX", player), lambda s: s.can_reach_region("UpperReach.TreeRoom"))
    add_rule(world.get_location("UpperReach.HiddenEX", player), lambda s: s.can_reach_region("UpperReach.TreeRoom") and cost_all(s, player, options, "UpperReach.TreeRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperReach.TreeRoom", "UpperReach.TreeRoomLedge", [], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("UpperDepths.EntrySpikesEX", player), lambda s: s.can_reach_region("UpperDepths.Entry") and s.has("Glide", player))
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Glide", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperDepths.Entry", "UpperDepths.FirstFirefly", [], [], [[1, 'Ranged', 1, 'Ranged'], [32, 'Ranged', 32, 'Ranged'], [32, 'Combat']], []))
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Glide", "Bash"), player) and cost_all(s, player, options, "UpperDepths.Entry", "UpperDepths.FirstFirefly", [], [], [[1, 'Ranged', 1, 'Ranged']], []))
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has("Glide", player) and s.has("EastHollow.DepthsOpen", player) and has_health("20", s, player))
    add_rule(world.get_location("C.UpperDepths.FirstFirefly", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly"))
    add_rule(world.get_location("UpperDepths.EntryRoofEX", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("UpperDepths.EntryRoofEX", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has_all(("Grapple", "DoubleJump", "Dash"), player))
    add_rule(world.get_location("UpperDepths.EntryRoofEX", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("Launch", player))
    add_rule(world.get_location("UpperDepths.EntryOre", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [], [[32, 'Ranged']], []))
    add_rule(world.get_location("UpperDepths.EntryOre", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("Bash", player) and s.has_any(("DoubleJump", "Grapple"), player))
    add_rule(world.get_location("UpperDepths.EntryOre", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("Launch", player))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [], [[1, 'Wall'], [12, 'Combat']], []))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has_all(("Bash", "Grapple"), player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [], [[1, 'Wall']], []))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("Launch", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [], [[1, 'Wall']], []))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has_any(("DoubleJump", "Bash", "Launch"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [['Bow', 1]], [], [[0, [[12, 'Combat']], []]]))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has_any(("DoubleJump", "Bash", "Launch"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [['Spear', 1]], [], [[0, [[12, 'Combat']], []]]))
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.Entry", player), lambda s: s.has("Glide", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "UpperDepths.Entry", [], [], [[1, 'Ranged', 1, 'Ranged'], [32, 'Ranged', 32, 'Ranged'], [32, 'Combat']], []))
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.Entry", player), lambda s: s.has_all(("Glide", "Bash"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "UpperDepths.Entry", [], [], [[1, 'Ranged', 1, 'Ranged']], []))
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.FirstKSRoom", player), lambda s: True)
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda s: s.can_reach_region("UpperDepths.FirstKSRoom") and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Bash", "Launch"), player))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda s: s.can_reach_region("UpperDepths.FirstKSRoom") and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "", [], [], [], [[0, [[12, 'Combat']], []]]))
    add_rule(world.get_location("UpperDepths.SwimEC", player), lambda s: s.can_reach_region("UpperDepths.FirstKSRoom") and s.has("Water", player) and s.has_any(("DoubleJump", "Bash", "Launch"), player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "", [], [['Flash', 1]], [], []))
    add_rule(world.get_location("UpperDepths.SwimEC", player), lambda s: s.can_reach_region("UpperDepths.FirstKSRoom") and s.has("Water", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "", [], [['Flash', 1]], [], [[0, [[12, 'Combat']], []]]))
    add_rule(world.get_location("UpperDepths.SwimEC", player), lambda s: s.can_reach_region("UpperDepths.FirstKSRoom") and s.has("Water", player) and s.has("UpperDepths.ForestsEyes", player) and s.has_any(("DoubleJump", "Bash", "Launch"), player))
    add_rule(world.get_location("UpperDepths.SwimEC", player), lambda s: s.can_reach_region("UpperDepths.FirstKSRoom") and s.has("Water", player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "", [], [], [], [[0, [[12, 'Combat']], []]]))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("Bash", player))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "UpperDepths.FirstFirefly", [], [], [], [[0, [[12, 'Combat'], [12, 'Combat']], []]]))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Grapple"), player))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has_all(("DoubleJump", "Grapple"), player))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Grapple"), player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "UpperDepths.KeydoorLedge", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.UpperDepths.KeydoorLedge", player), lambda s: s.can_reach_region("UpperDepths.KeydoorLedge") and can_keystones(s, player))
    add_rule(world.get_location("UpperDepths.LightPuzzle", player), lambda s: s.can_reach_region("UpperDepths.KeydoorLedge") and s.has_all(("DoubleJump", "Bash", "Grapple"), player) and can_keystones(s, player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", "", [], [], [[16, 'Wall'], [16, 'Wall']], []))
    add_rule(world.get_location("UpperDepths.LightPuzzle", player), lambda s: s.can_reach_region("UpperDepths.KeydoorLedge") and s.has_all(("Bash", "Launch"), player) and can_keystones(s, player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", "", [], [], [[16, 'Wall'], [16, 'Wall']], []))
    add_rule(world.get_location("UpperDepths.EntryKeystoneDoor", player), lambda s: s.can_reach_region("UpperDepths.KeydoorLedge") and can_keystones(s, player))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.FirstKSRoom", player), lambda s: s.has_any(("DoubleJump", "Dash", "Grapple", "Glide", "Launch"), player))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda s: s.has_any(("Glide", "Launch"), player))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "Glide"), player) and can_keystones(s, player) and s.has("UpperDepths.LightPuzzle", player))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: s.has("Launch", player) and can_keystones(s, player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: s.has("Bash", player) and can_keystones(s, player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: can_keystones(s, player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", "UpperDepths.BelowHive", [], [], [[32, 'Ranged', 32, 'Ranged']], []))
    add_rule(world.get_location("C.UpperDepths.RightKeystonePath", player), lambda s: s.can_reach_region("UpperDepths.RightKeystonePath"))
    add_rule(world.get_location("UpperDepths.RightEntryKS", player), lambda s: s.can_reach_region("UpperDepths.RightKeystonePath") and s.has_all(("Grapple", "DoubleJump"), player))
    add_rule(world.get_location("UpperDepths.RightEntryKS", player), lambda s: s.can_reach_region("UpperDepths.RightKeystonePath") and s.has("Launch", player))
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player))
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("C.UpperDepths.BelowHive", player), lambda s: s.can_reach_region("UpperDepths.BelowHive"))
    add_rule(world.get_location("F.UpperDepths.BelowHive", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "", [], [], [[1, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0]]))
    add_rule(world.get_location("F.UpperDepths.BelowHive", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has("Launch", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "", [], [], [[1, 'Wall']], []))
    add_rule(world.get_location("F.UpperDepths.BelowHive", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has("DepthsLight", player) and s.has_any(("Grapple", "Launch"), player))
    add_rule(world.get_location("F.UpperDepths.BelowHive", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("E.UpperDepths.BelowHive", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has("BreakCrystal", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("UpperDepths.EntryKeystoneDoor", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and can_keystones(s, player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("UpperDepths.HiveEX", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.KeydoorLedge", player), lambda s: can_keystones(s, player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Teleporter", player), lambda s: s.has_any(("Grapple", "Launch"), player))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Teleporter", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "UpperDepths.Teleporter", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Central", player), lambda s: s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.LowerConnection", player), lambda s: s.has("DepthsLight", player))
    add_rule(world.get_location("F.UpperDepths.Teleporter", player), lambda s: s.can_reach_region("UpperDepths.Teleporter"))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda s: s.can_reach_region("UpperDepths.Teleporter"))
    add_rule(world.get_location("UpperDepths.TeleporterEX", player), lambda s: s.can_reach_region("UpperDepths.Teleporter"))
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_Teleporters", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperDepths.Teleporter", "UpperDepths.BelowHive", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.Central", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player) and cost_all(s, player, options, "UpperDepths.Teleporter", "UpperDepths.Central", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.Central", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player) and cost_all(s, player, options, "UpperDepths.Teleporter", "UpperDepths.Central", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.Central", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperDepths.Teleporter", "UpperDepths.Central", [], [], [[1, 'Wall']], []))
    add_rule(world.get_location("C.UpperDepths.Central", player), lambda s: s.can_reach_region("UpperDepths.Central"))
    add_rule(world.get_location("UpperDepths.CentralKeystoneDoor", player), lambda s: s.can_reach_region("UpperDepths.Central") and can_keystones(s, player))
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.SecondKSRoom", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.SecondKSRoom", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.SecondKSRoom", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: can_keystones(s, player))
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.BelowHive", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player))
    add_rule(world.get_location("C.UpperDepths.SecondKSRoom", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom"))
    add_rule(world.get_location("E.UpperDepths.SecondKSRoom", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("BreakCrystal", player))
    add_rule(world.get_location("UpperDepths.RightHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("DepthsLight", player))
    add_rule(world.get_location("UpperDepths.RightHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom"))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", "", [], [], [[1, 'Wall']], []))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("DoubleJump", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has_all(("DoubleJump", "Bash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("Launch", player) and s.has("DepthsLight", player))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("Launch", player))
    add_rule(world.get_location("UpperDepths.KeystoneHC", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has_all(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", "", [], [], [[1, 'Wall']], []))
    add_rule(world.get_location("UpperDepths.KeystoneHC", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("DoubleJump", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("UpperDepths.KeystoneHC", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("Launch", player) and s.has("DepthsLight", player))
    add_rule(world.get_location("UpperDepths.KeystoneHC", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("Launch", player))
    add_rule(world.get_location("UpperDepths.BossPathEX", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has_all(("DoubleJump", "Dash"), player) and s.has("DepthsLight", player))
    add_rule(world.get_location("UpperDepths.BossPathEX", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has_all(("DoubleJump", "Bash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperDepths.BossPathEX", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("Launch", player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.Central", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", "UpperDepths.Central", [], [], [[12, 'Combat']], []))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.Central", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.Central", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.Central", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: s.has_all(("DoubleJump", "Grapple"), player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player))
    add_rule(world.get_location("C.UpperDepths.MoraPath", player), lambda s: s.can_reach_region("UpperDepths.MoraPath"))
    add_rule(world.get_location("E.UpperDepths.MoraPath", player), lambda s: s.can_reach_region("UpperDepths.MoraPath") and s.has("BreakCrystal", player))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.MoraPath") and s.has_all(("Grapple", "DoubleJump", "Dash"), player) and s.has("DepthsLight", player))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.MoraPath") and s.has_all(("DoubleJump", "Dash", "Bash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "", [], [['Grenade', 1]], [[12, 'Combat', 12, 'Combat']], []))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.MoraPath") and s.has("Launch", player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Bash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.OutsideMoraFight", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.SecondKSRoom", player), lambda s: s.has("DepthsLight", player))
    add_rule(world.get_location("C.UpperDepths.OutsideMoraFight", player), lambda s: s.can_reach_region("UpperDepths.OutsideMoraFight"))
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_MoraFirstPhase", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.Teleporter", player), lambda s: s.has_any(("DoubleJump", "Launch"), player) and cost_all(s, player, options, "UpperDepths.OutsideMoraFight", "UpperDepths.Teleporter", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.Teleporter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperDepths.OutsideMoraFight", "UpperDepths.Teleporter", [], [['Grenade', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.MoraPath", player), lambda s: s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("F.MoraFirstPhase", player), lambda s: s.can_reach_region("MoraFirstPhase"))
    add_rule(world.get_entrance("MoraFirstPhase_to_MoraEscape", player), lambda s: s.has("SkipMora1", player))
    add_rule(world.get_entrance("MoraFirstPhase_to_MoraEscape", player), lambda s: s.has_all(("Regenerate", "Bash", "Grapple"), player) and s.has_any(("DoubleJump", "Dash", "Launch"), player) and cost_all(s, player, options, "MoraFirstPhase", "MoraEscape", [50], [], [[165, 'Boss']], []))
    add_rule(world.get_location("C.MoraEscape", player), lambda s: s.can_reach_region("MoraEscape"))
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("C.MoraSecondPhase", player), lambda s: s.can_reach_region("MoraSecondPhase"))
    add_rule(world.get_location("E.MoraSecondPhase", player), lambda s: s.can_reach_region("MoraSecondPhase") and s.has("BreakCrystal", player))
    add_rule(world.get_location("UpperDepths.ForestsEyes", player), lambda s: s.can_reach_region("MoraSecondPhase") and s.has("SkipMora2", player))
    add_rule(world.get_location("UpperDepths.ForestsEyes", player), lambda s: s.can_reach_region("MoraSecondPhase") and s.has_all(("Regenerate", "Bash"), player) and s.has_any(("DoubleJump", "Dash", "Launch"), player) and cost_all(s, player, options, "MoraSecondPhase", "", [60], [], [[165, 'Boss']], []))
    add_rule(world.get_location("C.UpperDepths.LowerConnection", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection"))
    add_rule(world.get_location("UpperDepths.CentralKeystoneDoor", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and can_keystones(s, player))
    add_rule(world.get_location("LowerDepths.BelowDoorOre", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and s.has("DepthsLight", player))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and s.has("Glide", player) and s.has("DepthsLight", player))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and s.has("Glide", player))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and s.has("Launch", player) and s.has("DepthsLight", player))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and s.has("Launch", player))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and s.has_all(("DoubleJump", "Dash"), player) and s.has("DepthsLight", player))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("DoubleJump", "Grapple"), player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("DoubleJump", "Grapple"), player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "UpperDepths.BelowHive", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.Central", player), lambda s: can_keystones(s, player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "Dash"), player) and s.has_any(("DoubleJump", "Glide"), player) and has_health("40", s, player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.West", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Dash"), player) and s.has("DepthsLight", player) and has_health("40", s, player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "Glide"), player) and s.has("DepthsLight", player) and has_health("40", s, player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("DepthsLight", player) and has_health("40", s, player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Dash", "Bash"), player) and has_health("40", s, player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.Central", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has_any(("DoubleJump", "Glide"), player) and has_health("40", s, player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.Central", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Dash"), player) and s.has("DepthsLight", player) and s.has_any(("Bash", "Glide"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Bash", "Glide"), player) and s.has("DepthsLight", player) and has_health("40", s, player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and has_health("40", s, player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.Central", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Bash", "Glide"), player) and has_health("40", s, player))
    add_rule(world.get_location("C.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West"))
    add_rule(world.get_location("LowerDepths.HandToHandSilk", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("GladesTown.HandToHandLantern", player))
    add_rule(world.get_location("LowerDepths.SwimEC", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has_all(("Water", "Bash"), player) and s.has("UpperDepths.ForestsEyes", player))
    add_rule(world.get_location("LowerDepths.SwimEC", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has_all(("Water", "Bash"), player) and cost_all(s, player, options, "LowerDepths.West", "", [], [], [], [[1, 'Flash', 0]]))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.West", "", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "DoubleJump", "Bash"), player) and s.has("UpperDepths.ForestsEyes", player))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "DoubleJump", "Bash"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [], [[1, 'Flash', 0]]))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "Bash", "Dash"), player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "Bash", "Dash"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [['Grenade', 1]], [], [[1, 'Flash', 0]]))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "Bash", "Glide"), player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "Bash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [['Grenade', 1]], [], [[1, 'Flash', 0]]))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "Launch"), player) and s.has("UpperDepths.ForestsEyes", player))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "Launch"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [], [[1, 'Flash', 0]]))
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("DepthsLight", player) and has_health("40", s, player))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("DoubleJump", "Bash", "Dash"), player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("DoubleJump", "Bash", "Dash"), player))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Glide"), player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("F.DepthsShrine", player), lambda s: s.can_reach_region("DepthsShrine"))
    add_rule(world.get_location("LowerDepths.CombatShrineCompleted", player), lambda s: s.can_reach_region("DepthsShrine") and s.has("Regenerate", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "DepthsShrine", "", [65], [], [[32, 'Ranged', 32, 'Ranged', 32, 'Ranged'], [32, 'Combat', 32, 'Combat'], [40, 'Ranged', 40, 'Ranged'], [32, 'Ranged', 32, 'Ranged'], [40, 'Ranged', 40, 'Ranged'], [32, 'Ranged'], [32, 'Combat']], []))
    add_rule(world.get_location("LowerDepths.CombatShrineCompleted", player), lambda s: s.can_reach_region("DepthsShrine") and s.has("Regenerate", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "DepthsShrine", "", [60], [], [[32, 'Ranged', 32, 'Ranged', 32, 'Ranged'], [32, 'Combat', 32, 'Combat'], [40, 'Ranged', 40, 'Ranged'], [32, 'Ranged', 32, 'Ranged'], [40, 'Ranged', 40, 'Ranged'], [32, 'Ranged'], [32, 'Combat']], []))
    add_rule(world.get_location("LowerDepths.CombatShrineCompleted", player), lambda s: s.can_reach_region("DepthsShrine") and s.has_all(("Regenerate", "Launch"), player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "DepthsShrine", "", [50], [], [[32, 'Ranged', 32, 'Ranged', 32, 'Ranged'], [32, 'Combat', 32, 'Combat'], [40, 'Ranged', 40, 'Ranged'], [32, 'Ranged', 32, 'Ranged'], [40, 'Ranged', 40, 'Ranged'], [32, 'Ranged'], [32, 'Combat']], []))
    add_rule(world.get_location("LowerDepths.CombatShrine", player), lambda s: s.can_reach_region("DepthsShrine") and s.has("LowerDepths.CombatShrineCompleted", player))
    add_rule(world.get_location("C.LowerDepths.Central", player), lambda s: s.can_reach_region("LowerDepths.Central"))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has_all(("DoubleJump", "Grapple"), player) and s.has_any(("Dash", "DepthsLight"), player))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("Launch", player))
    add_rule(world.get_location("LowerDepths.SpiritTrial", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has_all(("DoubleJump", "Dash", "Bash", "Grapple"), player) and s.has("LowerDepths.TrialActivation", player))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Bash", "Glide"), player))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Launch", "Bash"), player) and s.has("DepthsLight", player) and has_health("40", s, player))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump"), player) and s.has("DepthsLight", player) and has_health("40", s, player))
    add_rule(world.get_location("C.LowerDepths.East", player), lambda s: s.can_reach_region("LowerDepths.East"))
    add_rule(world.get_location("E.LowerDepths.East", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("BreakCrystal", player))
    add_rule(world.get_location("E.LowerDepths.East", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Bash", player) and s.has("BreakCrystal", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("E.LowerDepths.East", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Launch", player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("DoubleJump", "Grapple"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Grapple", "Glide"), player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Grapple", player) and s.has("SpiritLight", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("Launch", "DoubleJump", "Dash"), player) and s.has("SpiritLight", player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("Launch", "Glide"), player) and s.has("SpiritLight", player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Glide", player) and s.has("SpiritLight", player) and s.has("DepthsLight", player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Launch", player) and s.has("SpiritLight", player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Bash", "Grapple"), player) and s.has("DepthsLight", player) and has_health("40", s, player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("DepthsLight", player) and has_health("40", s, player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Grapple"), player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("C.LowerDepths.BeforeTree", player), lambda s: s.can_reach_region("LowerDepths.BeforeTree"))
    add_rule(world.get_location("LowerDepths.TrialActivation", player), lambda s: s.can_reach_region("LowerDepths.BeforeTree") and s.has_all(("DoubleJump", "Bash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Bash", "Grapple"), player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Dash", player) and s.has_any(("Bash", "Grapple"), player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Bash", "Grapple"), player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has("DepthsLight", player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("DoubleJump", "Bash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Bash", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Bash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Grapple"), player) and s.has_any(("DoubleJump", "Dash", "Bash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_location("C.LowerDepths.TreeArea", player), lambda s: s.can_reach_region("LowerDepths.TreeArea"))
    add_rule(world.get_location("E.LowerDepths.TreeArea", player), lambda s: s.can_reach_region("LowerDepths.TreeArea") and s.has("BreakCrystal", player))
    add_rule(world.get_location("LowerDepths.FlashTree", player), lambda s: s.can_reach_region("LowerDepths.TreeArea"))
    add_rule(world.get_location("LowerDepths.RightEX", player), lambda s: s.can_reach_region("LowerDepths.TreeArea") and s.has_any(("DepthsLight", "Launch"), player))
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_LowerDepths.BeforeTree", player), lambda s: s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_location("C.PoolsApproach.MillPathCheckpoint", player), lambda s: s.can_reach_region("PoolsApproach.MillPathCheckpoint"))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player) and has_health("20", s, player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple", "Bash", "Dash", "Glide"), player) and has_health("20", s, player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Launch"), player) and s.has_any(("DoubleJump", "Dash", "Grapple", "Glide"), player) and has_health("20", s, player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Grapple", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "PoolsApproach.MillPath", [20], [], [[32, 'Combat'], [8, 'Combat', 8, 'Combat']], []))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "PoolsApproach.MillPath", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Grapple", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "PoolsApproach.MillPath", [20], [], [], []))
    add_rule(world.get_location("C.PoolsApproach.MillPath", player), lambda s: s.can_reach_region("PoolsApproach.MillPath"))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("Water", player))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has_all(("DoubleJump", "Dash"), player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "", [], [], [[32, 'Combat'], [1, 'Ranged']], []))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has_all(("DoubleJump", "Grapple", "Glide"), player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "", [], [], [[32, 'Combat'], [1, 'Ranged']], []))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("Launch", player))
    add_rule(world.get_location("PoolsApproach.MillPathEC", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("Water", player))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [20], [['Grenade', 3]], [[32, 'Combat'], [8, 'Combat', 8, 'Combat']], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [20], [['Grenade', 2]], [[32, 'Combat'], [8, 'Combat', 8, 'Combat']], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("DoubleJump", "Grapple"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [20], [], [[32, 'Combat'], [8, 'Combat', 8, 'Combat']], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Bash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("DoubleJump", "Bash"), player))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.OnTopOfWheel", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("PoolsApproach.WheelFreed", player) and s.has_any(("DoubleJump", "Bash"), player))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.OnTopOfWheel", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("Water", "DoubleJump", "Dash", "WaterDash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [20], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("Water", "DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: True)
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Grapple", "Launch"), player))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Launch", "Glide"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Grapple", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("C.PoolsApproach.OnTopOfWheel", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Water", player) and s.has_any(("Launch", "Grapple", "PoolsApproach.WheelFreed"), player))
    add_rule(world.get_location("C.PoolsApproach.OnTopOfWheel", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "DoubleJump", "Dash"), player))
    add_rule(world.get_location("PoolsApproach.WheelFreed", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Bash"), player))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Bash"), player))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Launch", player))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Bash", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("DoubleJump", "Dash"), player) and s.has("PoolsApproach.WheelFreed", player))
    add_rule(world.get_location("PoolsApproach.MarshPathCurrentEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_location("PoolsApproach.MillPathEC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Bash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [10], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "DoubleJump", "Dash", "WaterDash", "Grapple"), player))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "DoubleJump", "Grapple", "Launch"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "DoubleJump", "Grapple"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Grapple", "Launch"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has_any(("Glide", "Water"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Launch"), player) and s.has_any(("DoubleJump", "Dash"), player) and has_health("40", s, player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Dash", "Launch"), player) and has_health("40", s, player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Glide"), player) and s.has("PoolsApproach.WheelFreed", player) and has_health("40", s, player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water", "Bash", "Grapple", "DoubleJump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MillPath", [10], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water", "Bash", "WaterDash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water", "Bash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MillPath", [10], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_location("C.EastPools.LeverRoom", player), lambda s: s.can_reach_region("EastPools.LeverRoom"))
    add_rule(world.get_location("H.EastPools.LeverRoom", player), lambda s: s.can_reach_region("EastPools.LeverRoom"))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("Bash", "Dash", "Glide"), player))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("Launch", player))
    add_rule(world.get_location("EastPools.BelowEntryLeverBubble", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("Hammer", player))
    add_rule(world.get_location("EastPools.BelowEntryLeverBubble", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("PoolsApproach.WheelFreed", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("Water", "Bash"), player))
    add_rule(world.get_location("EastPools.KwolokAmuletQI", player), lambda s: s.can_reach_region("EastPools.LeverRoom"))
    add_rule(world.get_location("EastPools.TwoCrushersEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_location("EastPools.RightOre", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("DoubleJump", "Grapple", "Flap"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [], [[1, 'Ranged']], []))
    add_rule(world.get_location("EastPools.RightOre", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("Launch", "Grapple"), player))
    add_rule(world.get_location("EastPools.BubbleCurrentEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_location("EastPools.BelowLeverEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("EastPools.BelowLeverEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("EastPools.BelowEntryLeverBubble", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("EastPools.BelowLeverEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("Launch", player))
    add_rule(world.get_location("PoolsApproach.MarshPathCurrentEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BehindEntryDoor", player), lambda s: s.has("EastPools.EntryLever", player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Water"), player) and s.has_any(("PoolsApproach.WheelFreed", "DoubleJump", "Launch"), player) and has_health("25", s, player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Water", "Bash"), player) and has_health("25", s, player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Bash", "Glide"), player) and has_health("25", s, player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Bash", "Glide", "DoubleJump"), player) and has_health("25", s, player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Glide", "Launch"), player) and has_health("25", s, player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Dash", "Launch"), player) and has_health("25", s, player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Bash", "Launch"), player) and s.has_any(("DoubleJump", "Dash"), player) and has_health("25", s, player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_location("C.EastPools.BehindEntryDoor", player), lambda s: s.can_reach_region("EastPools.BehindEntryDoor"))
    add_rule(world.get_location("EastPools.BelowEntryLeverBubble", player), lambda s: s.can_reach_region("EastPools.BehindEntryDoor") and s.has("EastPools.EntryLever", player) and s.has("Hammer", player))
    add_rule(world.get_location("EastPools.BelowEntryLeverBubble", player), lambda s: s.can_reach_region("EastPools.BehindEntryDoor") and s.has("EastPools.EntryLever", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.BehindEntryDoor") and s.has("Launch", player))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.BehindEntryDoor") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.BehindEntryDoor") and s.has("Bash", player) and s.has_any(("DoubleJump", "Grapple"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.BehindEntryDoor") and s.has_all(("Grapple", "Flap"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TokkBubble", player), lambda s: s.has_any(("Launch", "Water", "DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TokkBubble", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "EastPools.TokkBubble", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TokkBubble", player), lambda s: s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has("Bash", player))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TokkBubble", player), lambda s: s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "EastPools.TokkBubble", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "EastPools.TPArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "EastPools.TPArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "EastPools.TPArea", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.LeverRoom", player), lambda s: s.has("EastPools.EntryLever", player) and s.has_any(("Bash", "Launch", "EastPools.BelowEntryLeverBubble"), player))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.LeverRoom", player), lambda s: s.has("EastPools.EntryLever", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "EastPools.LeverRoom", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_location("C.EastPools.TokkBubble", player), lambda s: s.can_reach_region("EastPools.TokkBubble"))
    add_rule(world.get_location("EastPools.TokkBubbleFree", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has_all(("Water", "Bash"), player))
    add_rule(world.get_location("EastPools.TokkBubbleFree", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has_all(("Water", "WaterDash"), player) and s.has("EastPools.TokkBubblePurpleWall", player))
    add_rule(world.get_location("EastPools.TokkBubbleFree", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has_all(("Water", "WaterDash"), player) and cost_all(s, player, options, "EastPools.TokkBubble", "", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_location("EastPools.TokkBubblePurpleWall", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has_all(("Water", "Bash"), player))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has_all(("Grapple", "Flap"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has_all(("Flap", "Grapple"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has("Combat.Dangerous", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "EastPools.TokkBubble", "EastPools.TPArea", [], [], [[32, 'Combat']], []))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has_all(("Flap", "Bash", "Grapple"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Bash"), player))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "EastPools.TokkBubble", "EastPools.BehindEntryDoor", [], [], [], [[0, [[1, 'Ranged'], [32, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Bash", player) and s.has("DoubleJump", player))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.TokkBubble", "EastPools.BehindEntryDoor", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("C.EastPools.TPArea", player), lambda s: s.can_reach_region("EastPools.TPArea"))
    add_rule(world.get_location("F.EastPools.TPArea", player), lambda s: s.can_reach_region("EastPools.TPArea") and s.has("EastPools.LowerWaterDrained", player))
    add_rule(world.get_location("EastPools.LowerWaterDrained", player), lambda s: s.can_reach_region("EastPools.TPArea") and s.has_all(("Water", "WaterBreath"), player))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.TPArea") and s.has("Bash", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "EastPools.TPArea", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.LowerWaterDrained", player))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "EastPools.TPArea", "EastPools.FishingPool", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.WaterdashArena", player), lambda s: s.has("Water", player) and s.has("EastPools.ArenaWall", player))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.NextToLupoOre", player), lambda s: s.has("Water", player))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.TPArea", "EastPools.BehindEntryDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.TokkBubble", player), lambda s: s.has_any(("Launch", "DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("F.EastPools.Teleporter", player), lambda s: s.can_reach_region("EastPools.Teleporter"))
    add_rule(world.get_location("EastPools.LowerWaterDrained", player), lambda s: s.can_reach_region("EastPools.Teleporter"))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda s: s.can_reach_region("EastPools.Teleporter"))
    add_rule(world.get_location("EastPools.ArenaWall", player), lambda s: s.can_reach_region("EastPools.Teleporter") and s.has_all(("Water", "Bash"), player) and s.has("EastPools.LowerWaterDrained", player))
    add_rule(world.get_location("EastPools.UltraBashShard", player), lambda s: s.can_reach_region("EastPools.Teleporter") and s.has_all(("Water", "WaterBreath", "Bash"), player) and s.has("EastPools.LowerWaterDrained", player))
    add_rule(world.get_entrance("EastPools.Teleporter_to_Teleporters", player), lambda s: s.has("EastPools.LowerWaterDrained", player))
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.TPArea", player), lambda s: s.has_any(("EastPools.LowerWaterDrained", "Water"), player))
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("EastPools.HandToHandSpyglass", player), lambda s: s.can_reach_region("EastPools.FishingPool") and s.has("LowerDepths.HandToHandSilk", player))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water", "WaterDash", "DoubleJump", "Dash"), player) and s.has("Bash", player))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water", "WaterDash", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "EastPools.FishingPool", "EastPools.AboveFishingPool", [], [], [], [[0, [[1, 'Ranged']], []]]))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water", "WaterDash", "DoubleJump", "Glide"), player) and s.has("Bash", player))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water", "WaterDash", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "EastPools.FishingPool", "EastPools.AboveFishingPool", [], [], [], [[0, [[1, 'Ranged']], []]]))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "EastPools.FishingPool", "EastPools.AboveFishingPool", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.TPArea", player), lambda s: True)
    add_rule(world.get_location("EastPools.AboveTpEX", player), lambda s: s.can_reach_region("EastPools.AboveFishingPool") and s.has("Water", player))
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_EastPools.FishingPool", player), lambda s: True)
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("UpperPools.UpperWaterDrained", player) and has_health("40", s, player))
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump"), player) and s.has("UpperPools.UpperWaterDrained", player) and has_health("40", s, player) and cost_all(s, player, options, "EastPools.AboveFishingPool", "UpperPools.DrainPuzzleExit", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("C.EastPools.NextToLupoOre", player), lambda s: s.can_reach_region("EastPools.NextToLupoOre"))
    add_rule(world.get_location("EastPools.LupoOre", player), lambda s: s.can_reach_region("EastPools.NextToLupoOre"))
    add_rule(world.get_location("EastPools.UltraBashShard", player), lambda s: s.can_reach_region("EastPools.NextToLupoOre") and s.has_all(("Water", "WaterBreath", "Bash"), player) and s.has("EastPools.LowerWaterDrained", player))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.Teleporter", player), lambda s: s.has("Water", player) and s.has("EastPools.LowerWaterDrained", player))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.TPArea", player), lambda s: s.has("Water", player))
    add_rule(world.get_location("C.EastPools.LupoArea", player), lambda s: s.can_reach_region("EastPools.LupoArea"))
    add_rule(world.get_location("EastPools.LupoEX", player), lambda s: s.can_reach_region("EastPools.LupoArea") and s.has_any(("Launch", "DoubleJump"), player))
    add_rule(world.get_location("EastPools.LupoEX", player), lambda s: s.can_reach_region("EastPools.LupoArea") and s.has_all(("Water", "WaterDash"), player) and s.has("EastPools.LupoPurpleFloor", player))
    add_rule(world.get_location("EastPools.LupoMap", player), lambda s: s.can_reach_region("EastPools.LupoArea") and s.has("SpiritLight", player))
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.NextToLupoOre", player), lambda s: True)
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.MissilePuzzle", player), lambda s: s.has("Water", player) and s.has("EastPools.LupoPurpleFloor", player))
    add_rule(world.get_location("C.EastPools.WaterdashArena", player), lambda s: s.can_reach_region("EastPools.WaterdashArena"))
    add_rule(world.get_location("EastPools.FightArenas", player), lambda s: s.can_reach_region("EastPools.WaterdashArena") and s.has_all(("Regenerate", "Water", "WaterBreath", "Bash"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "", [20], [], [[32, 'Combat', 32, 'Combat', 32, 'Combat', 32, 'Combat'], [40, 'Ranged'], [20, 'Combat', 20, 'Combat']], []))
    add_rule(world.get_location("EastPools.FightRoomHC", player), lambda s: s.can_reach_region("EastPools.WaterdashArena") and s.has_all(("WaterDash", "DoubleJump"), player) and s.has("EastPools.FightArenas", player) and s.has_any(("Dash", "Grapple"), player))
    add_rule(world.get_location("EastPools.FightRoomHC", player), lambda s: s.can_reach_region("EastPools.WaterdashArena") and s.has_all(("WaterDash", "Bash"), player) and s.has("EastPools.FightArenas", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("EastPools.FightRoomHC", player), lambda s: s.can_reach_region("EastPools.WaterdashArena") and s.has_all(("WaterDash", "Launch"), player) and s.has("EastPools.FightArenas", player))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.TPArea", player), lambda s: s.has("Water", player) and s.has("EastPools.ArenaWall", player))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and s.has_any(("DoubleJump", "Dash", "Launch", "Glide"), player))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.FightArenas", player) and s.has_any(("Water", "DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("C.EastPools.MissilePuzzle", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle"))
    add_rule(world.get_location("EastPools.CentralRoomPurpleWall", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("Water", "WaterBreath", "Bash"), player))
    add_rule(world.get_location("EastPools.LupoPurpleFloor", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("Water", "WaterBreath", "Bash"), player))
    add_rule(world.get_location("EastPools.EnergyHarvestShard", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("Water", "WaterDash", "DoubleJump"), player))
    add_rule(world.get_location("EastPools.EnergyHarvestShard", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("EastPools.EnergyHarvestShard", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has("Launch", player))
    add_rule(world.get_location("EastPools.BehindCrusherEX", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("Water", "WaterBreath"), player))
    add_rule(world.get_location("EastPools.SpiritTrial", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("Water", "DoubleJump", "Dash", "Glide", "Grapple", "WaterDash"), player) and s.has("UpperPools.TrialActivation", player) and s.has("EastPools.CentralRoomPurpleWall", player))
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.CentralRoom", player), lambda s: s.has("Water", player) and s.has("EastPools.CentralRoomPurpleWall", player))
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.FightArenas", player) and s.has_any(("Water", "DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.LupoArea", player), lambda s: s.has("Water", player) and s.has("EastPools.LupoPurpleFloor", player))
    add_rule(world.get_location("C.EastPools.CentralRoom", player), lambda s: s.can_reach_region("EastPools.CentralRoom"))
    add_rule(world.get_location("EastPools.CentralRoomBubbleFree", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("Water", player) and s.has_any(("Bash", "WaterDash"), player))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("EastPools.CentralRoomBubbleFree", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "EastPools.CentralRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("Launch", player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and s.has_any(("Dash", "Glide"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Bash", "Launch"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and has_health("40", s, player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Regenerate", "Water", "WaterBreath", "WaterDash"), player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.MissilePuzzle", player), lambda s: s.has("Water", player) and s.has("EastPools.CentralRoomPurpleWall", player))
    add_rule(world.get_location("C.UpperPools.KeystoneRoomEntrance", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance"))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has_all(("Water", "DoubleJump", "Bash"), player))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has("Water", player) and s.has_any(("WaterDash", "Launch"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.CentralRoom", player), lambda s: s.has("Regenerate", player) and s.has_any(("Bash", "Launch"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.CentralRoom", player), lambda s: s.has("Regenerate", player) and has_health("40", s, player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "EastPools.CentralRoom", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.CentralRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Dash"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has_any(("Water", "Launch"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("C.UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner"))
    add_rule(world.get_location("UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and s.has("Water", player) and s.has_any(("WaterDash", "Bash"), player))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and s.has_all(("Flap", "DoubleJump"), player) and can_keystones(s, player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda s: s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "UpperPools.KeystoneRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Flap", "DoubleJump", "Dash", "Grapple"), player) and can_keystones(s, player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Water", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Dash", "Glide"), player))
    add_rule(world.get_location("C.UpperPools.KeystoneRoom", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom"))
    add_rule(world.get_location("E.UpperPools.KeystoneRoom", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("BreakCrystal", player))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("Launch", player))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("Bash", player) and s.has_any(("Water", "DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("Water", "WaterDash", "DoubleJump"), player))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("Launch", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: True)
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: True)
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Water", "Grapple", "Bash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Bash", "Water", "WaterDash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Water", "DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.UpperPools.BeforeKeystoneDoor", player), lambda s: s.can_reach_region("UpperPools.BeforeKeystoneDoor"))
    add_rule(world.get_location("H.UpperPools.BeforeKeystoneDoor", player), lambda s: s.can_reach_region("UpperPools.BeforeKeystoneDoor") and s.has_any(("DoubleJump", "Dash", "Glide", "Grapple", "Launch"), player))
    add_rule(world.get_location("UpperPools.KeystoneDoor", player), lambda s: s.can_reach_region("UpperPools.BeforeKeystoneDoor") and can_keystones(s, player))
    add_rule(world.get_location("UpperPools.TrialActivation", player), lambda s: s.can_reach_region("UpperPools.BeforeKeystoneDoor") and s.has("Grapple", player))
    add_rule(world.get_location("UpperPools.UpperMidKS", player), lambda s: s.can_reach_region("UpperPools.BeforeKeystoneDoor") and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.TreeRoomEntrance", player), lambda s: can_keystones(s, player))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.KeystoneRoom", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Grapple", "Launch"), player))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "UpperPools.RightBubbleSpamRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.UpperPools.TreeRoomEntrance", player), lambda s: s.can_reach_region("UpperPools.TreeRoomEntrance"))
    add_rule(world.get_location("UpperPools.KeystoneDoor", player), lambda s: s.can_reach_region("UpperPools.TreeRoomEntrance") and can_keystones(s, player))
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.BeforeKeystoneDoor", player), lambda s: can_keystones(s, player))
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.TreeRoom", player), lambda s: s.has_any(("Water", "DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Flap", "DoubleJump"), player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player))
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has("Launch", player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player))
    add_rule(world.get_location("UpperPools.TreeRoomLeftBubbleFree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_location("UpperPools.TreeRoomRightBubbleFree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_location("UpperPools.ButtonDoorAboveTree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_location("UpperPools.SwimDashTree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom"))
    add_rule(world.get_location("UpperPools.SwimDashCurrentEX", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.TreeRoom", "UpperPools.TreeRoomEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Water", "WaterDash", "DoubleJump"), player) and s.has("UpperPools.ButtonDoorAboveTree", player) and s.has("UpperPools.TreeRoomRightBubbleFree", player))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and s.has("UpperPools.ButtonDoorAboveTree", player) and s.has("UpperPools.TreeRoomRightBubbleFree", player))
    add_rule(world.get_location("UpperPools.RoofEX", player), lambda s: s.can_reach_region("UpperPools.AboveTree") and s.has("Launch", player))
    add_rule(world.get_location("UpperPools.RoofEX", player), lambda s: s.can_reach_region("UpperPools.AboveTree") and s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_location("UpperPools.RoofEX", player), lambda s: s.can_reach_region("UpperPools.AboveTree") and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.AboveTree", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.TreeRoom", player), lambda s: True)
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("C.UpperPools.DrainPuzzleEntrance", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance"))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Water", "WaterDash", "Grapple"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Water", "WaterDash", "Launch", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Water", "Launch", "Grapple"), player))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("DoubleJump", "Dash", "Grapple"), player))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Bash", "Grapple", "Glide"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has("Launch", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.TreeRoom", player), lambda s: s.has("UpperPools.ButtonDoorAboveTree", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("DoubleJump", "Dash", "Grapple"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Grapple", "UpperPools.DrainRoomPurpleWall"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("DoubleJump", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("UpperPools.DrainRoomPurpleWall", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Water", "Bash"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleExit", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("H.UpperPools.DrainPuzzleRight", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleRight"))
    add_rule(world.get_location("UpperPools.DrainRoomPurpleWall", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleRight") and s.has_all(("Bash", "Water"), player) and s.has_any(("WaterDash", "Launch"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has("UpperPools.UpperWaterDrained", player) and s.has_any(("Water", "Glide", "DoubleJump", "Launch", "Dash"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and s.has_any(("Grapple", "UpperPools.DrainRoomPurpleWall"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Launch", "Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Dash", "Glide", "DoubleJump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("UpperPools.DrainRoomPurpleWall", player))
    add_rule(world.get_location("C.UpperPools.DrainPuzzleExit", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit"))
    add_rule(world.get_location("UpperPools.DrainRoomPurpleWall", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has_all(("Bash", "Water", "WaterDash"), player))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has_all(("Water", "Bash"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has_any(("Glide", "Launch"), player))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has_all(("Water", "Bash", "DoubleJump", "Dash"), player) and s.has("UpperPools.UpperWaterDrained", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_EastPools.AboveFishingPool", player), lambda s: s.has("Regenerate", player) and has_health("40", s, player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Water", "Launch"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Water", "WaterDash", "DoubleJump", "Dash"), player))
    add_rule(world.get_location("C.UpperPools.RightBubbleSpamRoom", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom"))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("DoubleJump", player) and s.has("Combat.Aerial", player) and s.has("Combat.Aerial", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [], [], [[24, 'Combat'], [20, 'Combat']], []))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("UpperPools.FishPoolEX", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("Water", player) and s.has_any(("Bash", "WaterDash"), player))
    add_rule(world.get_location("UpperPools.FishPoolEX", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("Water", player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [], [], [], [[2, 10]]))
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has_all(("DoubleJump", "Bash"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("Launch", player))
    add_rule(world.get_location("UpperPools.RightBubblesEX", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_location("UpperPools.BubblesEC", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("UpperPools.BubbleSpamLever", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: True)
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.LeftBubbleSpamRoom", player), lambda s: s.has("Water", player))
    add_rule(world.get_location("C.UpperPools.LeftBubbleSpamRoom", player), lambda s: s.can_reach_region("UpperPools.LeftBubbleSpamRoom"))
    add_rule(world.get_location("UpperPools.LeftBubblesEX", player), lambda s: s.can_reach_region("UpperPools.LeftBubbleSpamRoom") and s.has("Water", player))
    add_rule(world.get_location("UpperPools.RightBubblesEX", player), lambda s: s.can_reach_region("UpperPools.LeftBubbleSpamRoom") and s.has_all(("Water", "Bash", "WaterBreath"), player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water", "Bash", "WaterBreath"), player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water", "Bash", "WaterDash"), player))
    add_rule(world.get_location("F.WestPools.Teleporter", player), lambda s: s.can_reach_region("WestPools.Teleporter"))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda s: s.can_reach_region("WestPools.Teleporter"))
    add_rule(world.get_location("WestPools.TpEX", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has_all(("Water", "WaterDash", "DoubleJump", "Dash"), player))
    add_rule(world.get_location("WestPools.TpEX", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has("Launch", player))
    add_rule(world.get_location("WestPools.BurrowEX", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has_all(("Water", "Burrow"), player))
    add_rule(world.get_entrance("WestPools.Teleporter_to_Teleporters", player), lambda s: True)
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has_all(("Water", "WaterBreath", "WaterDash"), player) and s.has_any(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has_all(("Water", "WaterBreath", "Bash"), player) and s.has_any(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_entrance("WestPools.Teleporter_to_EastPools.CentralRoom", player), lambda s: s.has_all(("Regenerate", "Water", "WaterBreath", "WaterDash"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_EastPools.CentralRoom", player), lambda s: s.has("Regenerate", player) and s.has("WestPools.ForestsStrength", player) and has_health("40", s, player))
    add_rule(world.get_location("C.WestPools.LeftKwolokPlatform", player), lambda s: s.can_reach_region("WestPools.LeftKwolokPlatform") and s.has("WestPools.ForestsStrength", player))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_KwolokEscape", player), lambda s: True)
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.Teleporter", player), lambda s: s.has_all(("Water", "WaterBreath"), player) and s.has_any(("Bash", "WaterDash"), player))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and cost_all(s, player, options, "WestPools.LeftKwolokPlatform", "WestPools.RightKwolokPlatform", [], [], [], [[0, [[32, 'Combat'], [32, 'Combat']], ['Combat.Dangerous', 'Combat.Dangerous']]]))
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player))
    add_rule(world.get_location("C.WestPools.RightKwolokPlatform", player), lambda s: s.can_reach_region("WestPools.RightKwolokPlatform") and s.has("WestPools.ForestsStrength", player))
    add_rule(world.get_location("WestPools.EscapeRevisitEX", player), lambda s: s.can_reach_region("WestPools.RightKwolokPlatform") and s.has("Water", player))
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_KwolokEscape", player), lambda s: True)
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and cost_all(s, player, options, "WestPools.RightKwolokPlatform", "WestPools.LeftKwolokPlatform", [], [], [], [[0, [[32, 'Combat'], [32, 'Combat']], ['Combat.Dangerous', 'Combat.Dangerous']]]))
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Water", "WaterBreath", "WaterDash"), player) and has_health("40", s, player))
    add_rule(world.get_entrance("KwolokEscape_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("WestPools.ForestsStrength", player))
    add_rule(world.get_location("F.KwolokEscape", player), lambda s: s.can_reach_region("KwolokEscape"))
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Water", "WaterDash", "Bash", "DoubleJump"), player) and s.has_any(("Dash", "Launch"), player))
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Water", "WaterDash", "Dash", "Launch"), player))
    add_rule(world.get_location("C.KwolokFight", player), lambda s: s.can_reach_region("KwolokFight"))
    add_rule(world.get_location("E.KwolokFight", player), lambda s: s.can_reach_region("KwolokFight") and s.has("BreakCrystal", player))
    add_rule(world.get_location("WestPools.ForestsStrength", player), lambda s: s.can_reach_region("KwolokFight") and s.has("SkipKwolok", player))
    add_rule(world.get_location("WestPools.ForestsStrength", player), lambda s: s.can_reach_region("KwolokFight") and s.has_all(("Regenerate", "Water", "WaterDash", "Bash", "DoubleJump"), player) and s.has_any(("Launch", "Dash"), player) and cost_all(s, player, options, "KwolokFight", "", [85], [], [[250, 'Boss']], []))
    add_rule(world.get_location("F.LowerWastes.WestTP", player), lambda s: s.can_reach_region("LowerWastes.WestTP"))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda s: s.can_reach_region("LowerWastes.WestTP"))
    add_rule(world.get_location("LowerWastes.WestTPOre", player), lambda s: s.can_reach_region("LowerWastes.WestTP") and s.has("Burrow", player))
    add_rule(world.get_location("WoodsMain.FeedingGroundsEX", player), lambda s: s.can_reach_region("LowerWastes.WestTP") and s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_Teleporters", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("DoubleJump", "Grapple"), player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("DoubleJump", "Burrow"), player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WoodsMain.FeedingGrounds", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has("WindtornRuins.Seir", player) and has_health("40", s, player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "DoubleJump", "Glide", "Grapple"), player) and s.has("WindtornRuins.Seir", player) and has_health("60", s, player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "DoubleJump", "Bash", "Grapple"), player) and s.has("WindtornRuins.Seir", player) and has_health("60", s, player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Launch"), player) and s.has("WindtornRuins.Seir", player) and has_health("60", s, player))
    add_rule(world.get_location("C.LowerWastes.SunsetView", player), lambda s: s.can_reach_region("LowerWastes.SunsetView"))
    add_rule(world.get_location("LowerWastes.SunsetViewEX", player), lambda s: s.can_reach_region("LowerWastes.SunsetView"))
    add_rule(world.get_location("LowerWastes.PurpleWallEX", player), lambda s: s.can_reach_region("LowerWastes.SunsetView") and s.has_all(("Burrow", "Bash"), player))
    add_rule(world.get_location("LowerWastes.SpiritTrial", player), lambda s: s.can_reach_region("LowerWastes.SunsetView") and s.has_all(("Burrow", "DoubleJump", "Dash", "Grapple"), player) and s.has("LowerWastes.TrialActivation", player))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.WestTP", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerWastes.SunsetView", "LowerWastes.Shovel", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("E.LowerWastes.Shovel", player), lambda s: s.can_reach_region("LowerWastes.Shovel") and s.has("BreakCrystal", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("E.LowerWastes.Shovel", player), lambda s: s.can_reach_region("LowerWastes.Shovel") and s.has("Bash", player) and s.has("BreakCrystal", player) and cost_all(s, player, options, "LowerWastes.Shovel", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerWastes.EerieGemQI", player), lambda s: s.can_reach_region("LowerWastes.Shovel") and s.has("Burrow", player))
    add_rule(world.get_location("LowerWastes.SandBridgeOre", player), lambda s: s.can_reach_region("LowerWastes.Shovel"))
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.SunsetView", player), lambda s: s.has_any(("Bash", "Grapple", "Launch"), player))
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.SunsetView", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.MuncherTunnel", player), lambda s: True)
    add_rule(world.get_location("C.LowerWastes.MuncherTunnel", player), lambda s: s.can_reach_region("LowerWastes.MuncherTunnel"))
    add_rule(world.get_location("E.LowerWastes.MuncherTunnel", player), lambda s: s.can_reach_region("LowerWastes.MuncherTunnel") and s.has("BreakCrystal", player))
    add_rule(world.get_location("LowerWastes.MuncherTunnelEC", player), lambda s: s.can_reach_region("LowerWastes.MuncherTunnel") and s.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.Shovel", player), lambda s: s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.Shovel", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.MuncherTunnel", "LowerWastes.Shovel", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: s.has_any(("DoubleJump", "Burrow", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.MuncherTunnel", "LowerWastes.SandPot", [], [], [[32, 'Combat']], []))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Burrow"), player))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.MuncherTunnel", "LowerWastes.SandPot", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.LowerWastes.SandPot", player), lambda s: s.can_reach_region("LowerWastes.SandPot"))
    add_rule(world.get_location("LowerWastes.SandPotHC", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has_all(("Burrow", "DoubleJump"), player))
    add_rule(world.get_location("LowerWastes.SandPotHC", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has("Launch", player))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has_all(("Burrow", "Dash", "Grapple"), player) and s.has_any(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "LowerWastes.SandPot", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has_all(("Burrow", "Launch"), player))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.MuncherTunnel", player), lambda s: s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.MuncherTunnel", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Dash", player) and s.has_any(("DoubleJump", "Grapple"), player))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Dash", "Bash"), player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.LowerWastes.WoodenBridge", player), lambda s: s.can_reach_region("LowerWastes.WoodenBridge"))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.WoodenBridge") and s.has_all(("Burrow", "Grapple"), player) and s.has_any(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.WoodenBridge") and s.has_all(("Burrow", "Grapple", "Bash"), player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.WoodenBridge") and s.has_all(("Burrow", "Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerWastes.MuncherPitEX", player), lambda s: s.can_reach_region("LowerWastes.WoodenBridge") and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("LowerWastes.MuncherPitEX", player), lambda s: s.can_reach_region("LowerWastes.WoodenBridge") and s.has_all(("Burrow", "Glide"), player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Glide", "Dash"), player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has_all(("Dash", "DoubleJump"), player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", "LowerWastes.SandPot", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has_all(("Bash", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", "LowerWastes.SandPot", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.LeverArea", player), lambda s: s.has_any(("DoubleJump", "Burrow", "Launch"), player))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda s: s.can_reach_region("LowerWastes.BeforeMinesEntrance"))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Combat.Dangerous", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Grapple"), player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", "LowerWastes.MinesEntranceEnemyPaths", [], [], [[60, 'Combat'], [32, 'Combat']], []))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Grapple"), player))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.WoodenBridge", player), lambda s: s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", "LowerWastes.WoodenBridge", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.WoodenBridge", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.MinesEntranceEnemyPaths_to_LowerWastes.MinesEntrance", player), lambda s: True)
    add_rule(world.get_location("LowerWastes.BottomRightEX", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Grapple", player) and s.has("Bash", player))
    add_rule(world.get_location("LowerWastes.BottomRightEX", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", "", [], [], [], [[0, [[60, 'Combat'], [32, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_location("LowerWastes.BottomRightEX", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerWastes.BottomRightEX", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Launch", player))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Grapple", player) and s.has("Bash", player))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", "", [], [], [], [[0, [[60, 'Combat'], [32, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Launch", player))
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("DoubleJump", "Grapple"), player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", "LowerWastes.BeforeMinesEntrance", [], [], [[60, 'Combat'], [32, 'Combat']], []))
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Bash", "DoubleJump", "Grapple"), player))
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Grapple"), player))
    add_rule(world.get_location("C.LowerWastes.LeverArea", player), lambda s: s.can_reach_region("LowerWastes.LeverArea"))
    add_rule(world.get_location("E.LowerWastes.LeverArea", player), lambda s: s.can_reach_region("LowerWastes.LeverArea") and s.has("BreakCrystal", player))
    add_rule(world.get_location("LowerWastes.SandPlatformLever", player), lambda s: s.can_reach_region("LowerWastes.LeverArea") and s.has_any(("DoubleJump", "Burrow", "Launch"), player))
    add_rule(world.get_location("LowerWastes.SandPlatformLever", player), lambda s: s.can_reach_region("LowerWastes.LeverArea") and s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.LeverArea", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("LowerWastes.SandPlatformLever", player), lambda s: s.can_reach_region("LowerWastes.LeverArea") and s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "LowerWastes.LeverArea", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.WoodenBridge", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.BeforeMinesEntrance", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.EastTP", player), lambda s: s.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.LeverArea", "LowerWastes.MuncherClimb", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has("DoubleJump", player) and s.has("LowerWastes.SandPlatformLever", player) and s.has_any(("Dash", "Glide", "Burrow"), player))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Dash", "Burrow"), player) and s.has("LowerWastes.SandPlatformLever", player))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "LowerWastes.LeverArea", "LowerWastes.LastStandArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("C.LowerWastes.MuncherClimb", player), lambda s: s.can_reach_region("LowerWastes.MuncherClimb"))
    add_rule(world.get_location("LowerWastes.MuncherClimbEX", player), lambda s: s.can_reach_region("LowerWastes.MuncherClimb") and s.has("Grapple", player) and s.has_any(("Launch", "DoubleJump"), player))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LeverArea", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("DoubleJump", player) and s.has("LowerWastes.SandPlatformLever", player))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player))
    add_rule(world.get_location("LowerWastes.LastStandShard", player), lambda s: s.can_reach_region("LowerWastes.LastStandArea") and s.has_any(("DoubleJump", "Dash", "Burrow"), player))
    add_rule(world.get_location("LowerWastes.LastStandEX", player), lambda s: s.can_reach_region("LowerWastes.LastStandArea") and s.has("Burrow", player) and s.has_any(("Launch", "DoubleJump"), player))
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.LeverArea", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has_any(("Glide", "DoubleJump", "Dash", "LowerWastes.SandPlatformLever"), player))
    add_rule(world.get_location("C.LowerWastes.SkeetoHive", player), lambda s: s.can_reach_region("LowerWastes.SkeetoHive"))
    add_rule(world.get_location("LowerWastes.SkeetoHiveEX", player), lambda s: s.can_reach_region("LowerWastes.SkeetoHive") and s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has_any(("DoubleJump", "Burrow", "Launch"), player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.ThirstyGorlek", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.Shovel", player), lambda s: s.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.UpperPath", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Grapple", "Launch"), player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Dash"), player))
    add_rule(world.get_location("C.LowerWastes.ThirstyGorlek", player), lambda s: s.can_reach_region("LowerWastes.ThirstyGorlek"))
    add_rule(world.get_location("LowerWastes.TrialActivation", player), lambda s: s.can_reach_region("LowerWastes.ThirstyGorlek") and s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("LowerWastes.HandToHandMapstone", player), lambda s: s.can_reach_region("LowerWastes.ThirstyGorlek") and s.has("GladesTown.HandToHandCanteen", player))
    add_rule(world.get_location("LowerWastes.BurrowTree", player), lambda s: s.can_reach_region("LowerWastes.ThirstyGorlek"))
    add_rule(world.get_location("LowerWastes.BurrowTreeEX", player), lambda s: s.can_reach_region("LowerWastes.ThirstyGorlek") and s.has("Burrow", player))
    add_rule(world.get_location("LowerWastes.LupoMap", player), lambda s: s.can_reach_region("LowerWastes.ThirstyGorlek") and s.has("SpiritLight", player) and s.has_any(("Burrow", "Launch"), player))
    add_rule(world.get_location("LowerWastes.LupoMap", player), lambda s: s.can_reach_region("LowerWastes.ThirstyGorlek") and s.has("Bash", player) and s.has("SpiritLight", player) and cost_all(s, player, options, "LowerWastes.ThirstyGorlek", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Burrow", player))
    add_rule(world.get_location("C.LowerWastes.UpperPath", player), lambda s: s.can_reach_region("LowerWastes.UpperPath"))
    add_rule(world.get_location("E.LowerWastes.UpperPath", player), lambda s: s.can_reach_region("LowerWastes.UpperPath") and s.has("BreakCrystal", player))
    add_rule(world.get_location("LowerWastes.UpperPathEC", player), lambda s: s.can_reach_region("LowerWastes.UpperPath") and s.has("Burrow", player))
    add_rule(world.get_location("LowerWastes.UpperPathEX", player), lambda s: s.can_reach_region("LowerWastes.UpperPath") and s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("LowerWastes.UpperPathHiddenEX", player), lambda s: s.can_reach_region("LowerWastes.UpperPath") and s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("LowerWastes.UpperPath_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.UpperPath_to_LowerWastes.EastTP", player), lambda s: s.has("Burrow", player))
    add_rule(world.get_location("F.LowerWastes.EastTP", player), lambda s: s.can_reach_region("LowerWastes.EastTP"))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda s: s.can_reach_region("LowerWastes.EastTP"))
    add_rule(world.get_location("LowerWastes.EastTPOre", player), lambda s: s.can_reach_region("LowerWastes.EastTP") and s.has_any(("Burrow", "Launch"), player) and cost_all(s, player, options, "LowerWastes.EastTP", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("LowerWastes.EastTPOre", player), lambda s: s.can_reach_region("LowerWastes.EastTP") and s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "LowerWastes.EastTP", "", [], [['Grenade', 1]], [[20, 'Wall']], []))
    add_rule(world.get_location("LowerWastes.EastTPOre", player), lambda s: s.can_reach_region("LowerWastes.EastTP") and s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.EastTP", "", [], [['Grenade', 3]], [[20, 'Wall']], []))
    add_rule(world.get_location("LowerWastes.UpperPathHC", player), lambda s: s.can_reach_region("LowerWastes.EastTP") and s.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.EastTP_to_Teleporters", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.EastTP_to_Tokk", player), lambda s: s.has_any(("DoubleJump", "Burrow", "Launch"), player))
    add_rule(world.get_entrance("LowerWastes.EastTP_to_Tokk", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.EastTP", "Tokk", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.LeverArea", player), lambda s: s.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_entrance("LowerWastes.EastTP_to_UpperWastes.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has_any(("DoubleJump", "Dash", "Launch"), player) and has_health("50", s, player))
    add_rule(world.get_location("C.UpperWastes.KeystoneRoom", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom"))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Burrow", "Bash"), player) and can_keystones(s, player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Burrow", player) and can_keystones(s, player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [], [], [[24, 'Combat']], []))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Launch", player) and can_keystones(s, player))
    add_rule(world.get_location("UpperWastes.LowerKS", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("UpperWastes.LowerKS", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("UpperWastes.UpperKS", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_location("UpperWastes.TurmoilShard", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Burrow", "Bash", "Launch"), player))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Launch", player))
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_LowerWastes.EastTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player) and has_health("50", s, player))
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has_all(("Burrow", "Bash"), player) and can_keystones(s, player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has("Burrow", player) and can_keystones(s, player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "UpperWastes.MissilePuzzleLeft", [], [], [[24, 'Combat']], []))
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has_all(("Burrow", "Launch"), player) and can_keystones(s, player))
    add_rule(world.get_location("C.UpperWastes.MissilePuzzleLeft", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleLeft"))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleLeft") and s.has("Burrow", player) and can_keystones(s, player))
    add_rule(world.get_location("UpperWastes.LedgeEC", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleLeft") and s.has_all(("Burrow", "Bash"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("UpperWastes.LedgeEC", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleLeft") and s.has("Launch", player))
    add_rule(world.get_location("UpperWastes.MissileSpawnEX", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleLeft") and s.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleLeft") and s.has("Burrow", player) and can_keystones(s, player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.KeystoneRoom", player), lambda s: s.has("Burrow", player) and can_keystones(s, player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.MissilePuzzleMiddle", player), lambda s: s.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.LeverDoor", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleMiddle") and s.has_all(("Burrow", "Bash"), player))
    add_rule(world.get_location("UpperWastes.PurpleWallEX", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleMiddle") and s.has("Burrow", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleMiddle", "", [], [], [[60, 'Combat']], []))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player) and s.has("UpperWastes.LeverDoor", player))
    add_rule(world.get_location("UpperWastes.PurpleWallHC", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleRight") and s.has("Burrow", player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda s: s.has_all(("Burrow", "Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda s: s.has_all(("Burrow", "DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda s: s.has_all(("Burrow", "Launch"), player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.MissilePuzzleMiddle", player), lambda s: s.has("Burrow", player) and s.has("UpperWastes.LeverDoor", player))
    add_rule(world.get_location("C.UpperWastes.RuinsApproach", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach"))
    add_rule(world.get_location("UpperWastes.SpinLasersRightEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.SpinLasersMiddleEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.SpinLasersLowerEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has_all(("Burrow", "DoubleJump", "Bash"), player) and cost_all(s, player, options, "UpperWastes.RuinsApproach", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has_all(("Burrow", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has_all(("Burrow", "Launch"), player))
    add_rule(world.get_entrance("UpperWastes.RuinsApproach_to_UpperWastes.NorthTP", player), lambda s: s.has("Burrow", player))
    add_rule(world.get_entrance("UpperWastes.RuinsApproach_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("F.UpperWastes.NorthTP", player), lambda s: s.can_reach_region("UpperWastes.NorthTP"))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda s: s.can_reach_region("UpperWastes.NorthTP"))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Launch"), player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Launch"), player) and s.has_any(("DoubleJump", "Glide"), player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.RuinsApproach", player), lambda s: s.has("Burrow", player))
    add_rule(world.get_location("C.UpperWastes.OutsideRuins", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins"))
    add_rule(world.get_location("UpperWastes.FlowersSeed", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins"))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins") and s.has_all(("Burrow", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins") and s.has_all(("Burrow", "Dash", "Glide"), player))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins") and s.has("Launch", player) and s.has_any(("DoubleJump", "Glide", "Burrow"), player))
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_WindtornRuins.UpperRuinsDoor", player), lambda s: s.has("Regenerate", player) and s.has("EastHollow.ForestsVoice", player) and s.has("LowerReach.ForestsMemory", player) and s.has("UpperDepths.ForestsEyes", player) and s.has("WestPools.ForestsStrength", player) and has_health("50", s, player))
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: s.has_any(("Burrow", "Launch", "Bash"), player))
    add_rule(world.get_location("C.WindtornRuins.UpperRuinsDoor", player), lambda s: s.can_reach_region("WindtornRuins.UpperRuinsDoor"))
    add_rule(world.get_location("E.WindtornRuins.UpperRuinsDoor", player), lambda s: s.can_reach_region("WindtornRuins.UpperRuinsDoor") and s.has("BreakCrystal", player))
    add_rule(world.get_location("WindtornRuins.RuinsLever", player), lambda s: s.can_reach_region("WindtornRuins.UpperRuinsDoor") and s.has("Burrow", player) and cost_all(s, player, options, "WindtornRuins.UpperRuinsDoor", "", [], [], [[6, 'Wall'], [6, 'Wall']], []))
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor_to_UpperWastes.OutsideRuins", player), lambda s: s.has("Regenerate", player) and has_health("50", s, player))
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Burrow", player) and s.has("WindtornRuins.RuinsLever", player))
    add_rule(world.get_location("C.WindtornRuins.BrokenMural", player), lambda s: s.can_reach_region("WindtornRuins.BrokenMural"))
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.UpperRuinsDoor", player), lambda s: s.has("Burrow", player) and s.has("WindtornRuins.RuinsLever", player))
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.FallenPillar", player), lambda s: True)
    add_rule(world.get_location("WindtornRuins.HeartBarrier", player), lambda s: s.can_reach_region("WindtornRuins.FallenPillar") and s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_location("WindtornRuins.HeartBarrier", player), lambda s: s.can_reach_region("WindtornRuins.FallenPillar") and s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", "", [], [['Grenade', 1]], [[16, 'Wall']], []))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Burrow", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Burrow", "Bash", "Glide"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", "WindtornRuins.RuinsTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda s: s.has("Launch", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.Escape", player), lambda s: s.has("WindtornRuins.HeartBarrier", player))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.LowerRuins", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Burrow", "Launch"), player))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.LowerRuins", player), lambda s: s.has("Bash", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", "WindtornRuins.LowerRuins", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Bash", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", "WindtornRuins.BrokenMural", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Glide", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Launch", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player))
    add_rule(world.get_location("F.WindtornRuins.RuinsTP", player), lambda s: s.can_reach_region("WindtornRuins.RuinsTP"))
    add_rule(world.get_location("WindtornRuins.HeartBarrier", player), lambda s: s.can_reach_region("WindtornRuins.RuinsTP") and cost_all(s, player, options, "WindtornRuins.RuinsTP", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda s: s.can_reach_region("WindtornRuins.RuinsTP"))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_Teleporters", player), lambda s: True)
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.FallenPillar", player), lambda s: s.has_any(("WindtornRuins.HeartBarrier", "Burrow"), player))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Glide", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("F.WindtornRuins.Escape", player), lambda s: s.can_reach_region("WindtornRuins.Escape"))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "Dash", "Grapple"), player) and s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "DoubleJump", "Glide", "Grapple"), player) and s.has("WindtornRuins.HeartBarrier", player))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "DoubleJump", "Launch"), player) and s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "Grapple", "Launch", "Glide"), player) and s.has("WindtornRuins.HeartBarrier", player))
    add_rule(world.get_location("WindtornRuins.HandToHandComplete", player), lambda s: s.can_reach_region("WindtornRuins.LowerRuins") and s.has("LowerWastes.HandToHandMapstone", player))
    add_rule(world.get_location("WindtornRuins.EscapeRevisitEC", player), lambda s: s.can_reach_region("WindtornRuins.LowerRuins") and s.has("Burrow", player) and s.has("WindtornRuins.Seir", player))
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.Escape", player), lambda s: True)
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda s: s.has("DoubleJump", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda s: s.has("Bash", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WindtornRuins.LowerRuins", "WindtornRuins.FallenPillar", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda s: s.has("Launch", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player))
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and has_health("50", s, player) and cost_all(s, player, options, "WindtornRuins.LowerRuins", "LowerWastes.MinesEntranceEnemyPaths", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("C.WeepingRidge.Bottom", player), lambda s: s.can_reach_region("WeepingRidge.Bottom"))
    add_rule(world.get_location("H.WeepingRidge.Bottom", player), lambda s: s.can_reach_region("WeepingRidge.Bottom"))
    add_rule(world.get_location("E.WeepingRidge.Bottom", player), lambda s: s.can_reach_region("WeepingRidge.Bottom") and s.has("BreakCrystal", player))
    add_rule(world.get_location("WeepingRidge.ElevatorFightCompleted", player), lambda s: s.can_reach_region("WeepingRidge.Bottom") and s.has("DoubleJump", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WeepingRidge.Bottom", "", [], [], [[80, 'Combat', 80, 'Combat'], [50, 'Combat', 50, 'Combat']], []))
    add_rule(world.get_location("WeepingRidge.ElevatorFightCompleted", player), lambda s: s.can_reach_region("WeepingRidge.Bottom") and s.has("Bash", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "WeepingRidge.Bottom", "", [], [['Grenade', 1]], [[80, 'Combat', 80, 'Combat'], [50, 'Combat', 50, 'Combat']], []))
    add_rule(world.get_location("WeepingRidge.ElevatorFightCompleted", player), lambda s: s.can_reach_region("WeepingRidge.Bottom") and s.has("Launch", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "WeepingRidge.Bottom", "", [], [], [[80, 'Combat', 80, 'Combat'], [50, 'Combat', 50, 'Combat']], []))
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda s: s.has("DoubleJump", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Bash", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.Bottom", "WeepingRidge.LaunchArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Launch", player) and s.has("WeepingRidge.ElevatorFightCompleted", player))
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has("WindtornRuins.Seir", player) and has_health("50", s, player))
    add_rule(world.get_location("C.WeepingRidge.LaunchArea", player), lambda s: s.can_reach_region("WeepingRidge.LaunchArea"))
    add_rule(world.get_location("H.WeepingRidge.LaunchArea", player), lambda s: s.can_reach_region("WeepingRidge.LaunchArea"))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.LaunchArea") and s.has_all(("Launch", "Bash"), player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Regenerate", "Launch", "DoubleJump"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Dash", "Glide"), player) and has_health("60", s, player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has("Launch", player) and s.has("WeepingRidge.ElevatorFightCompleted", player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WeepingRidge.Bottom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("DoubleJump", "Dash", "Glide"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player))
    add_rule(world.get_location("C.WeepingRidge.AboveTree", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree"))
    add_rule(world.get_location("WeepingRidge.LaunchTree", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree"))
    add_rule(world.get_location("WeepingRidge.PortalEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has("Launch", player))
    add_rule(world.get_location("WeepingRidge.SpikeClimbEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has_all(("Launch", "DoubleJump"), player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [], [['Bow', 2]], [], []))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Bash", "Glide"), player))
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Launch", "Bash", "Glide"), player))
    add_rule(world.get_location("C.WillowsEnd.Entry", player), lambda s: s.can_reach_region("WillowsEnd.Entry"))
    add_rule(world.get_location("E.WillowsEnd.Entry", player), lambda s: s.can_reach_region("WillowsEnd.Entry") and s.has("Launch", player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("E.WillowsEnd.Entry", player), lambda s: s.can_reach_region("WillowsEnd.Entry") and cost_all(s, player, options, "WillowsEnd.Entry", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.Entry") and s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.Entry") and s.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has("Launch", player) and s.has("WillowsEnd.PortalShortcut", player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.BoulderHeartPath", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Grapple", "Launch"), player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Bash", "DoubleJump", "Glide"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeart", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Launch", player) and s.has("WillowsEnd.GrappleWheelsHeart", player))
    add_rule(world.get_location("C.WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeartMidPoint"))
    add_rule(world.get_location("H.WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeartMidPoint"))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Grapple", "Launch", "DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Grapple", "Launch", "Glide"), player))
    add_rule(world.get_location("C.WillowsEnd.GrappleHeart", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart"))
    add_rule(world.get_location("E.WillowsEnd.GrappleHeart", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and s.has("Launch", player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("E.WillowsEnd.GrappleHeart", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("H.WillowsEnd.GrappleHeart", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart"))
    add_rule(world.get_location("WillowsEnd.GrappleWheelsHeart", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "", [], [], [[30, 'Wall']], []))
    add_rule(world.get_location("WillowsEnd.PoisonfallHC", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and s.has("Launch", player))
    add_rule(world.get_location("WillowsEnd.PoisonfallHC", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and s.has_all(("DoubleJump", "Dash"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Glide", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Launch", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("C.WillowsEnd.BoulderHeartPath", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath"))
    add_rule(world.get_location("E.WillowsEnd.BoulderHeartPath", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has("BreakCrystal", player))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has("Launch", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.Entry", player), lambda s: s.has_any(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_location("F.WillowsEnd.InnerTP", player), lambda s: s.can_reach_region("WillowsEnd.InnerTP"))
    add_rule(world.get_location("NonGladesTeleporter", player), lambda s: s.can_reach_region("WillowsEnd.InnerTP"))
    add_rule(world.get_location("WillowsEnd.PortalShortcut", player), lambda s: s.can_reach_region("WillowsEnd.InnerTP") and s.has_any(("DoubleJump", "Dash", "Launch"), player) and cost_all(s, player, options, "WillowsEnd.InnerTP", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("WillowsEnd.PortalShortcut", player), lambda s: s.can_reach_region("WillowsEnd.InnerTP") and cost_all(s, player, options, "WillowsEnd.InnerTP", "", [], [], [[20, 'Wall']], [[1, 'Bow', 1]]))
    add_rule(world.get_location("WillowsEnd.LupoMap", player), lambda s: s.can_reach_region("WillowsEnd.InnerTP") and s.has("SpiritLight", player) and s.has_any(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_location("WillowsEnd.LupoMap", player), lambda s: s.can_reach_region("WillowsEnd.InnerTP") and s.has("SpiritLight", player) and cost_all(s, player, options, "WillowsEnd.InnerTP", "", [], [], [], [[1, 'Bow', 1]]))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_Teleporters", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("WillowsEnd.PortalShortcut", player) and s.has_any(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("WillowsEnd.PortalShortcut", player) and cost_all(s, player, options, "WillowsEnd.InnerTP", "WillowsEnd.Entry", [], [], [], [[1, 'Bow', 1]]))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has_any(("Glide", "Launch"), player))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.InnerTP", "WillowsEnd.AboveInnerTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("C.WillowsEnd.AboveInnerTP", player), lambda s: s.can_reach_region("WillowsEnd.AboveInnerTP"))
    add_rule(world.get_location("E.WillowsEnd.AboveInnerTP", player), lambda s: s.can_reach_region("WillowsEnd.AboveInnerTP") and s.has("Launch", player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("E.WillowsEnd.AboveInnerTP", player), lambda s: s.can_reach_region("WillowsEnd.AboveInnerTP") and s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("E.WillowsEnd.AboveInnerTP", player), lambda s: s.can_reach_region("WillowsEnd.AboveInnerTP") and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", "", [], [['Bow', 1]], [], [[0, [[80, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.InnerTP", player), lambda s: s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.InnerTP", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", "WillowsEnd.East", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Bash"), player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "Launch"), player))
    add_rule(world.get_location("H.WillowsEnd.RedirectHeartPath", player), lambda s: s.can_reach_region("WillowsEnd.RedirectHeartPath"))
    add_rule(world.get_location("E.WillowsEnd.RedirectHeartPath", player), lambda s: s.can_reach_region("WillowsEnd.RedirectHeartPath") and s.has("BreakCrystal", player) and s.has_any(("Launch", "DoubleJump", "Glide"), player))
    add_rule(world.get_location("E.WillowsEnd.RedirectHeartPath", player), lambda s: s.can_reach_region("WillowsEnd.RedirectHeartPath") and s.has("Dash", player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPath", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath_to_WillowsEnd.East", player), lambda s: s.has_any(("Launch", "DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath_to_WillowsEnd.RedirectHeartPuzzle", player), lambda s: True)
    add_rule(world.get_location("C.WillowsEnd.RedirectHeartPuzzle", player), lambda s: s.can_reach_region("WillowsEnd.RedirectHeartPuzzle"))
    add_rule(world.get_location("WillowsEnd.RedirectEX", player), lambda s: s.can_reach_region("WillowsEnd.RedirectHeartPuzzle") and s.has_all(("Bash", "Launch"), player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", "", [], [], [[10, 'Wall']], []))
    add_rule(world.get_location("WillowsEnd.RedirectEX", player), lambda s: s.can_reach_region("WillowsEnd.RedirectHeartPuzzle") and s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", "WillowsEnd.RedirectHeartPath", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.WillowsEnd.Upper", player), lambda s: s.can_reach_region("WillowsEnd.Upper"))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.East", player), lambda s: s.has("Combat.Dangerous", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.Upper", "WillowsEnd.East", [], [], [[80, 'Combat']], []))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.East", player), lambda s: s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "WillowsEnd.Upper", "WillowsEnd.UpperHeartPath", [], [['Bow', 1], ['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "WillowsEnd.Upper", "WillowsEnd.UpperHeartPath", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.WillowsEnd.West", player), lambda s: s.can_reach_region("WillowsEnd.West"))
    add_rule(world.get_location("E.WillowsEnd.West", player), lambda s: s.can_reach_region("WillowsEnd.West") and s.has("BreakCrystal", player))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.InnerTP", player), lambda s: s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "WillowsEnd.West", "WillowsEnd.InnerTP", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.InnerTP", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.West", "WillowsEnd.Upper", [], [['Grenade', 1]], [[10, 'Wall']], []))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.West", "WillowsEnd.Upper", [], [], [[10, 'Wall']], []))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.GlideHeartPath", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("C.WillowsEnd.GlideHeartPath", player), lambda s: s.can_reach_region("WillowsEnd.GlideHeartPath"))
    add_rule(world.get_location("H.WillowsEnd.GlideHeartPath", player), lambda s: s.can_reach_region("WillowsEnd.GlideHeartPath"))
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.GlideRooms", player), lambda s: s.has_all(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.West", player), lambda s: True)
    add_rule(world.get_location("C.WillowsEnd.GlideRooms", player), lambda s: s.can_reach_region("WillowsEnd.GlideRooms"))
    add_rule(world.get_location("E.WillowsEnd.GlideRooms", player), lambda s: s.can_reach_region("WillowsEnd.GlideRooms") and s.has("BreakCrystal", player) and s.has_any(("Launch", "Glide"), player))
    add_rule(world.get_location("E.WillowsEnd.GlideRooms", player), lambda s: s.can_reach_region("WillowsEnd.GlideRooms") and cost_all(s, player, options, "WillowsEnd.GlideRooms", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WillowsEnd.WindSpinOre", player), lambda s: s.can_reach_region("WillowsEnd.GlideRooms") and s.has("Glide", player))
    add_rule(world.get_entrance("WillowsEnd.GlideRooms_to_WillowsEnd.GlideHeartPath", player), lambda s: True)
    add_rule(world.get_location("C.WillowsEnd.UpperHeartPath", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartPath"))
    add_rule(world.get_location("E.WillowsEnd.UpperHeartPath", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartPath") and s.has("Launch", player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("E.WillowsEnd.UpperHeartPath", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartPath") and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WillowsEnd.UpperLeftEX", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartPath") and s.has_all(("Grapple", "Launch"), player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.Upper", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Bash", "Grapple", "Launch", "DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Bash", "Grapple", "Launch", "Glide"), player))
    add_rule(world.get_location("C.WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartCheckpoint"))
    add_rule(world.get_location("WillowsEnd.SpinPortalsHeart", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartCheckpoint") and cost_all(s, player, options, "WillowsEnd.UpperHeartCheckpoint", "", [], [], [[30, 'Wall']], []))
    add_rule(world.get_location("WillowsEnd.UpperRightEX", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartCheckpoint") and s.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint_to_WillowsEnd.UpperHeartPath", player), lambda s: s.has("WillowsEnd.SpinPortalsHeart", player))
    add_rule(world.get_location("GladesTown.HandToHandPouch", player), lambda s: s.can_reach_region("Tokk") and s.has("EastHollow.HandToHandMap", player))
    add_rule(world.get_location("GladesTown.TwillenGemQuest", player), lambda s: s.can_reach_region("TwillenShop") and s.has("LowerWastes.EerieGemQI", player))
    add_rule(world.get_location("TwillenShop.Overcharge", player), lambda s: s.can_reach_region("TwillenShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("TwillenShop.Wingclip", player), lambda s: s.can_reach_region("TwillenShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("TwillenShop.Swap", player), lambda s: s.can_reach_region("TwillenShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("TwillenShop.Vitality", player), lambda s: s.can_reach_region("TwillenShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("TwillenShop.Energy", player), lambda s: s.can_reach_region("TwillenShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("TwillenShop.Finesse", player), lambda s: s.can_reach_region("TwillenShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("TwillenShop.TripleJump", player), lambda s: s.can_reach_region("TwillenShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("TwillenShop.LightHarvest", player), lambda s: s.can_reach_region("TwillenShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("OpherShop.Spike", player), lambda s: s.can_reach_region("OpherShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("OpherShop.SpiritSmash", player), lambda s: s.can_reach_region("OpherShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("OpherShop.SpiritStar", player), lambda s: s.can_reach_region("OpherShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("OpherShop.Blaze", player), lambda s: s.can_reach_region("OpherShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("OpherShop.Sentry", player), lambda s: s.can_reach_region("OpherShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("OpherShop.Teleport", player), lambda s: s.can_reach_region("OpherShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("OpherShop.ShockSmash", player), lambda s: s.can_reach_region("OpherShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("OpherShop.StaticStar", player), lambda s: s.can_reach_region("OpherShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("OpherShop.ExplodingSpike", player), lambda s: s.can_reach_region("OpherShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("OpherShop.RapidSentry", player), lambda s: s.can_reach_region("OpherShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("OpherShop.ChargeBlaze", player), lambda s: s.can_reach_region("OpherShop") and s.has("SpiritLight", player))
    add_rule(world.get_location("OpherShop.WaterBreath", player), lambda s: s.can_reach_region("OpherShop") and s.has("InnerWellspring.WaterEscape", player) and s.has("SpiritLight", player))
    add_rule(world.get_location("GladesTown.RegrowTheGlades", player), lambda s: s.can_reach_region("TuleyShop") and s.has("TuleyShop.SelaFlowers", player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player) and s.has("TuleyShop.BlueMoon", player) and s.has("TuleyShop.SpringPlants", player) and s.has("TuleyShop.LastTree", player))
    add_rule(world.get_location("TuleyShop.LastTreeBranchRejected", player), lambda s: s.can_reach_region("TuleyShop") and s.has("WoodsEntry.LastTreeBranch", player))
    add_rule(world.get_location("TuleyShop.SelaFlowers", player), lambda s: s.can_reach_region("TuleyShop") and s.has("UpperWastes.FlowersSeed", player))
    add_rule(world.get_location("TuleyShop.StickyGrass", player), lambda s: s.can_reach_region("TuleyShop") and s.has("EastPools.GrassSeed", player))
    add_rule(world.get_location("TuleyShop.Lightcatchers", player), lambda s: s.can_reach_region("TuleyShop") and s.has("UpperDepths.LightcatcherSeed", player))
    add_rule(world.get_location("TuleyShop.BlueMoon", player), lambda s: s.can_reach_region("TuleyShop") and s.has("InnerWellspring.BlueMoonSeed", player))
    add_rule(world.get_location("TuleyShop.SpringPlants", player), lambda s: s.can_reach_region("TuleyShop") and s.has("UpperReach.SpringSeed", player))
    add_rule(world.get_location("TuleyShop.LastTree", player), lambda s: s.can_reach_region("TuleyShop") and s.has("WoodsEntry.TreeSeed", player))


def set_gorlek_rules(world, player, options):
    """Gorlek (or medium) rules."""
    add_rule(world.get_location("DepthsLight", player), lambda state: state.has("Bow", player))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has("Grapple", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has_all(("Bash", "Grapple"), player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "MarshSpawn.Main", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has_all(("Bash", "Launch"), player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.Main", "", [10], [], [], []))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "MarshSpawn.Main", "", [10], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has_all(("Bash", "Launch", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.Main", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has_all(("Bash", "Launch", "DoubleJump"), player) and s.has("HowlsDen.RainLifted", player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("MarshSpawn.BridgeEX", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has("Bash", player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_location("MarshSpawn.BridgeEX", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("MarshSpawn.BridgeEX", player), lambda s: s.can_reach_region("MarshSpawn.OpherBarrier") and s.has("Bash", player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_location("MarshSpawn.BridgeEX", player), lambda s: s.can_reach_region("MarshSpawn.OpherBarrier") and s.has("Sword", player))
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda s: s.has_all(("Sword", "Dash"), player))
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has_all(("Hammer", "Glide"), player) and s.has("MarshSpawn.LogBroken", player))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has_all(("Grapple", "Bash"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: s.has("Bash", player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_location("MarshSpawn.CaveKS", player), lambda s: s.can_reach_region("MarshSpawn.Cave") and s.has_any(("DoubleJump", "Bash", "Grapple"), player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.Cave", "MarshSpawn.PoolsBurrowsSignpost", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.BurrowFightArena") and s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LifepactLedge", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LifepactLedge", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "MarshSpawn.PoolsBurrowsSignpost", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Water", "Burrow"), player) and s.has_any(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.LifepactLedge", "MarshSpawn.PoolsBurrowsSignpost", [10], [], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and s.has("Bash", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Bash", "Glide"), player))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Glide"), player))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.BeforeBurrows", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Sword"), player))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Dash", "Sword"), player))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.LifepactLedge", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.LifepactLedge", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Bash", "DoubleJump"), player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Water", "WaterDash"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("MarshSpawn.BurrowsOpen", player), lambda s: s.can_reach_region("MarshSpawn.BurrowsEntry") and s.has_all(("Bash", "DoubleJump", "Dash"), player))
    add_rule(world.get_location("MarshSpawn.BurrowsOpen", player), lambda s: s.can_reach_region("MarshSpawn.BurrowsEntry") and s.has_all(("Bash", "Glide"), player))
    add_rule(world.get_location("MarshSpawn.BurrowsOpen", player), lambda s: s.can_reach_region("MarshSpawn.BurrowsEntry") and s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.BurrowsEntry", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("MarshSpawn.DamageTreeOpen", player), lambda s: s.can_reach_region("MarshSpawn.BurrowsEntry") and s.has("Bash", player))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Hammer", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_any(("DoubleJump", "Dash", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BurrowsEntry", "MarshSpawn.BeforeBurrows", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Water", player) and s.has_any(("DoubleJump", "Dash", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Water", player) and cost_all(s, player, options, "MarshSpawn.BurrowsEntry", "MarshSpawn.BeforeBurrows", [], [], [], [[2, 10]]))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has_all(("Water", "Burrow"), player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch", "Sword", "Hammer"), player))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has_all(("Water", "Burrow"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.PoolsPath", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.PoolsPath", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.PoolsPath", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Launch", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.PoolsPath", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Water", "Burrow"), player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Water", "Burrow"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.BurrowFightArena", [], [], [], [[2, 10]]))
    add_rule(world.get_location("PoolsApproach.WheelFreed", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and s.has_all(("Water", "Bash"), player))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and s.has("Launch", player))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and s.has("Glide", player) and s.has_any(("Sword", "Hammer", "DoubleJump", "Dash", "Bash"), player))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", "", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Water"), player) and s.has_any(("PoolsApproach.WheelFreed", "DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Water", "Bash"), player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Water"), player) and s.has("Hammer", player))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", "MarshSpawn.LeftSpawnSignpost", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Water", player) and s.has_any(("DoubleJump", "Bash"), player))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Glide", player) and s.has_any(("Dash", "DoubleJump"), player))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Sword", "Dash"), player))
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: s.has_all(("Dash", "Glide"), player))
    add_rule(world.get_location("MarshSpawn.RecklessShard", player), lambda s: s.can_reach_region("MarshSpawn.MokkTheBrave") and s.has("MarshSpawn.HowlBurnt", player) and s.has("Dash", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "", [], [], [[10, 'Wall']], []))
    add_rule(world.get_location("MarshSpawn.RecklessShard", player), lambda s: s.can_reach_region("MarshSpawn.MokkTheBrave") and s.has("Glide", player) and s.has("MarshSpawn.HowlBurnt", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "", [], [], [[10, 'Wall']], []))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has_all(("Dash", "Bash"), player) and s.has("MarshSpawn.HowlBurnt", player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has_all(("Dash", "Bash"), player) and s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "MarshSpawn.HowlApproach", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has_all(("Hammer", "Dash"), player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.AboveHowlArena") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: True)
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.FangPlatform") and s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.FangPlatform", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "MarshSpawn.FangPlatform", "MarshSpawn.AboveHowlArena", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance_to_MarshSpawn.MokkTheBrave", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("HowlsDen.RightHC", player), lambda s: s.can_reach_region("HowlsDen.UpperLoopExit") and cost_all(s, player, options, "HowlsDen.UpperLoopExit", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.AboveBoneBridge", "MarshSpawn.HowlsDenEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("HowlsDen.RightHC", player), lambda s: s.can_reach_region("HowlsDen.UpperLoopEntrance") and s.has("HowlsDen.UpperLoopEntranceBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("Glide", player) and s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has("Bash", player))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("Glide", player) and s.has("HowlsDen.UpperLoopEntranceBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", "HowlsDen.UpperLoopExit", [], [], [], [[0, [[13, 'Combat']], []]]))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has("Sword", player))
    add_rule(world.get_location("HowlsDen.AboveDoorKS", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and s.has("Dash", player))
    add_rule(world.get_location("HowlsDen.AboveDoorKS", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.BoneBridge", "", [10], [], [], []))
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.UpperLoopEntrance", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.UpperLoopEntrance", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "HowlsDen.BoneBridge", "HowlsDen.UpperLoopEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor_to_HowlsDen.OutsideSecretRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor_to_HowlsDen.OutsideSecretRoom", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.BoneBridgeDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.BoneBridgeDoor", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", "HowlsDen.MidwayBottomLoop", [10], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has_all(("Water", "WaterDash", "Bash"), player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", "HowlsDen.MidwayBottomLoop", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has_all(("Water", "WaterDash"), player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", "HowlsDen.MidwayBottomLoop", [10], [], [], []))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", "HowlsDen.AboveBoneBridge", [], [], [[16, 'Wall']], []))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", "HowlsDen.AboveBoneBridge", [], [['Grenade', 1]], [[16, 'Wall']], []))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", "HowlsDen.AboveBoneBridge", [], [['Grenade', 1]], [[16, 'Wall']], [[2, 10]]))
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "HowlsDen.SecretRoom", "HowlsDen.LeftSecretRoom", [10], [], [], []))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom") and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "HowlsDen.SecretRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "HowlsDen.SecretRoom", [], [['Grenade', 1]], [], [[2, 10]]))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has_all(("Dash", "Hammer"), player))
    add_rule(world.get_location("HowlsDen.LaserKS", player), lambda s: s.can_reach_region("HowlsDen.Teleporter") and s.has("Dash", player))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has("Water", player))
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "MarshPastOpher.MillView", "MarshPastOpher.OpherSkipBranch", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Launch", "DoubleJump"), player))
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and s.has("DoubleJump", player))
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshPastOpher.OpherSkipBranch", "MarshPastOpher.PoolsPathEast", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "MarshPastOpher.OpherSkipBranch", "MarshPastOpher.PoolsPathEast", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("MarshPastOpher.SpiritTrial", player), lambda s: s.can_reach_region("MarshPastOpher.TrialStart") and s.has_all(("Dash", "Grapple"), player) and s.has("MarshPastOpher.TrialActivation", player))
    add_rule(world.get_entrance("MarshPastOpher.TrialStart_to_MarshPastOpher.BowPath", player), lambda s: True)
    add_rule(world.get_location("MarshPastOpher.TrialLeftEX", player), lambda s: s.can_reach_region("MarshPastOpher.UnderTrunk") and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("MarshPastOpher.TrialLeftEX", player), lambda s: s.can_reach_region("MarshPastOpher.UnderTrunk") and cost_all(s, player, options, "MarshPastOpher.UnderTrunk", "", [], [], [], [[2, 10]]))
    add_rule(world.get_location("H.MarshPastOpher.TrialArea", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea"))
    add_rule(world.get_location("MarshPastOpher.TrialActivation", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("MarshPastOpher.TrialActivation", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has("Grapple", player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", "", [], [], [], [[2, 10]]))
    add_rule(world.get_location("MarshPastOpher.TrialEC", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has("Sword", player))
    add_rule(world.get_location("MarshPastOpher.TrialEC", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", "", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", "MarshPastOpher.UnderTrunk", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: s.has_any(("Sword", "Hammer", "Launch"), player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", "MarshPastOpher.BowPath", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", "MarshPastOpher.BowPath", [], [['Grenade', 1]], [[20, 'Wall']], []))
    add_rule(world.get_location("MarshPastOpher.SwingPoleEX", player), lambda s: s.can_reach_region("MarshPastOpher.BowPath") and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.BowPath", "", [10], [], [], []))
    add_rule(world.get_location("MarshPastOpher.SwingPoleEX", player), lambda s: s.can_reach_region("MarshPastOpher.BowPath") and s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowPath", "", [10], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowPath", "MarshPastOpher.BowApproach", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowPath", "MarshPastOpher.MillView", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.TrialStart", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", "MarshPastOpher.PoolsPathEast", [], [['Bow', 2]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has_any(("TripleJump", "Glide"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", "MarshPastOpher.PoolsPathEast", [], [['Bow', 2]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Launch", "Glide"), player))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has("Combat.Aerial", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.BowArea", "MarshPastOpher.UpperBowArea", [], [['Bow', 2]], [[20, 'Combat']], []))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.BowArea", "MarshPastOpher.UpperBowArea", [], [['Bow', 2]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowArea", "MarshPastOpher.UpperBowArea", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: s.has_any(("Bash", "Sword"), player))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: True)
    add_rule(world.get_location("MarshPastOpher.LeftEyestone", player), lambda s: s.can_reach_region("MarshPastOpher.UpperBowArea") and cost_all(s, player, options, "MarshPastOpher.UpperBowArea", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("MarshPastOpher.RightEyestone", player), lambda s: s.can_reach_region("MarshPastOpher.UpperBowArea") and cost_all(s, player, options, "MarshPastOpher.UpperBowArea", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("H.MarshPastOpher.PoolsPathEast", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathEast"))
    add_rule(world.get_location("E.MarshPastOpher.PoolsPathEast", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathEast") and s.has("BreakCrystal", player))
    add_rule(world.get_location("MarshPastOpher.CeilingEX", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathEast") and s.has_all(("Bash", "DoubleJump"), player))
    add_rule(world.get_location("MarshPastOpher.CeilingEX", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathEast") and s.has("Bash", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has_all(("Bash", "Dash"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Launch", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", "MarshPastOpher.PoolsPathMiddle", [], [], [[32, 'Ranged']], []))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathMiddle") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathMiddle") and s.has("Dash", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathMiddle") and s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathMiddle") and s.has("Bash", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Bash", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathBellowOneWayWall", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Spear', 1]], [], [[2, 10]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Launch", player) and s.has("Hammer", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Launch", player) and s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathBellowOneWayWall", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Glide", player) and s.has_any(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", "MarshPastOpher.PoolsPathWest", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", "MarshPastOpher.PoolsPathWest", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", "MarshPastOpher.PoolsPathWest", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Glide", "Hammer"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Glide", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathEast", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("Hammer", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathEast", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("Hammer", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathEast", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Water", "WaterDash"), player) and s.has("Hammer", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Water", "WaterDash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathEast", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("WaterDash", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathEast", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Sword", "Hammer", "TripleJump"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has("Glide", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathBellowOneWayWall", [10], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathBellowOneWayWall", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Glide", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MidnightBurrows.BelowLupo", player), lambda s: s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MidnightBurrows.BelowLupo", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("MarshSpawn.BurrowsOpen", player))
    add_rule(world.get_location("MidnightBurrows.LeftKS", player), lambda s: s.can_reach_region("MidnightBurrows.BelowLupo") and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("MidnightBurrows.LeftKS", player), lambda s: s.can_reach_region("MidnightBurrows.BelowLupo") and cost_all(s, player, options, "MidnightBurrows.BelowLupo", "", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Teleporter", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "TripleJump"), player))
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword", "Hammer", "Glide"), player))
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MidnightBurrows.BelowLupo", "MidnightBurrows.Central", [], [], [], [[2, 15]]))
    add_rule(world.get_location("MidnightBurrows.LupoMap", player), lambda s: s.can_reach_region("MidnightBurrows.Central") and s.has("SpiritLight", player))
    add_rule(world.get_location("MidnightBurrows.DeflectorShard", player), lambda s: s.can_reach_region("MidnightBurrows.Central") and s.has("DoubleJump", player) and s.has("MidnightBurrows.Lever", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_location("MidnightBurrows.DeflectorShard", player), lambda s: s.can_reach_region("MidnightBurrows.Central") and s.has("MidnightBurrows.Lever", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.PortalRoom", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has_any(("DoubleJump", "Dash", "Bash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", "MidnightBurrows.LeverRoom", [15], [], [], []))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("Sword", player) and s.has("MidnightBurrows.Lever", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("Bash", player) and s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", "MidnightBurrows.East", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.Central", player), lambda s: True)
    add_rule(world.get_location("MidnightBurrows.LowerKS", player), lambda s: s.can_reach_region("MidnightBurrows.LeverRoom") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("MidnightBurrows.LowerKS", player), lambda s: s.can_reach_region("MidnightBurrows.LeverRoom") and s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("MidnightBurrows.LowerKS", player), lambda s: s.can_reach_region("MidnightBurrows.LeverRoom") and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "", [15], [], [], []))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "MidnightBurrows.PortalRoom", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("MidnightBurrows.East_to_MidnightBurrows.DenConnection", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("MidnightBurrows.East_to_MidnightBurrows.DenConnection", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MidnightBurrows.PortalCorridor", "MidnightBurrows.BelowUpperKS", [15], [], [], []))
    add_rule(world.get_location("MidnightBurrows.UpperKS", player), lambda s: s.can_reach_region("MidnightBurrows.BelowUpperKS") and s.has_any(("Dash", "Launch"), player))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.Entrance") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.Entrance") and s.has("Glide", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WestHollow.Entrance", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.Entrance_to_MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.Entrance_to_MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and cost_all(s, player, options, "WestHollow.Entrance", "MarshPastOpher.BowArea", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.Entrance", "WestHollow.InFrontPurpleDoorEnemyPaths", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WestHollow.UpperDrainLeverPulled", player), lambda s: s.can_reach_region("WestHollow.MokiByTwillen") and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_location("WestHollow.UpperDrainLeverPulled", player), lambda s: s.can_reach_region("WestHollow.MokiByTwillen") and cost_all(s, player, options, "WestHollow.MokiByTwillen", "", [], [], [], [[1, 'Bow', 1]]))
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained", "DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.Entrance", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.HollowDrainMiddle", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.UpperTongueExtended", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.RockPuzzle", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("DoubleJump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("Dash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.RockPuzzle", [20], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.Entrance", player), lambda s: True)
    add_rule(world.get_location("E.WestHollow.RockPuzzle", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has("BreakCrystal", player))
    add_rule(world.get_location("WestHollow.RockPuzzleSolved", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has("Launch", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.RockPuzzleSolved", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [], [['Bow', 1], ['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has("Combat.Aerial", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.FarLeftRoom", [], [['Bow', 1]], [[20, 'Combat'], [13, 'Combat']], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("DoubleJump", player) and s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.FarLeftRoom", [], [], [], [[0, [[13, 'Combat']], []], [2, 10]]))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Launch", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.HollowDrainMiddle", [20], [], [], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("DoubleJump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.HollowDrainMiddle", [20], [], [], []))
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.Entrance", player), lambda s: True)
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("DoubleJump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("Bash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Bow', 1], ['Grenade', 1]], [], []))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Bow', 2]], [], []))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("DoubleJump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [10], [], [], []))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has_all(("DoubleJump", "Dash"), player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [10], [], [], []))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WaterDash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [20], [], [], []))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("DoubleJump", player) and s.has("WestHollow.FullyDrained", player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("DoubleJump", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [], [], [[2, 10]]))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WestHollow.FullyDrained", player) and s.has_any(("Dash", "DoubleJump"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.SubmergedPlatform"))
    add_rule(world.get_location("WestHollow.UpperTongueRetracted", player), lambda s: s.can_reach_region("WestHollow.SubmergedPlatform") and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("DoubleJump", player) and s.has("WestHollow.FullyDrained", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueRetracted", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.HollowDrainMiddle", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("DoubleJump", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.RockPuzzle", [10], [], [], []))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.AboveJumppad", player), lambda s: s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.AboveJumppad", player), lambda s: True)
    add_rule(world.get_location("WestHollow.LowerTongueRetracted", player), lambda s: s.can_reach_region("WestHollow.AboveJumppad") and s.has("WestHollow.FullyDrained", player) and s.has("Bash", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.LowerTongueRetracted", player), lambda s: s.can_reach_region("WestHollow.AboveJumppad") and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", "", [], [['Bow', 1]], [], [[0, [[13, 'Combat']], []], [2, 10]]))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("DoubleJump", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player))
    add_rule(world.get_location("WestHollow.QuickshotShard", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("WestHollow.FullyDrained", player) and s.has_any(("Dash", "Launch"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("DoubleJump", player) and s.has("SpiritLight", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Combat.Aerial", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.TrialApproach", [], [], [[13, 'Combat'], [20, 'Combat', 20, 'Combat']], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.PolesPound", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WestHollow.TrialApproach", "WestHollow.TrialStart", [], [], [[13, 'Combat']], []))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.TrialApproach", "WestHollow.TrialStart", [10], [], [], []))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Glide", player) and s.has("Bash", player) and cost_all(s, player, options, "WestHollow.TrialApproach", "WestHollow.TrialStart", [10], [], [], []))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestHollow.TrialApproach", "WestHollow.TrialStart", [10], [], [], [[0, [[13, 'Combat']], []]]))
    add_rule(world.get_location("WestHollow.SpiritTrial", player), lambda s: s.can_reach_region("WestHollow.TrialStart") and s.has("Dash", player) and s.has("WestHollow.TrialActivation", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_location("WestHollow.BelowLupoEX", player), lambda s: s.can_reach_region("WestHollow.PolesPound") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.DashApproach", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("WaterDash", player) and s.has_any(("Hammer", "Glide"), player) and cost_all(s, player, options, "WestHollow.PolesPound", "WestHollow.HollowDrainLower", [30], [], [[13, 'Combat']], []))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has_all(("WaterDash", "Water"), player) and s.has_any(("Hammer", "Glide"), player) and cost_all(s, player, options, "WestHollow.PolesPound", "WestHollow.HollowDrainLower", [10], [], [[13, 'Combat']], []))
    add_rule(world.get_location("WestHollow.TrialActivation", player), lambda s: s.can_reach_region("WestHollow.DashApproach") and s.has("Glide", player))
    add_rule(world.get_location("WestHollow.DoorLever", player), lambda s: s.can_reach_region("WestHollow.DashApproach") and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword"), player))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.DashApproach", "WestHollow.HollowDrainLower", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("WestHollow.CrusherEX", player), lambda s: s.can_reach_region("WestHollow.DashCrushers"))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword"), player))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashRoomTopRight", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda s: s.can_reach_region("WestHollow.DashRoomTopRight") and s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda s: s.can_reach_region("WestHollow.DashRoomTopRight") and s.has_all(("DoubleJump", "Bash"), player) and s.has_any(("TripleJump", "Glide"), player))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda s: s.can_reach_region("WestHollow.DashRoomTopRight") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Glide"), player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", "", [], [], [[12, 'Combat']], []))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashCrushers", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Bash", player) and s.has("Sword", player))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", "WestHollow.AboveDashSemisolid", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", "WestHollow.AboveDashSemisolid", [], [], [[40, 'Combat']], []))
    add_rule(world.get_entrance("EastHollow.Teleporter_to_BeetleFight", player), lambda s: True)
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.AfterBeetleFight", player), lambda s: s.has_any(("EastHollow.BeetleDefeated", "Launch"), player))
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("EastHollow.BeetleDefeated", player), lambda s: s.can_reach_region("BeetleFight") and s.has("Regenerate", player) and s.has_any(("DoubleJump", "Launch"), player) and cost_all(s, player, options, "BeetleFight", "", [35], [], [[250, 'Boss']], []))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda s: s.can_reach_region("EastHollow.VoiceDoorPlatform") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.Teleporter", player), lambda s: True)
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.AfterBeetleFight", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("EastHollow.GladesApproachOre", player), lambda s: s.can_reach_region("EastHollow.MapMoki") and s.has("Bash", player))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "EastHollow.MapMoki", "EastHollow.OutsideGlades", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.MapMoki", "EastHollow.OutsideGlades", [10], [], [], []))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("Bash", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("Bash", player) and s.has("EastHollow.BeetleDefeated", player) and s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("Launch", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("Launch", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [], [], [], [[2, 10]]))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("Grapple", "Dash"), player))
    add_rule(world.get_location("EastHollow.MortarEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("Bash", player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("Bash", "Glide"), player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("DoubleJump", "Glide"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has_any(("Bash", "Sword"), player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("DoubleJump", player) and s.has("EastHollow.BeetleDefeated", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("Dash", player) and s.has("EastHollow.BeetleDefeated", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("EastHollow.BeetleDefeated", player) and s.has("Bash", player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("DoubleJump", player) and s.has("EastHollow.BeetleDefeated", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has("Grapple", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "EastHollow.Kwolok", [10], [], [], []))
    add_rule(world.get_location("EastHollow.DepthsLever", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has("Bash", player))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has_all(("Bash", "DoubleJump"), player))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashTreeCheckpoint", player), lambda s: s.has_any(("DoubleJump", "Dash", "Bash"), player))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashTreeCheckpoint", player), lambda s: True)
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AboveDepths", player), lambda s: s.has("EastHollow.DepthsLever", player) and s.has_any(("DoubleJump", "Dash", "Bash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AboveDepths", player), lambda s: s.has("EastHollow.DepthsLever", player) and cost_all(s, player, options, "EastHollow.AboveBash", "EastHollow.AboveDepths", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("EastHollow.BashEX", player), lambda s: s.can_reach_region("EastHollow.BashTreeCheckpoint") and s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has_all(("Bash", "Sword"), player))
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", "EastHollow.AboveBash", [10], [['Grenade', 1]], [], []))
    add_rule(world.get_location("EastHollow.SilentSwimEC", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has("Water", player) and s.has_any(("WaterDash", "Launch"), player))
    add_rule(world.get_location("EastHollow.SilentSwimEC", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("Water", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.Kwolok", "", [10], [], [[1, 'Combat']], []))
    add_rule(world.get_location("EastHollow.SilentSwimEC", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("Water", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.Kwolok", "", [20], [], [], []))
    add_rule(world.get_location("EastHollow.KwolokSwimOre", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has("Water", player))
    add_rule(world.get_location("EastHollow.KwolokSwimLeftEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("Water", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.Kwolok", "EastHollow.AfterBeetleFight", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "EastHollow.Kwolok", "EastHollow.AfterBeetleFight", [10], [], [], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "Grapple", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [], [], [[1, 'Combat']], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "Grapple", "Dash"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [], [], [[1, 'Combat']], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [], [], [[1, 'Combat']], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [10], [], [[1, 'Combat']], []))
    add_rule(world.get_location("EastHollow.DepthsExteriorEX", player), lambda s: s.can_reach_region("EastHollow.AboveDepths") and s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "EastHollow.AboveDepths", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("EastHollow.DepthsExteriorEX", player), lambda s: s.can_reach_region("EastHollow.AboveDepths") and s.has("Launch", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("EastHollow.DepthsExteriorEX", player), lambda s: s.can_reach_region("EastHollow.AboveDepths") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.AboveDepths", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.BashTreeCheckpoint", player), lambda s: s.has("EastHollow.DepthsLever", player) and cost_all(s, player, options, "EastHollow.AboveDepths", "EastHollow.BashTreeCheckpoint", [5], [], [], []))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("Bash", player) and s.has("GladesTown.ClearThorns", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_location("GladesTown.LupoSwimMiddleEX", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has_all(("Water", "DoubleJump"), player))
    add_rule(world.get_location("GladesTown.LupoSwimLeftEX", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has_all(("Water", "DoubleJump"), player) and s.has("GladesTown.ClearThorns", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has("TuleyShop.BlueMoon", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LeftAboveCoals", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and s.has_any(("Burrow", "Dash"), player))
    add_rule(world.get_location("GladesTown.LowerOre", player), lambda s: s.can_reach_region("GladesTown.TwillenHome") and s.has("Hammer", player))
    add_rule(world.get_location("GladesTown.LowerOre", player), lambda s: s.can_reach_region("GladesTown.TwillenHome") and s.has("Sword", player) and cost_all(s, player, options, "GladesTown.TwillenHome", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("GladesTown.LowerOre", player), lambda s: s.can_reach_region("GladesTown.TwillenHome") and cost_all(s, player, options, "GladesTown.TwillenHome", "", [], [['Spear', 1]], [], [[2, 10]]))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: s.has("TuleyShop.SpringPlants", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("Launch", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has("TripleJump", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("Bash", player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has_all(("DoubleJump", "Hammer"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("TripleJump", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("Bash", player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.West", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("DoubleJump", player) and s.has("GladesTown.BuildHuts", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("Bash", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("Bash", "Sword"), player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [10], [], [], []))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [], [], [[12, 'Combat', 12, 'Combat']], []))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [], [], [[12, 'Combat', 12, 'Combat']], []))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("Sword", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.Teleporter", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Grapple", "Dash"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has("TuleyShop.StickyGrass", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.MotayHut") and s.has_all(("Bash", "Glide"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.MotayHut", "GladesTown.UpperWest", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("GladesTown.ClearThorns", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("GladesTown.UpperLeftEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("GladesTown.UpperLeftEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has_all(("Grapple", "Dash"), player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("GladesTown.AboveGromHC", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("GladesTown.AboveGromHC", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.MotayHut", player), lambda s: s.has("GladesTown.BuildHuts", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.West", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.Teleporter", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("Water", player) and s.has("GladesTown.CaveEntrance", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("Launch", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Bow', 4]], [], []))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("Bash", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Bow', 4], ['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.AboveCaveEX", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has_all(("Hammer", "Dash"), player))
    add_rule(world.get_location("GladesTown.AboveCaveEX", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("TuleyShop.SpringPlants", player))
    add_rule(world.get_location("GladesTown.CaveBurrowEX", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("Burrow", player))
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has("Bash", player) and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "GladesTown.Teleporter", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has_all(("Hammer", "Dash"), player) and s.has("GladesTown.ClearThorns", player))
    add_rule(world.get_location("GladesTown.BountyShard", player), lambda s: s.can_reach_region("GladesTown.BelowBountyShard") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("GladesTown.BountyShard", player), lambda s: s.can_reach_region("GladesTown.BelowBountyShard") and s.has("TuleyShop.StickyGrass", player) and s.has_any(("DoubleJump", "Grapple"), player))
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.LeftAboveCoals", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.LeftAboveCoals", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.LeftAboveCoals") and s.has("Hammer", player))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.LeftAboveCoals") and s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.LeftAboveCoals") and s.has("Sword", player) and s.has("TuleyShop.SpringPlants", player))
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.AboveOpher", player), lambda s: s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("TuleyShop.SpringPlants", player) and s.has_any(("Hammer", "Sword"), player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_TuleyShop", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player))
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.HoleHut") and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.HoleHutEntrance", player), lambda s: s.has("GladesTown.RoofsOverHeads", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Launch"), player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Grapple"), player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Grapple"), player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_location("E.WestGlades.PastTown", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("Water", player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1]]))
    add_rule(world.get_location("E.WestGlades.PastTown", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("Glide", player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1]]))
    add_rule(world.get_location("E.WestGlades.PastTown", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1]]))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "DoubleJump", "Dash"), player))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "WaterDash"), player) and s.has("Water", player))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "WaterDash"), player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.LowerPool", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.LowerPool", [], [], [], [[2, 10], [0, [[40, 'Ranged']], []]]))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.LowerPool", [], [], [], [[2, 10], [0, [[40, 'Ranged']], []]]))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has_all(("WaterDash", "Bash"), player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.LowerPool", [20], [], [], []))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has_all(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", "GladesTown.West", [10], [], [], []))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has_all(("DoubleJump", "Dash", "Glide"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WestGlades.LowerPool", "", [10], [], [], []))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WestGlades.LowerPool", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("Launch", player))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.LowerPool", "WestGlades.PastTown", [], [], [[40, 'Ranged']], []))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.LowerPool", "WestGlades.PastTown", [10], [], [], []))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has("Bash", player) and cost_all(s, player, options, "WestGlades.Center", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.LowerPool", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Upper") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Upper") and s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has("Grapple", player))
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestGlades.Upper", "WestGlades.MillApproach", [20], [], [], []))
    add_rule(world.get_location("OuterWellspring.SwimOre", player), lambda s: s.can_reach_region("WestGlades.MillApproach") and s.has_all(("Water", "Bash"), player) and cost_all(s, player, options, "WestGlades.MillApproach", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.SwimOre", player), lambda s: s.can_reach_region("WestGlades.MillApproach") and s.has_all(("Water", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("OuterWellspring.SwimOre", player), lambda s: s.can_reach_region("WestGlades.MillApproach") and s.has_all(("Water", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has_any(("Water", "DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has("Hammer", player) and s.has_any(("Bash", "Grapple"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "WestGlades.MillApproach", "OuterWellspring.EntranceDoor", [20], [], [], []))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "WestGlades.MillApproach", "OuterWellspring.EntranceDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.MillApproach", "OuterWellspring.EntranceDoor", [], [['Grenade', 1]], [], [[2, 20]]))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.MillApproach", "OuterWellspring.EntranceDoor", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Water", "Grapple"), player) and s.has_any(("DoubleJump", "Dash", "Bash"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Water", "Grapple"), player) and cost_all(s, player, options, "WestGlades.MillApproach", "PoolsApproach.MillPathCheckpoint", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Water", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("WaterDash", "Bash"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Water"), player) and s.has_any(("WaterDash", "Bash"), player) and s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Water"), player) and s.has_any(("WaterDash", "Bash"), player) and cost_all(s, player, options, "WestGlades.MillApproach", "PoolsApproach.MillPathCheckpoint", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Water", "Launch"), player) and s.has_any(("DoubleJump", "Dash", "Bash", "WaterDash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Water", "Launch"), player) and cost_all(s, player, options, "WestGlades.MillApproach", "PoolsApproach.MillPathCheckpoint", [], [], [], [[2, 15]]))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("H.OuterWellspring.EntranceDoor", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [], [], [[13, 'Combat']], []))
    add_rule(world.get_location("OuterWellspring.LifeHarvestWallBroken", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has_any(("DoubleJump", "Bash", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.LifeHarvestWallBroken", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [], [], [[20, 'Wall']], [[0, [[13, 'Combat'], [32, 'Combat']], []]]))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has_all(("Grapple", "Dash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has_any(("DoubleJump", "Dash", "Grapple", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [15], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestEntry", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player) and s.has_any(("DoubleJump", "Bash", "Dash"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestEntry", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.LifeHarvestEntry", [], [], [], [[0, [[13, 'Combat'], [32, 'Combat']], []]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.Basement", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has_all(("Grapple", "Sword"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.Basement", [15], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Grapple", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [15], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and s.has("Glide", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 3]], [], [[2, 15]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.WestDoor", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.WestDoor", [], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "WestGlades.MillApproach", [20], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "WestGlades.MillApproach", [20], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "WestGlades.MillApproach", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("Bash", player) and s.has("Sword", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "WestGlades.MillApproach", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "WestGlades.MillApproach", [], [['Grenade', 2]], [], [[2, 20]]))
    add_rule(world.get_location("OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has_all(("Bash", "Dash"), player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has("DoubleJump", player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has_all(("Bash", "Dash"), player) and s.has("OuterWellspring.LifeHarvestLeverPulled", player))
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and s.has_all(("Bash", "DoubleJump", "Grapple"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [15], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [15], [], [], []))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda s: s.can_reach_region("OuterWellspring.AboveEntranceDoor") and s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.AboveEntranceDoor") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "", [15], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.WestDoor", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.WestDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.WestDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.WestDoor", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.WestDoor", [], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Bash", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.RightWallMidpoint", [15], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("DoubleJump", "Dash", "Sword"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.RightWallMidpoint", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.RightWallMidpoint", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("Glide", player))
    add_rule(world.get_location("OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has("Bash", player) and s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Grenade', 1]], [[3, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Grenade', 1]], [[3, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Shuriken', 0], [1, 'Grenade', 0], [1, 'Blaze', 0]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and s.has("TripleJump", player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [], [], [[2, 15]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has("Grapple", player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [15], [], [], []))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Bash", "DoubleJump"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Grenade', 1]], [], [[2, 15]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Bash"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [15], [['Grenade', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "OuterWellspring.EastDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [], [[3, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [['Grenade', 1]], [[20, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [['Grenade', 2]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.AboveWestDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("Bash", "Hammer"), player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.AboveWestDoor", [10], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.AboveWestDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.AboveWestDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has_all(("DoubleJump", "Dash", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.RightWallMidpoint", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_WestGlades.MillApproach", player), lambda s: True)
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("Grapple", "DoubleJump"), player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", "", [], [], [], [[2, 15]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has("Grapple", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", "", [15], [], [], []))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("DoubleJump", "Glide"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", "", [15], [], [], []))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has("Launch", player) and s.has("Sword", player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has("Launch", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", "", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda s: s.has("DoubleJump", player) and s.has("InnerWellspring.TopDoorOpen", player))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.WestDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", "OuterWellspring.EastDoor", [15], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("OuterWellspring.TrialActivation", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has_all(("Grapple", "Dash", "Glide"), player))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword"), player))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has_all(("Grapple", "Dash", "Sword"), player))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has_all(("Grapple", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_WestGlades.MillApproach", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_WestGlades.MillApproach", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_WestGlades.MillApproach", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "WestGlades.MillApproach", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EntranceDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "OuterWellspring.EntranceDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Grapple", player))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Grapple", player) and s.has("Bash", player))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "OuterWellspring.TrialApproach", [], [], [], [[0, [[24, 'Combat']], ['Combat.Aerial']]]))
    add_rule(world.get_location("OuterWellspring.RightWallEX", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("OuterWellspring.RightWallEX", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and s.has("Bash", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Grapple", player))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "OuterWellspring.TrialRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has_any(("Grapple", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "OuterWellspring.EastDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Sword"), player))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "OuterWellspring.EastDoor", [15], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.AboveEntranceDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallMidpoint", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialStart", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("OuterWellspring.SpiritTrial", player), lambda s: s.can_reach_region("OuterWellspring.TrialStart") and s.has_all(("Dash", "Grapple", "Glide"), player) and s.has("OuterWellspring.TrialActivation", player))
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword"), player))
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "InnerWellspring.DrainRoom", [15], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "InnerWellspring.DrainRoom", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "InnerWellspring.ShortcutLever", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "InnerWellspring.ShortcutLever", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", "", [15], [], [], []))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", "", [15], [], [], []))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has_all(("Grapple", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.EntranceDoor", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.ShortcutLever", "InnerWellspring.WestDoor", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.ThornShardArea", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.EntranceDoor", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Sword"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Dash", "Glide"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Dash", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Water", "Dash"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Water", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [['Grenade', 4]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaEntrance", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaEntrance", player), lambda s: s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaEntrance", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaEntrance", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEntrance") and s.has_any(("Dash", "Bash", "Glide"), player))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEntrance") and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Water", "TripleJump", "Dash", "Bash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "InnerWellspring.DrainAreaEX", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Bash", player) and s.has_any(("Water", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "InnerWellspring.DrainAreaEX", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "InnerWellspring.DrainAreaEX", [], [['Grenade', 1]], [], [[2, 20]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Water", "WaterDash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEX") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEX") and s.has_all(("DoubleJump", "Dash", "Sword"), player))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEX") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", "InnerWellspring.DrainAreaExit", [], [], [[10, 'Wall']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and s.has("Grapple", player))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoomCenter", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Sword", player) and s.has("Grapple", player))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoomCenter", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and s.has_any(("Grapple", "Glide", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoomCenter", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoomCenter", [], [['Grenade', 1]], [], [[2, 15]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Glide", player) and s.has("Water", player))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoom", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Water", "Sword"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Water", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoom", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Water", "Grapple", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoom", [15], [], [], []))
    add_rule(world.get_location("InnerWellspring.DrainRoomTopWheel", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoomCenter") and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has_any(("DoubleJump", "Dash", "Sword"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", "InnerWellspring.DrainRoom", [20], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Hammer", "Water"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", "InnerWellspring.DrainRoom", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoomTop", player), lambda s: s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoomTop", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", "InnerWellspring.DrainRoomTop", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.LaserOre", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoomTop") and s.has_any(("DoubleJump", "Dash", "Sword"), player))
    add_rule(world.get_location("InnerWellspring.LaserOre", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoomTop") and s.has("Glide", player) and s.has("Bash", player))
    add_rule(world.get_location("InnerWellspring.LaserOre", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoomTop") and s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", "", [], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", "InnerWellspring.BelowDrainLever", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", "InnerWellspring.BelowDrainLever", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Grapple"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", "InnerWellspring.BelowDrainLever", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainRoomTopWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", "InnerWellspring.BelowDrainLever", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.DrainLever", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has("InnerWellspring.UpperCorruption", player))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has_all(("DoubleJump", "Bash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has("InnerWellspring.UpperCorruption", player))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has("Bash", player) and s.has("InnerWellspring.UpperCorruption", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has("InnerWellspring.UpperCorruption", player) and s.has("Grapple", player))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.AbovePole", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.AbovePole", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "InnerWellspring.WestDoor", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "InnerWellspring.WestDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.DrainRoomTop", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.AbovePole_to_InnerWellspring.BelowDrainLever", player), lambda s: True)
    add_rule(world.get_location("InnerWellspring.MiddleDoorsOpen", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.MiddleDoorsOpen", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.LupoMap", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("Grapple", player) and s.has("SpiritLight", player))
    add_rule(world.get_location("InnerWellspring.GrappleTreeEX", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.GrappleTreeEX", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.GrappleTreeEX", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has_all(("Grapple", "Dash"), player))
    add_rule(world.get_location("InnerWellspring.GrappleTree", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has_any(("Bash", "Sword", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.SpinArena", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", "", [], [], [[24, 'Combat', 24, 'Combat'], [32, 'Combat', 32, 'Combat', 32, 'Combat'], [40, 'Combat']], []))
    add_rule(world.get_location("InnerWellspring.SpinningRoomOpen", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and s.has("InnerWellspring.SpinArena", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_location("InnerWellspring.AboveSpinArenaEX", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and s.has("Grapple", player) and s.has("Sword", player))
    add_rule(world.get_location("InnerWellspring.AboveSpinArenaEX", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", "", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", "InnerWellspring.TopSecondRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("Grapple", "Launch"), player))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.SpinPuzzle") and s.has("Grapple", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("Water", player) and s.has("InnerWellspring.SpinPuzzleSolved", player))
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.EastDoor", player), lambda s: s.has("DoubleJump", player) and s.has("InnerWellspring.SpinningRoomOpen", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Grapple", player) and s.has("Bash", player))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", "InnerWellspring.SpinPuzzle", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Water", "Grapple"), player) and cost_all(s, player, options, "InnerWellspring.GrappleThroughZigZagSpikes", "InnerWellspring.TopSecondRoom", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.GrappleThroughZigZagSpikes", "InnerWellspring.TopSecondRoom", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Water", "WaterDash", "Launch", "DoubleJump"), player))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("Glide", player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Glide", player) and s.has("Bash", player))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("Combat.Dangerous", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [[40, 'Combat']], []))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [[40, 'Combat']], [[2, 20]]))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("Bash", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Combat.Dangerous", player) and s.has("Sword", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [[40, 'Combat']], []))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [[40, 'Combat']], [[2, 20]]))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Bash", player) and s.has("Sword", player))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Water", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player) and s.has("Bash", player))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Water", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Water", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and s.has("Bash", player))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Water", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword"), player) and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [20], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [20], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Launch", player) and s.has("Grapple", player))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.BlueMoonSeed", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.AboveTpEX", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "InnerWellspring.Teleporter", "InnerWellspring.EscapeSequence", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has_all(("Grapple", "DoubleJump", "Dash"), player))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has_all(("Bash", "Grapple"), player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has("Launch", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has("Launch", player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", "", [], [], [], [[2, 15]]))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.ShriekMeet") and s.has("Launch", player))
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_WoodsEntry.FirstMud", player), lambda s: s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_WoodsEntry.FirstMud", player), lambda s: True)
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Water", "Bash"), player) and cost_all(s, player, options, "WoodsEntry.ShriekMeet", "EastHollow.Kwolok", [10], [], [], []))
    add_rule(world.get_location("WoodsEntry.MudPitEX", player), lambda s: s.can_reach_region("WoodsEntry.FirstMud") and s.has("Bash", player) and cost_all(s, player, options, "WoodsEntry.FirstMud", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.ShriekMeet", player), lambda s: True)
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.FirstMud", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has_all(("Grapple", "Sword"), player))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has_all(("Grapple", "Hammer", "Bash"), player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.Teleporter", [15], [], [], []))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player) and s.has("Sword", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.Teleporter", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.Teleporter", [], [['Grenade', 1]], [], [[2, 15]]))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.TwoKeystoneRoom", [], [], [[1, 'Combat', 1, 'Combat']], []))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has_all(("Glide", "Dash"), player))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "WoodsEntry.Teleporter", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WoodsEntry.Teleporter", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.ShriekMeet", player), lambda s: True)
    add_rule(world.get_location("WoodsEntry.LowerKS", player), lambda s: s.can_reach_region("WoodsEntry.TwoKeystoneRoom") and s.has_any(("Launch", "Sword", "Hammer"), player))
    add_rule(world.get_location("WoodsEntry.UpperKS", player), lambda s: s.can_reach_region("WoodsEntry.TwoKeystoneRoom") and s.has_all(("Hammer", "Dash"), player))
    add_rule(world.get_location("WoodsEntry.UpperKS", player), lambda s: s.can_reach_region("WoodsEntry.TwoKeystoneRoom") and s.has("Bash", player) and cost_all(s, player, options, "WoodsEntry.TwoKeystoneRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Regenerate", player) and can_keystones(s, player) and cost_all(s, player, options, "WoodsEntry.TwoKeystoneRoom", "WoodsMain.AfterKuMeet", [10], [], [], []))
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_location("WoodsEntry.KeystoneDoor", player), lambda s: s.can_reach_region("WoodsMain.AfterKuMeet") and can_keystones(s, player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", "", [10], [], [], []))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", "WoodsMain.BelowFourKeystoneRoom", [], [], [[40, 'Ranged']], []))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("Regenerate", player) and can_keystones(s, player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", "WoodsEntry.TwoKeystoneRoom", [10], [], [], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Flap", "Glide"), player))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Bash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.WallOreLedge", [], [], [[1, 'Combat', 1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.WallOreLedge", [], [], [[1, 'Combat', 1, 'Combat']], [[2, 15]]))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.WallOreLedge", [20], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.WallOreLedge", [20], [], [], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.AfterKuMeet", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WoodsMain.BelowKeystonesEX", player), lambda s: s.can_reach_region("WoodsMain.WallOreLedge") and s.has("Glide", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.WallOreLedge") and s.has("Launch", player))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.WallOreLedge") and s.has_all(("Glide", "Bash"), player))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.WallOreLedge") and s.has_all(("Glide", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.WallOreLedge") and s.has_all(("Glide", "Dash", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WoodsMain.WallOreLedge", "WoodsMain.FourKeystoneRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Glide", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Flap", player) and s.has("Bash", player))
    add_rule(world.get_location("WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Flap", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [], [[0, [[20, 'Combat', 20, 'Combat', 20, 'Combat']], ['Combat.Aerial']]]))
    add_rule(world.get_location("WoodsMain.RightKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Bash", player))
    add_rule(world.get_location("WoodsMain.RightKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("WoodsMain.UpperKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has_all(("Flap", "Glide"), player))
    add_rule(world.get_location("WoodsMain.UpperKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [[3, 'Wall']], []))
    add_rule(world.get_location("WoodsMain.UpperKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [[3, 'Wall']], []))
    add_rule(world.get_location("WoodsMain.UpperKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [[3, 'Wall']], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("WoodsMain.LeftKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [15], [], [[1, 'Combat']], []))
    add_rule(world.get_location("WoodsMain.LeftKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Launch", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [[1, 'Combat']], []))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and s.has_any(("DoubleJump", "Dash", "Sword"), player))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has_all(("Hammer", "Bash"), player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player))
    add_rule(world.get_location("WoodsMain.BelowKeystonesEX", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Launch", player))
    add_rule(world.get_location("WoodsMain.BelowKeystonesEX", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WoodsMain.BehindDoorRoofEX", player), lambda s: s.can_reach_region("WoodsMain.GiantSkull") and s.has_all(("DoubleJump", "Glide"), player) and s.has_any(("TripleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", "", [], [], [[1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has_all(("Bash", "Sword"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", "WoodsMain.BalloonLure", [], [], [[1, 'Combat']], []))
    add_rule(world.get_location("WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.BalloonLure") and s.has("Launch", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "", [], [], [[3, 'Wall']], []))
    add_rule(world.get_location("WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.can_reach_region("WoodsMain.BalloonLure") and s.has_all(("Flap", "Launch"), player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("Launch", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword"), player))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("WoodsMain.HiddenOre", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and s.has_all(("DoubleJump", "Bash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "", [15], [], [], []))
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.PetrifiedHowl", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.AboveHowl", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.AboveHowl", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.PetrifiedHowl", "WoodsMain.AboveHowl", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BrokenOwl", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WoodsMain.PetrifiedHowl", "WoodsMain.BrokenOwl", [10], [], [[3, 'Wall']], []))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BrokenOwl", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.PetrifiedHowl", "WoodsMain.BrokenOwl", [15], [], [[3, 'Wall']], []))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BrokenOwl", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BrokenOwl", player), lambda s: s.has_all(("Dash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.PetrifiedHowl", "WoodsMain.BrokenOwl", [10], [], [], []))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has_any(("DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WoodsMain.BrokenOwl", "WoodsMain.AboveHowl", [15], [], [], []))
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.TrialStart", player), lambda s: s.has_any(("Bash", "Hammer"), player))
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has_all(("DoubleJump", "Bash", "Grapple"), player))
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.AboveHowl", player), lambda s: s.has_all(("Grapple", "Glide"), player))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Bash", "Glide"), player))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "Hammer", "Burrow"), player) and cost_all(s, player, options, "WoodsMain.MidwayTrial", "WoodsMain.TrialEnd", [15], [], [], []))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has_all(("DoubleJump", "Bash", "Burrow"), player) and s.has_any(("TripleJump", "Sword"), player))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has_all(("DoubleJump", "Bash", "Burrow", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.MidwayTrial", "WoodsMain.TrialEnd", [15], [], [], []))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "WoodsMain.MidwayTrial", "WoodsMain.TrialEnd", [15], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.BeforeLog", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.OrangeTree", player), lambda s: s.has_all(("Burrow", "Glide"), player))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.OrangeTree", player), lambda s: s.has_all(("Burrow", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.AboveHowl", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialStart", player), lambda s: s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("WoodsMain.OverflowShard", player), lambda s: s.can_reach_region("WoodsMain.TrialEnd") and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.MidwayTrial", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.AboveHowl", player), lambda s: s.has_any(("DoubleJump", "Bash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.BeforeLog", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OrangeTree", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OrangeTree", player), lambda s: s.has_all(("Burrow", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("DoubleJump", player) and s.has("Dash", player))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.AboveHowl", "WoodsMain.BeforeLog", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player) and s.has("Dash", player) and cost_all(s, player, options, "WoodsMain.AboveHowl", "WoodsMain.BeforeLog", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.AboveHowl", "WoodsMain.BeforeLog", [], [['Grenade', 1]], [], [[2, 20]]))
    add_rule(world.get_location("C.WoodsMain.BeforeLog", player), lambda s: s.can_reach_region("WoodsMain.BeforeLog") and s.has("Dash", player))
    add_rule(world.get_location("C.WoodsMain.BeforeLog", player), lambda s: s.can_reach_region("WoodsMain.BeforeLog") and cost_all(s, player, options, "WoodsMain.BeforeLog", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("WoodsMain.LogBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.BeforeLog") and cost_all(s, player, options, "WoodsMain.BeforeLog", "", [], [], [[3, 'Wall']], []))
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.Teleporter", player), lambda s: s.has("WoodsMain.LogBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BeforeLog", "WoodsMain.Teleporter", [], [], [], [[0, [[1, 'Combat']], []], [2, 20]]))
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.OrangeTree", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.OrangeTree", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.BeforeLog", "WoodsMain.OrangeTree", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WoodsMain.LogBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.Teleporter") and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WoodsMain.LogBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.Teleporter") and cost_all(s, player, options, "WoodsMain.Teleporter", "", [], [], [], [[1, 'Grenade', 1], [1, 'Blaze', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WoodsMain.Teleporter", "WoodsMain.AbovePit", [15], [], [], []))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("DoubleJump", player) and s.has("WoodsMain.LogBlobDestroyed", player) and s.has_any(("Hammer", "Sword", "TripleJump"), player) and cost_all(s, player, options, "WoodsMain.Teleporter", "WoodsMain.BeforeLog", [], [], [[1, 'Combat', 1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("WoodsMain.LogBlobDestroyed", player))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player) and s.has("WoodsMain.LogBlobDestroyed", player) and s.has("Dash", player) and cost_all(s, player, options, "WoodsMain.Teleporter", "WoodsMain.BeforeLog", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player) and s.has("WoodsMain.LogBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.Teleporter", "WoodsMain.BeforeLog", [], [['Grenade', 1]], [], [[0, [[1, 'Combat', 1, 'Combat']], []]]))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("Launch", player) and s.has("WoodsMain.LogBlobDestroyed", player))
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.AbovePit", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.AbovePit", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.BeforeLog", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.OrangeTree", "WoodsMain.BeforeLog", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.Teleporter", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Launch", "Sword"), player))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.Teleporter", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "TripleJump"), player))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.AbovePit", "WoodsMain.OrangeTree", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WoodsMain.AbovePit", "WoodsMain.OrangeTree", [15], [], [], []))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: s.has("Dash", player) and s.has_any(("Bash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsShrine", player), lambda s: s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.AbovePit", "WoodsShrine", [15], [], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsShrine", player), lambda s: s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "WoodsShrine", [15], [], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Launch"), player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Glide", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Glide", "Grapple"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Bash", "Grapple"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "LowerWastes.WestTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Bash", "Dash"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "LowerWastes.WestTP", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Glide", "Bash", "Dash"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "LowerWastes.WestTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump"), player) and s.has("WindtornRuins.Seir", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "LowerWastes.WestTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "WoodsMain.AbovePit", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has_all(("DoubleJump", "Dash"), player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has_all(("Bash", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "LowerReach.Entry", "LowerReach.AboveEntry", [20], [], [], []))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Dash", player) and s.has("LowerReach.ThawBaurFurnace", player))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Bash", player) and s.has("LowerReach.ThawBaurFurnace", player) and s.has_any(("Dash", "DoubleJump", "Glide"), player))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("LowerReach.AboveBaurUpperEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Launch", player))
    add_rule(world.get_location("LowerReach.AboveBaurUpperEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has_all(("DoubleJump", "Bash"), player) and s.has("LowerReach.ThawBaurFurnace", player))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Icefall", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("LowerReach.Lever", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("DoubleJump", player) and s.has("LowerReach.Lever", player) and s.has_any(("TripleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("LowerReach.Lever", player))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Grapple", player) and s.has("Combat.Aerial", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Grenade', 1]], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.Icefall", "", [10], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Launch", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Bash", player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("DoubleJump", "Dash", "Grapple", "Glide"), player))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.Icefall", "", [10], [], [], []))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Water", "WaterDash", "DoubleJump"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Water", "Launch"), player) and s.has("LowerReach.LeftFurnace", player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("DoubleJump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("TripleJump", player) and s.has("Water", player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("DoubleJump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "Dash"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("TripleJump", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "WaterDash"), player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "Grapple"), player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [10], [], [], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Launch", player) and s.has("LowerReach.LeftFurnace", player))
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.AboveEntry", player), lambda s: s.has("Dash", player))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("DoubleJump", player) and s.has("LowerReach.Lever", player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("DoubleJump", player) and s.has("SpiritLight", player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("Bash", player) and s.has("SpiritLight", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Grenade', 2], ['Spear', 1]], [], []))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("DoubleJump", player) and s.has("LowerReach.Lever", player) and s.has("TripleJump", player) and s.has("Hammer", player))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("DoubleJump", player) and s.has("LowerReach.Lever", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [['Grenade', 1], ['Spear', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [['Grenade', 1], ['Spear', 1]], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [['Grenade', 1]], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [['Grenade', 2]], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("LowerReach.Lever", player) and s.has("TripleJump", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("LowerReach.Lever", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("DoubleJump", player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has("LowerReach.Lever", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.Entry", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveEntry", player), lambda s: s.has_all(("DoubleJump", "Dash", "Sword"), player) and s.has("LowerReach.Lever", player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("SpiritLight", player))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("Glide", player))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("DoubleJump", player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has("Bash", player))
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.CentralEnemyPaths", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has("Bash", player))
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "LowerReach.BelowTokk", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("LowerReach.FreezeCentralFurnace", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash"), player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_location("LowerReach.ThawCentralFurnace", player), lambda s: s.can_reach_region("LowerReach.SecondSoup") and s.has_all(("Flap", "Bash"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "LowerReach.SecondSoup", "", [], [], [[60, 'Combat']], []))
    add_rule(world.get_location("LowerReach.MeltIceEX", player), lambda s: s.can_reach_region("LowerReach.SecondSoup") and s.has_all(("Bash", "Flap"), player))
    add_rule(world.get_location("LowerReach.BurrowEX", player), lambda s: s.can_reach_region("LowerReach.SecondSoup") and s.has("Burrow", player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Dash", "Bash"), player) and s.has("Flap", player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Dash", "Bash"), player) and cost_all(s, player, options, "LowerReach.SecondSoup", "LowerReach.CentralEnemyPaths", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda s: s.can_reach_region("LowerReach.BelowLupo") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.BelowLupo", "", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda s: s.can_reach_region("LowerReach.BelowLupo") and s.has("LowerReach.ThawCentralFurnace", player) and s.has("Sword", player))
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda s: s.can_reach_region("LowerReach.BelowLupo") and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.BelowLupo", "", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.SecondSoup", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.CentralFurnacePedestal", player), lambda s: True)
    add_rule(world.get_location("E.LowerReach.CentralFurnacePedestal", player), lambda s: s.can_reach_region("LowerReach.CentralFurnacePedestal") and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "LowerReach.CentralFurnacePedestal", "", [], [], [[60, 'Combat']], [[1, 'Grenade', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.BelowLupo", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.BelowLupo", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.WindChannel", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.WindChannel", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_location("LowerReach.WindBottomEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has("LowerReach.WindLantern", player) and s.has_any(("DoubleJump", "Hammer"), player))
    add_rule(world.get_location("LowerReach.WindBottomEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has("LowerReach.WindLantern", player) and cost_all(s, player, options, "LowerReach.WindChannel", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has_all(("Launch", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.WindChannel", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has_all(("Launch", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.WindChannel", "", [20], [], [], []))
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.CentralFurnacePedestal", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("Launch", player) and s.has("DoubleJump", player))
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WindChannel", "LowerReach.SoupMoki", [], [], [], [[2, 20]]))
    add_rule(world.get_location("E.LowerReach.SoupMoki", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("E.LowerReach.SoupMoki", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.SoupMoki", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and s.has("DoubleJump", player) and cost_all(s, player, options, "LowerReach.SoupMoki", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and s.has("Glide", player) and s.has_any(("Dash", "Launch"), player))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and s.has("Glide", player) and cost_all(s, player, options, "LowerReach.SoupMoki", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and s.has_any(("Dash", "Sword", "Hammer", "Launch"), player) and cost_all(s, player, options, "LowerReach.SoupMoki", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and s.has_all(("Launch", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindChannel", player), lambda s: s.has_any(("DoubleJump", "Dash", "Launch", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindChannel", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.SoupMoki", "LowerReach.EastEnemyPaths", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.SoupMoki", "LowerReach.EastEnemyPaths", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.East", "LowerReach.SnowballEnemyPaths", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.TPLantern", player), lambda s: s.can_reach_region("LowerReach.Snowball") and cost_all(s, player, options, "LowerReach.Snowball", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.SnowballHC", player), lambda s: s.can_reach_region("LowerReach.Snowball") and s.has("Burrow", player) and s.has("LowerReach.RolledSnowball", player))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Snowball", "LowerReach.EastEnemyPaths", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player) and cost_all(s, player, options, "LowerReach.Snowball", "LowerReach.PastSnowball", [], [], [], [[2, 20]]))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and s.has_all(("Bash", "DoubleJump", "Dash", "Glide"), player) and s.has("LowerReach.FreezeEastFurnace", player) and cost_all(s, player, options, "LowerReach.PastSnowball", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and s.has_all(("Launch", "DoubleJump"), player))
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("DoubleJump", player) and s.has("LowerReach.RolledSnowball", player))
    add_rule(world.get_location("LowerReach.RoofRightEX", player), lambda s: s.can_reach_region("LowerReach.IceCavern") and s.has("Bash", player) and s.has("LowerReach.FreezeEastFurnace", player) and cost_all(s, player, options, "LowerReach.IceCavern", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and cost_all(s, player, options, "LowerReach.IceCavern", "LowerReach.HalfwayIceCavern", [20], [], [], []))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeEastFurnace", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.IceCavern", "LowerReach.HalfwayIceCavern", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeEastFurnace", player) and cost_all(s, player, options, "LowerReach.IceCavern", "LowerReach.HalfwayIceCavern", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("LowerReach.EastDoorLantern", player), lambda s: s.can_reach_region("LowerReach.HalfwayIceCavern") and s.has("DoubleJump", player) and s.has_any(("Sword", "Hammer", "Glide", "Dash", "TripleJump"), player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.SwimmingPool", player), lambda s: s.has_any(("Glide", "DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.SwimmingPool", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeEastFurnace", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "LowerReach.IceCavern", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeEastFurnace", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "LowerReach.IceCavern", [], [['Grenade', 1]], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Launch", player) and s.has("LowerReach.EastDoorLantern", player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("WaterDash", "Water", "DoubleJump"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has_all(("WaterDash", "DoubleJump", "Water"), player) and s.has("LowerReach.ThawEastFurnace", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and s.has("LowerReach.ThawEastFurnace", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.EastFurnace", [20], [], [], []))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.WindSpinners", player), lambda s: s.has("Launch", player) and s.has("LowerReach.ArenaBeaten", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.WindSpinners", player), lambda s: s.has("Launch", player) and s.has("LowerReach.ArenaBeaten", player) and cost_all(s, player, options, "LowerReach.ArenaArea", "LowerReach.WindSpinners", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has_all(("DoubleJump", "Glide"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has_all(("DoubleJump", "Dash", "Glide", "Sword"), player) and s.has("LowerReach.EastDoorLantern", player))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has("LowerReach.EastDoorLantern", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.ArenaArea", "LowerReach.SwimmingPool", [20], [], [], []))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has_all(("WaterDash", "Hammer"), player) and s.has("LowerReach.EastDoorLantern", player) and cost_all(s, player, options, "LowerReach.ArenaArea", "LowerReach.SwimmingPool", [20], [], [], []))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has("Launch", player) and s.has("LowerReach.EastDoorLantern", player))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "Bash"), player) and cost_all(s, player, options, "LowerReach.WindSpinners", "LowerReach.WispPathCheckpoint", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.WindSpinners", "LowerReach.WispPathCheckpoint", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.ArenaArea", player), lambda s: s.has("LowerReach.ArenaBeaten", player))
    add_rule(world.get_location("H.LowerReach.WispPathCheckpoint", player), lambda s: s.can_reach_region("LowerReach.WispPathCheckpoint") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_location("E.LowerReach.WispPathCheckpoint", player), lambda s: s.can_reach_region("LowerReach.WispPathCheckpoint") and s.has("Grapple", player) and s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_location("E.LowerReach.WispPathCheckpoint", player), lambda s: s.can_reach_region("LowerReach.WispPathCheckpoint") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Launch", player) and s.has("Bash", player))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", "LowerReach.BridgeWispPath", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.WindSpinners", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", "LowerReach.WindSpinners", [20], [], [], []))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Glide", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", "LowerReach.SnowEscape", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.WispPathCheckpoint", player), lambda s: True)
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has("Launch", player) and s.has_any(("Water", "Glide"), player))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has("Launch", player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Dash", "Glide", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Dash", "Glide", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Dash", "Glide", "Grapple"), player))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has("Launch", player) and s.has_any(("Water", "Glide"), player))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has("Launch", player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Dash", "Glide", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Dash", "Glide", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Dash", "Glide", "Grapple"), player))
    add_rule(world.get_entrance("LowerReach.VeralHome_to_GladesTown.HoleHut", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Glide", "Dash", "Sword"), player))
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.TownEntry", "LowerReach.TrialStart", [20], [], [], []))
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "LowerReach.TownEntry", "LowerReach.TrialStart", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.RightKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("Launch", player))
    add_rule(world.get_location("LowerReach.RightKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has_any(("Sword", "Dash", "DoubleJump", "Launch"), player) and cost_all(s, player, options, "LowerReach.TrialStart", "LowerReach.TownEntry", [20], [], [], []))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Dash", "DoubleJump", "Launch"), player) and cost_all(s, player, options, "LowerReach.TrialStart", "LowerReach.TownEntry", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "Hammer", "Dash", "DoubleJump"), player))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Sword", "Hammer", "Dash", "TripleJump"), player))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has("Launch", player))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "DoubleJump", "Dash", "Glide"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has("Launch", player))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "DoubleJump", "Dash", "Glide"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperReach.ThawFurnace", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has_all(("Flap", "Bash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has("WaterDash", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "", [20], [], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Grapple"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has_any(("Water", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Dash", "Grapple", "Glide"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [], [[60, 'Combat']], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Dash", "Grapple", "Glide", "Bash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Dash", "Grapple", "Glide", "Bash"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Water", "Dash", "Grapple"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [], [[60, 'Combat']], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Water", "Dash", "Grapple", "Bash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Water", "WaterDash", "Dash", "Grapple", "Sword"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Water", "WaterDash", "Dash", "Grapple", "Glide", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Dash", "Grapple"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [20], [], [[60, 'Combat']], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Dash", "Grapple", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [20], [], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("Water", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Grenade', 1]], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Water", "Bash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Water", "WaterDash", "Glide"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Water", "WaterDash", "Grapple", "Sword"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "WaterDash", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [20], [], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "WaterDash", "Grapple", "Sword"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [20], [], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupFrozen", player), lambda s: s.has("UpperReach.FreezeFurnace", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("Water", "WaterDash"), player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("WaterDash", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.OutsideTreeRoom", [20], [], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("WaterDash", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.OutsideTreeRoom", [20], [], [], [[0, [[60, 'Combat']], ['Combat.Dangerous', 'Combat.Shielded']]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("DoubleJump", player) and s.has("UpperReach.ThawFurnace", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("DoubleJump", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.OutsideTreeRoom", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("UpperReach.ThawFurnace", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.OutsideTreeRoom", [20], [], [[60, 'Combat']], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Bash", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.OutsideTreeRoom", [20], [], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("UpperReach.ThawFurnace", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("Bash", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.OutsideTreeRoom", [], [], [], [[0, [[60, 'Combat']], ['Combat.Dangerous', 'Combat.Shielded']]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Grapple", player) and s.has("UpperReach.ThawFurnace", player) and s.has("Bash", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.OutsideTreeRoom", [20], [], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Grapple", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.OutsideTreeRoom", [20], [], [], [[0, [[60, 'Combat']], ['Combat.Dangerous', 'Combat.Shielded']]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("UpperReach.ThawFurnace", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "WaterDash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("Water", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "WaterDash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.KeystoneSnapPlantThawed", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Water", "WaterDash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Dash", "Sword"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Water", "WaterDash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.KeystoneSnapPlantThawed", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "WaterDash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.KeystoneSnapPlantThawed", [20], [], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.KeystoneSnapPlantThawed", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.KeystoneSnapPlantThawed", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.KeystoneSnapPlantThawed", [], [['Grenade', 1]], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlant", "UpperReach.UpperSoup", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlant", "UpperReach.UpperSoup", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlant", "UpperReach.UpperSoup", [20], [], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawed", "UpperReach.UpperSoupThawed", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Dash", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawed", "UpperReach.UpperSoupThawed", [], [], [], [[2, 20]]))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneSnapPlantPaths") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths_to_UpperReach.KeystoneRoom", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths_to_UpperReach.KeystoneRoom", player), lambda s: True)
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneSnapPlantThawedPaths") and s.has("Sword", player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneSnapPlantThawedPaths") and s.has("Dash", player) and s.has_any(("Bash", "Grapple"), player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneSnapPlantThawedPaths") and s.has("Dash", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawedPaths", "", [], [], [], [[2, 10]]))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneSnapPlantThawedPaths") and s.has("Hammer", player) and s.has_any(("Bash", "Grapple"), player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneSnapPlantThawedPaths") and s.has("Hammer", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawedPaths", "", [], [], [], [[2, 10]]))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneSnapPlantThawedPaths") and s.has_all(("Dash", "Hammer"), player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneSnapPlantThawedPaths") and s.has("Grapple", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawedPaths", "", [20], [], [], []))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and s.has_all(("DoubleJump", "Glide"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperReach.UpperKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and s.has("Bash", player))
    add_rule(world.get_location("UpperReach.SwingPoleEX", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and s.has_any(("Bash", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", "UpperReach.KeystoneSnapPlant", [20], [], [], []))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupThawedPaths") and s.has("Sword", player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupThawedPaths") and s.has_all(("Dash", "Hammer"), player))
    add_rule(world.get_location("UpperReach.MiddleRightKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupThawedPaths") and s.has_any(("Bash", "Hammer"), player))
    add_rule(world.get_location("E.UpperReach.OutsideTreeRoom", player), lambda s: s.can_reach_region("UpperReach.OutsideTreeRoom") and s.has("Grapple", player) and s.has("UpperReach.ThawFurnace", player) and s.has("BreakCrystal", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("E.UpperReach.OutsideTreeRoom", player), lambda s: s.can_reach_region("UpperReach.OutsideTreeRoom") and s.has("DoubleJump", player) and s.has("UpperReach.ThawFurnace", player) and s.has("BreakCrystal", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_location("E.UpperReach.OutsideTreeRoom", player), lambda s: s.can_reach_region("UpperReach.OutsideTreeRoom") and s.has("Water", player) and s.has("UpperReach.ThawFurnace", player) and s.has("BreakCrystal", player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", "", [], [], [], [[1, 'Bow', 0], [1, 'Spear', 0]]))
    add_rule(world.get_location("E.UpperReach.OutsideTreeRoom", player), lambda s: s.can_reach_region("UpperReach.OutsideTreeRoom") and s.has_all(("Water", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("BreakCrystal", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("UpperReach.ThawFurnace", player))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("DoubleJump", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", "UpperReach.UpperSoupThawed", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Bash", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", "UpperReach.UpperSoupThawed", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoomLedge") and s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoomLedge") and s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoomLedge") and s.has_all(("Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoomLedge") and s.has("Launch", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoomLedge") and s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoom") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperReach.TreeRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperReach.TreeRoom", "UpperReach.TreeRoomLedge", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperDepths.EntrySpikesEX", player), lambda s: s.can_reach_region("UpperDepths.Entry") and cost_all(s, player, options, "UpperDepths.Entry", "", [10], [], [], []))
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Glide", player) and s.has("Bash", player))
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "UpperDepths.Entry", "UpperDepths.FirstFirefly", [], [], [], [[0, [[32, 'Ranged']], ['Combat.Bat', 'Combat.Aerial']]]))
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "UpperDepths.Entry", "UpperDepths.FirstFirefly", [30], [], [[1, 'Ranged', 1, 'Ranged']], []))
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has("Launch", player) and s.has("EastHollow.DepthsOpen", player) and s.has("DoubleJump", player))
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has("Launch", player) and s.has("EastHollow.DepthsOpen", player) and cost_all(s, player, options, "UpperDepths.Entry", "EastHollow.AboveDepths", [], [], [], [[2, 10]]))
    add_rule(world.get_location("UpperDepths.EntryRoofEX", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("Bash", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperDepths.EntryRoofEX", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("TripleJump", "Glide"), player))
    add_rule(world.get_location("UpperDepths.EntryOre", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has_all(("Grapple", "DoubleJump"), player))
    add_rule(world.get_location("UpperDepths.EntryOre", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("Bash", player))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [], [[1, 'Wall']], []))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [], [[1, 'Wall']], []))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [], [], [[1, 'Bow', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.Entry", player), lambda s: s.has_all(("Glide", "Bash"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "UpperDepths.Entry", [], [], [], [[0, [[1, 'Ranged']], []], [2, 10]]))
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.Entry", player), lambda s: s.has("Glide", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "UpperDepths.Entry", [], [], [[1, 'Ranged'], [32, 'Ranged']], []))
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.Entry", player), lambda s: s.has("Glide", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "UpperDepths.Entry", [10], [], [[32, 'Ranged']], []))
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.Entry", player), lambda s: s.has_all(("Launch", "DoubleJump", "Dash", "Bash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "UpperDepths.Entry", [30], [], [], []))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda s: s.can_reach_region("UpperDepths.FirstKSRoom") and s.has("DepthsLight", player))
    add_rule(world.get_location("UpperDepths.SwimEC", player), lambda s: s.can_reach_region("UpperDepths.FirstKSRoom") and s.has("Water", player) and s.has("UpperDepths.ForestsEyes", player))
    add_rule(world.get_location("UpperDepths.SwimEC", player), lambda s: s.can_reach_region("UpperDepths.FirstKSRoom") and s.has("Water", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "", [], [], [], [[1, 'Flash', 1]]))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Grapple", player) and s.has("DoubleJump", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "UpperDepths.FirstFirefly", [], [], [[12, 'Combat']], []))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "UpperDepths.FirstFirefly", [], [], [[12, 'Combat']], [[2, 30]]))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has("DoubleJump", player))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "UpperDepths.FirstFirefly", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "UpperDepths.FirstFirefly", [30], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "UpperDepths.KeydoorLedge", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.RightKeystonePath", player), lambda s: s.has("Glide", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("UpperDepths.LightPuzzle", player), lambda s: s.can_reach_region("UpperDepths.KeydoorLedge") and s.has_all(("DoubleJump", "Grapple"), player) and can_keystones(s, player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", "", [], [], [[16, 'Wall'], [16, 'Wall'], [12, 'Combat'], [32, 'Combat']], []))
    add_rule(world.get_location("UpperDepths.LightPuzzle", player), lambda s: s.can_reach_region("UpperDepths.KeydoorLedge") and s.has_all(("Bash", "DoubleJump"), player) and can_keystones(s, player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", "", [], [], [[16, 'Wall'], [16, 'Wall']], []))
    add_rule(world.get_location("UpperDepths.LightPuzzle", player), lambda s: s.can_reach_region("UpperDepths.KeydoorLedge") and s.has_all(("Bash", "DoubleJump"), player) and can_keystones(s, player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", "", [30], [], [[16, 'Wall'], [16, 'Wall']], []))
    add_rule(world.get_location("UpperDepths.LightPuzzle", player), lambda s: s.can_reach_region("UpperDepths.KeydoorLedge") and s.has("Bash", player) and can_keystones(s, player) and s.has("Combat.Dangerous", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", "", [], [['Grenade', 2]], [[16, 'Wall'], [16, 'Wall'], [12, 'Combat'], [32, 'Combat']], []))
    add_rule(world.get_location("UpperDepths.LightPuzzle", player), lambda s: s.can_reach_region("UpperDepths.KeydoorLedge") and s.has("Launch", player) and can_keystones(s, player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", "", [], [], [[16, 'Wall'], [16, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.FirstKSRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.FirstKSRoom", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda s: s.has_all(("Grapple", "Sword"), player))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: s.has("Bash", player) and can_keystones(s, player) and s.has("UpperDepths.LightPuzzle", player))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: can_keystones(s, player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", "UpperDepths.BelowHive", [30], [], [], []))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: can_keystones(s, player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", "UpperDepths.BelowHive", [], [], [[32, 'Ranged']], []))
    add_rule(world.get_location("UpperDepths.RightEntryKS", player), lambda s: s.can_reach_region("UpperDepths.RightKeystonePath") and s.has("Grapple", player))
    add_rule(world.get_location("UpperDepths.RightEntryKS", player), lambda s: s.can_reach_region("UpperDepths.RightKeystonePath") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperDepths.RightEntryKS", player), lambda s: s.can_reach_region("UpperDepths.RightKeystonePath") and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_location("UpperDepths.RightEntryKS", player), lambda s: s.can_reach_region("UpperDepths.RightKeystonePath") and s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.RightKeystonePath", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda s: s.has("Grapple", player) and s.has("Dash", player))
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.RightKeystonePath", "UpperDepths.FirstKSRoom", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("F.UpperDepths.BelowHive", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "", [], [], [[1, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Shuriken', 0], [1, 'Grenade', 0]]))
    add_rule(world.get_location("F.UpperDepths.BelowHive", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "", [], [], [[1, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Shuriken', 0], [1, 'Grenade', 0]]))
    add_rule(world.get_location("F.UpperDepths.BelowHive", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "UpperDepths.BelowHive", "", [30], [], [], []))
    add_rule(world.get_location("UpperDepths.EntryKeystoneDoor", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and can_keystones(s, player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("UpperDepths.EntryKeystoneDoor", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and can_keystones(s, player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "", [], [], [], [[2, 30]]))
    add_rule(world.get_location("UpperDepths.EntryKeystoneDoor", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has_all(("Dash", "Launch"), player) and can_keystones(s, player))
    add_rule(world.get_location("UpperDepths.HiveEX", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "", [], [], [[25, 'Combat']], []))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.KeydoorLedge", player), lambda s: can_keystones(s, player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.KeydoorLedge", player), lambda s: can_keystones(s, player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "UpperDepths.KeydoorLedge", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.KeydoorLedge", player), lambda s: s.has_all(("Dash", "Launch"), player) and can_keystones(s, player))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Teleporter", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Teleporter", player), lambda s: s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "UpperDepths.BelowHive", "UpperDepths.Teleporter", [30], [], [], []))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Central", player), lambda s: s.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda s: s.has("Dash", player) and s.has("Launch", player))
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperDepths.Teleporter", "UpperDepths.BelowHive", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.Central", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.SecondKSRoom", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperDepths.Central", "UpperDepths.BelowHive", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.Central", "UpperDepths.BelowHive", [], [['Grenade', 1]], [], [[2, 10]]))
    add_rule(world.get_location("UpperDepths.RightHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom"))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has("DepthsLight", player))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has_all(("Dash", "Glide"), player) and s.has("DepthsLight", player))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has_all(("Dash", "Glide"), player))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("Sword", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("Launch", player))
    add_rule(world.get_location("UpperDepths.KeystoneHC", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", "", [], [], [[1, 'Wall']], []))
    add_rule(world.get_location("UpperDepths.KeystoneHC", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("DoubleJump", player) and s.has("DepthsLight", player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperDepths.KeystoneHC", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has_all(("Dash", "Launch"), player))
    add_rule(world.get_location("UpperDepths.BossPathEX", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("Launch", player))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.Central", player), lambda s: s.has_any(("DepthsLight", "Dash", "Bash", "Glide", "Launch", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.Central", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: s.has("DoubleJump", player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: s.has("Dash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", "UpperDepths.MoraPath", [30], [], [], []))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", "UpperDepths.MoraPath", [30], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", "UpperDepths.MoraPath", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.MoraPath") and s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.MoraPath") and s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "", [], [], [], [[2, 30]]))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.MoraPath") and s.has("Grapple", player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", "", [], [], [[12, 'Combat', 12, 'Combat', 12, 'Combat']], []))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.MoraPath") and s.has("Grapple", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "", [], [], [[12, 'Combat', 12, 'Combat', 12, 'Combat']], [[2, 30]]))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.MoraPath") and s.has_all(("DoubleJump", "Dash", "Bash", "Grapple"), player))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.MoraPath") and s.has("Launch", player))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("DepthsLight", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.OutsideMoraFight", [30], [], [], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("DoubleJump", player) and s.has("DepthsLight", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.OutsideMoraFight", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.OutsideMoraFight", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.OutsideMoraFight", [], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.BelowHive", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.BelowHive", [], [], [[20, 'Wall']], [[2, 30]]))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.BelowHive", [], [['Grenade', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.BelowHive", [], [['Grenade', 1]], [[20, 'Wall']], [[2, 30]]))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.BelowHive", [], [], [[20, 'Wall'], [12, 'Combat', 12, 'Combat', 12, 'Combat']], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.BelowHive", [], [], [[20, 'Wall'], [12, 'Combat', 12, 'Combat', 12, 'Combat']], [[2, 30]]))
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.Teleporter", player), lambda s: s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "UpperDepths.OutsideMoraFight", "UpperDepths.Teleporter", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.MoraPath", player), lambda s: True)
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Grapple", "Dash"), player))
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Launch"), player))
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerDepths.BelowDoorOre", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection"))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and s.has("Sword", player))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and s.has("Hammer", player) and s.has("DoubleJump", player))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and s.has("Hammer", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "", [], [], [], [[2, 30]]))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and s.has("Dash", player) and s.has("DepthsLight", player))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and s.has("Dash", player))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and s.has("DoubleJump", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "", [], [], [[1, 'Wall']], []))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and cost_all(s, player, options, "UpperDepths.LowerConnection", "", [], [], [[1, 'Wall']], [[2, 30]]))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and s.has("DepthsLight", player) and s.has("DoubleJump", player))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "UpperDepths.BelowHive", [10], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "UpperDepths.BelowHive", [10], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "UpperDepths.BelowHive", [10], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "UpperDepths.BelowHive", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "Sword"), player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "Dash"), player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "Dash"), player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has("Regenerate", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.West", [30], [], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has("Regenerate", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.West", [30], [], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.Central", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Dash"), player) and s.has_any(("TripleJump", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.Central", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.Central", [], [], [[1, 'Wall']], [[2, 30]]))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has_any(("Dash", "Bash", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.Central", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.Central", [], [], [[1, 'Wall']], [[2, 30]]))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Glide"), player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has("Regenerate", player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Sword"), player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.Central", [30], [], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Dash", "Hammer"), player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Dash", "Sword"), player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.Central", [], [], [], [[2, 30]]))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("Dash", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("DoubleJump", player) and s.has("BreakCrystal", player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("Dash", player) and s.has("BreakCrystal", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("BreakCrystal", player) and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has_all(("Water", "WaterDash"), player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("LowerDepths.SwimEC", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("Water", player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "LowerDepths.West", "", [10], [], [], []))
    add_rule(world.get_location("LowerDepths.SwimEC", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("Water", player) and cost_all(s, player, options, "LowerDepths.West", "", [10], [], [], [[1, 'Flash', 0]]))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.West", "", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("UpperDepths.ForestsEyes", player))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [], [[1, 'Flash', 0]]))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "Bash", "Dash"), player) and s.has("UpperDepths.ForestsEyes", player))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "Bash", "Dash"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [], [[1, 'Flash', 0]]))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "Bash"), player) and s.has_any(("DoubleJump", "Glide", "Sword", "Hammer"), player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "Bash"), player) and s.has_any(("DoubleJump", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [['Grenade', 1]], [], [[1, 'Flash', 0]]))
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("DepthsLight", player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.West", "UpperDepths.LowerConnection", [10], [], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has_any(("TripleJump", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("DoubleJump", "Dash", "Glide"), player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [], [], [[1, 'Wall'], [32, 'Ranged']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("TripleJump", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("DoubleJump", "Glide"), player) and s.has("DepthsLight", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [], [], [[32, 'Ranged']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("DepthsLight", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [30], [], [[32, 'Ranged']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [10], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("DoubleJump", player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.Central", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("DoubleJump", player) and s.has("DepthsLight", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerDepths.Central", "LowerDepths.East", [30], [], [], []))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("DepthsLight", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("DoubleJump", player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Glide"), player))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Bash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.Central", "UpperDepths.LowerConnection", [], [], [[12, 'Combat']], []))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.Central", "UpperDepths.LowerConnection", [], [], [[12, 'Combat']], [[2, 30]]))
    add_rule(world.get_location("E.LowerDepths.East", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("BreakCrystal", player) and s.has("Bash", player))
    add_rule(world.get_location("E.LowerDepths.East", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("DoubleJump", player) and s.has("BreakCrystal", player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("DoubleJump", "Grapple"), player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("Launch", "Sword"), player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Grapple", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("DoubleJump", "Dash"), player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and s.has("Glide", player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("DoubleJump", "Dash"), player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.East", "", [], [], [], [[2, 30]]))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("Bash", "DoubleJump"), player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.East", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("Bash", "DoubleJump"), player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.East", "", [], [['Grenade', 1]], [], [[2, 30]]))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "", [30], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("Grapple", "Sword"), player) and s.has("SpiritLight", player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Launch", player) and s.has("SpiritLight", player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("DoubleJump", player) and s.has("SpiritLight", player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("DoubleJump", "Dash"), player) and s.has("SpiritLight", player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("SpiritLight", player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Grapple", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.East", "", [30], [], [], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Grapple", "Dash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Grapple"), player) and s.has("DepthsLight", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [30], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [['Grenade', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [30], [['Grenade', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump"), player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Grapple"), player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Grapple"), player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Glide", "Bash", "Sword"), player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [[2, 30]]))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has("DepthsLight", player) and s.has_any(("TripleJump", "Dash", "Glide", "Bash", "Sword"), player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Glide", "Bash", "Sword"), player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Dash"), player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [[2, 30]]))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has("DepthsLight", player) and s.has_any(("Glide", "Bash", "Sword"), player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Glide"), player) and s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Glide"), player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [[2, 30]]))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Glide"), player) and s.has("DepthsLight", player) and s.has("Bash", player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Glide"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Sword"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [30], [], [], []))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Sword"), player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [30], [], [], []))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Grapple"), player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Glide", "Bash", "Sword"), player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], [[2, 30]]))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Glide", "Bash", "Sword"), player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Dash"), player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], [[2, 30]]))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Glide"), player) and s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Glide"), player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], [[2, 30]]))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Sword"), player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.TreeArea", [30], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has_all(("Bash", "Dash"), player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has_all(("DoubleJump", "Dash", "Glide"), player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.Central", [30], [], [], []))
    add_rule(world.get_location("LowerDepths.TrialActivation", player), lambda s: s.can_reach_region("LowerDepths.BeforeTree") and s.has_all(("DoubleJump", "Bash", "Grapple"), player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.East", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.East", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Sword", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.East", [30], [], [], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Bash", player) and s.has("Sword", player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.East", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "Grapple", "Hammer"), player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_all(("Sword", "Grapple"), player) and s.has("UpperDepths.ForestsEyes", player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_all(("Sword", "Grapple"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.East", [], [], [], [[1, 'Flash', 1]]))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Hammer", player) and s.has_any(("DoubleJump", "Dash"), player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.East", [30], [], [], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Hammer", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.East", [30], [], [], [[1, 'Flash', 1]]))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_any(("DoubleJump", "Dash", "Sword"), player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.East", [30], [], [], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_any(("DoubleJump", "Dash", "Sword"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.East", [30], [], [], [[1, 'Flash', 1]]))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple", "DoubleJump"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple", "Dash"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [30], [], [[1, 'Wall']], []))
    add_rule(world.get_location("LowerDepths.RightEX", player), lambda s: s.can_reach_region("LowerDepths.TreeArea") and s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.TreeArea", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_LowerDepths.BeforeTree", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword"), player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple", "Glide"), player) and s.has("Sword", player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [15], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Bash", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Launch"), player) and s.has("Sword", player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Grapple", player) and s.has("Combat.Aerial", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "PoolsApproach.MillPath", [], [], [[8, 'Combat', 8, 'Combat']], []))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "PoolsApproach.MillPath", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "PoolsApproach.MillPath", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("Bash", player) and s.has_any(("Water", "Glide"), player))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("DoubleJump", player) and s.has("Combat.Dangerous", player) and s.has_any(("Grapple", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "", [], [], [[32, 'Combat'], [1, 'Ranged']], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [], [['Grenade', 2]], [], [[2, 20]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("DoubleJump", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [], [], [[32, 'Combat'], [8, 'Combat']], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("DoubleJump", player) and s.has("Combat.Aerial", player) and s.has("TripleJump", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [], [], [[8, 'Combat', 8, 'Combat']], [[0, [[1, 'Ranged']], []]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("PoolsApproach.WheelFreed", "DoubleJump", "Grapple"), player))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("Water", "Bash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("Water", "WaterDash"), player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [20], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("Water", "Bash", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [20], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("Water", "Launch"), player))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Grapple"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Grapple"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Launch", "DoubleJump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Grapple", "WaterDash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [20], [], [], []))
    add_rule(world.get_location("C.PoolsApproach.OnTopOfWheel", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Water", player) and s.has("DoubleJump", player))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("DoubleJump", "Hammer", "Dash"), player))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "PoolsApproach.WheelFreed"), player))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("DoubleJump", player) and s.has("PoolsApproach.WheelFreed", player))
    add_rule(world.get_location("PoolsApproach.MillPathEC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Water", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Bash", player))
    add_rule(world.get_location("PoolsApproach.MillPathEC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Water", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [], [], [[2, 10]]))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "WaterDash", "Grapple"), player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [20], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("Grapple", player))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Bash", "DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Bash", "DoubleJump", "Glide", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Launch"), player) and s.has_any(("DoubleJump", "Grapple", "Glide"), player))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Launch", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Launch"), player) and s.has_any(("WaterDash", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Grapple", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Grapple", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Sword"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Grapple", "DoubleJump", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "DoubleJump", "Dash"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Launch"), player) and s.has_any(("DoubleJump", "Grapple", "Glide"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Launch", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Launch"), player) and s.has_any(("WaterDash", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Glide", "DoubleJump", "Hammer", "Dash"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Glide", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "DoubleJump"), player) and s.has_any(("Dash", "Sword"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "Hammer"), player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "Dash", "Sword"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Glide", "Dash"), player) and s.has("PoolsApproach.WheelFreed", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Glide"), player) and s.has("PoolsApproach.WheelFreed", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "WaterDash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer", "WaterDash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water", "Bash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MillPath", [10], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water", "WaterDash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Launch", "DoubleJump"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water", "WaterDash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MillPath", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [], [[1, 'Ranged']], []))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("DoubleJump", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [], [[1, 'Ranged']], [[2, 20]]))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("DoubleJump", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [10], [], [], []))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("Dash", player) and s.has("Bash", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [20], [], [], []))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("Dash", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [20], [], [], [[0, [[1, 'Ranged']], []]]))
    add_rule(world.get_location("EastPools.RightOre", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("Launch", player))
    add_rule(world.get_location("EastPools.RightOre", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("DoubleJump", "Grapple", "Flap"), player) and s.has_any(("TripleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [], [[1, 'Ranged']], []))
    add_rule(world.get_location("EastPools.RightOre", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("DoubleJump", "Grapple", "Flap"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [], [[1, 'Ranged']], [[2, 20]]))
    add_rule(world.get_location("EastPools.BelowLeverEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("EastPools.BelowEntryLeverBubble", player))
    add_rule(world.get_location("EastPools.BelowLeverEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Water"), player) and s.has("Hammer", player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [20], [], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Bash", "Launch"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Glide", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Glide", "DoubleJump"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "WaterDash", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [20], [], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Launch", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.BehindEntryDoor") and s.has_all(("Grapple", "Flap"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TokkBubble", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TokkBubble", player), lambda s: True)
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "EastPools.TPArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "EastPools.TPArea", [], [['Grenade', 1]], [], [[2, 20]]))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "EastPools.TPArea", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "EastPools.TPArea", [], [['Grenade', 2]], [], [[2, 20]]))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "EastPools.TPArea", [], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Glide"), player))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.LeverRoom", player), lambda s: s.has("Water", player) and s.has("EastPools.EntryLever", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "EastPools.LeverRoom", [10], [], [], []))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has_all(("Grapple", "Flap"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.TokkBubble", "", [20], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.TokkBubble", "EastPools.TPArea", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has_all(("Flap", "Grapple"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has("Combat.Dangerous", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.TokkBubble", "EastPools.TPArea", [], [], [[32, 'Combat']], []))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has_all(("Flap", "Grapple"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "EastPools.TokkBubble", "EastPools.TPArea", [], [], [[32, 'Combat']], [[2, 20]]))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has_all(("Flap", "Bash", "Grapple"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has_all(("Flap", "Bash", "Grapple"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and cost_all(s, player, options, "EastPools.TokkBubble", "EastPools.TPArea", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Grapple", player))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("DoubleJump", player) and s.has("Combat.Dangerous", player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.TokkBubble", "EastPools.BehindEntryDoor", [], [], [[1, 'Ranged'], [32, 'Combat']], []))
    add_rule(world.get_location("EastPools.LowerWaterDrained", player), lambda s: s.can_reach_region("EastPools.TPArea") and s.has("Water", player))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.TPArea") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.TPArea", "", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.TPArea") and s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.TPArea", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Grapple", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.TPArea", "EastPools.FishingPool", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda s: True)
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.TPArea", "EastPools.BehindEntryDoor", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.TPArea", "EastPools.BehindEntryDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.TokkBubble", player), lambda s: True)
    add_rule(world.get_location("EastPools.UltraBashShard", player), lambda s: s.can_reach_region("EastPools.Teleporter") and s.has_all(("Water", "Bash"), player) and s.has("EastPools.LowerWaterDrained", player))
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and s.has("Sword", player))
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", "EastPools.WaterdashArena", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and s.has("Water", player))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and cost_all(s, player, options, "EastPools.FishingPool", "EastPools.AboveFishingPool", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("WaterDash", "Dash", "Sword"), player) and s.has("Water", player))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("WaterDash", "Dash", "Sword"), player) and cost_all(s, player, options, "EastPools.FishingPool", "EastPools.AboveFishingPool", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "EastPools.FishingPool", "EastPools.AboveFishingPool", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", "UpperPools.DrainPuzzleExit", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("EastPools.UltraBashShard", player), lambda s: s.can_reach_region("EastPools.NextToLupoOre") and s.has_all(("Water", "Bash"), player) and s.has("EastPools.LowerWaterDrained", player))
    add_rule(world.get_location("EastPools.LupoEX", player), lambda s: s.can_reach_region("EastPools.LupoArea") and s.has("Hammer", player))
    add_rule(world.get_location("EastPools.LupoEX", player), lambda s: s.can_reach_region("EastPools.LupoArea") and s.has("WaterDash", player) and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.LupoArea", "", [20], [], [], []))
    add_rule(world.get_location("EastPools.FightArenas", player), lambda s: s.can_reach_region("EastPools.WaterdashArena") and s.has_all(("Regenerate", "Water", "Bash"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "", [20], [], [[32, 'Combat', 32, 'Combat', 32, 'Combat', 32, 'Combat'], [40, 'Ranged'], [20, 'Combat', 20, 'Combat']], []))
    add_rule(world.get_location("EastPools.FightRoomHC", player), lambda s: s.can_reach_region("EastPools.WaterdashArena") and s.has("WaterDash", player) and s.has("EastPools.FightArenas", player) and s.has("Water", player))
    add_rule(world.get_location("EastPools.FightRoomHC", player), lambda s: s.can_reach_region("EastPools.WaterdashArena") and s.has("WaterDash", player) and s.has("EastPools.FightArenas", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "EastPools.Teleporter", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.FightArenas", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.FightArenas", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "EastPools.MissilePuzzle", [], [], [], [[2, 20]]))
    add_rule(world.get_location("EastPools.CentralRoomPurpleWall", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("Water", "Bash"), player))
    add_rule(world.get_location("EastPools.LupoPurpleFloor", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("Water", "Bash"), player))
    add_rule(world.get_location("EastPools.EnergyHarvestShard", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("WaterDash", "DoubleJump"), player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "", [20], [], [], []))
    add_rule(world.get_location("EastPools.EnergyHarvestShard", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("Water", "Bash"), player) and s.has_any(("DoubleJump", "WaterDash"), player))
    add_rule(world.get_location("EastPools.BehindCrusherEX", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has("Water", player))
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.FightArenas", player))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "EastPools.CentralRoom", "", [20], [], [], []))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has_all(("Water", "Bash"), player))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.CentralRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has_all(("DoubleJump", "Glide"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Dash", "Glide"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Bash"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and cost_all(s, player, options, "EastPools.CentralRoom", "UpperPools.KeystoneRoomEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has_any(("DoubleJump", "Dash", "Glide", "EastPools.CentralRoomBubbleFree"), player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash"), player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash"), player) and cost_all(s, player, options, "EastPools.CentralRoom", "WestPools.Teleporter", [], [], [], [[2, 20]]))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "", [], [], [], [[2, 10]]))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has_all(("Water", "Bash", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.CentralRoom", player), lambda s: s.has("Regenerate", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.CentralRoom", player), lambda s: s.has("Regenerate", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "EastPools.CentralRoom", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: True)
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Sword", "UpperPools.KeystoneRoomBubbleFree"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword", "UpperPools.KeystoneRoomBubbleFree"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and s.has("Flap", player) and can_keystones(s, player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda s: s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda s: s.has_all(("Water", "WaterDash", "Bash"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Flap", "DoubleJump"), player) and can_keystones(s, player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Flap", "Grapple"), player) and can_keystones(s, player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_any(("Bash", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "UpperPools.KeystoneRoomEntrance", [20], [], [], []))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("WaterDash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("Water", player))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("WaterDash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("UpperPools.UpperMidKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("DoubleJump", "WaterDash"), player) and s.has("Water", player))
    add_rule(world.get_location("UpperPools.UpperMidKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("DoubleJump", "WaterDash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("UpperPools.UpperMidKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.UpperMidKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("Bash", player) and s.has("Sword", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [['Grenade', 1]], [], [[2, 20]]))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("WaterDash", player) and s.has("Water", player))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("Grapple", "Sword"), player))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("Grapple", "Hammer"), player) and s.has("Water", player))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("Grapple", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword", "Hammer", "Bash"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Water"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Bash", "WaterDash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and s.has("Sword", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Grenade', 2]], [], [[2, 20]]))
    add_rule(world.get_location("H.UpperPools.BeforeKeystoneDoor", player), lambda s: s.can_reach_region("UpperPools.BeforeKeystoneDoor"))
    add_rule(world.get_location("UpperPools.TrialActivation", player), lambda s: s.can_reach_region("UpperPools.BeforeKeystoneDoor") and s.has("DoubleJump", player))
    add_rule(world.get_location("UpperPools.UpperMidKS", player), lambda s: s.can_reach_region("UpperPools.BeforeKeystoneDoor") and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("UpperPools.UpperMidKS", player), lambda s: s.can_reach_region("UpperPools.BeforeKeystoneDoor") and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.BeforeKeystoneDoor") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.KeystoneRoom", player), lambda s: True)
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "UpperPools.RightBubbleSpamRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "UpperPools.RightBubbleSpamRoom", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.TreeRoom", player), lambda s: True)
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Flap", "Dash"), player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player))
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Flap", "Glide"), player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player) and cost_all(s, player, options, "UpperPools.TreeRoomEntrance", "UpperPools.AboveTree", [20], [], [], []))
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperPools.TreeRoomEntrance", "UpperPools.AboveTree", [20], [], [], []))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperPools.TreeRoom", "UpperPools.AboveTree", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.AboveTree", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", "UpperPools.TreeRoomEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", "UpperPools.TreeRoomEntrance", [20], [], [], []))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("UpperPools.TreeRoomLeftBubbleFree", player))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and s.has("UpperPools.ButtonDoorAboveTree", player))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Water", "WaterDash"), player) and s.has("UpperPools.ButtonDoorAboveTree", player) and s.has("UpperPools.TreeRoomRightBubbleFree", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("WaterDash", player) and s.has("UpperPools.ButtonDoorAboveTree", player) and s.has("UpperPools.TreeRoomRightBubbleFree", player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.TreeRoom", "UpperPools.DrainPuzzleEntrance", [20], [], [], []))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Bash", player) and s.has("UpperPools.ButtonDoorAboveTree", player) and s.has("UpperPools.TreeRoomRightBubbleFree", player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.TreeRoom", "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.RoofEX", player), lambda s: s.can_reach_region("UpperPools.AboveTree") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.AboveTree", "", [20], [], [], []))
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Water", "WaterDash", "Grapple"), player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Water", "Grapple", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Water", "Launch"), player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [20], [], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Water", "WaterDash", "Launch"), player) and s.has_any(("DoubleJump", "Dash", "Sword"), player))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Water", "WaterDash", "Launch"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("DoubleJump", "Grapple"), player) and s.has_any(("TripleJump", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Bash", "Grapple"), player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("DoubleJump", "Grapple"), player) and s.has_any(("TripleJump", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("DoubleJump", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("Water", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleExit", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleExit", [], [['Grenade', 1]], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has("UpperPools.UpperWaterDrained", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_location("UpperPools.DrainRoomPurpleWall", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleRight") and s.has_all(("Water", "Bash"), player))
    add_rule(world.get_location("UpperPools.DrainRoomPurpleWall", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleRight") and s.has_all(("Bash", "Launch"), player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "", [20], [], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleRight") and s.has_all(("Water", "Launch"), player) and s.has("UpperPools.DrainRoomPurpleWall", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has("UpperPools.UpperWaterDrained", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and s.has("Glide", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("DoubleJump", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("DoubleJump", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and s.has_any(("Water", "UpperPools.UpperWaterDrained"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("DoubleJump", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Dash", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Glide", "Sword"), player) and s.has_any(("Water", "UpperPools.UpperWaterDrained"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Dash", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [], [], [[2, 20]]))
    add_rule(world.get_location("UpperPools.DrainRoomPurpleWall", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has_all(("Water", "Bash"), player))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has_all(("Water", "Bash"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has_any(("Dash", "Sword"), player))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has_all(("Water", "Bash"), player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has_all(("Water", "Bash", "DoubleJump", "Hammer"), player) and s.has("UpperPools.UpperWaterDrained", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Launch", player) and s.has_any(("UpperPools.UpperWaterDrained", "Water"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("UpperPools.UpperWaterDrained", "Water"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Water", "Bash", "DoubleJump"), player) and s.has_any(("WaterDash", "TripleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Water", "UpperPools.UpperWaterDrained"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has_any(("Launch", "Bash"), player))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("DoubleJump", player) and s.has("Combat.Aerial", player) and s.has("Combat.Aerial", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [], [], [[24, 'Combat'], [20, 'Combat']], []))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("DoubleJump", player) and s.has("Combat.Aerial", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [], [], [[24, 'Combat'], [20, 'Combat']], [[2, 20]]))
    add_rule(world.get_location("UpperPools.FishPoolEX", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("Water", player))
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has_all(("DoubleJump", "Bash"), player) and s.has_any(("TripleJump", "Sword"), player))
    add_rule(world.get_location("UpperPools.BubblesEC", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("UpperPools.BubbleSpamLever", player))
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.LeftBubbleSpamRoom", player), lambda s: True)
    add_rule(world.get_location("UpperPools.RightBubblesEX", player), lambda s: s.can_reach_region("UpperPools.LeftBubbleSpamRoom") and s.has_all(("Water", "Bash"), player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_location("UpperPools.RightBubblesEX", player), lambda s: s.can_reach_region("UpperPools.LeftBubbleSpamRoom") and s.has_all(("Water", "Bash"), player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water", "Bash"), player) and s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water", "Bash"), player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", "UpperPools.RightBubbleSpamRoom", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("WestPools.TpEX", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has_all(("Water", "WaterDash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("WestPools.TpEX", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has_all(("WaterDash", "DoubleJump"), player) and s.has_any(("Dash", "TripleJump"), player) and cost_all(s, player, options, "WestPools.Teleporter", "", [20], [], [], []))
    add_rule(world.get_location("WestPools.BurrowOre", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has_all(("Water", "WaterDash", "Burrow"), player) and s.has("WestPools.ForestsStrength", player))
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has_all(("Water", "WaterDash"), player))
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("Water", player) and s.has("Combat.Dangerous", player) and s.has("Bash", player) and cost_all(s, player, options, "WestPools.Teleporter", "WestPools.LeftKwolokPlatform", [], [], [[32, 'Combat']], []))
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("Water", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "WestPools.Teleporter", "WestPools.LeftKwolokPlatform", [], [], [[32, 'Combat']], [[2, 3]]))
    add_rule(world.get_entrance("WestPools.Teleporter_to_EastPools.CentralRoom", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash"), player))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.Teleporter", player), lambda s: s.has("Water", player) and s.has_any(("Bash", "WaterDash"), player))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.Teleporter", player), lambda s: s.has("Water", player) and cost_all(s, player, options, "WestPools.LeftKwolokPlatform", "WestPools.Teleporter", [], [], [], [[2, 3]]))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and s.has("DoubleJump", player))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and cost_all(s, player, options, "WestPools.LeftKwolokPlatform", "WestPools.RightKwolokPlatform", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and s.has("DoubleJump", player))
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and cost_all(s, player, options, "WestPools.RightKwolokPlatform", "WestPools.LeftKwolokPlatform", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash"), player))
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Water", "WaterDash", "Dash", "Bash"), player))
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Water", "WaterDash", "Launch"), player))
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Water", "Launch", "Dash", "Bash"), player))
    add_rule(world.get_location("WestPools.ForestsStrength", player), lambda s: s.can_reach_region("KwolokFight") and s.has_all(("Regenerate", "Water", "WaterDash", "Bash"), player) and s.has_any(("DoubleJump", "Launch", "Dash"), player) and cost_all(s, player, options, "KwolokFight", "", [85], [], [[250, 'Boss']], []))
    add_rule(world.get_location("WoodsMain.FeedingGroundsEX", player), lambda s: s.can_reach_region("LowerWastes.WestTP") and s.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [30], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Dash"), player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Sword"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [30], [], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WoodsMain.FeedingGrounds", player), lambda s: s.has_all(("Regenerate", "Burrow"), player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Grapple", "Glide"), player) and s.has("WindtornRuins.Seir", player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "DoubleJump", "Glide"), player) and s.has("WindtornRuins.Seir", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Dash", "Glide"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Grapple"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Dash"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("LowerWastes.SpiritTrial", player), lambda s: s.can_reach_region("LowerWastes.SunsetView") and s.has_all(("Burrow", "Dash", "Grapple"), player) and s.has("LowerWastes.TrialActivation", player))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.WestTP", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.WestTP", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has("Grapple", player))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "LowerWastes.SunsetView", "LowerWastes.Shovel", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.SunsetView", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.Shovel", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.Shovel", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.Shovel", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: s.has_any(("DoubleJump", "Dash", "Burrow", "Sword"), player))
    add_rule(world.get_location("LowerWastes.SandPotHC", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has("Burrow", player))
    add_rule(world.get_location("LowerWastes.SandPotHC", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has_all(("Burrow", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has_all(("Burrow", "Dash"), player) and s.has_any(("DoubleJump", "Grapple"), player))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has_all(("Burrow", "DoubleJump"), player) and cost_all(s, player, options, "LowerWastes.SandPot", "", [30], [], [], []))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has_all(("Burrow", "Grapple"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerWastes.SandPot", "", [30], [], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.MuncherTunnel", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Burrow", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [30], [], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [30], [], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [30], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "Sword"), player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [30], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [['Grenade', 1]], [], [[2, 30]]))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [['Grenade', 2]], [], [[2, 30]]))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.WoodenBridge") and s.has_all(("Burrow", "DoubleJump"), player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.WoodenBridge") and s.has_all(("Burrow", "DoubleJump"), player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", "", [], [], [], [[2, 30]]))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.WoodenBridge") and s.has_all(("Burrow", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerWastes.MuncherPitEX", player), lambda s: s.can_reach_region("LowerWastes.WoodenBridge") and s.has_any(("Burrow", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has("Grapple", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Glide"), player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", "LowerWastes.SandPot", [30], [], [], []))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.LeverArea", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.LeverArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", "LowerWastes.LeverArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Combat.Dangerous", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", "LowerWastes.MinesEntranceEnemyPaths", [], [], [[60, 'Combat'], [32, 'Combat']], []))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", "LowerWastes.MinesEntranceEnemyPaths", [], [], [[60, 'Combat'], [32, 'Combat']], [[2, 30]]))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", "LowerWastes.MinesEntranceEnemyPaths", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.WoodenBridge", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", "LowerWastes.WoodenBridge", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.LeverArea", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.LeverArea", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("LowerWastes.BottomRightEX", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerWastes.BottomRightEX", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Bash", player) and s.has_any(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("LowerWastes.BottomRightEX", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("LowerWastes.BottomRightEX", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Bash", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", "", [30], [], [], []))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and cost_all(s, player, options, "LowerWastes.MinesEntrance", "", [30], [], [], [[0, [[60, 'Combat'], [32, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Bash", player))
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Grapple", "Dash"), player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", "LowerWastes.BeforeMinesEntrance", [], [], [], [[0, [[60, 'Combat'], [32, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("LowerWastes.SandPlatformLever", player), lambda s: s.can_reach_region("LowerWastes.LeverArea") and s.has("Dash", player))
    add_rule(world.get_location("LowerWastes.SandPlatformLever", player), lambda s: s.can_reach_region("LowerWastes.LeverArea") and s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.LeverArea", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has("DoubleJump", player) and s.has("LowerWastes.SandPlatformLever", player))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Burrow", player) and s.has("LowerWastes.SandPlatformLever", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("Burrow", player) and s.has("LowerWastes.SandPlatformLever", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("Bash", player) and s.has("LowerWastes.SandPlatformLever", player) and s.has_any(("Glide", "Burrow", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.LeverArea", "LowerWastes.LastStandArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerWastes.MuncherClimbEX", player), lambda s: s.can_reach_region("LowerWastes.MuncherClimb") and s.has_all(("Grapple", "Dash"), player))
    add_rule(world.get_location("LowerWastes.MuncherClimbEX", player), lambda s: s.can_reach_region("LowerWastes.MuncherClimb") and s.has_all(("Launch", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerWastes.MuncherClimbEX", player), lambda s: s.can_reach_region("LowerWastes.MuncherClimb") and s.has("Launch", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", "", [30], [], [], []))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("Dash", player) and s.has("LowerWastes.SandPlatformLever", player))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerWastes.LastStandShard", player), lambda s: s.can_reach_region("LowerWastes.LastStandArea") and s.has_any(("Launch", "Glide"), player))
    add_rule(world.get_location("LowerWastes.LastStandEX", player), lambda s: s.can_reach_region("LowerWastes.LastStandArea") and s.has_all(("Burrow", "Glide"), player))
    add_rule(world.get_location("LowerWastes.LastStandEX", player), lambda s: s.can_reach_region("LowerWastes.LastStandArea") and s.has("Burrow", player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "LowerWastes.LastStandArea", "", [30], [], [], []))
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerWastes.SkeetoHiveEX", player), lambda s: s.can_reach_region("LowerWastes.SkeetoHive") and s.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has("Bash", player) and s.has("Grapple", player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.ThirstyGorlek", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has_all(("Burrow", "Bash"), player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has_all(("Burrow", "Grapple", "Dash"), player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.MuncherClimb", [], [], [], [[2, 30]]))
    add_rule(world.get_location("LowerWastes.LupoMap", player), lambda s: s.can_reach_region("LowerWastes.ThirstyGorlek") and s.has_all(("DoubleJump", "Hammer"), player) and s.has("SpiritLight", player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerWastes.UpperPathEX", player), lambda s: s.can_reach_region("LowerWastes.UpperPath") and s.has("Burrow", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerWastes.UpperPathEX", player), lambda s: s.can_reach_region("LowerWastes.UpperPath") and s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.UpperPath", "", [], [], [], [[2, 30]]))
    add_rule(world.get_location("LowerWastes.EastTPOre", player), lambda s: s.can_reach_region("LowerWastes.EastTP") and s.has("DoubleJump", player) and cost_all(s, player, options, "LowerWastes.EastTP", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("LowerWastes.EastTPOre", player), lambda s: s.can_reach_region("LowerWastes.EastTP") and s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.EastTP", "", [], [['Grenade', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerWastes.EastTP_to_Tokk", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.EastTP", "LowerWastes.UpperPath", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("LowerWastes.EastTP_to_UpperWastes.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("LowerWastes.EastTP_to_UpperWastes.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and cost_all(s, player, options, "LowerWastes.EastTP", "UpperWastes.KeystoneRoom", [], [], [], [[2, 30]]))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Burrow", player) and can_keystones(s, player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("UpperWastes.LowerKS", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_any(("Burrow", "Launch"), player))
    add_rule(world.get_location("UpperWastes.LowerKS", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperWastes.UpperKS", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.TurmoilShard", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Burrow", "Bash", "DoubleJump"), player) and s.has_any(("Dash", "TripleJump"), player))
    add_rule(world.get_location("UpperWastes.TurmoilShard", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Burrow", "Launch", "DoubleJump"), player))
    add_rule(world.get_location("UpperWastes.TurmoilShard", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Burrow", "Launch"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [30], [], [], []))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Burrow", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Bash", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [], [['Grenade', 1]], [[24, 'Combat']], []))
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_LowerWastes.EastTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_LowerWastes.EastTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "LowerWastes.EastTP", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has("Burrow", player) and can_keystones(s, player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("UpperWastes.LedgeEC", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleLeft") and s.has_all(("Burrow", "Bash", "Glide"), player))
    add_rule(world.get_location("UpperWastes.LedgeEC", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleLeft") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleLeft", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("C.UpperWastes.MissilePuzzleMiddle", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleMiddle") and s.has("Burrow", player) and s.has("Bash", player))
    add_rule(world.get_location("C.UpperWastes.MissilePuzzleMiddle", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleMiddle") and s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleMiddle", "", [], [], [], [[2, 14]]))
    add_rule(world.get_location("UpperWastes.LeverDoor", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleMiddle") and s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleMiddle", "", [14], [], [], []))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has_all(("Burrow", "Bash"), player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda s: s.has_all(("Burrow", "Dash"), player) and s.has("Bash", player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda s: s.has_all(("Burrow", "Dash"), player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleRight", "UpperWastes.RuinsApproach", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda s: s.has_all(("Burrow", "Glide"), player) and s.has_any(("DoubleJump", "Bash"), player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda s: s.has_all(("Burrow", "Glide"), player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleRight", "UpperWastes.RuinsApproach", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda s: s.has_all(("Burrow", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has_all(("Burrow", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword"), player))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has_all(("Burrow", "Bash"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has_all(("Burrow", "Bash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperWastes.RuinsApproach", "", [30], [], [], []))
    add_rule(world.get_entrance("UpperWastes.RuinsApproach_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has_all(("Burrow", "Dash"), player) and cost_all(s, player, options, "UpperWastes.RuinsApproach", "UpperWastes.MissilePuzzleRight", [30], [], [], []))
    add_rule(world.get_location("UpperWastes.FlowersSeed", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Burrow", "Bash"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("UpperWastes.FlowersSeed", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Burrow", "Bash", "Dash"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [], [], [], [[1, 'Grenade', 1], [2, 30]]))
    add_rule(world.get_location("UpperWastes.FlowersSeed", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Burrow", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("Dash", player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [30], [], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword"), player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "DoubleJump", "Dash", "Sword"), player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [], [], [[1, 'Grenade', 1], [2, 30]]))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Glide"), player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [['Grenade', 1]], [], [[2, 30]]))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [], [[60, 'Combat']], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Burrow"), player))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins") and s.has_all(("Burrow", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins") and s.has_all(("Burrow", "Glide"), player))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins") and s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins") and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", "", [30], [], [], []))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins") and s.has("Launch", player))
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: s.has("DoubleJump", player) and s.has("Combat.Dangerous", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", "UpperWastes.NorthTP", [], [], [[32, 'Combat'], [60, 'Combat']], []))
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.RuinsTP", player), lambda s: s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.RuinsTP", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Glide", "Dash"), player))
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.RuinsTP", player), lambda s: s.has("DoubleJump", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_location("WindtornRuins.HeartBarrier", player), lambda s: s.can_reach_region("WindtornRuins.FallenPillar") and s.has("Burrow", player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", "WindtornRuins.RuinsTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", "WindtornRuins.RuinsTP", [], [['Grenade', 1]], [], [[2, 40]]))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.LowerRuins", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Bash", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", "WindtornRuins.BrokenMural", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Glide", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Sword", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has_all(("DoubleJump", "Dash", "Hammer"), player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "Grapple", "DoubleJump"), player) and s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WindtornRuins.Escape", "", [40], [], [], []))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "Grapple", "Dash"), player) and s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WindtornRuins.Escape", "", [40], [], [], []))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "Launch"), player) and s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "Launch"), player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.Escape", "", [], [], [], [[2, 40]]))
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda s: s.has("DoubleJump", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and s.has_any(("TripleJump", "Sword"), player))
    add_rule(world.get_location("WeepingRidge.ElevatorFightCompleted", player), lambda s: s.can_reach_region("WeepingRidge.Bottom") and s.has("Combat.Dangerous", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("DoubleJump", player) and cost_all(s, player, options, "WeepingRidge.Bottom", "", [], [], [[80, 'Combat', 80, 'Combat'], [50, 'Combat', 50, 'Combat']], []))
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has("DoubleJump", player))
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.LaunchArea") and s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Bash", "Glide"), player))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.LaunchArea") and s.has_all(("Launch", "Sword"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "", [20], [], [], []))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WeepingRidge.AboveTree", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WeepingRidge.AboveTree", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WeepingRidge.AboveTree", [40], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WeepingRidge.AboveTree", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer", "Dash"), player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has("DoubleJump", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("TripleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("WeepingRidge.SpikeClimbEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has("Launch", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [], [], [], [[1, 'Bow', 1], [1, 'Spear', 1], [1, 'Grenade', 1], [2, 20]]))
    add_rule(world.get_location("WeepingRidge.SpikeClimbEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [40], [['Grenade', 2]], [], []))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has("Launch", player))
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Launch", "Bash"), player))
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Launch", "DoubleJump", "Dash"), player))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.Entry") and s.has("Bash", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.Entry") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.Entry", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.InnerTP", [], [], [], [[2, 40]]))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("WillowsEnd.PortalShortcut", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.InnerTP", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.InnerTP", [], [['Grenade', 2]], [], [[2, 40]]))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.InnerTP", [], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has_all(("DoubleJump", "Glide"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.BoulderHeartPath", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.BoulderHeartPath", [40], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Bash", "Sword"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeart", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeart", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeart", [], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Regenerate", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has("Glide", player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Regenerate", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WeepingRidge.LaunchArea", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has("Sword", player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and cost_all(s, player, options, "WillowsEnd.GrappleHeartMidPoint", "WillowsEnd.GrappleHeart", [], [], [], [[2, 40]]))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Launch", "Sword"), player) and cost_all(s, player, options, "WillowsEnd.GrappleHeartMidPoint", "WillowsEnd.GrappleHeart", [40], [], [], []))
    add_rule(world.get_location("E.WillowsEnd.GrappleHeart", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("WillowsEnd.PoisonfallHC", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("WillowsEnd.PoisonfallHC", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "", [4], [], [], []))
    add_rule(world.get_location("WillowsEnd.PoisonfallHC", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("WillowsEnd.PoisonfallHC", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("DoubleJump", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "WillowsEnd.Entry", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Launch", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has("Launch", player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [], [], [], [[2, 40]]))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [40], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("DoubleJump", "Grapple", "Glide"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("DoubleJump", "Grapple", "Dash"), player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.Entry", player), lambda s: s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "WillowsEnd.Entry", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("WillowsEnd.PortalShortcut", player), lambda s: s.can_reach_region("WillowsEnd.InnerTP") and cost_all(s, player, options, "WillowsEnd.InnerTP", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("WillowsEnd.LupoMap", player), lambda s: s.can_reach_region("WillowsEnd.InnerTP") and s.has("SpiritLight", player))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("WillowsEnd.PortalShortcut", player))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.InnerTP", "WillowsEnd.Entry", [40], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.InnerTP", "WillowsEnd.Entry", [40], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.InnerTP", "WillowsEnd.AboveInnerTP", [], [], [], [[2, 40]]))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "WillowsEnd.InnerTP", "WillowsEnd.AboveInnerTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.InnerTP", "WillowsEnd.AboveInnerTP", [], [['Grenade', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.InnerTP", "WillowsEnd.AboveInnerTP", [], [['Grenade', 1]], [[20, 'Wall']], [[2, 40]]))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.InnerTP", "WillowsEnd.AboveInnerTP", [40], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has("Launch", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", "WillowsEnd.East", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Bash", "DoubleJump", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", "WillowsEnd.East", [20], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Bash", "DoubleJump"), player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.Upper", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "DoubleJump"), player))
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath_to_WillowsEnd.East", player), lambda s: s.has_any(("Bash", "Sword", "Hammer"), player))
    add_rule(world.get_location("WillowsEnd.RedirectEX", player), lambda s: s.can_reach_region("WillowsEnd.RedirectHeartPuzzle") and s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("WillowsEnd.RedirectEX", player), lambda s: s.can_reach_region("WillowsEnd.RedirectHeartPuzzle") and s.has_all(("Glide", "DoubleJump", "Bash"), player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", "", [20], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", "WillowsEnd.RedirectHeartPath", [40], [], [], []))
    add_rule(world.get_location("E.WillowsEnd.Upper", player), lambda s: s.can_reach_region("WillowsEnd.Upper") and s.has("BreakCrystal", player) and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_location("E.WillowsEnd.Upper", player), lambda s: s.can_reach_region("WillowsEnd.Upper") and s.has("DoubleJump", player) and s.has("BreakCrystal", player) and s.has("Combat.Dangerous", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.Upper", "", [], [], [[80, 'Combat']], []))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.East", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.Upper", "WillowsEnd.East", [10], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.Upper", "WillowsEnd.West", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "WillowsEnd.Upper", "WillowsEnd.West", [20], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "WillowsEnd.Upper", "WillowsEnd.UpperHeartPath", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.West", "WillowsEnd.Upper", [], [], [[10, 'Wall']], []))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "WillowsEnd.West", "WillowsEnd.Upper", [], [['Grenade', 1]], [[10, 'Wall']], []))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.West", "WillowsEnd.Upper", [], [['Grenade', 2]], [[10, 'Wall']], []))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.GlideHeartPath", player), lambda s: s.has_all(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.GlideHeartPath", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.GlideRooms", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.GlideRooms", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("WillowsEnd.UpperLeftEX", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartPath") and s.has_all(("Launch", "Grapple"), player))
    add_rule(world.get_location("WillowsEnd.UpperLeftEX", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartPath") and s.has_all(("Launch", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("WillowsEnd.UpperLeftEX", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartPath") and s.has_all(("Launch", "DoubleJump", "Glide", "Bash"), player) and s.has("WillowsEnd.SpinPortalsHeart", player))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Grapple", "Bash"), player))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Grapple", "Bash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", "WillowsEnd.UpperHeartCheckpoint", [40], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Bash", "DoubleJump"), player) and s.has("WillowsEnd.SpinPortalsHeart", player))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has("WillowsEnd.SpinPortalsHeart", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", "WillowsEnd.UpperHeartCheckpoint", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has("WillowsEnd.SpinPortalsHeart", player) and s.has("TripleJump", player))
    add_rule(world.get_location("WillowsEnd.UpperLeftEX", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartCheckpoint") and s.has_all(("Launch", "DoubleJump", "Glide", "Bash"), player))


def set_gorlek_glitched_rules(world, player, options):
    """Gorlek (or medium) rules with glitches"""
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has_all(("Launch", "DoubleJump"), player) and cost_all(s, player, options, "MarshSpawn.Main", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda s: True)
    add_rule(world.get_location("MarshSpawn.BashEC", player), lambda s: s.can_reach_region("MarshSpawn.BrokenBridge") and cost_all(s, player, options, "MarshSpawn.BrokenBridge", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("MarshSpawn.LogBroken", player) and cost_all(s, player, options, "MarshSpawn.BrokenBridge", "MarshSpawn.OpherBarrier", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: True)
    add_rule(world.get_location("MarshSpawn.TokkBarrier", player), lambda s: s.can_reach_region("MarshSpawn.Cave") and cost_all(s, player, options, "MarshSpawn.Cave", "", [], [], [[48, 'Shuriken']], []))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("MarshSpawn.CaveFight", player) and cost_all(s, player, options, "MarshSpawn.Cave", "MarshSpawn.PoolsBurrowsSignpost", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: True)
    add_rule(world.get_location("MarshSpawn.CaveOre", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.BurrowFightArena", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.can_reach_region("MarshSpawn.BeforeBurrows") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Water", "WaterDash"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "MarshSpawn.BurrowsEntry", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "MarshSpawn.BurrowsEntry", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowsOpen", player), lambda s: s.can_reach_region("MarshSpawn.BurrowsEntry") and s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.BurrowsEntry", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Water", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", "PoolsApproach.OnTopOfWheel", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: True)
    add_rule(world.get_location("MarshSpawn.RecklessShard", player), lambda s: s.can_reach_region("MarshSpawn.MokkTheBrave") and s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "", [], [['Sentry', 1]], [[10, 'Wall']], []))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "MarshSpawn.HowlApproach", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: True)
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.FangPlatform") and cost_all(s, player, options, "MarshSpawn.FangPlatform", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_HowlsDen.MidwayBottomLoop", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("HowlsDen.UpperLoopEntranceBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", "HowlsDen.UpperLoopExit", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("HowlsDen.AboveDoorKS", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and cost_all(s, player, options, "HowlsDen.BoneBridge", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", "HowlsDen.MidwayBottomLoop", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", "HowlsDen.MidwayBottomLoop", [], [['Sentry', 1]], [], [[2, 10]]))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has_all(("Water", "WaterDash", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", "HowlsDen.MidwayBottomLoop", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: True)
    add_rule(world.get_location("HowlsDen.BoneBarrier", player), lambda s: s.can_reach_region("HowlsDen.AboveTeleporter") and cost_all(s, player, options, "HowlsDen.AboveTeleporter", "", [], [], [[48, 'Shuriken']], []))
    add_rule(world.get_location("HowlsDen.LaserKS", player), lambda s: s.can_reach_region("HowlsDen.Teleporter") and cost_all(s, player, options, "HowlsDen.Teleporter", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "HowlsDen.Teleporter", "HowlsDen.DoubleJumpApproach", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: True)
    add_rule(world.get_location("HowlsDen.DoubleJumpEX", player), lambda s: s.can_reach_region("HowlsDen.DoubleJumpTreeLedge") and cost_all(s, player, options, "HowlsDen.DoubleJumpTreeLedge", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: True)
    add_rule(world.get_location("MarshSpawn.ToOpherBarrier", player), lambda s: s.can_reach_region("MarshPastOpher.MillView") and cost_all(s, player, options, "MarshPastOpher.MillView", "", [], [], [[48, 'Shuriken']], []))
    add_rule(world.get_location("MarshPastOpher.TrialRightEX", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and cost_all(s, player, options, "MarshPastOpher.TrialArea", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: True)
    add_rule(world.get_location("MarshPastOpher.CeilingEX", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathEast") and s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("MarshPastOpher.CeilingEX", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathEast") and s.has("['Hammer', 'Sentry']", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathMiddle") and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "", [], [['Sentry', 1]], [[32, 'Combat']], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathOneWayWall", [], [], [[60, 'Shuriken']], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathOneWayWall", [], [], [[60, 'Shuriken']], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Regenerate", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "PoolsApproach.MarshBreakableWall", [], [], [[60, 'Shuriken']], []))
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("DoubleJump", player) and s.has("MarshSpawn.BurrowsOpen", player) and cost_all(s, player, options, "MidnightBurrows.Teleporter", "MarshSpawn.BurrowsEntry", [15], [['Sentry', 3]], [], []))
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("MidnightBurrows.Lever", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", "MidnightBurrows.BelowUpperKS", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", "MidnightBurrows.East", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("MidnightBurrows.LowerKS", player), lambda s: s.can_reach_region("MidnightBurrows.LeverRoom") and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.Entrance") and s.has("DoubleJump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", "", [], [['Bow', 1], ['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: True)
    add_rule(world.get_location("WestHollow.RockPuzzleSolved", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [], [['Bow', 1], ['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.FarLeftRoom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Bow', 1], ['Sentry', 1]], [], []))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueRetracted", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.HollowDrainMiddle", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.RockPuzzle", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueRetracted", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.RockPuzzle", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("SpiritLight", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.TrialApproach", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestHollow.DoorLever", player), lambda s: s.can_reach_region("WestHollow.DashApproach") and s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WestHollow.DashApproach", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.DashArea_to_WestHollow.AboveDashSemisolid", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashArea", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashArea", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashRoomTopRight", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Bash", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashRoomTopRight", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']", "DoubleJump"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashRoomTopRight", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashRoomTopRight", [], [['Sentry', 2]], [[32, 'Combat'], [24, 'Combat']], []))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashRoomTopRight", [10], [['Sentry', 2]], [[32, 'Combat'], [24, 'Combat']], []))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "DoubleJump"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashRoomTopRight", [], [['Sentry', 2]], [[32, 'Combat'], [24, 'Combat']], []))
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.AfterBeetleFight", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "EastHollow.Teleporter", "EastHollow.AfterBeetleFight", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.Teleporter", "EastHollow.VoiceDoorPlatform", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "EastHollow.MapMoki", "EastHollow.OutsideGlades", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("Bash", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("Grapple", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("Glide", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "EastHollow.Teleporter", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("EastHollow.BeetleDefeated", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "EastHollow.Teleporter", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "EastHollow.Kwolok", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "EastHollow.AboveBash", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has("['Hammer', 'Sentry']", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Bash"), player) and cost_all(s, player, options, "EastHollow.AboveBash", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AfterBeetleFight", player), lambda s: True)
    add_rule(world.get_location("EastHollow.BashEX", player), lambda s: s.can_reach_region("EastHollow.BashTreeCheckpoint") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastHollow.RightKwolokEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and cost_all(s, player, options, "EastHollow.Kwolok", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastHollow.BashHC", player), lambda s: s.can_reach_region("EastHollow.AboveDepths") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.AboveDepths", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("EastHollow.BashHC", player), lambda s: s.can_reach_region("EastHollow.AboveDepths") and cost_all(s, player, options, "EastHollow.AboveDepths", "", [], [['Sentry', 3]], [], []))
    add_rule(world.get_location("EastHollow.DepthsExteriorEX", player), lambda s: s.can_reach_region("EastHollow.AboveDepths") and s.has("Launch", player) and cost_all(s, player, options, "EastHollow.AboveDepths", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.AboveBash", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("EastHollow.DepthsLever", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "EastHollow.AboveDepths", "EastHollow.AboveBash", [], [['Sentry', 5]], [], []))
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.AboveBash", player), lambda s: s.has_all(("['Sword', 'Sentry']", "DoubleJump"), player) and s.has("EastHollow.DepthsLever", player) and cost_all(s, player, options, "EastHollow.AboveDepths", "EastHollow.AboveBash", [], [['Sentry', 4]], [], []))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("DoubleJump", player) and s.has("GladesTown.ClearThorns", player) and s.has("TripleJump", player) and cost_all(s, player, options, "GladesTown.Teleporter", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.Teleporter", "GladesTown.UpperWest", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.Teleporter", "GladesTown.BelowBountyShard", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and cost_all(s, player, options, "GladesTown.Teleporter", "TuleyShop", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: True)
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("TuleyShop.StickyGrass", player) and s.has_any(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("Dash", player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("Bash", player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("DoubleJump", player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("['Sword', 'Sentry']", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", "GladesTown.MotayHut", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "GladesTown.West", "GladesTown.UpperWest", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.MotayHut") and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.MotayHut", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.MotayHut") and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.MotayHut", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has("DoubleJump", player) and s.has("GladesTown.BuildHuts", player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "GladesTown.MotayHut", "GladesTown.UpperWest", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.BraveMokiHutEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("GladesTown.OnwardsAndUpwards", player) and cost_all(s, player, options, "GladesTown.UpperWest", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperLeftEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and cost_all(s, player, options, "GladesTown.UpperWest", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.AboveGromHC", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("DoubleJump", player) and cost_all(s, player, options, "GladesTown.UpperWest", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Bow', 4], ['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.AboveCaveEX", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.AboveCaveEX", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Sentry', 1]], [], [[2, 10]]))
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "GladesTown.Teleporter", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.BountyShard", player), lambda s: s.can_reach_region("GladesTown.BelowBountyShard") and cost_all(s, player, options, "GladesTown.BelowBountyShard", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.LeftAboveCoals") and cost_all(s, player, options, "GladesTown.LeftAboveCoals", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "GladesTown.PlayfulMoki", "GladesTown.HoleHut", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.HoleHutEntrance", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("GladesTown.RoofsOverHeads", player) and cost_all(s, player, options, "GladesTown.HoleHut", "GladesTown.HoleHutEntrance", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has("Regenerate", player) and cost_all(s, player, options, "GladesTown.HoleHut", "LowerReach.VeralHome", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and cost_all(s, player, options, "WestGlades.PastTown", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_any(("DoubleJump", "Dash", "Water"), player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [['Sentry', 1]], [[40, 'Ranged']], []))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("WaterDash", player) and cost_all(s, player, options, "WestGlades.PastTown", "", [20], [['Sentry', 1]], [[40, 'Ranged']], []))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("Glide", player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [['Sentry', 2]], [[40, 'Ranged']], []))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Glide", player) and s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.LowerPool", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.LowerPool", [], [['Sentry', 1]], [], [[2, 10], [0, [[40, 'Ranged']], []]]))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WestGlades.PastTown", "GladesTown.West", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", "GladesTown.West", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WestGlades.PastTown", "GladesTown.West", [], [['Sentry', 1]], [], [[2, 10]]))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WestGlades.LowerPool", "WestGlades.Center", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has("Dash", player) and cost_all(s, player, options, "WestGlades.Center", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WestGlades.Center", "WestGlades.Upper", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Upper") and s.has("Glide", player) and cost_all(s, player, options, "WestGlades.Upper", "", [], [['Sentry', 1]], [[40, 'Ranged']], []))
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: True)
    add_rule(world.get_location("OuterWellspring.SwimOre", player), lambda s: s.can_reach_region("WestGlades.MillApproach") and s.has("Water", player) and cost_all(s, player, options, "WestGlades.MillApproach", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WestGlades.MillApproach", "WestGlades.ShrineArea", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WestGlades.MillApproach", "OuterWellspring.EntranceDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("Glide", player) and cost_all(s, player, options, "WestGlades.MillApproach", "OuterWellspring.EntranceDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WestGlades.MillApproach", "OuterWellspring.EntranceDoor", [], [['Sentry', 1]], [], [[2, 20]]))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and cost_all(s, player, options, "WestGlades.ShrineArea", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.Basement", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.Basement", [15], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "WestGlades.MillApproach", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "WestGlades.MillApproach", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "WestGlades.MillApproach", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "WestGlades.MillApproach", [], [['Sentry', 2]], [], [[2, 20]]))
    add_rule(world.get_location("OuterWellspring.LifeHarvestWallBroken", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", "", [], [], [[60, 'Shuriken']], []))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has("OuterWellspring.LifeHarvestLeverPulled", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has("OuterWellspring.LifeHarvestLeverPulled", player) and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", "", [], [['Sentry', 1]], [], [[2, 15]]))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("['Sword', 'Sentry']", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Grapple", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "DoubleJump"), player) and s.has_any(("Grapple", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [15], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "DoubleJump", "Glide", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [15], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("DoubleJump", "Dash", "Glide"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [15], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Grapple", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.WestDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.RightWallMidpoint", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.RightWallMidpoint", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.RightWallMidpoint", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Sentry', 1]], [[3, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Sentry', 1]], [[3, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Shuriken', 0], [1, 'Grenade', 0], [1, 'Blaze', 0]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("TripleJump", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "DoubleJump"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Sentry', 1]], [], [[2, 15]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has("Grapple", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [15], [['Sentry', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has("Launch", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "OuterWellspring.EastDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.AboveWestDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.AboveWestDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.AboveWestDoor", [], [['Sentry', 1]], [], [[2, 10]]))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda s: True)
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.TopDoor", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_WestGlades.MillApproach", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "WestGlades.MillApproach", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EntranceDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "OuterWellspring.AboveEntranceDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("['Sword', 'Sentry']", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "OuterWellspring.AboveEntranceDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "DoubleJump", "Dash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "OuterWellspring.AboveEntranceDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.RightWallEX", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.TrialRoom", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "OuterWellspring.EastDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.AboveEntranceDoor", player), lambda s: True)
    add_rule(world.get_location("InnerWellspring.ThreeWheelsEX", player), lambda s: s.can_reach_region("InnerWellspring.EntranceDoor") and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: True)
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has("DoubleJump", player) and s.has_any(("Dash", "Glide", "TripleJump"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", "", [15], [['Sentry', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", "", [15], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_any(("Grapple", "Glide", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [], [], [[30, 'Shuriken']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [], [], [[30, 'Shuriken']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [], [['Grenade', 1]], [[30, 'Shuriken']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [], [], [[30, 'Shuriken']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [], [['Grenade', 2]], [[30, 'Shuriken']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [], [], [[30, 'Shuriken']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Water", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [], [], [[30, 'Shuriken']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_all(("Water", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [15], [['Grenade', 1]], [[30, 'Shuriken']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_all(("Water", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [], [['Grenade', 2]], [[30, 'Shuriken']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Bash", player) and s.has("Water", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "InnerWellspring.DrainAreaEX", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "InnerWellspring.DrainAreaEX", [], [['Sentry', 1]], [], [[2, 20]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoomCenter", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoomCenter", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoomCenter", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainAreaExit", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", "InnerWellspring.BelowDrainLever", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", "InnerWellspring.BelowDrainLever", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("InnerWellspring.DrainRoomTopWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", "InnerWellspring.BelowDrainLever", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.DrainLever", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has("InnerWellspring.UpperCorruption", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: s.has_all(("['Sword', 'Sentry']", "DoubleJump"), player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "InnerWellspring.WestDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "InnerWellspring.WestDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: True)
    add_rule(world.get_location("InnerWellspring.MiddleDoorsOpen", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.LupoMap", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("['Sword', 'Sentry']", player) and s.has("SpiritLight", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.GrappleTreeEX", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and cost_all(s, player, options, "InnerWellspring.WestDoor", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.AboveSpinArenaEX", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and s.has_all(("Grapple", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "InnerWellspring.EastDoor", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.AboveSpinArenaEX", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.AboveSpinArenaEX", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", "", [], [], [[30, 'Shuriken']], []))
    add_rule(world.get_location("InnerWellspring.AboveSpinArenaEX", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and cost_all(s, player, options, "InnerWellspring.EastDoor", "", [], [], [[30, 'Shuriken']], [[0, [[40, 'Ranged']], []]]))
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.EastDoor", player), lambda s: s.has("InnerWellspring.SpinningRoomOpen", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", "InnerWellspring.EastDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", "InnerWellspring.GrappleThroughZigZagSpikes", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", "InnerWellspring.GrappleThroughZigZagSpikes", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", "InnerWellspring.GrappleThroughZigZagSpikes", [], [['Sentry', 3]], [], []))
    add_rule(world.get_location("InnerWellspring.BlueMoonSeed", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and cost_all(s, player, options, "InnerWellspring.Teleporter", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.AboveTpEX", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and cost_all(s, player, options, "InnerWellspring.Teleporter", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_any(("DoubleJump", "Grapple"), player) and cost_all(s, player, options, "InnerWellspring.Teleporter", "InnerWellspring.EscapeSequence", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: True)
    add_rule(world.get_location("WoodsEntry.MudPitEX", player), lambda s: s.can_reach_region("WoodsEntry.FirstMud") and cost_all(s, player, options, "WoodsEntry.FirstMud", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.Teleporter", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Bash"), player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.Teleporter", [15], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WoodsEntry.Teleporter", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", "WoodsMain.BelowFourKeystoneRoom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.WallOreLedge", [], [['Sentry', 1]], [[1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_all(("['Sword', 'Sentry']", "DoubleJump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.WallOreLedge", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.AfterKuMeet", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WoodsMain.WallOreLedge", "WoodsMain.AfterKuMeet", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WoodsMain.RightKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WoodsMain.UpperKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("['Sword', 'Sentry']", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [['Sentry', 1]], [[3, 'Wall'], [20, 'Combat', 20, 'Combat', 20, 'Combat']], []))
    add_rule(world.get_location("WoodsMain.UpperKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("['Hammer', 'Sentry']", player) and s.has("Combat.Aerial", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [['Sentry', 1]], [[3, 'Wall'], [20, 'Combat', 20, 'Combat', 20, 'Combat']], []))
    add_rule(world.get_location("WoodsMain.BehindDoorRoofEX", player), lambda s: s.can_reach_region("WoodsMain.GiantSkull") and cost_all(s, player, options, "WoodsMain.GiantSkull", "", [], [['Sentry', 1]], [[1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", "WoodsMain.BalloonLure", [], [['Sentry', 1]], [[1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.AboveHowl", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.PetrifiedHowl", "WoodsMain.AboveHowl", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.AboveHowl", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.PetrifiedHowl", "WoodsMain.AboveHowl", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.TrialStart", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WoodsMain.BrokenOwl", "WoodsMain.TrialStart", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WoodsMain.AboveHowl", "WoodsMain.BeforeLog", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.OrangeTree", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.BeforeLog", "WoodsMain.OrangeTree", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("WoodsMain.LogBlobDestroyed", player) and s.has("Dash", player) and cost_all(s, player, options, "WoodsMain.Teleporter", "WoodsMain.BeforeLog", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("WoodsMain.LogBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.Teleporter", "WoodsMain.BeforeLog", [], [['Sentry', 1]], [], [[0, [[1, 'Combat', 1, 'Combat']], []]]))
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.BeforeLog", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.OrangeTree", "WoodsMain.BeforeLog", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Grapple", "DoubleJump"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "LowerWastes.WestTP", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("WindtornRuins.Seir", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "LowerWastes.WestTP", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "WoodsMain.AbovePit", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and cost_all(s, player, options, "LowerReach.Entry", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has_any(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "LowerReach.Entry", "LowerReach.AboveEntry", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Grenade', 1], ['Sentry', 1]], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and cost_all(s, player, options, "LowerReach.Central", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("SpiritLight", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Sentry', 2], ['Spear', 1]], [], []))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Sentry', 3]], [], []))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [['Sentry', 3], ['Spear', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Hammer"), player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [['Sentry', 4]], [], []))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [['Sentry', 3]], [], []))
    add_rule(world.get_location("F.LowerReach.OutsideTPRoom", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("DoubleJump", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.Teleporter", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "LowerReach.BelowTokk", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "LowerReach.BelowTokk", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has_all(("['Sword', 'Sentry']", "DoubleJump"), player) and s.has("LowerReach.FreezeCentralFurnace", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "LowerReach.BelowTokk", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.BelowTokk", "UpperReach.KeystoneRoom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has("Regenerate", player) and cost_all(s, player, options, "LowerReach.BelowTokk", "UpperReach.KeystoneRoom", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.BelowTokk", "UpperReach.BurrowArea", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and cost_all(s, player, options, "LowerReach.BelowTokk", "UpperReach.BurrowArea", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("LowerReach.Teleporter_to_LowerReach.OutsideTPRoom", player), lambda s: True)
    add_rule(world.get_location("LowerReach.MeltIceEX", player), lambda s: s.can_reach_region("LowerReach.SecondSoup") and cost_all(s, player, options, "LowerReach.SecondSoup", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: True)
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda s: s.can_reach_region("LowerReach.BelowLupo") and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.BelowLupo", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda s: s.can_reach_region("LowerReach.BelowLupo") and cost_all(s, player, options, "LowerReach.BelowLupo", "", [], [['Sentry', 1]], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.SecondSoup", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.WindChannel", player), lambda s: True)
    add_rule(world.get_location("LowerReach.WindLantern", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and cost_all(s, player, options, "LowerReach.WindChannel", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.WindLantern", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WindChannel", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.SoupMoki", "LowerReach.EastEnemyPaths", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.SoupMoki", "LowerReach.EastEnemyPaths", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.East", "LowerReach.SnowballEnemyPaths", [], [['Sentry', 1]], [], [[1, 'Grenade', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.East", "LowerReach.SnowballEnemyPaths", [], [['Sentry', 1]], [], [[1, 'Grenade', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.TPLantern", player), lambda s: s.can_reach_region("LowerReach.Snowball") and cost_all(s, player, options, "LowerReach.Snowball", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.TPLantern", player), lambda s: s.can_reach_region("LowerReach.Snowball") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Snowball", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.TPLantern", player), lambda s: s.can_reach_region("LowerReach.Snowball") and s.has("Launch", player) and cost_all(s, player, options, "LowerReach.Snowball", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.RolledSnowball", player), lambda s: s.can_reach_region("LowerReach.Snowball") and s.has("Launch", player) and cost_all(s, player, options, "LowerReach.Snowball", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.RolledSnowball", player), lambda s: s.can_reach_region("LowerReach.Snowball") and s.has_all(("DoubleJump", "Glide"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Snowball", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.IceCavern", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.EastFurnace", player), lambda s: True)
    add_rule(world.get_location("LowerReach.RoofRightEX", player), lambda s: s.can_reach_region("LowerReach.IceCavern") and s.has("['Sword', 'Sentry']", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.IceCavern", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.RoofRightEX", player), lambda s: s.can_reach_region("LowerReach.IceCavern") and s.has("['Hammer', 'Sentry']", player) and s.has("LowerReach.FreezeEastFurnace", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.IceCavern", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.IceCavern", "LowerReach.HalfwayIceCavern", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.IceCavern", "LowerReach.HalfwayIceCavern", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("LowerReach.FreezeEastFurnace", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.IceCavern", "LowerReach.HalfwayIceCavern", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("LowerReach.FreezeEastFurnace", player) and cost_all(s, player, options, "LowerReach.IceCavern", "LowerReach.HalfwayIceCavern", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.EastDoorLantern", player), lambda s: s.can_reach_region("LowerReach.HalfwayIceCavern") and s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "", [], [['Grenade', 1], ['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.EastDoorLantern", player), lambda s: s.can_reach_region("LowerReach.HalfwayIceCavern") and s.has_any(("Launch", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "LowerReach.IceCavern", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("LowerReach.FreezeEastFurnace", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "LowerReach.IceCavern", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.FreezeEastFurnace", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Water"), player) and s.has("LowerReach.EastDoorLantern", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("['Sword', 'Sentry']", "DoubleJump", "Glide"), player) and s.has("LowerReach.EastDoorLantern", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.EastFurnace", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("Dash", "DoubleJump", "LowerReach.FreezeEastFurnace"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.EastFurnace", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerReach.WindSpinners", "LowerReach.WispPathCheckpoint", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", "LowerReach.BridgeWispPath", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", "LowerReach.SnowEscape", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has_all(("Bash", "['Sword', 'Sentry']", "DoubleJump"), player) and s.has_any(("Dash", "TripleJump"), player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", "LowerReach.SnowEscape", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has_all(("Bash", "['Sword', 'Sentry']", "Grapple"), player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", "LowerReach.SnowEscape", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: True)
    add_rule(world.get_location("LowerReach.RightKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("DoubleJump", player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.TrialStart", "LowerReach.TownEntry", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "['Sword', 'Sentry']", "Grapple"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']", "Grapple", "Dash"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']", "Grapple", "Sword"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.KeystoneSnapPlantThawed", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "['Sword', 'Sentry']", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.KeystoneSnapPlantThawed", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("Dash", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.KeystoneSnapPlantThawed", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.KeystoneSnapPlantThawed", [], [['Sentry', 1]], [], [[2, 20]]))
    add_rule(world.get_location("UpperReach.SwingPoleEX", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and cost_all(s, player, options, "UpperReach.UpperSoupPaths", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperReach.MiddleRightKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupThawedPaths") and cost_all(s, player, options, "UpperReach.UpperSoupThawedPaths", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoomLedge") and s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperReach.SpringSeed", player), lambda s: s.can_reach_region("UpperReach.TreeRoom") and cost_all(s, player, options, "UpperReach.TreeRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperReach.HiddenEX", player), lambda s: s.can_reach_region("UpperReach.TreeRoom") and cost_all(s, player, options, "UpperReach.TreeRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has("Launch", player) and s.has("EastHollow.DepthsOpen", player) and cost_all(s, player, options, "UpperDepths.Entry", "EastHollow.AboveDepths", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperDepths.EntryRoofEX", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [['Sentry', 1]], [[32, 'Ranged']], []))
    add_rule(world.get_location("UpperDepths.EntryOre", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("['Sword', 'Sentry']", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperDepths.SwimEC", player), lambda s: s.can_reach_region("UpperDepths.FirstKSRoom") and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Bash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "", [], [], [[60, 'Shuriken']], []))
    add_rule(world.get_location("UpperDepths.SwimEC", player), lambda s: s.can_reach_region("UpperDepths.FirstKSRoom") and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "", [], [], [[60, 'Shuriken']], [[2, 30]]))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has("DoubleJump", player) and s.has("Bash", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "UpperDepths.FirstFirefly", [30], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "UpperDepths.FirstFirefly", [30], [['Sentry', 1]], [], [[0, [[12, 'Combat', 12, 'Combat']], []]]))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "UpperDepths.KeydoorLedge", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Grapple"), player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "UpperDepths.KeydoorLedge", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperDepths.RightEntryKS", player), lambda s: s.can_reach_region("UpperDepths.RightKeystonePath") and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.RightKeystonePath", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.RightKeystonePath", "UpperDepths.FirstKSRoom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("F.UpperDepths.BelowHive", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("F.UpperDepths.BelowHive", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("F.UpperDepths.BelowHive", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.BelowHive", "", [], [], [[60, 'Shuriken']], []))
    add_rule(world.get_location("UpperDepths.HiveEX", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has("Combat.Aerial", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "", [], [['Sentry', 1]], [[25, 'Combat']], []))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Teleporter", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "UpperDepths.Teleporter", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.Central", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.OutsideMoraFight", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.BelowHive", player), lambda s: s.has("DoubleJump", player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperDepths.Central", "UpperDepths.BelowHive", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperDepths.BossPathEX", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("DoubleJump", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_LowerDepths.East", player), lambda s: s.has("Regenerate", player) and s.has("DepthsLight", player) and s.has_any(("Launch", "DoubleJump", "Dash", "Glide", "Bash", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", "LowerDepths.East", [], [], [[60, 'Shuriken'], [12, 'Combat']], []))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.MoraPath") and s.has("['Sword', 'Sentry']", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.MoraPath") and s.has("['Hammer', 'Sentry']", player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.MoraPath") and s.has("['Hammer', 'Sentry']", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "", [], [['Sentry', 1]], [], [[2, 30]]))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("Grapple", "['Sword', 'Sentry']"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.OutsideMoraFight", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("Grapple", "['Hammer', 'Sentry']"), player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.OutsideMoraFight", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.OutsideMoraFight", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.OutsideMoraFight", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.OutsideMoraFight", [], [['Sentry', 3]], [], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "['Sword', 'Sentry']"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.BelowHive", [], [['Sentry', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']"), player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.BelowHive", [], [['Sentry', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.BelowHive", [], [['Sentry', 1]], [[20, 'Wall']], [[2, 30]]))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and s.has("Glide", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.BelowHive", [], [['Sentry', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.BelowHive", [], [['Sentry', 1]], [[20, 'Wall']], [[2, 30]]))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and s.has("Glide", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.BelowHive", [], [['Sentry', 2]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.BelowHive", [], [['Sentry', 2]], [[20, 'Wall']], [[2, 30]]))
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.Teleporter", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "UpperDepths.OutsideMoraFight", "UpperDepths.Teleporter", [], [['Sentry', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Grapple"), player) and cost_all(s, player, options, "MoraEscape", "MoraSecondPhase", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "UpperDepths.BelowHive", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("DoubleJump", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "UpperDepths.BelowHive", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "UpperDepths.BelowHive", [10], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "UpperDepths.BelowHive", [10], [['Sentry', 3]], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("DoubleJump", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "UpperDepths.BelowHive", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "UpperDepths.BelowHive", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [[60, 'Shuriken']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [[60, 'Shuriken']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [[60, 'Shuriken']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("WaterDash", player) and s.has("Water", player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [[60, 'Shuriken']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [[60, 'Shuriken']], [[2, 20]]))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Water", player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Water", player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [['Sentry', 2]], [], [[1, 'Flash', 0]]))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [10], [['Sentry', 1]], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.Central", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("E.LowerDepths.East", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("BreakCrystal", player) and cost_all(s, player, options, "LowerDepths.East", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [['Sentry', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "['Sword', 'Sentry']"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [30], [['Sentry', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Glide"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [30], [['Sentry', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "['Sword', 'Sentry']"), player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [['Sentry', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "['Hammer', 'Sentry']"), player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [['Sentry', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("DoubleJump", player) and s.has("Combat.Aerial", player) and s.has("TripleJump", player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "PoolsApproach.MillPath", [], [['Sentry', 1]], [[8, 'Combat', 8, 'Combat']], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [], [['Sentry', 1]], [[32, 'Combat'], [8, 'Combat']], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("DoubleJump", player) and s.has("Combat.Aerial", player) and s.has("TripleJump", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [], [['Sentry', 1]], [[8, 'Combat', 8, 'Combat']], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.OnTopOfWheel", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("C.PoolsApproach.OnTopOfWheel", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Water", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("DoubleJump", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Glide"), player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [['Sentry', 1]], [], [[2, 20]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Water"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Dash", "DoubleJump"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.BehindEntryDoor") and cost_all(s, player, options, "EastPools.BehindEntryDoor", "", [20], [['Sentry', 2]], [], []))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.BehindEntryDoor") and s.has_any(("DoubleJump", "Grapple"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_any(("Grapple", "DoubleJump"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "EastPools.TPArea", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: True)
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: True)
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.TPArea") and cost_all(s, player, options, "EastPools.TPArea", "", [], [['Sentry', 1]], [], [[1, 'Spear', 1], [1, 'Grenade', 1], [2, 20]]))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "EastPools.TPArea", "EastPools.FishingPool", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "EastPools.FishingPool", "EastPools.AboveFishingPool", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", "UpperPools.DrainPuzzleExit", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.LupoArea", player), lambda s: True)
    add_rule(world.get_location("EastPools.LupoEX", player), lambda s: s.can_reach_region("EastPools.LupoArea") and cost_all(s, player, options, "EastPools.LupoArea", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastPools.EnergyHarvestShard", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and cost_all(s, player, options, "EastPools.MissilePuzzle", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and s.has_any(("TripleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "EastPools.CentralRoom", "UpperPools.KeystoneRoomEntrance", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("WaterDash", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Dangerous", player) and s.has("Water", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Sentry', 1]], [[32, 'Combat'], [32, 'Combat']], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("WaterDash", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Sentry', 1]], [[32, 'Combat'], [32, 'Combat']], [[2, 20]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Bash", "WaterDash"), player) and s.has("Water", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Bash", "WaterDash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Sentry', 1]], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Sentry', 2]], [], [[2, 10]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Bash"), player) and s.has_any(("Water", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Bash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Sentry', 2]], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "UpperPools.RightBubbleSpamRoom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Bash"), player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "UpperPools.RightBubbleSpamRoom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "UpperPools.RightBubbleSpamRoom", [], [['Sentry', 1]], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.AboveTree", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperPools.TreeRoom", "UpperPools.AboveTree", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "UpperPools.TreeRoom", "UpperPools.TreeRoomEntrance", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.TreeRoom", "UpperPools.TreeRoomEntrance", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperPools.RoofEX", player), lambda s: s.can_reach_region("UpperPools.AboveTree") and cost_all(s, player, options, "UpperPools.AboveTree", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has("Grapple", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("['Sword', 'Sentry']", "Grapple"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("DoubleJump", "Dash", "Glide"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleExit", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Grapple"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Grapple"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Grapple"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Dash"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has_all(("['Sword', 'Sentry']", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.SunsetView", "LowerWastes.Shovel", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has_all(("['Sword', 'Sentry']", "DoubleJump"), player) and cost_all(s, player, options, "LowerWastes.SunsetView", "LowerWastes.Shovel", [], [['Sentry', 1]], [], [[2, 30]]))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "DoubleJump"), player) and cost_all(s, player, options, "LowerWastes.SunsetView", "LowerWastes.Shovel", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.Shovel", player), lambda s: True)
    add_rule(world.get_location("LowerWastes.SandPotHC", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and cost_all(s, player, options, "LowerWastes.SandPot", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.SandPot", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [30], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.LeverArea", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_any(("DoubleJump", "Bash", "Launch"), player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", "LowerWastes.BeforeMinesEntrance", [], [], [[60, 'Shuriken']], []))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.BeforeMinesEntrance", player), lambda s: True)
    add_rule(world.get_location("LowerWastes.BottomRightEX", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and cost_all(s, player, options, "LowerWastes.MinesEntrance", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", "LowerWastes.BeforeMinesEntrance", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_WindtornRuins.LowerRuins", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", "WindtornRuins.LowerRuins", [], [], [[60, 'Shuriken']], []))
    add_rule(world.get_location("LowerWastes.SandPlatformLever", player), lambda s: s.can_reach_region("LowerWastes.LeverArea") and cost_all(s, player, options, "LowerWastes.LeverArea", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerWastes.SandPlatformLever", player), lambda s: s.can_reach_region("LowerWastes.LeverArea") and s.has("Glide", player) and cost_all(s, player, options, "LowerWastes.LeverArea", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "LowerWastes.LeverArea", "LowerWastes.LastStandArea", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has_any(("Bash", "Grapple"), player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.ThirstyGorlek", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.UpperPath", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerWastes.LupoMap", player), lambda s: s.can_reach_region("LowerWastes.ThirstyGorlek") and s.has("SpiritLight", player) and cost_all(s, player, options, "LowerWastes.ThirstyGorlek", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerWastes.EastTPOre", player), lambda s: s.can_reach_region("LowerWastes.EastTP") and cost_all(s, player, options, "LowerWastes.EastTP", "", [], [['Sentry', 1]], [[20, 'Wall']], []))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and can_keystones(s, player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperWastes.LedgeEC", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleLeft") and s.has("DoubleJump", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleLeft", "", [], [['Sentry', 1]], [[60, 'Combat']], []))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda s: s.has_all(("Burrow", "Dash"), player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleRight", "UpperWastes.RuinsApproach", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda s: s.has_all(("Burrow", "Glide"), player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleRight", "UpperWastes.RuinsApproach", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "UpperWastes.RuinsApproach", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.RuinsApproach", "", [], [['Sentry', 1]], [], [[2, 30]]))
    add_rule(world.get_entrance("UpperWastes.RuinsApproach_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has_all(("Burrow", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "UpperWastes.RuinsApproach", "UpperWastes.MissilePuzzleRight", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperWastes.RuinsApproach_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has_all(("Burrow", "['Hammer', 'Sentry']"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "UpperWastes.RuinsApproach", "UpperWastes.MissilePuzzleRight", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperWastes.FlowersSeed", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Burrow", "Bash", "Dash"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperWastes.FlowersSeed", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Burrow", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [30], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperWastes.FlowersSeed", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Burrow", "DoubleJump", "Dash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperWastes.FlowersSeed", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Burrow", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("UpperWastes.FlowersSeed", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has("Launch", player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins") and s.has("Glide", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", "UpperWastes.NorthTP", [], [['Sentry', 1]], [[32, 'Combat'], [60, 'Combat']], []))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", "WindtornRuins.RuinsTP", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.BrokenMural", player), lambda s: s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", "WindtornRuins.BrokenMural", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WindtornRuins.LowerRuins", "WindtornRuins.FallenPillar", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WeepingRidge.ElevatorFightCompleted", player), lambda s: s.can_reach_region("WeepingRidge.Bottom") and s.has("Combat.Dangerous", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "WeepingRidge.Bottom", "", [], [['Sentry', 1]], [[80, 'Combat', 80, 'Combat'], [50, 'Combat', 50, 'Combat']], []))
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.Bottom", "WeepingRidge.LaunchArea", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WeepingRidge.Bottom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WeepingRidge.SpikeClimbEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [40], [['Sentry', 2]], [], []))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.Entry") and cost_all(s, player, options, "WillowsEnd.Entry", "", [20], [['Sentry', 2]], [], []))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.Entry") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.Entry", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.BoulderHeartPath", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.BoulderHeartPath", [40], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("['Sword', 'Sentry']", "DoubleJump"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeart", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("E.WillowsEnd.GrappleHeart", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [40], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("DoubleJump", player) and s.has("Combat.Dangerous", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.InnerTP", "WillowsEnd.AboveInnerTP", [], [['Sentry', 1]], [[80, 'Combat']], []))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Combat.Dangerous", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.InnerTP", "WillowsEnd.AboveInnerTP", [40], [['Sentry', 1]], [[80, 'Combat']], []))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Bash", "['Sword', 'Sentry']"), player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", "WillowsEnd.East", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", "WillowsEnd.East", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", "WillowsEnd.East", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectHeartPath", player), lambda s: True)
    add_rule(world.get_location("E.WillowsEnd.Upper", player), lambda s: s.can_reach_region("WillowsEnd.Upper") and s.has("BreakCrystal", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "WillowsEnd.Upper", "", [], [['Sentry', 1]], [[80, 'Combat']], []))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.Upper", "WillowsEnd.West", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WillowsEnd.Upper", "WillowsEnd.UpperHeartPath", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "WillowsEnd.West", "WillowsEnd.Upper", [], [['Sentry', 1]], [[10, 'Wall']], []))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.West", "WillowsEnd.Upper", [], [['Sentry', 2]], [[10, 'Wall']], []))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.West", "WillowsEnd.Upper", [], [['Sentry', 1]], [[10, 'Wall']], []))
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.GlideRooms", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WillowsEnd.GlideHeartPath", "WillowsEnd.GlideRooms", [], [['Sentry', 1]], [[32, 'Combat']], []))
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.GlideRooms", player), lambda s: True)


def set_kii_rules(world, player, options):
    """Kii (or hard) rules"""
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has("Grapple", player) and cost_all(s, player, options, "MarshSpawn.Main", "", [], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has_all(("Bash", "Launch"), player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "MarshSpawn.Main", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has_all(("Launch", "Sword"), player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_location("MarshSpawn.BridgeEX", player), lambda s: s.can_reach_region("MarshSpawn.Main") and cost_all(s, player, options, "MarshSpawn.Main", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("MarshSpawn.BridgeEX", player), lambda s: s.can_reach_region("MarshSpawn.OpherBarrier") and s.has("MarshSpawn.ToOpherBarrier", player) and cost_all(s, player, options, "MarshSpawn.OpherBarrier", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda s: s.has("Bash", player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda s: s.has_any(("Dash", "Sword"), player))
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda s: True)
    add_rule(world.get_location("MarshSpawn.BashEC", player), lambda s: s.can_reach_region("MarshSpawn.BrokenBridge") and s.has_all(("Sword", "DoubleJump"), player) and s.has("HowlsDen.RainLifted", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("Hammer", player) and s.has("MarshSpawn.LogBroken", player))
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("Sword", player) and s.has("MarshSpawn.LogBroken", player) and s.has_any(("Glide", "HowlsDen.RainLifted"), player))
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("Sword", player) and s.has("MarshSpawn.LogBroken", player) and cost_all(s, player, options, "MarshSpawn.BrokenBridge", "MarshSpawn.OpherBarrier", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has_all(("Grapple", "Bash"), player) and s.has("Hammer", player))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has("Hammer", player))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has_all(("Bash", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", "", [], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has("Bash", player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has_all(("DoubleJump", "Sword"), player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: True)
    add_rule(world.get_location("MarshSpawn.CaveKS", player), lambda s: s.can_reach_region("MarshSpawn.Cave") and s.has("Sword", player))
    add_rule(world.get_location("MarshSpawn.CaveKS", player), lambda s: s.can_reach_region("MarshSpawn.Cave") and s.has("Hammer", player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("MarshSpawn.CaveFight", player) and cost_all(s, player, options, "MarshSpawn.Cave", "MarshSpawn.PoolsBurrowsSignpost", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Glide", player) and s.has("MarshSpawn.CaveFight", player) and cost_all(s, player, options, "MarshSpawn.Cave", "MarshSpawn.PoolsBurrowsSignpost", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.BurrowFightArena") and s.has("Burrow", player) and s.has_any(("Glide", "Hammer", "Sword"), player))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.BurrowFightArena") and s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "", [10], [['Shuriken', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.BurrowFightArena") and s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "", [], [['Shuriken', 2]], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.BurrowFightArena") and s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LifepactLedge", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Water"), player) and s.has_any(("Sword", "Hammer", "Glide"), player))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Water"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "MarshSpawn.LeftSpawnSignpost", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]]))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "MarshSpawn.LeftSpawnSignpost", [40], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "MarshSpawn.LeftSpawnSignpost", [30], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "MarshSpawn.LeftSpawnSignpost", [30], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "WaterDash"), player) and s.has_any(("DoubleJump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "MarshSpawn.LeftSpawnSignpost", [20], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "WaterDash"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "MarshSpawn.LeftSpawnSignpost", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "MarshSpawn.LifepactLedge", "MarshSpawn.BurrowFightArena", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: True)
    add_rule(world.get_location("E.MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and s.has("BreakCrystal", player))
    add_rule(world.get_location("MarshSpawn.CaveOre", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and s.has("Hammer", player))
    add_rule(world.get_location("MarshSpawn.CaveOre", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "", [10], [], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "", [10], [], [], [[1, 'Shuriken', 3], [1, 'Sentry', 3]]))
    add_rule(world.get_location("MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "", [20], [], [], [[1, 'Blaze', 3], [1, 'Flash', 2]]))
    add_rule(world.get_location("MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "", [30], [['Spear', 3]], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "", [40], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.BeforeBurrows", [20], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.BeforeBurrows", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Dash"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.BeforeBurrows", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Sword"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.BeforeBurrows", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.BeforeBurrows", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.BeforeBurrows", [10], [], [], [[1, 'Shuriken', 3], [1, 'Sentry', 3]]))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.BeforeBurrows", [20], [], [], [[1, 'Blaze', 3], [1, 'Flash', 2]]))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.BeforeBurrows", [30], [['Spear', 3]], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.BeforeBurrows", [40], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has_any(("DoubleJump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.LifepactLedge", [], [], [[32, 'Ranged'], [13, 'Combat']], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.LifepactLedge", [], [], [[32, 'Ranged'], [13, 'Combat']], [[1, 'Spear', 3], [1, 'Shuriken', 3], [1, 'Flash', 3], [1, 'Sentry', 3]]))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.LifepactLedge", [10], [], [[32, 'Ranged'], [13, 'Combat']], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has_any(("DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.LifepactLedge", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.LifepactLedge", [], [], [], [[1, 'Spear', 3], [1, 'Shuriken', 3], [1, 'Flash', 3], [1, 'Sentry', 3]]))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.LifepactLedge", [10], [], [], [[2, 10], [1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("MarshSpawn.CrusherSwimEX", player), lambda s: s.can_reach_region("MarshSpawn.BeforeBurrows") and s.has("WaterDash", player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "", [20], [], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.can_reach_region("MarshSpawn.BeforeBurrows") and s.has_all(("Bash", "Sword"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.can_reach_region("MarshSpawn.BeforeBurrows") and s.has_all(("Bash", "Glide", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "MarshSpawn.BurrowsEntry", [10], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("WaterDash", player) and s.has_any(("Dash", "DoubleJump"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "MarshSpawn.BurrowsEntry", [20], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("WaterDash", "Bash"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "MarshSpawn.BurrowsEntry", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Bash", "DoubleJump"), player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "MarshSpawn.PoolsBurrowsSignpost", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "MarshSpawn.PoolsBurrowsSignpost", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "MarshSpawn.PoolsBurrowsSignpost", [20], [], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowsOpen", player), lambda s: s.can_reach_region("MarshSpawn.BurrowsEntry") and s.has_all(("Bash", "DoubleJump"), player))
    add_rule(world.get_location("MarshSpawn.BurrowsOpen", player), lambda s: s.can_reach_region("MarshSpawn.BurrowsEntry") and s.has("Bash", player) and s.has_any(("Dash", "Sword"), player))
    add_rule(world.get_location("MarshSpawn.BurrowsOpen", player), lambda s: s.can_reach_region("MarshSpawn.BurrowsEntry") and s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BurrowsEntry", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("MarshSpawn.CrusherSwimEX", player), lambda s: s.can_reach_region("MarshSpawn.BurrowsEntry") and s.has("WaterDash", player) and cost_all(s, player, options, "MarshSpawn.BurrowsEntry", "", [20], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_any(("Hammer", "Water"), player))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MarshSpawn.BurrowsEntry", "MarshSpawn.BeforeBurrows", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has_all(("Water", "Burrow"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has_all(("Burrow", "WaterDash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "", [10], [['Shuriken', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has("Burrow", player) and s.has("WaterDash", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "", [20], [], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "", [20], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "", [30], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Launch", player) and s.has("Glide", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.PoolsPath", [6], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.PoolsPath", [6], [], [], [[2, 10]]))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Launch", "Glide"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Launch", "Glide"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.PoolsPath", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.PoolsPath", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.PoolsPath", [20], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Water", "Burrow"), player) and s.has("Bash", player))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Water", "Burrow"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.BurrowFightArena", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Burrow", player) and s.has_any(("Bash", "DoubleJump", "Dash", "Glide", "Launch", "Sword", "Hammer", "WaterDash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.BurrowFightArena", [20], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.BurrowFightArena", [20], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.BurrowFightArena", [30], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "WaterDash"), player) and s.has_any(("Bash", "DoubleJump", "Dash", "Glide", "Launch", "Sword", "Hammer", "WaterDash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.BurrowFightArena", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "WaterDash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.BurrowFightArena", [10], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and s.has_all(("DoubleJump", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", "", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and s.has("Glide", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 20]]))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Water"), player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", "PoolsApproach.OnTopOfWheel", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("WaterDash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", "MarshSpawn.LeftSpawnSignpost", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", "MarshSpawn.LeftSpawnSignpost", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", "MarshSpawn.LeftSpawnSignpost", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Bash", "TripleJump", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", "MarshSpawn.LeftSpawnSignpost", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Bash", "Dash"), player))
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: True)
    add_rule(world.get_location("MarshSpawn.RecklessShard", player), lambda s: s.can_reach_region("MarshSpawn.MokkTheBrave") and s.has("Sword", player) and s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "", [], [], [[10, 'Wall']], []))
    add_rule(world.get_location("MarshSpawn.RecklessShard", player), lambda s: s.can_reach_region("MarshSpawn.MokkTheBrave") and s.has("Glide", player) and s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "", [], [], [[10, 'Wall']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Sword", player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "MarshSpawn.HowlApproach", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Sword", player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and s.has("Hammer", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "MarshSpawn.AboveHowlArena", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "MarshSpawn.AboveHowlArena", [], [['Shuriken', 1]], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "MarshSpawn.FangPlatform", "MarshSpawn.AboveHowlArena", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]]))
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshSpawn.FangPlatform", "MarshSpawn.AboveHowlArena", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]]))
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance_to_MarshSpawn.MokkTheBrave", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.HowlsDenEntrance", "MarshSpawn.MokkTheBrave", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopExit", "MarshSpawn.HowlsDenEntrance", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has_any(("Hammer", "Glide", "Bash"), player))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", "HowlsDen.UpperLoopExit", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("WaterDash", player) and s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has("Water", player))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("WaterDash", player) and s.has("HowlsDen.UpperLoopEntranceBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", "HowlsDen.UpperLoopExit", [], [], [], [[2, 10]]))
    add_rule(world.get_location("HowlsDen.AboveDoorKS", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("HowlsDen.AboveDoorKS", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and cost_all(s, player, options, "HowlsDen.BoneBridge", "", [], [], [], [[1, 'Flash', 3], [1, 'Sentry', 3]]))
    add_rule(world.get_location("HowlsDen.AboveDoorKS", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and cost_all(s, player, options, "HowlsDen.BoneBridge", "", [10], [], [], [[1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("HowlsDen.MagnetShard", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.BoneBridge", "", [], [['Grenade', 1]], [[10, 'Wall']], []))
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor_to_HowlsDen.OutsideSecretRoom", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.BoneBridgeDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", "HowlsDen.BoneBridgeDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.BoneBridgeDoor", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", "HowlsDen.MidwayBottomLoop", [10, 10], [], [], []))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Bash", player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", "HowlsDen.MidwayBottomLoop", [], [], [], [[1, 'Grenade', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has_all(("WaterDash", "Bash"), player) and s.has("HowlsDen.RainLifted", player) and s.has("Water", player))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has_all(("WaterDash", "Bash"), player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", "HowlsDen.MidwayBottomLoop", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", "HowlsDen.AboveBoneBridge", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "HowlsDen.SecretRoom", "HowlsDen.LeftSecretRoom", [10], [], [], []))
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: True)
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom") and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom") and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "", [], [], [], [[1, 'Spear', 3], [1, 'Shuriken', 3], [1, 'Flash', 3], [1, 'Sentry', 3]]))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom") and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "", [10], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom") and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "", [10, 10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom") and s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom") and s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]]))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Glide"), player))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "HowlsDen.SecretRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]]))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has_any(("Dash", "Hammer"), player))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has_all(("Sword", "Grapple"), player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "HowlsDen.SecretRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has_all(("Sword", "Water"), player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "HowlsDen.SecretRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "HowlsDen.SecretRoom", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter_to_HowlsDen.BoneBridge", player), lambda s: s.has("HowlsDen.BoneBarrier", player))
    add_rule(world.get_location("HowlsDen.LaserKS", player), lambda s: s.can_reach_region("HowlsDen.Teleporter") and s.has_any(("Hammer", "Bash"), player))
    add_rule(world.get_location("HowlsDen.LaserKS", player), lambda s: s.can_reach_region("HowlsDen.Teleporter") and cost_all(s, player, options, "HowlsDen.Teleporter", "", [], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_location("HowlsDen.LaserKS", player), lambda s: s.can_reach_region("HowlsDen.Teleporter") and s.has("Glide", player) and cost_all(s, player, options, "HowlsDen.Teleporter", "", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("HowlsDen.LaserKS", player), lambda s: s.can_reach_region("HowlsDen.Teleporter") and s.has("Sword", player) and cost_all(s, player, options, "HowlsDen.Teleporter", "", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has_any(("Sword", "Dash"), player))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "HowlsDen.Teleporter", "HowlsDen.DoubleJumpApproach", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "HowlsDen.Teleporter", "HowlsDen.AboveTeleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.DoubleJumpApproach", "HowlsDen.DoubleJumpTreeLedge", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("HowlsDen.DoubleJumpEX", player), lambda s: s.can_reach_region("HowlsDen.DoubleJumpTreeLedge") and s.has("Bash", player))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpApproach", player), lambda s: True)
    add_rule(world.get_location("HowlsDen.DoubleJumpEX", player), lambda s: s.can_reach_region("HowlsDen.DoubleJumpTreeArea") and s.has_all(("Dash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has_any(("Bash", "Sword", "Dash"), player))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "HowlsDen.DoubleJumpTreeArea", "HowlsDen.DoubleJumpTreeLedge", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("Water", player))
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "MarshPastOpher.MillView", "MarshPastOpher.OpherSkipBranch", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("TripleJump", player) and s.has("Water", player) and cost_all(s, player, options, "MarshPastOpher.MillView", "MarshPastOpher.OpherSkipBranch", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "MarshPastOpher.MillView", "MarshPastOpher.OpherSkipBranch", [], [['Grenade', 1]], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "MarshPastOpher.OpherSkipBranch", "MarshPastOpher.PoolsPathEast", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("MarshPastOpher.TrialLeftEX", player), lambda s: s.can_reach_region("MarshPastOpher.UnderTrunk") and cost_all(s, player, options, "MarshPastOpher.UnderTrunk", "", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1], [1, 'Blaze', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_location("MarshPastOpher.TrialEC", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has("Hammer", player))
    add_rule(world.get_location("MarshPastOpher.TrialEC", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and cost_all(s, player, options, "MarshPastOpher.TrialArea", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("MarshPastOpher.TrialEC", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and cost_all(s, player, options, "MarshPastOpher.TrialArea", "", [10], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_location("MarshPastOpher.TrialRightEX", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has("Bash", player))
    add_rule(world.get_location("MarshPastOpher.TrialRightEX", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", "MarshPastOpher.BowPath", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: True)
    add_rule(world.get_location("MarshPastOpher.SwingPoleEX", player), lambda s: s.can_reach_region("MarshPastOpher.BowPath") and s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowPath", "", [10], [], [], []))
    add_rule(world.get_location("MarshPastOpher.SwingPoleEX", player), lambda s: s.can_reach_region("MarshPastOpher.BowPath") and cost_all(s, player, options, "MarshPastOpher.BowPath", "", [10], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", "MarshPastOpher.PoolsPathEast", [], [], [], [[1, 'Bow', 2], [1, 'Spear', 3]]))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", "MarshPastOpher.PoolsPathEast", [], [['Grenade', 1], ['Spear', 2]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", "MarshPastOpher.PoolsPathEast", [], [['Bow', 1]], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", "MarshPastOpher.PoolsPathEast", [], [['Spear', 1]], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", "MarshPastOpher.PoolsPathEast", [], [], [], [[1, 'Bow', 1], [1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Grenade', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide", "Hammer", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", "MarshPastOpher.PoolsPathEast", [], [['Spear', 3]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide", "Hammer", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", "MarshPastOpher.PoolsPathEast", [], [['Grenade', 1], ['Spear', 2]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Hammer", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", "MarshPastOpher.PoolsPathEast", [], [['Bow', 2]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.BowArea", "MarshPastOpher.UpperBowArea", [], [['Bow', 2]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: s.has_any(("Glide", "Hammer"), player))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: True)
    add_rule(world.get_location("MarshPastOpher.CeilingEX", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathEast") and s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", "", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("MarshPastOpher.CeilingEX", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathEast") and s.has_all(("Bash", "Dash"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", "MarshPastOpher.PoolsPathMiddle", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", "MarshPastOpher.PoolsPathMiddle", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", "MarshPastOpher.PoolsPathMiddle", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", "MarshPastOpher.PoolsPathMiddle", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]]))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathMiddle") and s.has_any(("Glide", "Sword", "DoubleJump"), player))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathMiddle") and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "", [], [], [], [[1, 'Sentry', 3]]))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathMiddle") and s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathMiddle") and s.has("Dash", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathBellowOneWayWall", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Bash", "Water"), player) and s.has("WaterDash", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Bash", "Water"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathBellowOneWayWall", [], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Launch", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathBellowOneWayWall", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Hammer", "Water", "WaterDash", "DoubleJump"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Water", "WaterDash", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Water", "WaterDash", "DoubleJump"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Spear', 1]], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_any(("Glide", "DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has_all(("Bash", "Hammer"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", "MarshPastOpher.PoolsPathWest", [20], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", "MarshPastOpher.PoolsPathWest", [10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathWest", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Sentry', 2], [2, 10]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathWest", [20], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Hammer", player) and s.has_any(("Dash", "DoubleJump"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Dash", player) and s.has("Water", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathEast", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathEast", [], [['Spear', 1]], [], [[2, 10], [1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathEast", [10], [['Spear', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("DoubleJump", player) and s.has("Water", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathEast", [], [['Spear', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathEast", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathEast", [20], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathEast", [10], [['Spear', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [20], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Glide", player) and s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [10], [['Shuriken', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [10], [['Flash', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [10], [['Sentry', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Dash", player) and s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathBellowOneWayWall", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathBellowOneWayWall", [10], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathBellowOneWayWall", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathBellowOneWayWall", [10], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathBellowOneWayWall", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MidnightBurrows.BelowLupo", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.BurrowsOpen", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.BurrowsOpen", player) and cost_all(s, player, options, "MidnightBurrows.Teleporter", "MarshSpawn.BurrowsEntry", [], [], [], [[1, 'Shuriken', 3], [1, 'Sentry', 4]]))
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.BurrowsOpen", player) and cost_all(s, player, options, "MidnightBurrows.Teleporter", "MarshSpawn.BurrowsEntry", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("MidnightBurrows.LeftKS", player), lambda s: s.can_reach_region("MidnightBurrows.BelowLupo"))
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda s: s.has_any(("DoubleJump", "Dash", "Sword", "Hammer", "Glide", "Bash"), player))
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda s: True)
    add_rule(world.get_location("MidnightBurrows.Lever", player), lambda s: s.can_reach_region("MidnightBurrows.Central") and cost_all(s, player, options, "MidnightBurrows.Central", "", [15], [['Blaze', 1]], [], []))
    add_rule(world.get_location("MidnightBurrows.DeflectorShard", player), lambda s: s.can_reach_region("MidnightBurrows.Central") and s.has("MidnightBurrows.Lever", player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player))
    add_rule(world.get_location("MidnightBurrows.DeflectorShard", player), lambda s: s.can_reach_region("MidnightBurrows.Central") and s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.Central", "", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2], [1, 'Flash', 2]]))
    add_rule(world.get_location("MidnightBurrows.DeflectorShard", player), lambda s: s.can_reach_region("MidnightBurrows.Central") and s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.Central", "", [15], [], [], [[1, 'Spear', 2], [1, 'Blaze', 2]]))
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has("Sword", player))
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "MidnightBurrows.Central", "MidnightBurrows.TabletRoom", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.PortalRoom", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has_any(("Dash", "Sword"), player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", "MidnightBurrows.LeverRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 2]]))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", "MidnightBurrows.LeverRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", "MidnightBurrows.LeverRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", "MidnightBurrows.LeverRoom", [15], [], [], []))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("DoubleJump", player) and s.has("MidnightBurrows.Lever", player) and s.has("TripleJump", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", "MidnightBurrows.BelowUpperKS", [15], [], [], []))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("MidnightBurrows.Lever", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("MidnightBurrows.Lever", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", "MidnightBurrows.East", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 3]]))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("Bash", player) and s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", "MidnightBurrows.East", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.Central", player), lambda s: True)
    add_rule(world.get_location("MidnightBurrows.LowerKS", player), lambda s: s.can_reach_region("MidnightBurrows.LeverRoom") and s.has("Dash", player))
    add_rule(world.get_location("MidnightBurrows.LowerKS", player), lambda s: s.can_reach_region("MidnightBurrows.LeverRoom") and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "", [], [], [], [[1, 'Sentry', 3]]))
    add_rule(world.get_location("MidnightBurrows.LowerKS", player), lambda s: s.can_reach_region("MidnightBurrows.LeverRoom") and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "", [15], [], [], []))
    add_rule(world.get_location("MidnightBurrows.LowerKS", player), lambda s: s.can_reach_region("MidnightBurrows.LeverRoom") and s.has("DoubleJump", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("MidnightBurrows.LowerKS", player), lambda s: s.can_reach_region("MidnightBurrows.LeverRoom") and s.has("Hammer", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "MidnightBurrows.PortalRoom", [15], [], [], []))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "MidnightBurrows.PortalRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "MidnightBurrows.PortalRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Glide", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "MidnightBurrows.PortalRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "MidnightBurrows.PortalRoom", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "MidnightBurrows.PortalRoom", [60], [], [], []))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "MidnightBurrows.PortalRoom", [45], [], [], []))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "MidnightBurrows.PortalRoom", [45], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "MidnightBurrows.PortalRoom", [30], [], [], []))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "MidnightBurrows.PortalRoom", [75], [], [], []))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "MidnightBurrows.PortalRoom", [90], [], [], []))
    add_rule(world.get_entrance("MidnightBurrows.East_to_MidnightBurrows.DenConnection", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.DenConnection_to_MidnightBurrows.PortalCorridor", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MidnightBurrows.PortalCorridor", "MidnightBurrows.BelowUpperKS", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [2, 15]]))
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "MidnightBurrows.PortalCorridor", "MidnightBurrows.BelowUpperKS", [], [], [], [[1, 'Shuriken', 4], [1, 'Sentry', 4], [2, 15]]))
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MidnightBurrows.PortalCorridor", "MidnightBurrows.BelowUpperKS", [15], [], [], []))
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: True)
    add_rule(world.get_location("MidnightBurrows.UpperKS", player), lambda s: s.can_reach_region("MidnightBurrows.BelowUpperKS"))
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS_to_MidnightBurrows.PortalCorridor", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS_to_MidnightBurrows.PortalCorridor", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS_to_MidnightBurrows.PortalCorridor", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS_to_MidnightBurrows.PortalCorridor", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS_to_MidnightBurrows.PortalCorridor", player), lambda s: True)
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.Entrance") and s.has("Hammer", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Dash", "DoubleJump"), player) and cost_all(s, player, options, "WestHollow.Entrance", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.Entrance") and s.has("Glide", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.Entrance", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.Entrance") and s.has("Glide", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", "", [], [['Bow', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.Entrance") and s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.Entrance_to_MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and s.has("Bash", player))
    add_rule(world.get_entrance("WestHollow.Entrance_to_MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and cost_all(s, player, options, "WestHollow.Entrance", "MarshPastOpher.BowArea", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "WestHollow.Entrance", "WestHollow.MokiByTwillen", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WestHollow.Entrance", "WestHollow.InFrontPurpleDoorEnemyPaths", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WestHollow.UpperDrainLeverPulled", player), lambda s: s.can_reach_region("WestHollow.MokiByTwillen") and s.has("Hammer", player))
    add_rule(world.get_location("WestHollow.UpperDrainLeverPulled", player), lambda s: s.can_reach_region("WestHollow.MokiByTwillen") and cost_all(s, player, options, "WestHollow.MokiByTwillen", "", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.InFrontPurpleDoor") and s.has("Dash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has("Sword", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.InFrontPurpleDoor") and s.has("Dash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", "", [], [['Bow', 1]], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.InFrontPurpleDoor") and s.has("DoubleJump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has("Sword", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.InFrontPurpleDoor") and s.has("DoubleJump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", "", [], [['Bow', 1]], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.InFrontPurpleDoor") and s.has("Sword", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", "", [], [['Bow', 1], ['Shuriken', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", "WestHollow.MokiByTwillen", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Dash", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", "WestHollow.MokiByTwillen", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("DoubleJump", player) and s.has("Glide", player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", "WestHollow.MokiByTwillen", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", "WestHollow.MokiByTwillen", [10], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.Entrance", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.Entrance", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoorEnemyPaths_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has("Sword", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.RockPuzzle", [], [], [], [[1, 'Blaze', 6], [1, 'Sentry', 3]]))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.UpperTongueExtended", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.RockPuzzle", [], [['Bow', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("Hammer", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.RockPuzzle", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.Entrance", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestHollow.RockPuzzleSolved", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [], [['Bow', 4]], [], []))
    add_rule(world.get_location("WestHollow.RockPuzzleSolved", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has("Hammer", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.RockPuzzleSolved", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [], [['Bow', 1]], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("WestHollow.RockPuzzleSolved", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.RockPuzzleSolved", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Dash", "Glide", "Hammer"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.FarLeftRoom", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.FarLeftRoom", [], [['Bow', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("DoubleJump", player) and s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("Sword", player) and s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("DoubleJump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has("Hammer", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.HollowDrainMiddle", [20], [], [], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("DoubleJump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.HollowDrainMiddle", [20], [], [], [[1, 'Spear', 2]]))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("DoubleJump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.HollowDrainMiddle", [20], [['Spear', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]]))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Bow', 2]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("DoubleJump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Bow', 1]], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WaterDash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has_all(("Dash", "Hammer"), player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [10], [], [], []))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("DoubleJump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has("TripleJump", player))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("DoubleJump", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WestHollow.FullyDrained", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Bow', 1], ['Sentry', 2]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("DoubleJump", player) and s.has("WestHollow.FullyDrained", player) and s.has_any(("Hammer", "WestHollow.UpperTongueExtended"), player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Dash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Hammer", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Hammer", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.HollowDrainMiddle", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]]))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Sword", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player) and s.has("Glide", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Sword", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.HollowDrainMiddle", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Glide", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.HollowDrainMiddle", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Glide", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.HollowDrainMiddle", [10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.RockPuzzle", [], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("Glide", player) and s.has("WestHollow.FullyDrained", player) and s.has("Sword", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("Glide", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.RockPuzzle", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueRetracted", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", "WestHollow.SubmergedPlatform", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Dash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Dash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", "WestHollow.SubmergedPlatform", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", "WestHollow.SubmergedPlatform", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]]))
    add_rule(world.get_location("WestHollow.QuickshotShard", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("WaterDash", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("Sword", player) and s.has("SpiritLight", player))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has_all(("DoubleJump", "Glide"), player) and s.has("SpiritLight", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("Dash", player) and s.has("SpiritLight", player) and s.has("Hammer", player))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("Dash", player) and s.has("SpiritLight", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("Hammer", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.TrialApproach", [], [['Sentry', 2]], [[13, 'Combat'], [20, 'Combat', 20, 'Combat']], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.PolesPound", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.AboveJumppad", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Hammer", player) and s.has("Bash", player))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "WestHollow.TrialApproach", "WestHollow.TrialStart", [], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has_all(("Glide", "Bash"), player))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestHollow.TrialApproach", "WestHollow.TrialStart", [], [], [[13, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: True)
    add_rule(world.get_location("WestHollow.BelowLupoEX", player), lambda s: s.can_reach_region("WestHollow.PolesPound") and s.has("DoubleJump", player) and s.has("Glide", player))
    add_rule(world.get_location("WestHollow.BelowLupoEX", player), lambda s: s.can_reach_region("WestHollow.PolesPound") and s.has("DoubleJump", player) and cost_all(s, player, options, "WestHollow.PolesPound", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestHollow.BelowLupoEX", player), lambda s: s.can_reach_region("WestHollow.PolesPound") and s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WestHollow.BelowLupoEX", player), lambda s: s.can_reach_region("WestHollow.PolesPound") and s.has("Dash", player) and cost_all(s, player, options, "WestHollow.PolesPound", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.PolesPound", "WestHollow.HollowDrainLower", [], [], [], [[1, 'Shuriken', 3], [1, 'Sentry', 4]]))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestHollow.PolesPound", "WestHollow.HollowDrainLower", [], [], [[13, 'Combat']], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Glide", player) and s.has("Bash", player) and cost_all(s, player, options, "WestHollow.PolesPound", "WestHollow.HollowDrainLower", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Glide", player) and s.has("Bash", player) and cost_all(s, player, options, "WestHollow.PolesPound", "WestHollow.HollowDrainLower", [10], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestHollow.PolesPound", "WestHollow.HollowDrainLower", [10], [['Spear', 1]], [], [[0, [[13, 'Combat']], []]]))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has_all(("WaterDash", "Bash"), player) and cost_all(s, player, options, "WestHollow.PolesPound", "WestHollow.HollowDrainLower", [30], [], [], []))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has_all(("WaterDash", "Water", "Bash"), player) and cost_all(s, player, options, "WestHollow.PolesPound", "WestHollow.HollowDrainLower", [10], [], [], []))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestHollow.PolesPound", "WestHollow.HollowDrainLower", [30], [], [[13, 'Combat']], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has_all(("WaterDash", "Water"), player) and cost_all(s, player, options, "WestHollow.PolesPound", "WestHollow.HollowDrainLower", [10], [], [[13, 'Combat']], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("WestHollow.TrialActivation", player), lambda s: s.can_reach_region("WestHollow.DashApproach"))
    add_rule(world.get_location("WestHollow.DoorLever", player), lambda s: s.can_reach_region("WestHollow.DashApproach") and s.has("Hammer", player))
    add_rule(world.get_location("WestHollow.DoorLever", player), lambda s: s.can_reach_region("WestHollow.DashApproach") and cost_all(s, player, options, "WestHollow.DashApproach", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Glide", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WestHollow.DashApproach", "WestHollow.HollowDrainLower", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.DashApproach", "WestHollow.HollowDrainLower", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.DashApproach", "WestHollow.HollowDrainLower", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestHollow.DashApproach", "WestHollow.HollowDrainLower", [], [], [], [[1, 'Shuriken', 4], [1, 'Flash', 4], [1, 'Sentry', 4]]))
    add_rule(world.get_entrance("WestHollow.DashArea_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WestHollow.DashArea_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WestHollow.DashArea_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("WestHollow.DoorLever", player))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashRoomTopRight", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashRoomTopRight", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [2, 10]]))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Glide", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashRoomTopRight", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashRoomTopRight", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashRoomTopRight", [10], [], [], [[1, 'Shuriken', 3], [1, 'Flash', 3], [1, 'Sentry', 3]]))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashRoomTopRight", [], [], [], [[1, 'Shuriken', 4], [1, 'Flash', 4], [1, 'Sentry', 4]]))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashRoomTopRight", [], [], [], [[1, 'Shuriken', 4], [1, 'Flash', 4], [1, 'Sentry', 4]]))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashRoomTopRight", [10], [], [], [[1, 'Shuriken', 3], [1, 'Flash', 3], [1, 'Sentry', 3]]))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda s: s.can_reach_region("WestHollow.DashRoomTopRight") and s.has_all(("DoubleJump", "Hammer"), player))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda s: s.can_reach_region("WestHollow.DashRoomTopRight") and s.has("DoubleJump", player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", "", [], [], [[12, 'Combat']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda s: s.can_reach_region("WestHollow.DashRoomTopRight") and s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", "", [], [], [[12, 'Combat']], []))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda s: s.can_reach_region("WestHollow.DashRoomTopRight") and s.has("Dash", player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", "", [], [], [[12, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda s: s.can_reach_region("WestHollow.DashRoomTopRight") and s.has_all(("Bash", "DoubleJump"), player))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashCrushers", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.AboveDashSemisolid_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.AboveDashSemisolid_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WestHollow.AboveDashSemisolid", "WestHollow.DashRoomTopRight", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda s: s.can_reach_region("EastHollow.Teleporter") and s.has("Bash", player))
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("Bash", player))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda s: s.can_reach_region("EastHollow.VoiceDoorPlatform") and s.has_all(("DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.AfterBeetleFight", player), lambda s: s.has_all(("Dash", "DoubleJump"), player))
    add_rule(world.get_location("EastHollow.GladesApproachOre", player), lambda s: s.can_reach_region("EastHollow.MapMoki") and s.has_all(("Sword", "Launch"), player) and s.has("Deflector", player))
    add_rule(world.get_location("EastHollow.GladesApproachOre", player), lambda s: s.can_reach_region("EastHollow.MapMoki") and s.has_all(("Sword", "DoubleJump"), player) and s.has("Deflector", player) and s.has_any(("TripleJump", "Hammer"), player))
    add_rule(world.get_location("EastHollow.GladesApproachOre", player), lambda s: s.can_reach_region("EastHollow.MapMoki") and s.has_all(("Sword", "DoubleJump"), player) and s.has("Deflector", player) and cost_all(s, player, options, "EastHollow.MapMoki", "", [], [], [], [[1, 'Spear', 1], [2, 10]]))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "EastHollow.MapMoki", "EastHollow.OutsideGlades", [], [], [], [[1, 'Spear', 2], [2, 20]]))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("DoubleJump", player) and s.has("Hammer", player) and cost_all(s, player, options, "EastHollow.MapMoki", "EastHollow.OutsideGlades", [10], [], [], []))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "EastHollow.MapMoki", "EastHollow.OutsideGlades", [10], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.MapMoki", "EastHollow.OutsideGlades", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("Launch", player))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("Grapple", "DoubleJump", "Sword", "Dash"), player))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("Grapple", "Bash"), player))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("Bash", "Dash"), player))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("Grapple", "DoubleJump"), player))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("Grapple", "Hammer"), player) and s.has("Glide", player))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("Grapple", "Hammer"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("EastHollow.MortarEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("EastHollow.MortarEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [], [], [], [[1, 'Spear', 1], [2, 10]]))
    add_rule(world.get_location("EastHollow.MortarEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("Grapple", "DoubleJump", "Hammer"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("Grapple", "Bash"), player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("DoubleJump", "Bash"), player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Sword", "Glide"), player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "EastHollow.Teleporter", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "EastHollow.Teleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "EastHollow.Teleporter", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Sword", "Dash"), player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("DoubleJump", player) and s.has("EastHollow.BeetleDefeated", player) and s.has("TripleJump", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("DoubleJump", player) and s.has("EastHollow.BeetleDefeated", player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "EastHollow.VoiceDoorPlatform", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("DoubleJump", "Grapple"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("DoubleJump", "Grapple"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "EastHollow.Kwolok", [], [], [], [[1, 'Sentry', 3]]))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("DoubleJump", "Grapple"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "EastHollow.Kwolok", [10], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Grapple", "Glide", "Dash"), player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "EastHollow.Kwolok", [10], [['Sentry', 3]], [], []))
    add_rule(world.get_location("EastHollow.DepthsLever", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has("Deflector", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has_all(("Bash", "Dash"), player))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Hammer"), player))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has("DoubleJump", player) and cost_all(s, player, options, "EastHollow.AboveBash", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has_all(("DoubleJump", "Dash"), player) and s.has("Sword", player))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "EastHollow.AboveBash", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashTreeCheckpoint", player), lambda s: True)
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AboveDepths", player), lambda s: s.has("EastHollow.DepthsLever", player))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_location("EastHollow.BashEX", player), lambda s: s.can_reach_region("EastHollow.BashTreeCheckpoint") and s.has("Bash", player) and s.has_any(("Sword", "Hammer", "Glide", "Dash"), player))
    add_rule(world.get_location("EastHollow.BashEX", player), lambda s: s.can_reach_region("EastHollow.BashTreeCheckpoint") and s.has("Bash", player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", "", [], [], [], [[1, 'Grenade', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("EastHollow.BashEX", player), lambda s: s.can_reach_region("EastHollow.BashTreeCheckpoint") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("EastHollow.BashEX", player), lambda s: s.can_reach_region("EastHollow.BashTreeCheckpoint") and s.has_all(("DoubleJump", "Dash"), player) and s.has("Hammer", player))
    add_rule(world.get_location("EastHollow.BashEX", player), lambda s: s.can_reach_region("EastHollow.BashTreeCheckpoint") and s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", "", [], [], [], [[1, 'Sentry', 2], [1, 'Spear', 2]]))
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Bash", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", "EastHollow.AboveBash", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]]))
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", "EastHollow.AboveBash", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("EastHollow.RightKwolokEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("DoubleJump", "Sword"), player) and s.has_any(("TripleJump", "Hammer"), player))
    add_rule(world.get_location("EastHollow.RightKwolokEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("DoubleJump", "Sword"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("EastHollow.RightKwolokEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("Dash", "DoubleJump", "Hammer"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.Kwolok", "", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("EastHollow.SilentSwimEC", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("Water", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.Kwolok", "", [10], [], [], []))
    add_rule(world.get_location("EastHollow.SilentSwimEC", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("Water", "DoubleJump", "Hammer"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "", [20], [], [], []))
    add_rule(world.get_location("EastHollow.KwolokSwimLeftEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("Water", "Bash"), player))
    add_rule(world.get_location("EastHollow.KwolokSwimLeftEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("Water", "DoubleJump"), player) and s.has("Hammer", player))
    add_rule(world.get_location("EastHollow.KwolokSwimLeftEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("Water", "DoubleJump"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has("DoubleJump", player) and s.has_any(("Dash", "TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has("DoubleJump", player) and cost_all(s, player, options, "EastHollow.Kwolok", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: True)
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.Kwolok", "EastHollow.AfterBeetleFight", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: True)
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: True)
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "Launch"), player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "Grapple", "Dash"), player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "Grapple", "DoubleJump"), player) and s.has_any(("Glide", "TripleJump", "Hammer"), player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "Grapple", "DoubleJump"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "DoubleJump"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "DoubleJump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [10], [], [], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "DoubleJump"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "Grapple", "Sword"), player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "Grapple", "Hammer"), player) and s.has("Glide", player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "Grapple", "Hammer"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "Grapple", "Glide"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "Bash"), player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "Sword"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [10], [], [], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "Dash"), player) and s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [10], [], [], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "Dash"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "Hammer"), player) and s.has("Glide", player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [10], [], [], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "Hammer"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "Glide"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [10], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("EastHollow.BashHC", player), lambda s: s.can_reach_region("EastHollow.AboveDepths") and s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.AboveDepths", "", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("EastHollow.DepthsExteriorEX", player), lambda s: s.can_reach_region("EastHollow.AboveDepths") and s.has("Launch", player))
    add_rule(world.get_location("EastHollow.DepthsExteriorEX", player), lambda s: s.can_reach_region("EastHollow.AboveDepths") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "EastHollow.AboveDepths", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.BashTreeCheckpoint", player), lambda s: s.has("EastHollow.DepthsLever", player))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("DoubleJump", player) and s.has("GladesTown.ClearThorns", player) and s.has("TripleJump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("DoubleJump", player) and s.has("GladesTown.ClearThorns", player) and s.has("TripleJump", player) and cost_all(s, player, options, "GladesTown.Teleporter", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("GladesTown.LupoSwimLeftEX", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has_all(("Water", "Bash"), player) and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.Teleporter", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.LupoSwimLeftEX", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has_all(("Water", "DoubleJump", "Hammer"), player) and s.has("GladesTown.ClearThorns", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.Teleporter", "GladesTown.BelowBountyShard", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("Hammer", player) and cost_all(s, player, options, "GladesTown.Teleporter", "GladesTown.BelowBountyShard", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "GladesTown.Teleporter", "GladesTown.BelowBountyShard", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "GladesTown.Teleporter", "GladesTown.BelowBountyShard", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Grapple", "Bash", "Dash"), player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.Teleporter", "GladesTown.BelowBountyShard", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "GladesTown.Teleporter", "GladesTown.AboveOpher", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and cost_all(s, player, options, "GladesTown.Teleporter", "TuleyShop", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("GladesTown.LowerOre", player), lambda s: s.can_reach_region("GladesTown.TwillenHome") and cost_all(s, player, options, "GladesTown.TwillenHome", "", [], [['Spear', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: True)
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("DoubleJump", player) and s.has("TuleyShop.StickyGrass", player) and s.has("TripleJump", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has_all(("Bash", "Dash"), player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has_all(("Bash", "Sword"), player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has_all(("Bash", "Sword"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has_all(("Bash", "Hammer"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("DoubleJump", player) and s.has("GladesTown.BuildHuts", player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("DoubleJump", player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", "GladesTown.MotayHut", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Dash", player) and s.has("GladesTown.BuildHuts", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Dash", player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", "GladesTown.MotayHut", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Sword", player) and s.has("GladesTown.BuildHuts", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Sword", player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", "GladesTown.MotayHut", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has_all(("Hammer", "Glide"), player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", "GladesTown.MotayHut", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [10], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("Dash", "Hammer"), player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [], [], [[12, 'Combat', 12, 'Combat']], []))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("Sword", "DoubleJump"), player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [10], [], [], []))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [20], [], [[12, 'Combat', 12, 'Combat']], [[1, 'Blaze', 1], [2, 10]]))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [10, 10], [], [[12, 'Combat', 12, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [10], [], [[12, 'Combat', 12, 'Combat']], []))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [10], [], [[12, 'Combat', 12, 'Combat']], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("DoubleJump", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [], [], [[12, 'Combat', 12, 'Combat']], []))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [], [], [[12, 'Combat', 12, 'Combat']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.Teleporter", player), lambda s: s.has_all(("Dash", "Sword"), player) and s.has("GladesTown.BuildHuts", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.Teleporter", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", "GladesTown.Teleporter", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.Teleporter", player), lambda s: s.has_all(("Sword", "Glide"), player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", "GladesTown.Teleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "GladesTown.West", "GladesTown.UpperWest", [], [['Flash', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has("TuleyShop.StickyGrass", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("DoubleJump", player) and s.has("TuleyShop.StickyGrass", player) and s.has("TripleJump", player) and s.has_any(("Glide", "Dash", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("DoubleJump", player) and s.has("TuleyShop.StickyGrass", player) and s.has("TripleJump", player) and cost_all(s, player, options, "GladesTown.West", "GladesTown.UpperWest", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Dash"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Dash"), player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.West", "GladesTown.UpperWest", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.MotayHut") and s.has_all(("Grapple", "Bash", "DoubleJump"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "GladesTown.MotayHut", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.MotayHut") and s.has_all(("Grapple", "Bash", "DoubleJump"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.MotayHut", "", [], [['Grenade', 1]], [], [[1, 'Shuriken', 2], [1, 'Sentry', 3]]))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.MotayHut") and s.has_all(("Grapple", "Bash", "Dash"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "GladesTown.MotayHut", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.MotayHut") and s.has_all(("Grapple", "Bash", "Dash"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.MotayHut", "", [], [['Grenade', 1]], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.UpperWest", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("GladesTown.BraveMokiHutEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Bash", player) and s.has("GladesTown.OnwardsAndUpwards", player) and cost_all(s, player, options, "GladesTown.UpperWest", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.BraveMokiHutEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Hammer", player) and s.has("GladesTown.OnwardsAndUpwards", player))
    add_rule(world.get_location("GladesTown.UpperLeftEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Grapple", player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("GladesTown.UpperLeftEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Grapple", player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.UpperWest", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("GladesTown.UpperLeftEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("GladesTown.UpperLeftEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.UpperWest", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("GladesTown.AboveGromHC", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "GladesTown.UpperWest", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.AboveGromHC", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Bash", player) and cost_all(s, player, options, "GladesTown.UpperWest", "", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.MotayHut", player), lambda s: s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.UpperWest", "GladesTown.MotayHut", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.Teleporter", player), lambda s: True)
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("DoubleJump", player) and s.has("GladesTown.CaveEntrance", player) and s.has("TripleJump", player))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("GladesTown.CaveEntrance", player) and s.has_any(("Glide", "DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [32], [], [], []))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [32], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("WaterDash", player) and s.has("GladesTown.CaveEntrance", player) and s.has_any(("Glide", "DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [16], [], [], []))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("WaterDash", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [16], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("Water", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [10, 10], [], [], []))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [10, 42], [], [], []))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("WaterDash", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [10, 26], [], [], []))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("DoubleJump", player) and s.has("GladesTown.CaveEntrance", player) and s.has("TripleJump", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Bow', 4]], [], []))
    add_rule(world.get_location("GladesTown.AboveCaveEX", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("Hammer", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_location("GladesTown.AboveCaveEX", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("Hammer", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has("Hammer", player) and s.has("GladesTown.ClearThorns", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has("Hammer", player) and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "GladesTown.Teleporter", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("GladesTown.BountyShard", player), lambda s: s.can_reach_region("GladesTown.BelowBountyShard") and s.has("DoubleJump", player) and s.has("Hammer", player))
    add_rule(world.get_location("GladesTown.BountyShard", player), lambda s: s.can_reach_region("GladesTown.BelowBountyShard") and s.has("DoubleJump", player) and cost_all(s, player, options, "GladesTown.BelowBountyShard", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.LeftAboveCoals", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.LeftAboveCoals", player), lambda s: True)
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.LeftAboveCoals") and s.has("Dash", player))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.LeftAboveCoals") and cost_all(s, player, options, "GladesTown.LeftAboveCoals", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.LeftAboveCoals") and s.has("Bash", player) and cost_all(s, player, options, "GladesTown.LeftAboveCoals", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.LeftAboveCoals") and s.has("TuleyShop.SpringPlants", player) and cost_all(s, player, options, "GladesTown.LeftAboveCoals", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.BelowBountyShard", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.BelowBountyShard", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.LeftAboveCoals", "GladesTown.BelowBountyShard", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.AboveOpher", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.AboveOpher", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.AboveOpher", "GladesTown.PlayfulMoki", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("TuleyShop.SpringPlants", player) and cost_all(s, player, options, "GladesTown.AboveOpher", "GladesTown.PlayfulMoki", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.HoleHut") and s.has("Sword", player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.HoleHutEntrance", player), lambda s: s.has("GladesTown.RoofsOverHeads", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.HoleHutEntrance", player), lambda s: s.has("GladesTown.RoofsOverHeads", player) and cost_all(s, player, options, "GladesTown.HoleHut", "GladesTown.HoleHutEntrance", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Grapple"), player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.HoleHut", "LowerReach.VeralHome", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Grapple"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Grapple"), player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.HoleHut", "LowerReach.VeralHome", [], [], [], [[1, 'Shuriken', 3], [1, 'Flash', 3], [1, 'Sentry', 3]]))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Grapple"), player) and s.has("TuleyShop.SpringPlants", player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.HoleHut", "LowerReach.VeralHome", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("E.WestGlades.PastTown", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_any(("Water", "DoubleJump", "Dash", "Glide", "Hammer", "Sword"), player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [], [], [[1, 'Bow', 1], [1, 'Shuriken', 1], [1, 'Grenade', 1]]))
    add_rule(world.get_location("E.WestGlades.PastTown", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("Sword", player) and s.has_any(("Water", "Glide"), player))
    add_rule(world.get_location("E.WestGlades.PastTown", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("Hammer", player) and s.has_any(("Water", "Glide"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("Bash", player) and s.has_any(("Dash", "DoubleJump", "Sword"), player))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "Glide"), player) and s.has("Hammer", player))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "WaterDash", "Water"), player) and s.has_any(("Glide", "Hammer"), player))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "WaterDash", "Water"), player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "WaterDash"), player) and s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "WestGlades.PastTown", "", [20], [], [], []))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "WaterDash"), player) and cost_all(s, player, options, "WestGlades.PastTown", "", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("DoubleJump", "Hammer"), player))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has("Hammer", player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [], [[40, 'Ranged']], []))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [], [[40, 'Ranged']], [[1, 'Spear', 1]]))
    add_rule(world.get_location("WestGlades.LowerPoolEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and cost_all(s, player, options, "WestGlades.PastTown", "", [80], [], [], []))
    add_rule(world.get_location("WestGlades.LowerPoolEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("WaterDash", player) and cost_all(s, player, options, "WestGlades.PastTown", "", [40], [], [], []))
    add_rule(world.get_location("WestGlades.LowerPoolEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_any(("Launch", "DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.PastTown", "", [60], [], [], []))
    add_rule(world.get_location("WestGlades.LowerPoolEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and cost_all(s, player, options, "WestGlades.PastTown", "", [60], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("WaterDash", player) and s.has("Glide", player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.LowerPool", [20], [], [[40, 'Ranged']], []))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.LowerPool", [20], [], [[40, 'Ranged']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("WaterDash", player) and s.has("Glide", player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.LowerPool", [20, 10], [], [], []))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.LowerPool", [20, 10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has_any(("Sword", "Hammer"), player) and s.has("Bash", player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.LowerPool", [], [], [], [[0, [[40, 'Ranged']], []], [2, 10]]))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.LowerPool", [], [], [[40, 'Ranged']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.LowerPool", [10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Glide", player) and s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.LowerPool", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.LowerPool", [20], [], [], []))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has_all(("Sword", "DoubleJump"), player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has_all(("Sword", "Dash"), player) and cost_all(s, player, options, "WestGlades.PastTown", "GladesTown.West", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [2, 10]]))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("Hammer", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WestGlades.PastTown", "GladesTown.West", [10], [], [], []))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has_all(("Hammer", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", "GladesTown.West", [10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has("Bash", player))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WestGlades.LowerPool", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.LowerPool", "", [10], [], [], []))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("DoubleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.LowerPool", "", [30], [], [], []))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("DoubleJump", player) and cost_all(s, player, options, "WestGlades.LowerPool", "", [30], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("Grapple", player) and cost_all(s, player, options, "WestGlades.LowerPool", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestGlades.SwimEC", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and cost_all(s, player, options, "WestGlades.LowerPool", "", [140], [], [], []))
    add_rule(world.get_location("WestGlades.SwimEC", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("WaterDash", player) and cost_all(s, player, options, "WestGlades.LowerPool", "", [60], [], [], []))
    add_rule(world.get_location("WestGlades.LowerPoolEX", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has_any(("DoubleJump", "Dash", "Glide", "Launch", "Bash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.LowerPool", "", [60], [], [], []))
    add_rule(world.get_location("WestGlades.LowerPoolEX", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and cost_all(s, player, options, "WestGlades.LowerPool", "", [60], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_location("WestGlades.LowerPoolEX", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("WaterDash", player) and cost_all(s, player, options, "WestGlades.LowerPool", "", [40], [], [], []))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.LowerPool", "WestGlades.Center", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]]))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword"), player))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Glide"), player) and s.has("TripleJump", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Glide"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WestGlades.LowerPool", "WestGlades.Center", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestGlades.LowerPool", "WestGlades.PastTown", [20], [], [[40, 'Ranged']], []))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestGlades.LowerPool", "WestGlades.PastTown", [20, 10], [], [], []))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestGlades.LowerPool", "WestGlades.PastTown", [20], [], [], []))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: True)
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has_all(("Glide", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has_all(("Glide", "DoubleJump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.Center", "", [10], [], [], []))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has_all(("Glide", "DoubleJump"), player) and cost_all(s, player, options, "WestGlades.Center", "", [10], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has("Bash", player) and cost_all(s, player, options, "WestGlades.Center", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has("DoubleJump", player) and cost_all(s, player, options, "WestGlades.Center", "", [10, 20], [], [[40, 'Ranged']], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1], [1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.Center", "", [10, 10], [], [[40, 'Ranged']], []))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has("DoubleJump", player) and cost_all(s, player, options, "WestGlades.Center", "", [10, 10], [], [[40, 'Ranged']], [[1, 'Sentry', 2], [1, 'Flash', 2], [1, 'Shuriken', 2], [1, 'Spear', 2], [1, 'Blaze', 2]]))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.Center", "", [10, 40], [], [[40, 'Ranged']], []))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has("Dash", player) and cost_all(s, player, options, "WestGlades.Center", "", [10, 40], [], [[40, 'Ranged']], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_location("WestGlades.LowerPoolEX", player), lambda s: s.can_reach_region("WestGlades.Center") and cost_all(s, player, options, "WestGlades.Center", "", [60], [], [], []))
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "WestGlades.Center", "WestGlades.Upper", [20], [], [[40, 'Ranged']], []))
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WestGlades.Center", "WestGlades.Upper", [20], [], [[40, 'Ranged']], [[1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and cost_all(s, player, options, "WestGlades.Center", "WestGlades.Upper", [20], [], [[40, 'Ranged']], [[1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has_all(("Dash", "Hammer"), player) and cost_all(s, player, options, "WestGlades.Center", "WestGlades.Upper", [20], [], [[40, 'Ranged']], [[1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has_all(("Dash", "Sword"), player) and cost_all(s, player, options, "WestGlades.Center", "WestGlades.Upper", [20, 30], [], [[40, 'Ranged']], []))
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.LowerPool", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.PastTown", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.PastTown", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.PastTown", player), lambda s: True)
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Upper") and s.has_any(("Sword", "Dash"), player))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Upper") and cost_all(s, player, options, "WestGlades.Upper", "", [], [], [], [[1, 'Sentry', 6]]))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Upper") and s.has("DoubleJump", player) and cost_all(s, player, options, "WestGlades.Upper", "", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Upper") and s.has("Glide", player) and s.has("Hammer", player))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Upper") and s.has("Glide", player) and cost_all(s, player, options, "WestGlades.Upper", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Upper") and s.has("Hammer", player) and cost_all(s, player, options, "WestGlades.Upper", "", [], [], [[40, 'Ranged']], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "DoubleJump"), player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "DoubleJump"), player) and cost_all(s, player, options, "WestGlades.Upper", "WestGlades.MillApproach", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "Hammer"), player) and cost_all(s, player, options, "WestGlades.Upper", "WestGlades.MillApproach", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.SwimOre", player), lambda s: s.can_reach_region("WestGlades.MillApproach") and s.has_all(("Water", "DoubleJump"), player) and cost_all(s, player, options, "WestGlades.MillApproach", "", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WestGlades.MillApproach", "WestGlades.ShrineArea", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.MillApproach", "WestGlades.ShrineArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has_any(("Bash", "Hammer"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WestGlades.MillApproach", "WestGlades.Upper", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Spear', 2]]))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "WestGlades.MillApproach", "OuterWellspring.EntranceDoor", [20], [], [], []))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "WestGlades.MillApproach", "OuterWellspring.EntranceDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.MillApproach", "OuterWellspring.EntranceDoor", [], [['Grenade', 1]], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Hammer", player) and s.has_any(("Glide", "Grapple"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "WestGlades.MillApproach", "OuterWellspring.EntranceDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Glide", player) and s.has("Grapple", player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestGlades.MillApproach", "OuterWellspring.EntranceDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WestGlades.MillApproach", "OuterWellspring.RightWallMidpoint", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "WestGlades.MillApproach", "OuterWellspring.RightWallMidpoint", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "Bash"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash"), player) and s.has_any(("DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash"), player) and cost_all(s, player, options, "WestGlades.MillApproach", "PoolsApproach.MillPathCheckpoint", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Water", "Bash"), player) and s.has_any(("DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Water", "Bash"), player) and cost_all(s, player, options, "WestGlades.MillApproach", "PoolsApproach.MillPathCheckpoint", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Water", "Launch"), player) and cost_all(s, player, options, "WestGlades.MillApproach", "PoolsApproach.MillPathCheckpoint", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has("Bash", player))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("Hammer", "Sword"), player))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has_all(("Grapple", "DoubleJump"), player) and cost_all(s, player, options, "WestGlades.ShrineArea", "", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_location("H.OuterWellspring.EntranceDoor", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor"))
    add_rule(world.get_location("OuterWellspring.EntranceDoorOpen", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has("Water", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [15], [], [[16, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Shuriken', 0], [1, 'Grenade', 0], [1, 'Blaze', 0]]))
    add_rule(world.get_location("OuterWellspring.LifeHarvestWallBroken", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has_all(("Grapple", "DoubleJump"), player))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has_all(("Grapple", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [35], [], [], []))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [15], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestEntry", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has_any(("Dash", "Bash"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Glide", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.Basement", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.Basement", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.Basement", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.Basement", [15], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.Basement", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.Basement", [], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2], [2, 15]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Water", player) and s.has_any(("WaterDash", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.Basement", [15], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.Basement", [55], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.Basement", [95], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("OuterWellspring.FallingWheel", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and s.has("Bash", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("OuterWellspring.FallingWheel", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Glide", player) and s.has("OuterWellspring.FallingWheel", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [15], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Glide", player) and s.has("OuterWellspring.FallingWheel", player) and s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("OuterWellspring.FallingWheel", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("DoubleJump", player) and s.has("OuterWellspring.FallingWheel", player) and s.has("TripleJump", player) and s.has_any(("Glide", "Dash", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("DoubleJump", player) and s.has("OuterWellspring.FallingWheel", player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("OuterWellspring.FallingWheel", player) and s.has_any(("Glide", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("OuterWellspring.FallingWheel", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Dash", "Sword"), player) and s.has("OuterWellspring.FallingWheel", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Dash", "Hammer"), player) and s.has("OuterWellspring.FallingWheel", player) and s.has("Glide", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Dash", "Hammer"), player) and s.has("OuterWellspring.FallingWheel", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.WestDoor", [], [], [], [[1, 'Grenade', 2]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_any(("Bash", "DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "WestGlades.MillApproach", [20], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "WestGlades.MillApproach", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Bash", "Glide"), player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", "", [], [['Sentry', 2]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 20]]))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has("Bash", player) and s.has("OuterWellspring.LifeHarvestLeverPulled", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has("Bash", player) and s.has("OuterWellspring.LifeHarvestLeverPulled", player) and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", "", [], [['Sentry', 2]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 20]]))
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and cost_all(s, player, options, "OuterWellspring.Basement", "", [80], [], [], []))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and s.has_any(("WaterDash", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.Basement", "", [40], [], [], []))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and s.has("Bash", player) and s.has_any(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.Basement", "", [20], [], [], []))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and s.has_all(("Bash", "Grapple"), player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.Basement", "", [20], [], [], []))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and s.has_all(("Dash", "Grapple"), player) and s.has_any(("DoubleJump", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.Basement", "", [20], [], [], []))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and s.has_all(("Bash", "Grapple", "Glide"), player))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Grapple", "Glide", "Dash"), player))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and s.has_all(("Bash", "DoubleJump", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and s.has_all(("Bash", "DoubleJump", "Hammer"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.Basement", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("DoubleJump", "Grapple"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [], [[12, 'Combat', 12, 'Combat']], []))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Grapple", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Grapple", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [], [], [[0, [[12, 'Combat']], []]]))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Water", "Bash"), player) and s.has("OuterWellspring.EntranceDoorOpen", player))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("WaterDash", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and s.has("Water", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [15], [], [[12, 'Combat']], []))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("WaterDash", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [15], [], [[12, 'Combat']], [[2, 20]]))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [20], [], [[12, 'Combat']], []))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [20], [], [[12, 'Combat']], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Water", player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [], [[12, 'Combat']], []))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Water", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [], [[12, 'Combat']], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("WaterDash", "Dash"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [20], [], [[12, 'Combat']], []))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("WaterDash", "Dash"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [20], [], [[12, 'Combat']], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("WaterDash", "Dash"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Water", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [], [[12, 'Combat']], []))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("WaterDash", "Dash"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Water", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [], [[12, 'Combat']], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("WaterDash", "Glide", "Hammer"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Water", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [], [[12, 'Combat']], []))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("WaterDash", "Glide", "Hammer"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [], [[12, 'Combat']], [[2, 20]]))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.AboveEntranceDoor") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.EastDoor", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.WestDoor", [], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.WestDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.RightWallMidpoint", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Sword", "TripleJump"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and s.has("Dash", player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.RightWallMidpoint", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.RightWallMidpoint", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Dash", player) and s.has_any(("Bash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.RightWallMidpoint", [], [], [], [[1, 'Blaze', 6], [1, 'Sentry', 4]]))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Dash", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.RightWallMidpoint", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Grenade', 1]], [[3, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("DoubleJump", "Grapple"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [], [[3, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Launch"), player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Bash", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Bash", "DoubleJump"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Bash", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Bash", "Hammer"), player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Bash", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [15], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Sword"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Dash"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Hammer"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Hammer"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has("Grapple", player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [15], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "OuterWellspring.EastDoor", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "OuterWellspring.EastDoor", [15], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "OuterWellspring.EastDoor", [], [['Grenade', 1], ['Shuriken', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Grapple", player))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: True)
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has("Dash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [15], [], [[20, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has("DoubleJump", player) and s.has_any(("Bash", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has("DoubleJump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [], [[20, 'Wall']], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [], [[20, 'Wall']], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [['Grenade', 1]], [[20, 'Wall']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has("Hammer", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.AboveWestDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.AboveWestDoor", [], [['Grenade', 1]], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("DoubleJump", "Grapple"), player))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Sword"), player))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [15], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [15], [], [], [[1, 'Sentry', 2], [2, 15]]))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("DoubleJump", player) and s.has("Hammer", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [15], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [15], [], [], [[1, 'Spear', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [15], [['Shuriken', 1]], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [15], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [15], [['Grenade', 1]], [], [[1, 'Sentry', 3]]))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [15], [['Grenade', 1], ['Sentry', 2], ['Shuriken', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [30], [['Grenade', 1], ['Sentry', 3]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: True)
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("Grapple", "Sword"), player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("Grapple", "Hammer"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("Grapple", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("Grapple", "DoubleJump"), player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("Grapple", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", "", [15], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has_any(("Glide", "Hammer"), player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("DoubleJump", "Glide"), player) and s.has("TripleJump", player) and s.has("Hammer", player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("DoubleJump", "Glide"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", "", [], [], [], [[1, 'Shuriken', 1], [2, 15]]))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda s: s.has("Dash", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", "OuterWellspring.TopDoor", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.WestDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", "OuterWellspring.EastDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("OuterWellspring.TrialActivation", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has_all(("Grapple", "Glide"), player))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has_all(("Grapple", "Dash"), player) and s.has("Hammer", player))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has_all(("Grapple", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.TopDoor", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("Hammer", player))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has_all(("Grapple", "DoubleJump"), player) and cost_all(s, player, options, "OuterWellspring.TopDoor", "", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has_all(("Grapple", "Sword"), player) and s.has("Hammer", player))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has_all(("Grapple", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.TopDoor", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has_all(("Grapple", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.TopDoor", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_WestGlades.MillApproach", player), lambda s: s.has_any(("DoubleJump", "Dash", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_WestGlades.MillApproach", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_WestGlades.MillApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "WestGlades.MillApproach", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_any(("DoubleJump", "Dash", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EntranceDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("DoubleJump", "Glide"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "OuterWellspring.AboveEntranceDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EastDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "OuterWellspring.EastDoor", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Grapple", player))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "OuterWellspring.TrialApproach", [], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "OuterWellspring.TrialApproach", [15], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "OuterWellspring.TrialApproach", [15], [['Grenade', 2]], [], [[1, 'Sentry', 3]]))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "OuterWellspring.TrialApproach", [15], [['Grenade', 2], ['Sentry', 2], ['Shuriken', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", "OuterWellspring.TrialApproach", [30], [['Grenade', 2], ['Sentry', 3]], [], []))
    add_rule(world.get_location("OuterWellspring.RightWallEX", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_location("OuterWellspring.RightWallEX", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and s.has("Bash", player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player))
    add_rule(world.get_location("OuterWellspring.RightWallEX", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and cost_all(s, player, options, "OuterWellspring.TrialApproach", "", [], [], [[20, 'Wall']], [[1, 'Spear', 2], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and cost_all(s, player, options, "OuterWellspring.TrialApproach", "", [15], [], [[20, 'Wall']], [[1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "", [15], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.TrialRoom", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "OuterWellspring.EastDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("DoubleJump", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "OuterWellspring.EastDoor", [], [], [], [[1, 'Sentry', 2], [2, 15]]))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "OuterWellspring.EastDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]]))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.AboveEntranceDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialStart", player), lambda s: s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialStart", player), lambda s: True)
    add_rule(world.get_location("OuterWellspring.SpiritTrial", player), lambda s: s.can_reach_region("OuterWellspring.TrialStart") and s.has_all(("Grapple", "Glide"), player) and s.has("OuterWellspring.TrialActivation", player))
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has_any(("Dash", "Sword"), player))
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.TrialStart", "OuterWellspring.TrialRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "OuterWellspring.TrialStart", "OuterWellspring.TrialRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("InnerWellspring.ThreeWheelsEX", player), lambda s: s.can_reach_region("InnerWellspring.EntranceDoor") and s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "InnerWellspring.ThornShardArea", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "InnerWellspring.ThornShardArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "InnerWellspring.ThornShardArea", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "InnerWellspring.DrainRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "InnerWellspring.DrainRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("Grapple", player))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has("Bash", player) and s.has_any(("Dash", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", "", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has("Grapple", player) and s.has_any(("Dash", "DoubleJump"), player))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has_all(("Grapple", "Sword"), player) and s.has_any(("Glide", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has_all(("Grapple", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has_all(("Grapple", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 15]]))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has_all(("Dash", "DoubleJump"), player) and s.has_any(("TripleJump", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has_all(("Dash", "DoubleJump"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 15]]))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", "", [15], [], [], []))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", "", [15], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", "", [15], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and s.has("Sword", player))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and cost_all(s, player, options, "InnerWellspring.ShortcutLever", "InnerWellspring.WestDoor", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("Hammer", player) and s.has("InnerWellspring.ShortCutWheel", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("Hammer", player) and s.has("InnerWellspring.ShortCutWheel", player) and cost_all(s, player, options, "InnerWellspring.ShortcutLever", "InnerWellspring.WestDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("Glide", player) and s.has("InnerWellspring.ShortCutWheel", player) and cost_all(s, player, options, "InnerWellspring.ShortcutLever", "InnerWellspring.WestDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.ThornShardArea", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [], [], [[1, 'Blaze', 5], [1, 'Sentry', 3]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [], [], [[1, 'Shuriken', 4], [1, 'Sentry', 4]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [60], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [60], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("WaterDash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [40], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("WaterDash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [40], [['Grenade', 4]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaEntrance", player), lambda s: s.has("InnerWellspring.DrainLever", player))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEntrance") and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEntrance") and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Dash", player) and s.has_any(("Hammer", "Sword"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Dash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "InnerWellspring.DrainAreaEX", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Dash", "Water"), player) and s.has("WaterDash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "InnerWellspring.DrainAreaEX", [], [], [[12, 'Combat', 12, 'Combat']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Dash", "Water"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "InnerWellspring.DrainAreaEX", [], [], [[12, 'Combat', 12, 'Combat']], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "InnerWellspring.DrainAreaEX", [20], [], [[12, 'Combat', 12, 'Combat']], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Dash", "WaterDash"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "InnerWellspring.DrainAreaEX", [20, 20], [], [[12, 'Combat', 12, 'Combat']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "InnerWellspring.DrainAreaEX", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Bash", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "InnerWellspring.DrainAreaEX", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEX") and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", "", [40], [], [], []))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEX") and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", "", [40], [], [], [[2, 20]]))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEX") and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", "", [20, 20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEX") and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", "", [20], [], [], []))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEX") and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", "", [20], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEX") and s.has("WaterDash", player) and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", "", [20], [], [], []))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEX") and s.has("WaterDash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", "", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEX") and s.has("Dash", player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEX") and s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_any(("Bash", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", "InnerWellspring.DrainAreaExit", [], [], [[10, 'Wall']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainAreaExit", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoomCenter", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoomCenter", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoom", [], [['Sentry', 4]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoom", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoom", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoom", [15], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoom", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoom", [15], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoom", [80], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoom", [40], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has_all(("WaterDash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoom", [40], [['Grenade', 4]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", "InnerWellspring.DrainRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", "InnerWellspring.DrainRoom", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", "InnerWellspring.DrainRoom", [20], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", "InnerWellspring.DrainRoom", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.LaserOre", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoomTop") and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", "", [], [], [[40, 'Combat']], [[1, 'Shuriken', 2], [1, 'Blaze', 4], [1, 'Sentry', 3]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Grapple", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", "InnerWellspring.BelowDrainLever", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", "InnerWellspring.BelowDrainLever", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", "InnerWellspring.BelowDrainLever", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("InnerWellspring.DrainLever", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "", [15], [], [], []))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.AbovePole", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "InnerWellspring.AbovePole", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.AbovePole", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.MiddleDoorsOpen", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("InnerWellspring.MiddleDoorsOpen", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.LupoMap", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has_all(("DoubleJump", "Sword"), player) and s.has("SpiritLight", player))
    add_rule(world.get_location("InnerWellspring.LupoMap", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("DoubleJump", player) and s.has("SpiritLight", player) and s.has("TripleJump", player) and s.has("Hammer", player))
    add_rule(world.get_location("InnerWellspring.LupoMap", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("DoubleJump", player) and s.has("SpiritLight", player) and s.has("TripleJump", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("InnerWellspring.GrappleTreeEX", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.GrappleTreeEX", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", "", [], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_location("InnerWellspring.GrappleTreeEX", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_location("InnerWellspring.GrappleTree", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor"))
    add_rule(world.get_location("InnerWellspring.AboveSpinArenaEX", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and s.has("Grapple", player) and s.has("Hammer", player))
    add_rule(world.get_location("InnerWellspring.AboveSpinArenaEX", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]]))
    add_rule(world.get_location("InnerWellspring.AboveSpinArenaEX", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("DoubleJump", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has("TripleJump", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("DoubleJump", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has("TripleJump", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", "InnerWellspring.TopSecondRoom", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.SpinPuzzle") and s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.SpinPuzzle") and s.has("Water", player) and s.has_any(("DoubleJump", "Grapple", "Dash", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.SpinPuzzle") and s.has("Water", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", "", [], [], [], [[2, 30]]))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.SpinPuzzle") and s.has_all(("Water", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.SpinPuzzle") and s.has_all(("Water", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", "", [15], [], [], []))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.SpinPuzzle") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("DoubleJump", player) and s.has("InnerWellspring.SpinPuzzleSolved", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("DoubleJump", player) and s.has("InnerWellspring.SpinPuzzleSolved", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", "InnerWellspring.PastSpinPuzzle", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.EastDoor", player), lambda s: s.has("DoubleJump", player) and s.has("InnerWellspring.SpinningRoomOpen", player))
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.EastDoor", player), lambda s: s.has_all(("Dash", "Hammer"), player) and s.has("InnerWellspring.SpinningRoomOpen", player))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.PastSpinPuzzle") and s.has("Water", player) and s.has_any(("Grapple", "Launch"), player))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.PastSpinPuzzle") and s.has("Water", player) and s.has_any(("DoubleJump", "Dash", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.PastSpinPuzzle") and s.has("Water", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", "", [], [], [], [[2, 30]]))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.PastSpinPuzzle") and s.has_all(("Water", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.PastSpinPuzzle") and s.has_all(("Water", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", "", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", "InnerWellspring.GrappleThroughZigZagSpikes", [10], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("DoubleJump", player) and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", "InnerWellspring.GrappleThroughZigZagSpikes", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", "InnerWellspring.GrappleThroughZigZagSpikes", [15], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']], [2, 10]]))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", "InnerWellspring.SpinPuzzle", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.GrappleThroughZigZagSpikes", "InnerWellspring.TopSecondRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]]))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and cost_all(s, player, options, "InnerWellspring.GrappleThroughZigZagSpikes", "InnerWellspring.TopSecondRoom", [], [], [], [[1, 'Sentry', 3]]))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("WaterDash", "Launch"), player) and s.has("Water", player))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("WaterDash", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.GrappleThroughZigZagSpikes", "InnerWellspring.TopSecondRoom", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("Grapple", player))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.PastSpinPuzzle", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [10], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Water", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [10], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [75], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Water", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [[40, 'Combat']], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Water", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [10], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Water", player) and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [60], [], [[40, 'Combat']], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [60], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("InnerWellspring.BlueMoonSeed", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has_all(("Dash", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.BlueMoonSeed", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has("DoubleJump", player) and cost_all(s, player, options, "InnerWellspring.Teleporter", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("InnerWellspring.AboveTpEX", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has("DoubleJump", player) and s.has("Sword", player))
    add_rule(world.get_location("InnerWellspring.AboveTpEX", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has("DoubleJump", player) and cost_all(s, player, options, "InnerWellspring.Teleporter", "", [], [], [], [[1, 'Sentry', 3]]))
    add_rule(world.get_location("InnerWellspring.AboveTpEX", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has("Dash", player) and s.has("Sword", player))
    add_rule(world.get_location("InnerWellspring.AboveTpEX", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.Teleporter", "", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "InnerWellspring.Teleporter", "InnerWellspring.EscapeSequence", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_all(("Dash", "Hammer", "Grapple"), player))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has("Launch", player) and s.has("Sword", player))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has("Launch", player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has("Grapple", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has_all(("Grapple", "DoubleJump"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", "", [], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 3], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has_all(("Grapple", "Bash", "Sword"), player))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has_all(("Grapple", "Bash", "WaterDash", "Water"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", "", [], [], [], [[1, 'Sentry', 2], [2, 15]]))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has_all(("Grapple", "Bash", "WaterDash"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", "", [95], [], [], []))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has_all(("Grapple", "Bash", "WaterDash"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", "", [60], [['Sentry', 2]], [], []))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has_all(("Grapple", "Bash", "WaterDash"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", "", [40], [['Sentry', 2]], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has_all(("Grapple", "Bash", "WaterDash"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", "", [20], [['Sentry', 2]], [], [[1, 'Sentry', 2], [1, 'Shuriken', 2], [1, 'Flash', 2]]))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has_all(("Grapple", "Bash", "WaterDash"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", "", [], [['Sentry', 4]], [], [[1, 'Sentry', 2], [1, 'Shuriken', 2], [1, 'Flash', 2]]))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.ShriekMeet") and s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Hammer"), player) and cost_all(s, player, options, "WoodsEntry.ShriekMeet", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_EastHollow.Kwolok", player), lambda s: s.has("Water", player) and cost_all(s, player, options, "WoodsEntry.ShriekMeet", "EastHollow.Kwolok", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("WoodsEntry.MudPitEX", player), lambda s: s.can_reach_region("WoodsEntry.FirstMud"))
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda s: True)
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has("Bash", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsEntry.FirstMud", "WoodsEntry.BelowTeleporter", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.FirstMud", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.FirstMud", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.FirstMud", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.FirstMud", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.Teleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [2, 15]]))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.Teleporter", [15], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.Teleporter", [], [['Sentry', 4]], [], []))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.Teleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.Teleporter", [], [], [], [[1, 'Sentry', 2], [2, 15]]))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: True)
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.TwoKeystoneRoom", [], [['Grenade', 1], ['Flash', 2]], [[1, 'Combat', 1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.TwoKeystoneRoom", [], [['Grenade', 2], ['Spear', 1]], [[1, 'Combat', 1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has_any(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", "WoodsEntry.TwoKeystoneRoom", [20, 20], [], [], []))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has("Glide", player) and cost_all(s, player, options, "WoodsEntry.Teleporter", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsEntry.Teleporter", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [1, 'Flash', 1]]))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsEntry.Teleporter", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsEntry.Teleporter", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has_all(("DoubleJump", "Dash", "Sword"), player) and cost_all(s, player, options, "WoodsEntry.Teleporter", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has_all(("DoubleJump", "Dash", "Hammer"), player) and cost_all(s, player, options, "WoodsEntry.Teleporter", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has("Bash", player) and s.has_any(("DoubleJump", "Sword"), player) and cost_all(s, player, options, "WoodsEntry.Teleporter", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "WoodsEntry.Teleporter", "", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("WoodsEntry.LowerKS", player), lambda s: s.can_reach_region("WoodsEntry.TwoKeystoneRoom"))
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has_any(("Launch", "Hammer"), player))
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.BelowTeleporter", player), lambda s: True)
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.AfterKuMeet") and s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Glide"), player))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.AfterKuMeet") and s.has("Launch", player))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", "WoodsMain.BelowFourKeystoneRoom", [10], [], [], []))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", "WoodsMain.BelowFourKeystoneRoom", [], [], [[40, 'Ranged']], []))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", "WoodsMain.BelowFourKeystoneRoom", [], [], [[40, 'Ranged']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", "WoodsMain.BelowFourKeystoneRoom", [], [], [[40, 'Ranged']], []))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", "WoodsMain.BelowFourKeystoneRoom", [], [], [[40, 'Ranged']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and s.has_any(("TripleJump", "Glide"), player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", "WoodsMain.FourKeystoneRoom", [15], [], [], []))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has("Launch", player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and s.has_any(("DoubleJump", "Bash", "Dash"), player))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has("Launch", player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", "WoodsMain.FourKeystoneRoom", [], [], [], [[2, 15]]))
    add_rule(world.get_location("WoodsMain.BehindWallOre", player), lambda s: s.can_reach_region("WoodsMain.BelowFourKeystoneRoom") and s.has_all(("Flap", "Glide"), player))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.WallOreLedge", [], [], [], [[0, [[1, 'Combat']], []], [2, 20]]))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Glide", "Dash", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.WallOreLedge", [15], [], [[1, 'Combat', 1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.WallOreLedge", [15], [], [[1, 'Combat', 1, 'Combat']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.WallOreLedge", [35], [], [], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.WallOreLedge", [35], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("DoubleJump", "Bash"), player))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.AfterKuMeet", [], [], [[40, 'Ranged']], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.AfterKuMeet", [], [], [[40, 'Ranged']], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.AfterKuMeet", [], [], [[40, 'Ranged']], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.AfterKuMeet", [], [], [[40, 'Ranged']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WoodsMain.BelowKeystonesEX", player), lambda s: s.can_reach_region("WoodsMain.WallOreLedge") and s.has("Glide", player) and cost_all(s, player, options, "WoodsMain.WallOreLedge", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.WallOreLedge") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.WallOreLedge") and s.has_all(("Glide", "DoubleJump", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.WallOreLedge", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "WoodsMain.WallOreLedge", "WoodsMain.FourKeystoneRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.WallOreLedge", "WoodsMain.FourKeystoneRoom", [], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_location("WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Flap", player))
    add_rule(world.get_location("WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [], [[0, [[1, 'Combat']], []], [2, 20]]))
    add_rule(world.get_location("WoodsMain.RightKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_location("WoodsMain.UpperKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has_any(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [[3, 'Wall']], []))
    add_rule(world.get_location("WoodsMain.UpperKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has_all(("Sword", "Dash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [[3, 'Wall']], []))
    add_rule(world.get_location("WoodsMain.UpperKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has_any(("Glide", "DoubleJump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [[1, 'Combat']], []))
    add_rule(world.get_location("WoodsMain.UpperKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has_any(("Glide", "DoubleJump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [20], [], [], []))
    add_rule(world.get_location("WoodsMain.LeftKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [15], [], [[1, 'Combat']], []))
    add_rule(world.get_location("WoodsMain.LeftKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [20], [], [], []))
    add_rule(world.get_location("WoodsMain.LeftKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [[1, 'Combat']], []))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Bash", player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [], [[1, 'Spear', 3], [1, 'Shuriken', 3], [1, 'Sentry', 3], [1, 'Blaze', 4], [1, 'Flash', 3], [1, 'Sentry', 3]]))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [15], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Sentry', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [25], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WoodsMain.BelowKeystonesEX", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Bash", player))
    add_rule(world.get_location("WoodsMain.BelowKeystonesEX", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("DoubleJump", player) and s.has("Hammer", player))
    add_rule(world.get_location("WoodsMain.BelowKeystonesEX", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WoodsMain.BelowKeystonesEX", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has_all(("DoubleJump", "Sword"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [15], [], [], []))
    add_rule(world.get_location("WoodsMain.BelowKeystonesEX", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Dash", player))
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: True)
    add_rule(world.get_location("WoodsMain.BehindDoorRoofEX", player), lambda s: s.can_reach_region("WoodsMain.GiantSkull") and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_location("WoodsMain.BehindDoorRoofEX", player), lambda s: s.can_reach_region("WoodsMain.GiantSkull") and s.has_all(("Glide", "DoubleJump"), player) and s.has_any(("Dash", "TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_location("WoodsMain.BehindDoorRoofEX", player), lambda s: s.can_reach_region("WoodsMain.GiantSkull") and s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("WoodsMain.BehindDoorRoofEX", player), lambda s: s.can_reach_region("WoodsMain.GiantSkull") and s.has_all(("Glide", "DoubleJump"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WoodsMain.BehindDoorRoofEX", player), lambda s: s.can_reach_region("WoodsMain.GiantSkull") and s.has_all(("Glide", "Dash"), player) and s.has("Hammer", player))
    add_rule(world.get_location("WoodsMain.BehindDoorRoofEX", player), lambda s: s.can_reach_region("WoodsMain.GiantSkull") and s.has_all(("Glide", "Dash"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("WoodsMain.BehindDoorRoofEX", player), lambda s: s.can_reach_region("WoodsMain.GiantSkull") and s.has_all(("Glide", "Dash", "Sword"), player))
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has("Bash", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.GiantSkull", "WoodsMain.BalloonLure", [], [], [], [[1, 'Shuriken', 1], [2, 15]]))
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has_any(("Launch", "Glide"), player))
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", "WoodsMain.BalloonLure", [], [], [[40, 'Ranged']], []))
    add_rule(world.get_location("WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.BalloonLure") and s.has_any(("Glide", "Launch"), player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "", [], [], [[1, 'Combat']], []))
    add_rule(world.get_location("WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.BalloonLure") and s.has_any(("Glide", "Launch"), player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "", [20], [], [], []))
    add_rule(world.get_location("WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.BalloonLure") and s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "", [], [], [[3, 'Wall']], []))
    add_rule(world.get_location("WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.BalloonLure") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "", [20], [], [], []))
    add_rule(world.get_location("WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.can_reach_region("WoodsMain.BalloonLure") and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and s.has_any(("Glide", "Launch"), player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "", [], [], [[1, 'Combat']], []))
    add_rule(world.get_location("WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.can_reach_region("WoodsMain.BalloonLure") and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and s.has_any(("Glide", "Launch"), player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "", [20], [], [], []))
    add_rule(world.get_location("WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.can_reach_region("WoodsMain.BalloonLure") and s.has("DoubleJump", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and s.has("TripleJump", player) and s.has("Flap", player))
    add_rule(world.get_location("WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.can_reach_region("WoodsMain.BalloonLure") and s.has("DoubleJump", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "", [], [], [], [[2, 20], [0, [[1, 'Combat']], []]]))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("DoubleJump", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "WoodsMain.BelowHiddenOre", [], [], [], [[0, [[1, 'Combat']], []], [2, 20]]))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("DoubleJump", "Dash", "Sword"), player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has("DoubleJump", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "WoodsMain.GiantSkull", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1], [2, 15]]))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has("Bash", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "WoodsMain.GiantSkull", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "WoodsMain.GiantSkull", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WoodsMain.HiddenOre", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "", [15], [], [], []))
    add_rule(world.get_location("WoodsMain.HiddenOre", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and s.has("Launch", player))
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.PetrifiedHowl", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "WoodsMain.PetrifiedHowl", [45], [], [], []))
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.PetrifiedHowl", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "WoodsMain.PetrifiedHowl", [15], [], [], []))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.AboveHowl", player), lambda s: s.has_all(("DoubleJump", "Bash"), player))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BrokenOwl", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WoodsMain.PetrifiedHowl", "WoodsMain.BrokenOwl", [], [], [[3, 'Wall']], []))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BrokenOwl", player), lambda s: s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BrokenOwl", player), lambda s: s.has_all(("Dash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda s: s.has_any(("Hammer", "Sword"), player) and cost_all(s, player, options, "WoodsMain.BrokenOwl", "WoodsMain.AboveHowl", [15], [], [], []))
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.TrialStart", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has("Grapple", player))
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.TrialStart", "WoodsMain.MidwayTrial", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.AboveHowl", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WoodsMain.TrialStart", "WoodsMain.AboveHowl", [], [], [], [[1, 'Sentry', 3], [1, 'Blaze', 5]]))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("Burrow", player))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.MidwayTrial", "WoodsMain.TrialEnd", [], [], [], [[1, 'Grenade', 2]]))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has_all(("DoubleJump", "Burrow"), player) and cost_all(s, player, options, "WoodsMain.MidwayTrial", "WoodsMain.TrialEnd", [45], [], [], []))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.BeforeLog", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.OrangeTree", player), lambda s: s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialStart", player), lambda s: True)
    add_rule(world.get_location("WoodsMain.TrialActivation", player), lambda s: s.can_reach_region("WoodsMain.TrialEnd") and s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("WoodsMain.OverflowShard", player), lambda s: s.can_reach_region("WoodsMain.TrialEnd") and cost_all(s, player, options, "WoodsMain.TrialEnd", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("WoodsMain.OverflowShard", player), lambda s: s.can_reach_region("WoodsMain.TrialEnd") and s.has("Sword", player) and cost_all(s, player, options, "WoodsMain.TrialEnd", "", [], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("WoodsMain.OverflowShard", player), lambda s: s.can_reach_region("WoodsMain.TrialEnd") and s.has("Hammer", player) and cost_all(s, player, options, "WoodsMain.TrialEnd", "", [], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.BeforeLog", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OrangeTree", player), lambda s: s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OrangeTree", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "WoodsMain.TrialEnd", "WoodsMain.OrangeTree", [], [], [], [[1, 'Sentry', 5]]))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has_any(("DoubleJump", "Launch"), player))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Hammer", player) and s.has_any(("Glide", "Dash"), player))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "WoodsMain.AboveHowl", "WoodsMain.BeforeLog", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("C.WoodsMain.BeforeLog", player), lambda s: s.can_reach_region("WoodsMain.BeforeLog"))
    add_rule(world.get_location("WoodsMain.LogBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.BeforeLog") and cost_all(s, player, options, "WoodsMain.BeforeLog", "", [], [], [], [[0, [[1, 'Combat']], []], [2, 20]]))
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.Teleporter", player), lambda s: s.has("WoodsMain.LogBlobDestroyed", player))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.Teleporter", "WoodsMain.AbovePit", [60], [], [], []))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.Teleporter", "WoodsMain.AbovePit", [30], [], [], []))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("DoubleJump", player) and s.has("WoodsMain.LogBlobDestroyed", player) and s.has_any(("Sword", "Hammer", "TripleJump"), player) and cost_all(s, player, options, "WoodsMain.Teleporter", "WoodsMain.BeforeLog", [], [], [[1, 'Combat']], []))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("DoubleJump", player) and s.has("WoodsMain.LogBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.Teleporter", "WoodsMain.BeforeLog", [], [], [[1, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("DoubleJump", player) and s.has("WoodsMain.LogBlobDestroyed", player) and s.has_any(("Sword", "Hammer", "TripleJump"), player) and cost_all(s, player, options, "WoodsMain.Teleporter", "WoodsMain.BeforeLog", [20], [], [], []))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("DoubleJump", player) and s.has("WoodsMain.LogBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.Teleporter", "WoodsMain.BeforeLog", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.AbovePit", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.Teleporter", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.Teleporter", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.Teleporter", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.Teleporter", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.Teleporter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.AbovePit", "WoodsMain.Teleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: s.has("Hammer", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: s.has_any(("Dash", "DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.AbovePit", "WoodsMain.FeedingGrounds", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsShrine", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsShrine", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsShrine", player), lambda s: s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsShrine", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsShrine", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Glide", "Dash", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Glide", "DoubleJump", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "LowerWastes.WestTP", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Bash", "Dash", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "LowerWastes.WestTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "LowerWastes.WestTP", [], [['Grenade', 1]], [], [[1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "LowerWastes.WestTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Glide", "Bash"), player) and s.has("WindtornRuins.Seir", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "LowerWastes.WestTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "LowerWastes.WestTP", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "WoodsMain.AbovePit", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has_all(("Dash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has_all(("Dash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "WoodsMain.AbovePit", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has("Bash", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has("DoubleJump", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and s.has("TripleJump", player) and s.has("Hammer", player))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has("DoubleJump", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Entry", "", [], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has_all(("DoubleJump", "Glide"), player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and s.has("TripleJump", player) and s.has("Sword", player))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has_all(("DoubleJump", "Glide"), player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Entry", "", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has_all(("DoubleJump", "Dash", "Hammer"), player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player))
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.Entry", "LowerReach.AboveEntry", [20], [], [], []))
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Entry", "LowerReach.AboveEntry", [20], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2], [1, 'Flash', 2]]))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Bash", player) and s.has_any(("LowerReach.ThawBaurFurnace", "DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [['Grenade', 1]], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2], [1, 'Flash', 2]]))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("LowerReach.ThawBaurFurnace", player) and s.has("Sword", player))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Hammer", player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Glide", player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Bash", player) and s.has("LowerReach.ThawBaurFurnace", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Bash", player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 2], [1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has_all(("DoubleJump", "Dash", "Sword"), player) and s.has("LowerReach.ThawBaurFurnace", player))
    add_rule(world.get_location("LowerReach.AboveBaurUpperEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("DoubleJump", player) and s.has("LowerReach.ThawBaurFurnace", player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerReach.AboveBaurUpperEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has_all(("DoubleJump", "Dash", "Sword"), player) and s.has("LowerReach.ThawBaurFurnace", player))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Icefall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "LowerReach.Icefall", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Icefall", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Icefall", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "LowerReach.CentralEnemyPaths", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [1, 'Blaze', 3], [2, 20]]))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("DoubleJump", player) and s.has("LowerReach.Lever", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("DoubleJump", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "LowerReach.CentralEnemyPaths", [], [], [], [[1, 'Sentry', 2], [2, 20]]))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Dash", player) and s.has("LowerReach.Lever", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Dash", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "LowerReach.CentralEnemyPaths", [20], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Glide", player) and s.has("LowerReach.Lever", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Glide", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "LowerReach.CentralEnemyPaths", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Sword", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "LowerReach.CentralEnemyPaths", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 20]]))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Hammer", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "LowerReach.CentralEnemyPaths", [20], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("DoubleJump", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda s: s.can_reach_region("LowerReach.Icefall") and cost_all(s, player, options, "LowerReach.Icefall", "", [20], [['Grenade', 1]], [], [[0, [[25, 'Combat']], ['Combat.Aerial']]]))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Grapple", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("LowerReach.LeftFurnace", player) and s.has_any(("Bash", "Launch"), player))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Water", "WaterDash", "DoubleJump", "Hammer"), player) and s.has("LowerReach.LeftFurnace", player))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("WaterDash", "DoubleJump"), player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("TripleJump", "Hammer"), player) and cost_all(s, player, options, "LowerReach.Icefall", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "Sword"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("DoubleJump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has("TripleJump", player) and s.has("Dash", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("DoubleJump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [[25, 'Combat']], [[1, 'Shuriken', 2], [1, 'Sentry', 3]]))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "Glide"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has("TripleJump", player) and s.has("Water", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "Glide"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [[25, 'Combat']], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1], [2, 20]]))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Water", "DoubleJump"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [[25, 'Combat']], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("DoubleJump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [20], [], [[25, 'Combat']], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Hammer", "DoubleJump"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "Grapple"), player) and s.has("LowerReach.LeftFurnace", player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("DoubleJump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("TripleJump", player) and s.has("Dash", player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("DoubleJump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "Glide"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "Hammer"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("TripleJump", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "Dash", "Hammer"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "Sword"), player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("DoubleJump", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [40], [], [], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "Water"), player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Hammer", "Bash"), player) and s.has("LowerReach.LeftFurnace", player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Hammer", "Grapple"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Dash", player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Hammer", "Grapple"), player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [], [[0, [[25, 'Combat']], ['Combat.Aerial']]]))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Hammer", "WaterDash"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Water", player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Hammer", "WaterDash"), player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.AboveEntry", player), lambda s: s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.AboveEntry", player), lambda s: True)
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.CentralEnemyPaths") and s.has("Bash", player))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.CentralEnemyPaths") and s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.CentralEnemyPaths") and s.has("Bash", player) and s.has("SpiritLight", player))
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.CentralEnemyPaths", "LowerReach.OutsideTPRoom", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Sword", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.CentralEnemyPaths", "LowerReach.OutsideTPRoom", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Sword", "DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.CentralEnemyPaths", "LowerReach.OutsideTPRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("DoubleJump", player) and s.has("LowerReach.Lever", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("DoubleJump", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("DoubleJump", "Glide", "Hammer"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("DoubleJump", "Glide"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Spear', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("DoubleJump", "Glide"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Spear', 2]], [], []))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("DoubleJump", player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("DoubleJump", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Sentry', 2]], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("Dash", "Hammer"), player) and s.has("LowerReach.ThawCentralFurnace", player))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("DoubleJump", player) and s.has("SpiritLight", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("DoubleJump", "Glide"), player) and s.has("SpiritLight", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("DoubleJump", player) and s.has("SpiritLight", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("Dash", "Hammer"), player) and s.has("SpiritLight", player))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("DoubleJump", "Glide"), player) and s.has("SpiritLight", player) and s.has("LowerReach.Lever", player) and s.has("Hammer", player))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("DoubleJump", "Glide"), player) and s.has("SpiritLight", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("Hammer", "DoubleJump"), player) and s.has("LowerReach.Lever", player) and s.has("Glide", player))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("Hammer", "DoubleJump"), player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("DoubleJump", "Dash"), player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("DoubleJump", "Glide"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("DoubleJump", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Sentry', 5]], [], []))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("DoubleJump", player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Spear', 2]], [], []))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.BelowLupo", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.BelowLupo", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.BelowLupo", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [['Grenade', 1]], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Hammer", "DoubleJump"), player) and s.has("LowerReach.Lever", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("DoubleJump", player) and s.has("LowerReach.Lever", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("DoubleJump", player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("DoubleJump", "Glide"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [['Shuriken', 2]], [], []))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Dash", "Bash", "Hammer"), player) and s.has("LowerReach.ThawCentralFurnace", player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has("LowerReach.Lever", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.Entry", [], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has_all(("Glide", "Sword"), player) and s.has("LowerReach.Lever", player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveEntry", player), lambda s: s.has("DoubleJump", player) and s.has("LowerReach.Lever", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword"), player))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has_all(("Sword", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("Bash", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("Bash", player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("Bash", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeCentralFurnace", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Sword"), player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Hammer"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("Hammer", player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and cost_all(s, player, options, "LowerReach.BelowTokk", "UpperReach.KeystoneRoom", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.BelowTokk", "UpperReach.KeystoneRoom", [], [['Sentry', 2]], [[32, 'Combat']], []))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "LowerReach.BelowTokk", "UpperReach.KeystoneRoom", [], [], [[32, 'Combat']], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Glide"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.BelowTokk", "UpperReach.KeystoneRoom", [], [['Spear', 1]], [[32, 'Combat']], []))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Dash"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.BelowTokk", "UpperReach.KeystoneRoom", [], [], [[32, 'Combat']], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Sword"), player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash"), player) and s.has("Hammer", player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash"), player) and cost_all(s, player, options, "LowerReach.BelowTokk", "UpperReach.BurrowArea", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "DoubleJump"), player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has("Dash", player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "DoubleJump"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.BelowTokk", "UpperReach.BurrowArea", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Dash", "Hammer"), player) and s.has("LowerReach.ThawCentralFurnace", player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Bash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "LowerReach.SecondSoup", "LowerReach.CentralEnemyPaths", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Burrow", "Dash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Burrow", "Dash"), player) and cost_all(s, player, options, "LowerReach.SecondSoup", "LowerReach.CentralEnemyPaths", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.SecondSoup", "LowerReach.CentralEnemyPaths", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.SecondSoup", "LowerReach.CentralEnemyPaths", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Bash", "Flap"), player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Bash", "Flap"), player) and cost_all(s, player, options, "LowerReach.SecondSoup", "LowerReach.CentralEnemyPaths", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "LowerReach.SecondSoup", "LowerReach.BelowLupo", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [2, 10]]))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: s.has("Dash", player) and s.has("Sword", player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerReach.SecondSoup", "LowerReach.BelowLupo", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.SecondSoup", "LowerReach.BelowLupo", [10], [], [], []))
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda s: s.can_reach_region("LowerReach.BelowLupo") and s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.BelowLupo", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda s: s.can_reach_region("LowerReach.BelowLupo") and s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("Glide", "Hammer"), player))
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda s: s.can_reach_region("LowerReach.BelowLupo") and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.BelowLupo", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.SecondSoup", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.BelowLupo", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.WindChannel", player), lambda s: s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.WindChannel", player), lambda s: True)
    add_rule(world.get_location("LowerReach.WindBottomEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has("LowerReach.WindLantern", player) and s.has_any(("Dash", "Sword"), player))
    add_rule(world.get_location("LowerReach.WindBottomEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has("LowerReach.WindLantern", player) and cost_all(s, player, options, "LowerReach.WindChannel", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.WindChannel", "", [60], [], [], []))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has_all(("DoubleJump", "Bash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.WindChannel", "", [60], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has("Launch", player) and s.has("Dash", player))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WindChannel", "", [], [], [], [[2, 40]]))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has_all(("Launch", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.WindChannel", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WindChannel", "LowerReach.SoupMoki", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("E.LowerReach.SoupMoki", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and s.has("BreakCrystal", player) and cost_all(s, player, options, "LowerReach.SoupMoki", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [2, 20]]))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and s.has_any(("Glide", "Launch"), player))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and cost_all(s, player, options, "LowerReach.SoupMoki", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and s.has("DoubleJump", player) and cost_all(s, player, options, "LowerReach.SoupMoki", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and s.has("Dash", player) and cost_all(s, player, options, "LowerReach.SoupMoki", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindChannel", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.SoupMoki", "LowerReach.EastEnemyPaths", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeCentralFurnace", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeCentralFurnace", player) and cost_all(s, player, options, "LowerReach.SoupMoki", "LowerReach.EastEnemyPaths", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Hammer"), player) and s.has("LowerReach.FreezeCentralFurnace", player) and cost_all(s, player, options, "LowerReach.SoupMoki", "LowerReach.EastEnemyPaths", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeCentralFurnace", player) and cost_all(s, player, options, "LowerReach.SoupMoki", "LowerReach.SnowballEnemyPaths", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.EastEnemyPaths_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerReach.TPLantern", player), lambda s: s.can_reach_region("LowerReach.East") and cost_all(s, player, options, "LowerReach.East", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.East", "LowerReach.SnowballEnemyPaths", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.East", "LowerReach.SnowballEnemyPaths", [], [], [[12, 'Combat']], []))
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.East", "LowerReach.SnowballEnemyPaths", [], [], [[12, 'Combat']], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.East", "LowerReach.SnowballEnemyPaths", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("LowerReach.SnowballEnemyPaths_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has_any(("LowerReach.ThawCentralFurnace", "DoubleJump"), player))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.EastEnemyPaths", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player) and s.has("Bash", player))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player) and cost_all(s, player, options, "LowerReach.Snowball", "LowerReach.PastSnowball", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and s.has("Launch", player))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and s.has_all(("Bash", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.PastSnowball", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and s.has_all(("Bash", "DoubleJump"), player) and s.has("LowerReach.ThawEastFurnace", player) and s.has_any(("Glide", "TripleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.PastSnowball", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and s.has_all(("Bash", "DoubleJump"), player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.PastSnowball", "", [], [['Grenade', 2]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("LowerReach.RolledSnowball", player) and s.has("LowerReach.ThawCentralFurnace", player))
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Dash", player) and s.has("LowerReach.RolledSnowball", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Dash", player) and s.has("LowerReach.RolledSnowball", player) and cost_all(s, player, options, "LowerReach.PastSnowball", "LowerReach.SnowballEnemyPaths", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer", "Glide"), player) and cost_all(s, player, options, "LowerReach.IceCavern", "LowerReach.HalfwayIceCavern", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.IceCavern", "LowerReach.HalfwayIceCavern", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("DoubleJump", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "LowerReach.IceCavern", "LowerReach.HalfwayIceCavern", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "LowerReach.IceCavern", "LowerReach.HalfwayIceCavern", [20], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerReach.IceCavern", "LowerReach.HalfwayIceCavern", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("DoubleJump", player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.IceCavern", "LowerReach.HalfwayIceCavern", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("DoubleJump", player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.IceCavern", "LowerReach.HalfwayIceCavern", [20], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Dash", player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("Glide", player))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Dash", player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.IceCavern", "LowerReach.HalfwayIceCavern", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_location("LowerReach.EastDoorLantern", player), lambda s: s.can_reach_region("LowerReach.HalfwayIceCavern") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "", [], [['Grenade', 3]], [], []))
    add_rule(world.get_location("LowerReach.EastDoorLantern", player), lambda s: s.can_reach_region("LowerReach.HalfwayIceCavern") and s.has("Bash", player) and s.has("Dash", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("LowerReach.EastDoorLantern", player), lambda s: s.can_reach_region("LowerReach.HalfwayIceCavern") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "", [], [['Grenade', 2]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_location("LowerReach.EastDoorLantern", player), lambda s: s.can_reach_region("LowerReach.HalfwayIceCavern") and s.has_any(("DoubleJump", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.SwimmingPool", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "LowerReach.IceCavern", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Glide", player) and s.has_any(("Dash", "Sword"), player))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("LowerReach.ThawEastFurnace", player) and s.has_any(("Glide", "Dash", "Sword"), player))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "LowerReach.IceCavern", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Bash", player) and s.has("LowerReach.EastDoorLantern", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [40], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Bash", player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("WaterDash", "DoubleJump", "Dash", "Sword"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("Bash", "Sword"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("TripleJump", "Glide", "Hammer"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has("LowerReach.EastDoorLantern", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [], [['Grenade', 1]], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Bash", player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("Dash", "Glide", "DoubleJump", "Sword"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Bash", player) and s.has("LowerReach.EastDoorLantern", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [], [['Grenade', 2]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 20]]))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("Bash", "Water"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("Bash", "WaterDash"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [20, 40], [], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("WaterDash", "Water"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("WaterDash", "Water"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("WaterDash", player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [20, 20], [], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("WaterDash", player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [20, 20], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("TripleJump", player) and s.has_any(("Water", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("DoubleJump", player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("TripleJump", player) and s.has_any(("Water", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("DoubleJump", player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [], [['Spear', 1]], [], [[1, 'Sentry', 3], [2, 20]]))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("Water", player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.EastFurnace", [], [], [], [[2, 100]]))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has_all(("Bash", "WaterDash"), player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("Water", player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has_all(("Bash", "WaterDash"), player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.EastFurnace", [], [], [], [[2, 40]]))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.HalfwayIceCavern", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("DoubleJump", "WaterDash"), player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("TripleJump", player) and s.has("Water", player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("DoubleJump", "WaterDash"), player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.HalfwayIceCavern", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.WindSpinners", player), lambda s: s.has("Launch", player) and s.has("LowerReach.ArenaBeaten", player))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.WindSpinners", player), lambda s: s.has("DoubleJump", player) and s.has("LowerReach.ArenaBeaten", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WindSpinners", "LowerReach.WispPathCheckpoint", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "DoubleJump"), player) and s.has("Hammer", player))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.WindSpinners", "LowerReach.WispPathCheckpoint", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.WindSpinners", "LowerReach.WispPathCheckpoint", [60], [], [], []))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.WindSpinners", "LowerReach.WispPathCheckpoint", [40], [], [], []))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.WindSpinners", "LowerReach.WispPathCheckpoint", [40], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("H.LowerReach.WispPathCheckpoint", player), lambda s: s.can_reach_region("LowerReach.WispPathCheckpoint") and s.has_all(("DoubleJump", "Hammer"), player))
    add_rule(world.get_location("E.LowerReach.WispPathCheckpoint", player), lambda s: s.can_reach_region("LowerReach.WispPathCheckpoint") and s.has("Hammer", player) and s.has_any(("DoubleJump", "Grapple"), player))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", "LowerReach.BridgeWispPath", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Dash"), player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", "LowerReach.BridgeWispPath", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", "LowerReach.BridgeWispPath", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", "LowerReach.BridgeWispPath", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", "LowerReach.BridgeWispPath", [40], [], [], []))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.WindSpinners", player), lambda s: s.has_any(("Launch", "DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.WindSpinners", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Grapple", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", "LowerReach.SnowEscape", [], [['Sentry', 2]], [[12, 'Combat', 12, 'Combat']], []))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", "LowerReach.SnowEscape", [10, 10], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has("Launch", player))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Dash", "DoubleJump"), player) and s.has_any(("TripleJump", "Glide"), player))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("DoubleJump", "Glide", "Bash"), player))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Glide", "Grapple", "Bash", "Water"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Glide", "Grapple", "Bash", "Water"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Glide", "Grapple", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Glide", "Grapple", "Bash"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has("Launch", player))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Dash", "DoubleJump"), player) and s.has_any(("TripleJump", "Glide"), player))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("DoubleJump", "Glide", "Bash"), player))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Glide", "Grapple", "Bash", "Water"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Glide", "Grapple", "Bash", "Water"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Glide", "Grapple", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Glide", "Grapple", "Bash"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerReach.CatalystShard", player), lambda s: s.can_reach_region("LowerReach.VeralHome") and cost_all(s, player, options, "LowerReach.VeralHome", "", [80], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.CatalystShard", player), lambda s: s.can_reach_region("LowerReach.VeralHome") and s.has_all(("Bash", "Flap"), player) and cost_all(s, player, options, "LowerReach.VeralHome", "", [80], [], [], []))
    add_rule(world.get_location("LowerReach.CatalystShard", player), lambda s: s.can_reach_region("LowerReach.VeralHome") and s.has("WaterDash", player) and cost_all(s, player, options, "LowerReach.VeralHome", "", [60], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.CatalystShard", player), lambda s: s.can_reach_region("LowerReach.VeralHome") and s.has_all(("WaterDash", "Bash", "Flap"), player) and cost_all(s, player, options, "LowerReach.VeralHome", "", [60], [], [], []))
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.TownEntry", "LowerReach.TrialStart", [40], [], [], []))
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.TownEntry", "LowerReach.TrialStart", [20], [], [], []))
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.TownEntry", "LowerReach.TrialStart", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash", "Hammer"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.TownEntry", "LowerReach.TrialStart", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.RightKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has_all(("Dash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.RightKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has_all(("Dash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerReach.RightKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerReach.UpperLeftKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has_all(("Launch", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [30], [], [], []))
    add_rule(world.get_location("LowerReach.UpperLeftKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [80], [], [[1, 'Ranged']], []))
    add_rule(world.get_location("LowerReach.MiddleLeftKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [60], [], [], []))
    add_rule(world.get_location("LowerReach.MiddleLeftKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("Launch", player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [40], [], [], []))
    add_rule(world.get_location("LowerReach.MiddleLeftKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.BottomLeftKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.BottomLeftKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("Launch", player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [], [], [], [[1, 'Sentry', 3], [2, 20]]))
    add_rule(world.get_location("LowerReach.BottomLeftKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Sword", "Dash", "Hammer"), player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [], [], [[1, 'Ranged']], []))
    add_rule(world.get_location("LowerReach.BottomLeftKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [], [], [[1, 'Ranged']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_location("LowerReach.TrialEX", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("Launch", player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [40], [], [], []))
    add_rule(world.get_location("LowerReach.TrialEX", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("Launch", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.TrialEX", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has_all(("Launch", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.TrialStart", "LowerReach.TownEntry", [30], [], [], []))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.TrialStart", "LowerReach.TownEntry", [20, 20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.TrialStart", "LowerReach.TownEntry", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.TrialStart", "LowerReach.TownEntry", [], [['Grenade', 1]], [], [[1, 'Shuriken', 2], [1, 'Blaze', 4], [1, 'Sentry', 3]]))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.TrialStart", "LowerReach.TownEntry", [20], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Bash"), player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Bash", "Sword"), player))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [], [['Sentry', 5]], [], []))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Sword", "Dash", "DoubleJump"), player))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "DoubleJump"), player) and s.has_any(("TripleJump", "Hammer"), player))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "DoubleJump"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [20], [], [], []))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "DoubleJump"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Dash", "Glide"), player))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Bash"), player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [], [['Sentry', 3]], [], []))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Sword", "Dash", "DoubleJump"), player))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "DoubleJump"), player) and s.has_any(("TripleJump", "Hammer"), player))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "DoubleJump"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [20], [], [], []))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "DoubleJump"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Dash", "Glide"), player))
    add_rule(world.get_location("UpperReach.ThawFurnace", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has_all(("Flap", "Bash"), player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("UpperReach.ThawFurnace", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has_all(("Flap", "Bash"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has("Bash", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has("Bash", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 2]]))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Hammer", "Sword"), player))
    add_rule(world.get_location("UpperReach.SwimEX", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has("WaterDash", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "", [80], [], [], []))
    add_rule(world.get_location("UpperReach.SwimEX", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "", [120], [], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and s.has("Dash", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [], [], [[1, 'Sentry', 4]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Sentry', 4]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [20], [['Sentry', 3]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Sentry', 6]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Water", "DoubleJump"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [20], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and s.has("Water", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Sentry', 4]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Sentry', 4]], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and s.has("Water", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [20], [['Sentry', 3]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [20], [['Sentry', 3]], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and s.has("Water", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [20], [['Grenade', 1]], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Glide"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1], [2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "WaterDash", "Grapple"), player) and s.has("Water", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [20], [['Shuriken', 2]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "WaterDash", "Grapple"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [20], [['Shuriken', 2]], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [], [['Sentry', 5]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [20], [['Shuriken', 3]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoup", [40], [['Shuriken', 2]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupFrozen", player), lambda s: s.has("UpperReach.FreezeFurnace", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupFrozen", player), lambda s: s.has("UpperReach.FreezeFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoupFrozen", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("UpperReach.ThawFurnace", player) and s.has("Water", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.OutsideTreeRoom", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("DoubleJump", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("DoubleJump", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.OutsideTreeRoom", [], [], [], [[1, 'Sentry', 3]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Dash", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Grapple", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Grapple", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.OutsideTreeRoom", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "WaterDash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("Water", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "WaterDash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.KeystoneSnapPlantThawed", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.KeystoneSnapPlantThawed", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2], [1, 'Flash', 2]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.KeystoneSnapPlantThawed", [20], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 2]]))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlant", "UpperReach.UpperSoup", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlant", "UpperReach.UpperSoup", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlant", "UpperReach.UpperSoup", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawed", "UpperReach.UpperSoupThawed", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawed", "UpperReach.UpperSoupThawed", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawed", "UpperReach.UpperSoupThawed", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: True)
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneSnapPlantPaths") and s.has("DoubleJump", player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths_to_UpperReach.KeystoneRoom", player), lambda s: True)
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneSnapPlantThawedPaths") and s.has_any(("Dash", "Hammer"), player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneSnapPlantThawedPaths") and cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawedPaths", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 2], [2, 20]]))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and s.has_all(("Flap", "Bash"), player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and s.has_all(("Glide", "DoubleJump"), player) and s.has("Hammer", player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and s.has_all(("Glide", "DoubleJump"), player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", "", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_location("UpperReach.SwingPoleEX", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and cost_all(s, player, options, "UpperReach.UpperSoupPaths", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", "UpperReach.KeystoneSnapPlant", [20], [], [], []))
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", "UpperReach.KeystoneSnapPlant", [20], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", "UpperReach.KeystoneSnapPlant", [40], [], [], []))
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has_all(("Dash", "Hammer"), player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", "UpperReach.KeystoneSnapPlant", [20], [], [], []))
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has_all(("Dash", "Sword"), player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", "UpperReach.KeystoneSnapPlant", [40], [], [], []))
    add_rule(world.get_location("UpperReach.SwingPoleEX", player), lambda s: s.can_reach_region("UpperReach.UpperSoupFrozenPaths") and s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_location("UpperReach.SwingPoleEX", player), lambda s: s.can_reach_region("UpperReach.UpperSoupFrozenPaths") and cost_all(s, player, options, "UpperReach.UpperSoupFrozenPaths", "", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupThawedPaths") and s.has("Dash", player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupThawedPaths") and cost_all(s, player, options, "UpperReach.UpperSoupThawedPaths", "", [], [], [], [[1, 'Sentry', 2], [1, 'Blaze', 4]]))
    add_rule(world.get_location("UpperReach.MiddleRightKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupThawedPaths") and cost_all(s, player, options, "UpperReach.UpperSoupThawedPaths", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("E.UpperReach.OutsideTreeRoom", player), lambda s: s.can_reach_region("UpperReach.OutsideTreeRoom") and s.has("Water", player) and s.has("UpperReach.ThawFurnace", player) and s.has("BreakCrystal", player))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("DoubleJump", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("DoubleJump", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", "UpperReach.UpperSoupThawed", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Grapple", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Grapple", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", "UpperReach.UpperSoupThawed", [], [], [], [[1, 'Sentry', 4]]))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Grapple", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", "UpperReach.UpperSoupThawed", [20], [['Sentry', 3]], [], []))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Bash", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", "UpperReach.UpperSoupThawed", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Bash", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", "UpperReach.UpperSoupThawed", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [2, 20]]))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoomLedge") and s.has("Bash", player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoomLedge") and s.has("Bash", player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", "", [], [['Grenade', 1]], [], [[1, 'Sentry', 3]]))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoomLedge") and s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", "", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoom") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperReach.TreeRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoom") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoom") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperReach.TreeRoom", "", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperReach.TreeRoom", "UpperReach.TreeRoomLedge", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperReach.TreeRoom", "UpperReach.TreeRoomLedge", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: s.has_all(("Bash", "DoubleJump", "Hammer"), player) and cost_all(s, player, options, "UpperReach.TreeRoom", "UpperReach.TreeRoomLedge", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperDepths.Entry", "UpperDepths.FirstFirefly", [40], [], [], []))
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "UpperDepths.Entry", "UpperDepths.FirstFirefly", [70], [], [], []))
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("EastHollow.DepthsOpen", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperDepths.Entry", "EastHollow.AboveDepths", [30], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperDepths.EntryRoofEX", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("UpperDepths.EntryRoofEX", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("Bash", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_location("UpperDepths.EntryRoofEX", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("Bash", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [30], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("UpperDepths.EntryRoofEX", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has_all(("Sword", "DoubleJump"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [], [], [[1, 'Flash', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.Entry", player), lambda s: s.has("Glide", player))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda s: s.can_reach_region("UpperDepths.FirstKSRoom") and s.has_all(("Bash", "Glide"), player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "UpperDepths.KeydoorLedge", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.RightKeystonePath", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", "UpperDepths.RightKeystonePath", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperDepths.LightPuzzle", player), lambda s: s.can_reach_region("UpperDepths.KeydoorLedge") and s.has("Launch", player) and can_keystones(s, player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", "", [30], [], [[16, 'Wall'], [16, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.FirstKSRoom", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda s: s.has_any(("Dash", "Sword"), player))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", "UpperDepths.RightKeystonePath", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", "UpperDepths.RightKeystonePath", [], [], [], [[1, 'Sentry', 2], [1, 'Shuriken', 0]]))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: can_keystones(s, player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player) and s.has("Hammer", player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", "UpperDepths.BelowHive", [], [], [[32, 'Ranged']], []))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: can_keystones(s, player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", "UpperDepths.BelowHive", [], [], [[32, 'Ranged']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperDepths.RightEntryKS", player), lambda s: s.can_reach_region("UpperDepths.RightKeystonePath") and s.has("Bash", player))
    add_rule(world.get_location("UpperDepths.RightEntryKS", player), lambda s: s.can_reach_region("UpperDepths.RightKeystonePath") and s.has("DepthsLight", player) and s.has_any(("Hammer", "Sword"), player))
    add_rule(world.get_location("UpperDepths.RightEntryKS", player), lambda s: s.can_reach_region("UpperDepths.RightKeystonePath") and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.RightKeystonePath", "", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda s: s.has("Dash", player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperDepths.RightKeystonePath", "UpperDepths.FirstKSRoom", [30], [], [], []))
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperDepths.RightKeystonePath", "UpperDepths.FirstKSRoom", [30], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("UpperDepths.EntryKeystoneDoor", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and can_keystones(s, player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer", "Glide", "DoubleJump"), player))
    add_rule(world.get_location("UpperDepths.EntryKeystoneDoor", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and can_keystones(s, player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "", [], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [2, 30]]))
    add_rule(world.get_location("UpperDepths.EntryKeystoneDoor", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and can_keystones(s, player) and cost_all(s, player, options, "UpperDepths.BelowHive", "", [], [['Flash', 1]], [], []))
    add_rule(world.get_location("UpperDepths.HiveEX", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.KeydoorLedge", player), lambda s: can_keystones(s, player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer", "Glide", "DoubleJump"), player))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.KeydoorLedge", player), lambda s: can_keystones(s, player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "UpperDepths.KeydoorLedge", [], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [2, 30]]))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.KeydoorLedge", player), lambda s: can_keystones(s, player) and cost_all(s, player, options, "UpperDepths.BelowHive", "UpperDepths.KeydoorLedge", [], [['Flash', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Teleporter", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda s: s.has_any(("Dash", "Launch"), player))
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.Central", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "UpperDepths.Teleporter", "UpperDepths.Central", [30], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.BelowHive", player), lambda s: s.has("DoubleJump", player) and s.has("DepthsLight", player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("DoubleJump", player) and s.has("DepthsLight", player))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("DoubleJump", player))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("Dash", player))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("Sword", player) and s.has("DepthsLight", player))
    add_rule(world.get_location("UpperDepths.LeftHealthKS", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("Sword", player))
    add_rule(world.get_location("UpperDepths.KeystoneHC", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("DoubleJump", player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("UpperDepths.KeystoneHC", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("DoubleJump", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", "", [], [], [], [[1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_location("UpperDepths.BossPathEX", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has("DoubleJump", player) and s.has("DepthsLight", player) and s.has_any(("TripleJump", "Sword"), player))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.Central", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", "UpperDepths.MoraPath", [60], [], [], []))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", "UpperDepths.MoraPath", [60], [], [], [[1, 'Sentry', 4], [1, 'Shuriken', 4]]))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.MoraPath") and s.has("Grapple", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.MoraPath") and s.has("Grapple", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "", [], [], [], [[2, 30], [1, 'Sentry', 2], [1, 'Shuriken', 1]]))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.MoraPath") and s.has("DoubleJump", player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Sword", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.OutsideMoraFight", [30], [], [], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Sword", "DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.OutsideMoraFight", [30], [], [], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("DoubleJump", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.BelowHive", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.BelowHive", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", "UpperDepths.BelowHive", [], [], [[20, 'Wall']], [[2, 40], [1, 'Sentry', 3], [1, 'Shuriken', 2]]))
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.Teleporter", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperDepths.OutsideMoraFight", "UpperDepths.Teleporter", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.Teleporter", player), lambda s: True)
    add_rule(world.get_entrance("MoraFirstPhase_to_MoraEscape", player), lambda s: s.has("Regenerate", player) and s.has_any(("DoubleJump", "Dash", "Launch"), player) and cost_all(s, player, options, "MoraFirstPhase", "MoraEscape", [50], [], [[165, 'Boss']], []))
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "MoraEscape", "MoraSecondPhase", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has_all(("Launch", "DoubleJump"), player))
    add_rule(world.get_location("UpperDepths.ForestsEyes", player), lambda s: s.can_reach_region("MoraSecondPhase") and s.has_all(("Regenerate", "Launch"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "MoraSecondPhase", "", [60], [], [[165, 'Boss']], []))
    add_rule(world.get_location("UpperDepths.ForestsEyes", player), lambda s: s.can_reach_region("MoraSecondPhase") and s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "MoraSecondPhase", "", [60], [], [[165, 'Boss']], []))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and cost_all(s, player, options, "UpperDepths.LowerConnection", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("UpperDepths.LowerConnection") and cost_all(s, player, options, "UpperDepths.LowerConnection", "", [], [], [], [[1, 'Blaze', 3], [1, 'Shuriken', 3]]))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "UpperDepths.BelowHive", [], [], [], [[1, 'Sentry', 3], [1, 'Shuriken', 3]]))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("DoubleJump", player) and s.has("DepthsLight", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has("Regenerate", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.West", [], [['Shuriken', 3]], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has("Regenerate", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.West", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has("Regenerate", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.West", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.Central", [], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Sword"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.Central", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has("Regenerate", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", "LowerDepths.Central", [30], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 3]]))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("Hammer", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has_all(("DoubleJump", "Water"), player))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("DoubleJump", player) and cost_all(s, player, options, "LowerDepths.West", "", [20, 20], [], [], []))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("WaterDash", player) and cost_all(s, player, options, "LowerDepths.West", "", [20, 20], [], [], []))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("Hammer", player) and s.has("BreakCrystal", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("Glide", player) and s.has("BreakCrystal", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has_all(("DoubleJump", "Water"), player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("DoubleJump", player) and s.has("BreakCrystal", player) and cost_all(s, player, options, "LowerDepths.West", "", [20, 20], [], [], []))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("WaterDash", player) and s.has("BreakCrystal", player) and cost_all(s, player, options, "LowerDepths.West", "", [20, 20], [], [], []))
    add_rule(world.get_location("LowerDepths.SwimEC", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("Water", player) and s.has("UpperDepths.ForestsEyes", player))
    add_rule(world.get_location("LowerDepths.SwimEC", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("Water", player) and cost_all(s, player, options, "LowerDepths.West", "", [], [], [], [[1, 'Flash', 0]]))
    add_rule(world.get_location("LowerDepths.SwimEC", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("WaterDash", player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "LowerDepths.West", "", [150], [], [], []))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("DepthsLight", player))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("LowerDepths.West"))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Bash", "Water"), player) and s.has("UpperDepths.ForestsEyes", player))
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "LowerDepths.West", "UpperDepths.LowerConnection", [20], [], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Sword", "DoubleJump"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [10], [], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Sword", "DoubleJump"), player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [10], [], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Hammer", "DoubleJump"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [30], [], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Hammer", "DoubleJump"), player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [30], [], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("DoubleJump", player) and s.has("DepthsLight", player))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.Central", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.Central", "", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("Grapple", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("rapple", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("rapple", player) and cost_all(s, player, options, "LowerDepths.Central", "", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("rapple", player) and s.has("UpperDepths.ForestsEyes", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("rapple", player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "LowerDepths.Central", "", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerDepths.SpiritTrial", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has_all(("Dash", "Bash", "Grapple", "Glide"), player) and s.has("LowerDepths.TrialActivation", player))
    add_rule(world.get_location("LowerDepths.SpiritTrial", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has_all(("DoubleJump", "Bash", "Grapple"), player) and s.has("LowerDepths.TrialActivation", player))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player) and s.has("UpperDepths.ForestsEyes", player))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.Central", "LowerDepths.East", [], [], [], [[1, 'Flash', 1]]))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "LowerDepths.Central", "LowerDepths.East", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Spear', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "Glide"), player))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("DepthsLight", player) and s.has_any(("TripleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.Central", "UpperDepths.LowerConnection", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player) and s.has_any(("Sword", "Hammer", "DoubleJump", "Grapple"), player))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.Central", "UpperDepths.LowerConnection", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has_any(("Hammer", "Sword"), player) and s.has("UpperDepths.ForestsEyes", player))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has_any(("Hammer", "Sword"), player) and cost_all(s, player, options, "LowerDepths.Central", "UpperDepths.LowerConnection", [], [], [], [[1, 'Flash', 1]]))
    add_rule(world.get_location("E.LowerDepths.East", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Sword", player) and s.has("BreakCrystal", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("E.LowerDepths.East", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Hammer", player) and s.has("BreakCrystal", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("E.LowerDepths.East", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Glide", player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("DoubleJump", player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.East", "", [30], [], [], []))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Grapple", player) and s.has_any(("Sword", "Dash", "Glide"), player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Launch", player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("SpiritLight", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "", [60], [], [], []))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("SpiritLight", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "", [30], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("DoubleJump", "Dash"), player) and s.has("SpiritLight", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Blaze', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("DoubleJump", player) and s.has("SpiritLight", player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("DoubleJump", player) and s.has("SpiritLight", player) and s.has_any(("TripleJump", "Glide"), player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Grapple", player) and s.has("SpiritLight", player))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Grapple"), player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer", "Glide"), player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Grapple"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [], [[20, 'Wall']], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [['Grenade', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [], [[20, 'Wall']], [[1, 'Flash', 1]]))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [30], [], [], []))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player) and s.has("UpperDepths.ForestsEyes", player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has("Grapple", player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [], [['Flash', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [], [['Flash', 1]], [], [[2, 50]]))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has("UpperDepths.ForestsEyes", player) and s.has("Grapple", player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [], [], [], [[2, 50]]))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.TreeArea", [30], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has("DoubleJump", player) and s.has("UpperDepths.ForestsEyes", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has("Bash", player) and s.has("Sword", player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.Central", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has_all(("Bash", "Hammer"), player) and s.has("DepthsLight", player))
    add_rule(world.get_location("LowerDepths.TrialActivation", player), lambda s: s.can_reach_region("LowerDepths.BeforeTree") and s.has_all(("Dash", "Bash", "Grapple"), player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Sword", player) and s.has_any(("Dash", "Grapple"), player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.East", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Hammer", player) and s.has("DepthsLight", player) and s.has_any(("Bash", "Grapple"), player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "Grapple"), player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.East", [], [], [], [[1, 'Sentry', 3], [2, 30]]))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.East", [], [], [], [[1, 'Sentry', 3], [1, 'Flash', 2], [2, 30]]))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "DoubleJump", "Grapple", "Glide"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has("Dash", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], [[1, 'Shuriken', 2], [1, 'Sentry', 4]]))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [30], [], [[1, 'Wall']], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 30]]))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Sword", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], [[1, 'Sentry', 7]]))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [30], [], [[1, 'Wall']], [[1, 'Shuriken', 4], [1, 'Sentry', 5]]))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [30], [], [[1, 'Wall']], [[1, 'Shuriken', 2], [1, 'Sentry', 3], [1, 'Blaze', 5]]))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Sword", "Glide"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], [[1, 'Shuriken', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_LowerDepths.BeforeTree", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.TreeArea", "LowerDepths.BeforeTree", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple"), player) and s.has_any(("DoubleJump", "Dash", "Sword"), player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple", "Glide"), player) and s.has("Hammer", player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]]))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple", "Bash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]]))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [], [['Sentry', 4]], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [15], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [], [['Grenade', 1], ['Sentry', 2]], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [30], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [15], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Launch"), player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [15], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Grapple", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "PoolsApproach.MillPath", [], [['Shuriken', 1]], [[8, 'Combat', 8, 'Combat']], []))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Bash", player) and s.has("Grapple", player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "PoolsApproach.MillPath", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "PoolsApproach.MillPath", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and cost_all(s, player, options, "PoolsApproach.MillPath", "", [180], [], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("WaterDash", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "", [160], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("Bash", player))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("DoubleJump", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "", [], [], [[32, 'Combat'], [1, 'Ranged']], []))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("Dash", player) and s.has("Combat.Dangerous", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "", [], [], [[32, 'Combat'], [1, 'Ranged']], []))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("Dash", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "", [], [], [[32, 'Combat'], [1, 'Ranged']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has_all(("Grapple", "Glide"), player) and s.has_any(("Dash", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "", [], [], [[1, 'Ranged']], []))
    add_rule(world.get_location("PoolsApproach.MillPathEC", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and cost_all(s, player, options, "PoolsApproach.MillPath", "", [120], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathEC", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("WaterDash", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "", [60], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("WaterDash", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "", [220], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [], [], [[32, 'Combat'], [8, 'Combat']], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [], [], [[32, 'Combat'], [8, 'Combat']], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [], [['Spear', 1], ['Blaze', 1]], [[32, 'Combat'], [8, 'Combat']], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [20], [], [[32, 'Combat'], [8, 'Combat'], [1, 'Ranged']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Grapple", "Glide"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [], [], [[32, 'Combat'], [8, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [], [], [], [[1, 'Grenade', 1], [1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("WaterDash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Launch", "Grapple", "DoubleJump", "Hammer", "PoolsApproach.WheelFreed"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.OnTopOfWheel", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Launch", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [120], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [120], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [120], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [120], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [120], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [120], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [120], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [120], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Launch", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [140], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch", "DoubleJump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch", "DoubleJump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple", "Glide"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple", "DoubleJump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple", "DoubleJump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [80], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("TripleJump", "Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "DoubleJump", "Glide"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Sword", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "DoubleJump", "Glide"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [80], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "DoubleJump", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [80], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [100], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [100], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [100], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("WaterDash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Grapple", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [120], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("WaterDash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [180], [], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [20], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has("Launch", player) and s.has_any(("Glide", "DoubleJump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [20], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("Launch", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [20], [['Spear', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [40], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [40], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_any(("DoubleJump", "Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [80], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has("Sword", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [100], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [120], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("Bash", "Grapple"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [180], [], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("Bash", "Launch"), player) and s.has_any(("Glide", "DoubleJump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [180], [], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("Bash", "Launch", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [180], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [200], [], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("Bash", "DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [200], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("Bash", "DoubleJump"), player) and s.has("Water", player))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [], [], [], [[2, 180]]))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has("Bash", player) and s.has("Water", player))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has("Bash", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [], [], [], [[2, 200]]))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("WaterDash", "Dash"), player) and s.has("Water", player))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("WaterDash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [], [], [], [[2, 60]]))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("Water", "WaterDash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [20], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has("WaterDash", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [80], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has("Launch", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Grapple", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and s.has("Water", player))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Grapple", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [], [], [], [[2, 180]]))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Launch", player) and s.has_any(("Glide", "DoubleJump", "Dash", "Sword"), player) and s.has("Water", player))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Launch", player) and s.has_any(("Glide", "DoubleJump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [], [], [], [[2, 180]]))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Launch", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [180], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Launch", "Hammer"), player) and s.has("Water", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water", player) and s.has_any(("DoubleJump", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [60], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Dash"), player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [60], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Sword"), player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water", player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("WaterDash", "Grapple"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("WaterDash", "Launch"), player) and s.has_any(("Glide", "DoubleJump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("WaterDash", "Launch", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [80], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("WaterDash", "DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("WaterDash", player) and s.has_any(("DoubleJump", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [140], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("WaterDash", "Dash"), player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [140], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("WaterDash", "Sword"), player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [160], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("WaterDash", player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [180], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [180], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [200], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [200], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("WaterDash", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Launch", "Bash", "DoubleJump"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [60], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("WaterDash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Launch", "Bash", "DoubleJump"), player) and s.has_any(("Glide", "DoubleJump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [60], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("WaterDash", "Launch", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Launch", "Bash", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [60], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("WaterDash", "Launch", "Bash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Launch", "Bash", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [60], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("WaterDash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("WaterDash", "DoubleJump", "Sword", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Glide", "DoubleJump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [120], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [120], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Launch", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [120], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has("Launch", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Glide", "DoubleJump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [130], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Launch", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [130], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("oubleJump", player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [140], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Launch", "Sword", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("oubleJump", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [140], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [160], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("WaterDash", "Bash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("DoubleJump", "Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [180], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [190], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("WaterDash", "Bash", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.MillPath", [200], [], [], []))
    add_rule(world.get_location("C.PoolsApproach.OnTopOfWheel", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Hammer"), player))
    add_rule(world.get_location("C.PoolsApproach.OnTopOfWheel", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_any(("Launch", "Grapple", "DoubleJump", "Hammer", "PoolsApproach.WheelFreed"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [20], [], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Water", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [['Spear', 1]], [], [[2, 180]]))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("WaterDash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [80], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Bash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [220], [], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("WaterDash", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [160], [], [], []))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Bash", "Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Dash", "Hammer"), player) and s.has("PoolsApproach.WheelFreed", player))
    add_rule(world.get_location("PoolsApproach.MarshPathCurrentEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("WaterDash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [100], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathEC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("WaterDash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Water", player))
    add_rule(world.get_location("PoolsApproach.MillPathEC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("WaterDash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [], [], [[2, 180]]))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "WaterDash", "Grapple"), player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [20], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "WaterDash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [20], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "WaterDash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [40], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "WaterDash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [60], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "WaterDash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [100], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "WaterDash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [80], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Bash", "Grapple", "DoubleJump"), player))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Bash", "Grapple"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [20], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Bash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [20], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Bash", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [20], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Bash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [40], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Bash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [60], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [100], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [80], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("WaterDash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [220], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Launch"), player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2], [2, 20]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "Grapple"), player) and s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "Grapple", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "DoubleJump"), player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "Hammer"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [40], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [40], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash"), player) and s.has_any(("Dash", "DoubleJump", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [40], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [40], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash"), player) and s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [60], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [60], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [60], [['Spear', 1], ['Blaze', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [40], [], [], [[1, 'Shuriken', 3], [1, 'Sentry', 4]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Grapple", "Glide"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Grapple", "Dash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Grapple", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2], [2, 20]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Grapple", "Sword"), player) and s.has("Hammer", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Grapple", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Grapple", "Hammer"), player) and s.has("DoubleJump", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Grapple", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "DoubleJump"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Hammer", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [40], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Dash"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [40], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [40], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Sword", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [40], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Hammer"), player) and s.has("Glide", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [40], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [40], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash"), player) and s.has_any(("Grapple", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [60], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch"), player) and s.has_any(("Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch", "DoubleJump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch", "Sword"), player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple", "DoubleJump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple", "Dash"), player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple", "Sword"), player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [['Shuriken', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple"), player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [100], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "DoubleJump", "Glide"), player) and s.has("Sword", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [100], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "DoubleJump", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [100], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [120], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [120], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [120], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [120], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Sword"), player) and s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [120], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [120], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("WaterDash", player) and s.has_any(("Grapple", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [140], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [200], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [200], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "DoubleJump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [200], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [200], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Dash"), player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [200], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [200], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Sword"), player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [200], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [200], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [200], [['Shuriken', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [220], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [220], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "DoubleJump", "Glide"), player) and s.has("Sword", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [220], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [220], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "DoubleJump", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [220], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Launch", player) and s.has_any(("Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [160], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [160], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [160], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [160], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [160], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Sword"), player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [160], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [160], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [160], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [180], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("Sword", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [], [], [[1, 'Blaze', 9], [2, 20]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "Dash"), player) and s.has("Hammer", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "DoubleJump"), player) and s.has_any(("TripleJump", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Glide"), player) and s.has("PoolsApproach.WheelFreed", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Dash", "Sword"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Dash", "Hammer"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "DoubleJump", "Dash", "Hammer"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Dash"), player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [['Grenade', 2]], [], [[1, 'Spear', 2], [1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Dash"), player) and s.has("PoolsApproach.WheelFreed", player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Dash"), player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [['Grenade', 1]], [], [[1, 'Spear', 2], [1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [20], [['Grenade', 2]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Dash"), player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [20], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump", "Dash"), player) and s.has_any(("TripleJump", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [['Grenade', 1]], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "Hammer"), player) and s.has("DoubleJump", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "WaterDash"), player) and s.has_any(("DoubleJump", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [60], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "WaterDash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [40], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "WaterDash", "Hammer", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [40], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has("WaterDash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Launch", "DoubleJump", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MillPath", [120], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water", "Grapple", "DoubleJump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Combat.Dangerous", player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MillPath", [10], [], [[32, 'Combat']], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water", "Grapple", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MillPath", [10], [], [[32, 'Combat']], []))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("Dash", player) and s.has("Bash", player))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("Dash", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [], [], [[0, [[1, 'Ranged']], []], [2, 10]]))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("DoubleJump", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [], [[1, 'Ranged']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("DoubleJump", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("DoubleJump", player) and s.has("Bash", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("Bash", "Sword"), player))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [20], [], [], []))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("EastPools.TwoCrushersEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [80], [], [], []))
    add_rule(world.get_location("EastPools.RightOre", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("DoubleJump", "Grapple", "Flap"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("EastPools.RightOre", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("DoubleJump", "Grapple", "Flap"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [], [], [[2, 30]]))
    add_rule(world.get_location("EastPools.RightOre", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("DoubleJump", "Grapple", "Flap", "Bash"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("EastPools.RightOre", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("DoubleJump", "Grapple", "Flap", "Bash"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("EastPools.RightOre", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("DoubleJump", "Grapple", "Flap"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [10], [], [], []))
    add_rule(world.get_location("EastPools.RightOre", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("DoubleJump", "Grapple", "Flap"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [], [[1, 'Ranged']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("EastPools.RightOre", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_location("EastPools.BubbleCurrentEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [80], [], [], []))
    add_rule(world.get_location("EastPools.BelowLeverEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("Bash", player))
    add_rule(world.get_location("PoolsApproach.MarshPathCurrentEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [80], [], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Water"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "WaterDash"), player) and s.has_any(("PoolsApproach.WheelFreed", "DoubleJump", "Hammer"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [100], [], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("Sword", player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [20], [], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [20], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 5], [1, 'Sentry', 3]]))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Bash", "Dash", "Hammer"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Glide", "Dash", "Hammer"), player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Glide", "DoubleJump"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Spear', 3], [1, 'Blaze', 3], [1, 'Sentry', 3]]))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.BehindEntryDoor") and s.has_all(("Grapple", "Flap"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has("Bash", player))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.BehindEntryDoor") and s.has_all(("Grapple", "Flap"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']], [2, 10]]))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TokkBubble", player), lambda s: True)
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "EastPools.TPArea", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", "EastPools.TPArea", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("EastPools.TokkBubbleFree", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.TokkBubble", "", [120], [], [], []))
    add_rule(world.get_location("EastPools.TokkBubbleFree", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has("WaterDash", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "EastPools.TokkBubble", "", [80], [], [[32, 'Combat']], []))
    add_rule(world.get_location("EastPools.TokkBubbleFree", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has("WaterDash", player) and s.has("EastPools.TokkBubblePurpleWall", player) and cost_all(s, player, options, "EastPools.TokkBubble", "", [60], [], [], []))
    add_rule(world.get_location("EastPools.TokkBubblePurpleWall", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has("Combat.Dangerous", player) and s.has("Water", player) and cost_all(s, player, options, "EastPools.TokkBubble", "", [], [], [[32, 'Combat']], []))
    add_rule(world.get_location("EastPools.TokkBubblePurpleWall", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "EastPools.TokkBubble", "", [], [], [[32, 'Combat']], [[2, 160]]))
    add_rule(world.get_location("EastPools.TokkBubblePurpleWall", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has("WaterDash", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "EastPools.TokkBubble", "", [120], [], [[32, 'Combat']], []))
    add_rule(world.get_location("EastPools.TokkBubblePurpleWall", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.TokkBubble", "", [140], [], [], []))
    add_rule(world.get_location("EastPools.TokkBubblePurpleWall", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has_all(("WaterDash", "Bash"), player) and cost_all(s, player, options, "EastPools.TokkBubble", "", [100], [], [], []))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has_all(("Grapple", "Flap"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has_all(("Flap", "Grapple"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "EastPools.TokkBubble", "EastPools.TPArea", [], [], [[32, 'Combat']], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has_all(("Flap", "Bash", "Grapple"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and cost_all(s, player, options, "EastPools.TokkBubble", "EastPools.TPArea", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Sword", "TripleJump"), player))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "EastPools.TokkBubble", "EastPools.BehindEntryDoor", [], [], [], [[0, [[1, 'Ranged'], [32, 'Combat']], ['Combat.Dangerous']]]))
    add_rule(world.get_location("EastPools.LowerWaterDrained", player), lambda s: s.can_reach_region("EastPools.TPArea") and s.has("WaterDash", player) and cost_all(s, player, options, "EastPools.TPArea", "", [120], [], [], []))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.TPArea", "EastPools.FishingPool", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "EastPools.TPArea", "EastPools.FishingPool", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastPools.TPArea", "EastPools.FishingPool", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has_all(("DoubleJump", "Dash", "Hammer"), player))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.TPArea", "EastPools.WaterdashArena", [60], [], [], []))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.WaterdashArena", player), lambda s: s.has("WaterDash", player) and s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.TPArea", "EastPools.WaterdashArena", [40], [], [], []))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.NextToLupoOre", player), lambda s: True)
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.NextToLupoOre", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "EastPools.TPArea", "EastPools.NextToLupoOre", [60], [], [], []))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda s: True)
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda s: True)
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "EastPools.TPArea", "EastPools.BehindEntryDoor", [], [], [[1, 'Ranged']], []))
    add_rule(world.get_location("EastPools.ArenaWall", player), lambda s: s.can_reach_region("EastPools.Teleporter") and s.has("Water", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", "", [20], [], [], []))
    add_rule(world.get_location("EastPools.UltraBashShard", player), lambda s: s.can_reach_region("EastPools.Teleporter") and s.has("Water", player) and s.has("EastPools.LowerWaterDrained", player))
    add_rule(world.get_location("EastPools.UltraBashShard", player), lambda s: s.can_reach_region("EastPools.Teleporter") and s.has("WaterDash", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", "", [180], [], [], []))
    add_rule(world.get_location("EastPools.UltraBashShard", player), lambda s: s.can_reach_region("EastPools.Teleporter") and s.has_all(("WaterDash", "Bash"), player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", "", [140], [], [], []))
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", "EastPools.WaterdashArena", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.NextToLupoOre", player), lambda s: s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", "EastPools.NextToLupoOre", [100], [], [], []))
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.NextToLupoOre", player), lambda s: s.has("WaterDash", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", "EastPools.NextToLupoOre", [40], [], [], []))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.FishingPool", "EastPools.AboveFishingPool", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "EastPools.FishingPool", "EastPools.AboveFishingPool", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("WaterDash", "Water", "Sword"), player))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("WaterDash", "Water", "Hammer"), player) and s.has("Glide", player))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("WaterDash", "Water", "Hammer"), player) and cost_all(s, player, options, "EastPools.FishingPool", "EastPools.AboveFishingPool", [], [], [], [[1, 'Shuriken', 2]]))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("WaterDash", "Water", "Glide"), player) and cost_all(s, player, options, "EastPools.FishingPool", "EastPools.AboveFishingPool", [], [['Shuriken', 2]], [], []))
    add_rule(world.get_location("EastPools.AboveTpEX", player), lambda s: s.can_reach_region("EastPools.AboveFishingPool") and cost_all(s, player, options, "EastPools.AboveFishingPool", "", [80], [], [], []))
    add_rule(world.get_location("EastPools.AboveTpEX", player), lambda s: s.can_reach_region("EastPools.AboveFishingPool") and s.has("WaterDash", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", "", [40], [], [], []))
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "DoubleJump"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Water", "WaterDash", "DoubleJump"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", "UpperPools.DrainPuzzleExit", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "WaterDash", "DoubleJump"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.AboveFishingPool", "UpperPools.DrainPuzzleExit", [20], [], [], []))
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "WaterDash", "DoubleJump"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", "UpperPools.DrainPuzzleExit", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump"), player) and s.has("UpperPools.UpperWaterDrained", player))
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Bash", "WaterDash"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("Water", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", "UpperPools.DrainPuzzleExit", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Bash", "WaterDash"), player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", "UpperPools.DrainPuzzleExit", [], [['Grenade', 1]], [], [[2, 20]]))
    add_rule(world.get_location("EastPools.UltraBashShard", player), lambda s: s.can_reach_region("EastPools.NextToLupoOre") and s.has("Water", player) and s.has("EastPools.LowerWaterDrained", player))
    add_rule(world.get_location("EastPools.UltraBashShard", player), lambda s: s.can_reach_region("EastPools.NextToLupoOre") and s.has_all(("WaterDash", "Bash"), player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "", [140], [], [], []))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "EastPools.Teleporter", [100], [], [], []))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.Teleporter", player), lambda s: s.has("WaterDash", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "EastPools.Teleporter", [40], [], [], []))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.TPArea", player), lambda s: True)
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.TPArea", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "EastPools.TPArea", [60], [], [], []))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "EastPools.WaterdashArena", [120], [], [], []))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.WaterdashArena", player), lambda s: s.has("WaterDash", player) and s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "EastPools.WaterdashArena", [60], [], [], []))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "EastPools.WaterdashArena", [100], [], [], []))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.WaterdashArena", player), lambda s: s.has("WaterDash", player) and s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "EastPools.WaterdashArena", [40], [], [], []))
    add_rule(world.get_location("EastPools.LupoEX", player), lambda s: s.can_reach_region("EastPools.LupoArea"))
    add_rule(world.get_location("EastPools.BehindCrusherEX", player), lambda s: s.can_reach_region("EastPools.LupoArea") and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.LupoArea", "", [160], [], [], []))
    add_rule(world.get_location("EastPools.BehindCrusherEX", player), lambda s: s.can_reach_region("EastPools.LupoArea") and s.has("WaterDash", player) and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.LupoArea", "", [80], [], [], []))
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.MissilePuzzle", player), lambda s: s.has("WaterDash", player) and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.LupoArea", "EastPools.MissilePuzzle", [80], [], [], []))
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.CentralRoom", player), lambda s: s.has("WaterDash", player) and s.has("EastPools.LupoPurpleFloor", player) and s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.LupoArea", "EastPools.CentralRoom", [100], [], [], []))
    add_rule(world.get_location("EastPools.FightRoomHC", player), lambda s: s.can_reach_region("EastPools.WaterdashArena") and s.has_all(("WaterDash", "DoubleJump"), player) and s.has("EastPools.FightArenas", player))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.TPArea", player), lambda s: s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "EastPools.TPArea", [80], [], [], []))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.TPArea", player), lambda s: s.has("WaterDash", player) and s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "EastPools.TPArea", [40], [], [], []))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "EastPools.Teleporter", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.Teleporter", player), lambda s: s.has("Bash", player) and s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "EastPools.Teleporter", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.NextToLupoOre", player), lambda s: s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "EastPools.NextToLupoOre", [120], [], [], []))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.NextToLupoOre", player), lambda s: s.has("WaterDash", player) and s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "EastPools.NextToLupoOre", [60], [], [], []))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.NextToLupoOre", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "EastPools.NextToLupoOre", [100], [], [], []))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.NextToLupoOre", player), lambda s: s.has("WaterDash", player) and s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "EastPools.NextToLupoOre", [40], [], [], []))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.FightArenas", player))
    add_rule(world.get_location("EastPools.CentralRoomPurpleWall", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has("Water", player))
    add_rule(world.get_location("EastPools.LupoPurpleFloor", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has("Water", player))
    add_rule(world.get_location("EastPools.EnergyHarvestShard", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("WaterDash", "Hammer"), player) and s.has("Water", player))
    add_rule(world.get_location("EastPools.EnergyHarvestShard", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("WaterDash", "Hammer"), player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("EastPools.EnergyHarvestShard", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("EastPools.BehindCrusherEX", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "", [200], [], [], []))
    add_rule(world.get_location("EastPools.BehindCrusherEX", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has("WaterDash", player) and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "", [120], [], [], []))
    add_rule(world.get_location("EastPools.BehindCrusherEX", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has("WaterDash", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "", [140], [], [], []))
    add_rule(world.get_location("EastPools.SpiritTrial", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("Water", "Grapple", "WaterDash", "DoubleJump"), player) and s.has("UpperPools.TrialActivation", player) and s.has("EastPools.CentralRoomPurpleWall", player))
    add_rule(world.get_location("EastPools.SpiritTrial", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("Water", "Grapple", "WaterDash", "Glide", "Dash"), player) and s.has("UpperPools.TrialActivation", player) and s.has("EastPools.CentralRoomPurpleWall", player))
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.CentralRoom", player), lambda s: s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "EastPools.CentralRoom", [180], [], [], []))
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.CentralRoom", player), lambda s: s.has("WaterDash", player) and s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "EastPools.CentralRoom", [80], [], [], []))
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.LupoArea", player), lambda s: s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "EastPools.LupoArea", [100], [], [], []))
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.LupoArea", player), lambda s: s.has("WaterDash", player) and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "EastPools.LupoArea", [40], [], [], []))
    add_rule(world.get_location("EastPools.CentralRoomPurpleWall", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("Water", player))
    add_rule(world.get_location("EastPools.CentralRoomPurpleWall", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and cost_all(s, player, options, "EastPools.CentralRoom", "", [], [], [], [[2, 180]]))
    add_rule(world.get_location("EastPools.CentralRoomBubbleFree", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.CentralRoom", "", [160], [], [], []))
    add_rule(world.get_location("EastPools.CentralRoomBubbleFree", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "EastPools.CentralRoom", "", [80], [], [], []))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("EastPools.CentralRoomBubbleFree", player) and s.has_any(("Water", "Sword", "Hammer"), player))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("EastPools.CentralRoomBubbleFree", player) and cost_all(s, player, options, "EastPools.CentralRoom", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.CentralRoom", "", [100], [], [], []))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("Bash", player) and s.has("EastPools.CentralRoomBubbleFree", player) and cost_all(s, player, options, "EastPools.CentralRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.CentralRoom", "", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("Bash", player) and s.has_any(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has_all(("Bash", "Dash"), player) and s.has("Hammer", player))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "EastPools.CentralRoom", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has_all(("Bash", "Sword"), player) and cost_all(s, player, options, "EastPools.CentralRoom", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "EastPools.CentralRoom", "", [], [['Sentry', 3]], [], []))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has_all(("DoubleJump", "Glide"), player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has_all(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "EastPools.CentralRoom", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Launch"), player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and cost_all(s, player, options, "EastPools.CentralRoom", "UpperPools.KeystoneRoomEntrance", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and s.has_any(("Water", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.CentralRoom", "UpperPools.KeystoneRoomEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and cost_all(s, player, options, "EastPools.CentralRoom", "UpperPools.KeystoneRoomEntrance", [], [['Grenade', 1]], [], [[1, 'Grenade', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [2, 20]]))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Regenerate", "WaterDash", "Water"), player) and cost_all(s, player, options, "EastPools.CentralRoom", "WestPools.Teleporter", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Regenerate", "WaterDash"), player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.CentralRoom", "WestPools.Teleporter", [160], [], [], []))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Regenerate", "WaterDash"), player) and cost_all(s, player, options, "EastPools.CentralRoom", "WestPools.Teleporter", [160], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Regenerate", "WaterDash"), player) and cost_all(s, player, options, "EastPools.CentralRoom", "WestPools.Teleporter", [180], [], [], []))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.CentralRoom", "EastPools.MissilePuzzle", [180], [], [], []))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.MissilePuzzle", player), lambda s: s.has("WaterDash", player) and s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.CentralRoom", "EastPools.MissilePuzzle", [80], [], [], []))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.LupoArea", player), lambda s: s.has("WaterDash", player) and s.has("EastPools.CentralRoomPurpleWall", player) and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.CentralRoom", "EastPools.LupoArea", [80], [], [], []))
    add_rule(world.get_location("UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "", [], [], [[32, 'Combat']], [[1, 'Bow', 1], [1, 'Grenade', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance"))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "", [60], [], [], []))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has("Launch", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "", [120], [], [], []))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has("Bash", player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "", [160], [], [], []))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "", [160], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has("Bash", player) and s.has("Water", player))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "", [], [], [], [[2, 180]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.CentralRoom", player), lambda s: s.has("Regenerate", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("DoubleJump", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "UpperPools.KeystoneRoomBubbleSpawner", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Dash", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "UpperPools.KeystoneRoomBubbleSpawner", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Glide", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "UpperPools.KeystoneRoomBubbleSpawner", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "UpperPools.KeystoneRoomBubbleSpawner", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: can_keystones(s, player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: can_keystones(s, player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "UpperPools.KeystoneRoomBubbleSpawner", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoom", player), lambda s: s.has("Bash", player))
    add_rule(world.get_location("UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "", [], [], [], [[1, 'Grenade', 1], [1, 'Spear', 1], [1, 'Bow', 1]]))
    add_rule(world.get_location("UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and s.has("Water", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_location("UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "", [], [['Shuriken', 1]], [], [[2, 20]]))
    add_rule(world.get_location("UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and s.has("Water", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "", [], [['Sentry', 1]], [], [[2, 20]]))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and s.has("Flap", player) and can_keystones(s, player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and s.has("Flap", player) and can_keystones(s, player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "", [60], [], [], []))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and s.has("Launch", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "", [120], [], [], []))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and s.has("Bash", player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "", [160], [], [], []))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "", [160], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "", [180], [], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda s: True)
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda s: s.has_all(("WaterDash", "Flap"), player) and can_keystones(s, player) and s.has("Water", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda s: s.has_all(("WaterDash", "Flap"), player) and can_keystones(s, player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "UpperPools.KeystoneRoom", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomEntrance", player), lambda s: True)
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "UpperPools.KeystoneRoomEntrance", [20], [], [[32, 'Combat']], []))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has("Sword", player))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("WaterDash", "DoubleJump", "Water"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("WaterDash", "DoubleJump", "Water"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("WaterDash", "DoubleJump"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [20], [], [], []))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("WaterDash", "DoubleJump"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [20], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperPools.UpperMidKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.UpperMidKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("WaterDash", "Water"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [20], [], [], []))
    add_rule(world.get_location("UpperPools.UpperMidKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("WaterDash", "Water"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [20], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperPools.UpperMidKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("WaterDash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [40], [], [], []))
    add_rule(world.get_location("UpperPools.UpperMidKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [40], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [['Grenade', 1]], [], [[1, 'Grenade', 1], [1, 'Shuriken', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("Grapple", player) and s.has("Hammer", player))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("Grapple", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("DoubleJump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("WaterDash", "Bash"), player) and s.has("Water", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("WaterDash", "Bash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Water", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Grenade', 1]], [], [[1, 'Grenade', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [2, 20]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_location("UpperPools.UpperMidKS", player), lambda s: s.can_reach_region("UpperPools.BeforeKeystoneDoor") and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.UpperMidKS", player), lambda s: s.can_reach_region("UpperPools.BeforeKeystoneDoor") and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.BeforeKeystoneDoor") and s.has("DoubleJump", player) and s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "UpperPools.RightBubbleSpamRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "UpperPools.RightBubbleSpamRoom", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 40]]))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "UpperPools.RightBubbleSpamRoom", [20], [['Grenade', 1], ['Spear', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Flap", "Hammer"), player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player))
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Flap", "Glide"), player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player) and cost_all(s, player, options, "UpperPools.TreeRoomEntrance", "UpperPools.AboveTree", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has("Bash", player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player) and cost_all(s, player, options, "UpperPools.TreeRoomEntrance", "UpperPools.AboveTree", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has("DoubleJump", player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperPools.TreeRoomEntrance", "UpperPools.AboveTree", [20], [], [], []))
    add_rule(world.get_location("UpperPools.TreeRoomLeftBubbleFree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", "", [40], [], [], []))
    add_rule(world.get_location("UpperPools.TreeRoomLeftBubbleFree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and cost_all(s, player, options, "UpperPools.TreeRoom", "", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("UpperPools.TreeRoomLeftBubbleFree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and s.has("Water", player) and cost_all(s, player, options, "UpperPools.TreeRoom", "", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_location("UpperPools.TreeRoomLeftBubbleFree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and cost_all(s, player, options, "UpperPools.TreeRoom", "", [], [['Shuriken', 1]], [], [[2, 20]]))
    add_rule(world.get_location("UpperPools.TreeRoomRightBubbleFree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and cost_all(s, player, options, "UpperPools.TreeRoom", "", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("UpperPools.TreeRoomRightBubbleFree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", "", [40], [], [], []))
    add_rule(world.get_location("UpperPools.TreeRoomRightBubbleFree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and s.has("Water", player))
    add_rule(world.get_location("UpperPools.TreeRoomRightBubbleFree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and cost_all(s, player, options, "UpperPools.TreeRoom", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("UpperPools.ButtonDoorAboveTree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", "", [80], [], [], []))
    add_rule(world.get_location("UpperPools.SwimDashCurrentEX", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", "", [60], [], [], []))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.TreeRoom", "UpperPools.AboveTree", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperPools.TreeRoom", "UpperPools.AboveTree", [20], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperPools.TreeRoom", "UpperPools.TreeRoomEntrance", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("UpperPools.ButtonDoorAboveTree", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.TreeRoom", "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("UpperPools.ButtonDoorAboveTree", player) and cost_all(s, player, options, "UpperPools.TreeRoom", "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("UpperPools.ButtonDoorAboveTree", player) and s.has("UpperPools.TreeRoomRightBubbleFree", player))
    add_rule(world.get_location("UpperPools.RoofEX", player), lambda s: s.can_reach_region("UpperPools.AboveTree") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.AboveTree", "", [], [], [[1, 'Ranged']], []))
    add_rule(world.get_location("UpperPools.RoofEX", player), lambda s: s.can_reach_region("UpperPools.AboveTree") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has("Hammer", player))
    add_rule(world.get_location("UpperPools.RoofEX", player), lambda s: s.can_reach_region("UpperPools.AboveTree") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperPools.AboveTree", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.TreeRoomEntrance", player), lambda s: True)
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Water", "WaterDash", "Grapple"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Water", "Grapple", "DoubleJump"), player) and s.has_any(("Dash", "Hammer"), player))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Water", "Grapple", "DoubleJump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Water", "Launch"), player) and s.has("WaterDash", player))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Water", "Launch"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [120], [], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Grapple", "DoubleJump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [120], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has("Launch", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [140], [], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("WaterDash", "Launch"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [80], [], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("WaterDash", "Grapple"), player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [80], [], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("WaterDash", "Grapple"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [80], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Grapple", "DoubleJump"), player))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Grapple", "Dash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Grapple", "Hammer"), player) and s.has("Sword", player))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Grapple", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Grapple", "Dash", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [120], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [60], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Sword", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Sword", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Hammer", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [20], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Hammer", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Water", "UpperPools.UpperWaterDrained"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Hammer", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has("Hammer", player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("UpperPools.DrainRoomPurpleWall", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has("Bash", player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleExit", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 40]]))
    add_rule(world.get_location("UpperPools.DrainRoomPurpleWall", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleRight") and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "", [100], [], [], []))
    add_rule(world.get_location("UpperPools.DrainRoomPurpleWall", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleRight") and s.has_all(("WaterDash", "Bash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "", [80], [], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleRight") and s.has_all(("WaterDash", "Bash", "DoubleJump"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has("Water", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleRight") and s.has_all(("WaterDash", "Bash", "DoubleJump"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "", [], [['Grenade', 1]], [], [[2, 60]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [], [], [[1, 'Sentry', 3]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("DoubleJump", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("DoubleJump", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Dash", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Glide", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [20], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Glide", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Water", "UpperPools.UpperWaterDrained"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperPools.DrainRoomPurpleWall", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "", [100], [], [], []))
    add_rule(world.get_location("UpperPools.DrainRoomPurpleWall", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has_all(("WaterDash", "Bash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "", [80], [], [], []))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has("Bash", player) and s.has("UpperPools.UpperWaterDrained", player) and s.has_any(("Launch", "DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "", [60], [], [], []))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has("Bash", player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "", [60], [], [], [[1, 'Grenade', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has("Bash", player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "", [60, 60], [], [], []))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has_all(("Water", "Bash"), player) and s.has("UpperPools.UpperWaterDrained", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "UpperPools.DrainPuzzleRight", [60], [], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "UpperPools.DrainPuzzleRight", [60], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("Water", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "UpperPools.DrainPuzzleRight", [], [], [], [[2, 60]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("UpperPools.UpperWaterDrained", "Water"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [[2, 60]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "WaterDash"), player) and s.has("Water", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "WaterDash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "UpperPools.DrainPuzzleRight", [], [], [], [[2, 60]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Water", "UpperPools.UpperWaterDrained"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "UpperPools.DrainPuzzleEntrance", [60, 20], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("Combat.Aerial", player) and s.has("Combat.Aerial", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [], [], [[24, 'Combat'], [20, 'Combat']], []))
    add_rule(world.get_location("UpperPools.FishPoolEX", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [40], [], [], []))
    add_rule(world.get_location("UpperPools.FishPoolEX", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [20], [], [], []))
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("Bash", player))
    add_rule(world.get_location("UpperPools.RightBubblesEX", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [100], [], [], []))
    add_rule(world.get_location("UpperPools.LeftBubblesEX", player), lambda s: s.can_reach_region("UpperPools.LeftBubbleSpamRoom") and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", "", [140], [], [], []))
    add_rule(world.get_location("UpperPools.LeftBubblesEX", player), lambda s: s.can_reach_region("UpperPools.LeftBubbleSpamRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", "", [60], [], [], []))
    add_rule(world.get_location("UpperPools.RightBubblesEX", player), lambda s: s.can_reach_region("UpperPools.LeftBubbleSpamRoom") and s.has_all(("Water", "Launch"), player))
    add_rule(world.get_location("UpperPools.RightBubblesEX", player), lambda s: s.can_reach_region("UpperPools.LeftBubbleSpamRoom") and s.has_all(("Water", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Launch", player) and s.has("Water", player))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", "UpperPools.RightBubbleSpamRoom", [], [], [], [[2, 80]]))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has("Water", player))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", "UpperPools.RightBubbleSpamRoom", [], [], [], [[2, 80]]))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water", "WaterDash", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water", "WaterDash", "DoubleJump"), player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", "UpperPools.RightBubbleSpamRoom", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", "UpperPools.RightBubbleSpamRoom", [60], [], [], []))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", "UpperPools.RightBubbleSpamRoom", [60], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("WestPools.TpEX", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has_all(("Water", "WaterDash", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WestPools.TpEX", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has_all(("Water", "WaterDash", "DoubleJump"), player) and cost_all(s, player, options, "WestPools.Teleporter", "", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("WestPools.TpEX", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has_all(("WaterDash", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestPools.Teleporter", "", [20], [], [], []))
    add_rule(world.get_location("WestPools.TpEX", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has_all(("WaterDash", "DoubleJump"), player) and cost_all(s, player, options, "WestPools.Teleporter", "", [20], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("WestPools.TpEX", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WestPools.TpEX", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WestPools.Teleporter", "", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_location("WestPools.BurrowEX", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has("Burrow", player) and cost_all(s, player, options, "WestPools.Teleporter", "", [40], [], [], []))
    add_rule(world.get_location("WestPools.BurrowOre", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has_all(("WaterDash", "Burrow"), player) and s.has("WestPools.ForestsStrength", player) and cost_all(s, player, options, "WestPools.Teleporter", "", [100, 60, 80], [], [], []))
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has_all(("Water", "Bash"), player))
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestPools.Teleporter", "WestPools.LeftKwolokPlatform", [100], [], [], []))
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestPools.Teleporter", "WestPools.LeftKwolokPlatform", [220], [], [], []))
    add_rule(world.get_entrance("WestPools.Teleporter_to_EastPools.CentralRoom", player), lambda s: s.has_all(("Regenerate", "WaterDash"), player) and cost_all(s, player, options, "WestPools.Teleporter", "EastPools.CentralRoom", [160], [], [], []))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.Teleporter", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestPools.LeftKwolokPlatform", "WestPools.Teleporter", [100], [], [], []))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.Teleporter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestPools.LeftKwolokPlatform", "WestPools.Teleporter", [220], [], [], []))
    add_rule(world.get_location("WestPools.EscapeRevisitEX", player), lambda s: s.can_reach_region("WestPools.RightKwolokPlatform") and cost_all(s, player, options, "WestPools.RightKwolokPlatform", "", [140], [], [], []))
    add_rule(world.get_location("WestPools.EscapeRevisitEX", player), lambda s: s.can_reach_region("WestPools.RightKwolokPlatform") and s.has("WaterDash", player) and cost_all(s, player, options, "WestPools.RightKwolokPlatform", "", [80], [], [], []))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("WestPools.RightKwolokPlatform") and s.has("WaterDash", player) and cost_all(s, player, options, "WestPools.RightKwolokPlatform", "", [80], [], [], []))
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "WaterDash"), player) and cost_all(s, player, options, "WestPools.RightKwolokPlatform", "UpperPools.KeystoneRoomEntrance", [120], [], [], []))
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Launch", "Water"), player))
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "KwolokEscape", "KwolokFight", [180], [], [], []))
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Launch", "WaterDash"), player) and cost_all(s, player, options, "KwolokEscape", "KwolokFight", [100], [], [], []))
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Dash", "WaterDash"), player) and s.has("Water", player))
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Dash", "WaterDash"), player) and cost_all(s, player, options, "KwolokEscape", "KwolokFight", [], [], [], [[2, 120]]))
    add_rule(world.get_location("WestPools.ForestsStrength", player), lambda s: s.can_reach_region("KwolokFight") and s.has_all(("Regenerate", "Water", "WaterDash"), player) and s.has_any(("DoubleJump", "Launch", "Dash"), player) and cost_all(s, player, options, "KwolokFight", "", [85], [], [[250, 'Boss']], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Hammer", "Sword"), player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and s.has_any(("Dash", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [], [], [], [[1, 'Shuriken', 2]]))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and s.has("Sword", player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [30], [], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [30], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Burrow", "Glide"), player) and s.has("Sword", player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Burrow", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [], [], [], [[1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Burrow", "Sword"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [], [['Sentry', 2]], [], [[1, 'Shuriken', 1], [2, 30]]))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Glide"), player) and s.has("Sword", player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [30], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Sword"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Glide", "Dash", "DoubleJump"), player) and s.has("WindtornRuins.Seir", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Glide", "DoubleJump", "Hammer"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Glide", "Bash", "DoubleJump"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Launch"), player) and s.has("WindtornRuins.Seir", player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Dash", "DoubleJump"), player) and s.has("WindtornRuins.Seir", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "DoubleJump", "Hammer"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "DoubleJump"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.WestTP", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SunsetView", "LowerWastes.Shovel", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has_all(("Bash", "DoubleJump"), player))
    add_rule(world.get_location("E.LowerWastes.Shovel", player), lambda s: s.can_reach_region("LowerWastes.Shovel") and s.has("BreakCrystal", player))
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.SunsetView", player), lambda s: s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.Shovel", player), lambda s: s.has_any(("Bash", "Hammer", "Sword"), player))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: s.has("Bash", player))
    add_rule(world.get_location("LowerWastes.SandPotHC", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has("DoubleJump", player))
    add_rule(world.get_location("LowerWastes.SandPotHC", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has("Bash", player) and s.has("Hammer", player))
    add_rule(world.get_location("LowerWastes.SandPotHC", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SandPot", "", [], [], [], [[1, 'Spear', 1], [1, 'Grenade', 1]]))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has("Burrow", player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.SandPot", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has_all(("Burrow", "Grapple"), player) and s.has("Glide", player))
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has_all(("Burrow", "Grapple"), player) and cost_all(s, player, options, "LowerWastes.SandPot", "", [], [], [], [[1, 'Blaze', 3]]))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Hammer", player) and s.has_any(("Glide", "Dash", "DoubleJump"), player))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 30]]))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Grapple"), player))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 30]]))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [], [], [[1, 'Spear', 2]]))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [30], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerWastes.MuncherPitEX", player), lambda s: s.can_reach_region("LowerWastes.WoodenBridge") and cost_all(s, player, options, "LowerWastes.WoodenBridge", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("LowerWastes.MuncherPitEX", player), lambda s: s.can_reach_region("LowerWastes.WoodenBridge") and s.has("Glide", player) and s.has("Sword", player))
    add_rule(world.get_location("LowerWastes.MuncherPitEX", player), lambda s: s.can_reach_region("LowerWastes.WoodenBridge") and s.has("Glide", player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", "LowerWastes.SandPot", [30], [], [], []))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", "LowerWastes.SandPot", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.LeverArea", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.LeverArea", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.LeverArea", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", "LowerWastes.MinesEntranceEnemyPaths", [], [], [[60, 'Combat'], [32, 'Combat']], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", "LowerWastes.MinesEntranceEnemyPaths", [], [], [], [[1, 'Grenade', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.WoodenBridge", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.LeverArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", "LowerWastes.LeverArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerWastes.BottomRightEX", player), lambda s: s.can_reach_region("LowerWastes.MinesEntranceEnemyPaths") and s.has("Bash", player))
    add_rule(world.get_location("LowerWastes.BottomRightEX", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Grapple", player))
    add_rule(world.get_location("LowerWastes.BottomRightEX", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has_all(("Sword", "DoubleJump"), player))
    add_rule(world.get_location("LowerWastes.BottomRightEX", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("DoubleJump", player) and s.has("Combat.Dangerous", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", "", [], [['Spear', 1]], [[60, 'Combat'], [32, 'Combat']], []))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Grapple", player))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and cost_all(s, player, options, "LowerWastes.MinesEntrance", "", [40], [], [], []))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("DoubleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("DoubleJump", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "DoubleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", "LowerWastes.BeforeMinesEntrance", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_location("LowerWastes.SandPlatformLever", player), lambda s: s.can_reach_region("LowerWastes.LeverArea") and s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.LeverArea", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("Bash", player) and s.has_any(("LowerWastes.SandPlatformLever", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.LeverArea", "LowerWastes.LastStandArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.LeverArea", "LowerWastes.LastStandArea", [], [['Grenade', 1]], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("Burrow", player) and s.has("LowerWastes.SandPlatformLever", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("Burrow", player) and s.has("LowerWastes.SandPlatformLever", player) and cost_all(s, player, options, "LowerWastes.LeverArea", "LowerWastes.LastStandArea", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerWastes.MuncherClimbEX", player), lambda s: s.can_reach_region("LowerWastes.MuncherClimb") and s.has("Launch", player))
    add_rule(world.get_location("LowerWastes.MuncherClimbEX", player), lambda s: s.can_reach_region("LowerWastes.MuncherClimb") and s.has("Grapple", player) and s.has("Hammer", player))
    add_rule(world.get_location("LowerWastes.MuncherClimbEX", player), lambda s: s.can_reach_region("LowerWastes.MuncherClimb") and s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", "", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_location("LowerWastes.MuncherClimbEX", player), lambda s: s.can_reach_region("LowerWastes.MuncherClimb") and s.has_all(("Grapple", "Sword"), player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerWastes.MuncherClimbEX", player), lambda s: s.can_reach_region("LowerWastes.MuncherClimb") and s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("LowerWastes.SandPlatformLever", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("LowerWastes.SandPlatformLever", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", "LowerWastes.LastStandArea", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and s.has("Sword", player))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", "LowerWastes.SkeetoHive", [], [], [], [[1, 'Sentry', 3], [2, 90]]))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", "LowerWastes.SkeetoHive", [30], [], [], []))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", "LowerWastes.SkeetoHive", [30], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 3], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", "LowerWastes.SkeetoHive", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", "LowerWastes.SkeetoHive", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 30]]))
    add_rule(world.get_location("LowerWastes.LastStandShard", player), lambda s: s.can_reach_region("LowerWastes.LastStandArea"))
    add_rule(world.get_location("LowerWastes.LastStandEX", player), lambda s: s.can_reach_region("LowerWastes.LastStandArea") and s.has("Burrow", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerWastes.LastStandEX", player), lambda s: s.can_reach_region("LowerWastes.LastStandArea") and s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.LastStandArea", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 30]]))
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.MuncherClimb", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has_all(("Sword", "Grapple"), player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.UpperPath", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has_all(("Burrow", "Sword"), player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.UpperPath", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.MuncherClimb", [60], [], [], []))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "TripleJump", "Sword"), player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.MuncherClimb", [30], [], [], []))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has_all(("DoubleJump", "Glide"), player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.MuncherClimb", [30], [], [], []))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has_all(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.MuncherClimb", [30], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.MuncherClimb", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerWastes.LupoMap", player), lambda s: s.can_reach_region("LowerWastes.ThirstyGorlek") and s.has_all(("DoubleJump", "Sword", "Bash"), player) and s.has("SpiritLight", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerWastes.ThirstyGorlek", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerWastes.LupoMap", player), lambda s: s.can_reach_region("LowerWastes.ThirstyGorlek") and s.has("DoubleJump", player) and s.has("SpiritLight", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerWastes.ThirstyGorlek", "", [], [['Spear', 2]], [], []))
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.SkeetoHive", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.SkeetoHive", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and cost_all(s, player, options, "LowerWastes.ThirstyGorlek", "LowerWastes.SkeetoHive", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerWastes.UpperPathEX", player), lambda s: s.can_reach_region("LowerWastes.UpperPath") and s.has("Burrow", player))
    add_rule(world.get_location("LowerWastes.UpperPathHiddenEX", player), lambda s: s.can_reach_region("LowerWastes.UpperPath") and s.has("Burrow", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerWastes.UpperPathHiddenEX", player), lambda s: s.can_reach_region("LowerWastes.UpperPath") and s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.UpperPath", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("LowerWastes.EastTP_to_Tokk", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.EastTP_to_UpperWastes.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Burrow"), player))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Burrow", player) and can_keystones(s, player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Bash", "Burrow"), player) and can_keystones(s, player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Bash", "DoubleJump"), player) and can_keystones(s, player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Bash", "DoubleJump"), player) and can_keystones(s, player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("UpperWastes.LowerKS", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [30], [], [], []))
    add_rule(world.get_location("UpperWastes.TurmoilShard", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Burrow", "Launch"), player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [30], [], [], []))
    add_rule(world.get_location("UpperWastes.TurmoilShard", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Burrow", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [120], [], [], []))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Bash", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [], [], [], [[1, 'Grenade', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [30], [], [], []))
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_LowerWastes.EastTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player))
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has("Burrow", player) and can_keystones(s, player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "UpperWastes.MissilePuzzleLeft", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has_all(("Burrow", "Bash"), player) and can_keystones(s, player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "UpperWastes.MissilePuzzleLeft", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperWastes.LedgeEC", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleLeft") and s.has("Bash", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleLeft", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperWastes.LedgeEC", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleLeft") and s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperWastes.LedgeEC", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleLeft") and s.has_all(("Burrow", "Bash"), player))
    add_rule(world.get_location("UpperWastes.LedgeEC", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleLeft") and s.has_all(("Burrow", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("Hammer", player))
    add_rule(world.get_location("UpperWastes.LedgeEC", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleLeft") and s.has_all(("Burrow", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleLeft", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("UpperWastes.LedgeEC", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleLeft") and s.has_all(("Burrow", "DoubleJump", "Sword"), player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has("Burrow", player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda s: s.has("Burrow", player) and s.has_any(("Dash", "DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleRight", "UpperWastes.RuinsApproach", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2], [2, 60]]))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda s: s.has("Burrow", player) and s.has_any(("Bash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleRight", "UpperWastes.RuinsApproach", [30], [], [], []))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleRight", "UpperWastes.RuinsApproach", [30], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has_all(("Burrow", "Dash"), player))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has_all(("Burrow", "Bash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "UpperWastes.RuinsApproach", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has_all(("Burrow", "DoubleJump"), player) and s.has("Hammer", player))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has_all(("Burrow", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.RuinsApproach", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has_all(("Burrow", "Glide"), player) and s.has("Hammer", player))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has_all(("Burrow", "Glide"), player) and cost_all(s, player, options, "UpperWastes.RuinsApproach", "", [], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has_all(("Burrow", "Sword"), player) and s.has("Hammer", player))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has_all(("Burrow", "Sword"), player) and cost_all(s, player, options, "UpperWastes.RuinsApproach", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperWastes.RuinsApproach_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player) and s.has_any(("Bash", "Glide", "Dash", "Hammer"), player))
    add_rule(world.get_entrance("UpperWastes.RuinsApproach_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has_all(("Burrow", "Sword"), player) and cost_all(s, player, options, "UpperWastes.RuinsApproach", "UpperWastes.MissilePuzzleRight", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_location("UpperWastes.FlowersSeed", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperWastes.FlowersSeed", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [], [['Grenade', 1]], [], [[1, 'Sentry', 2], [2, 30]]))
    add_rule(world.get_location("UpperWastes.FlowersSeed", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [30, 30], [['Grenade', 2]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Bash", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [30], [['Grenade', 2]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [30], [['Grenade', 2], ['Sentry', 3]], [], []))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [30], [['Grenade', 3]], [], []))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Bash", "DoubleJump"), player) and s.has("Glide", player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [], [['Grenade', 3]], [], []))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [], [['Grenade', 3]], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [], [['Grenade', 4]], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [30], [], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "DoubleJump", "Hammer"), player) and s.has("TripleJump", player) and s.has_any(("Glide", "Dash", "Sword"), player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "DoubleJump", "Hammer"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [], [], [[1, 'Sentry', 2], [2, 30]]))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Dash"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [], [], [[2, 30]]))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Burrow", "TripleJump", "Dash", "Hammer"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [30, 30], [['Grenade', 1]], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [30], [['Grenade', 1]], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump", "Sword"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [30], [['Grenade', 1], ['Sentry', 4]], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [30], [['Grenade', 2]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump", "Sword"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [['Grenade', 2]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [['Grenade', 2], ['Sentry', 3]], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [['Grenade', 3]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [30, 30], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [30], [['Grenade', 3], ['Sentry', 2]], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [30], [['Grenade', 4]], [], []))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins") and s.has("Bash", player) and s.has_any(("Sword", "Hammer", "Burrow"), player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins") and s.has("Bash", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", "", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins") and s.has("Bash", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins") and s.has("Burrow", player) and s.has("DoubleJump", player))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins") and s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", "", [], [], [], [[1, 'Sentry', 3]]))
    add_rule(world.get_location("UpperWastes.WallOre", player), lambda s: s.can_reach_region("UpperWastes.OutsideRuins") and s.has("DoubleJump", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", "", [30], [], [], []))
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: True)
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", "UpperWastes.NorthTP", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [0, [[32, 'Combat']], []]]))
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", "UpperWastes.NorthTP", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.RuinsTP", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Hammer", "Sword"), player))
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.RuinsTP", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.BrokenMural", "WindtornRuins.RuinsTP", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.RuinsTP", player), lambda s: s.has("Burrow", player) and s.has_any(("Hammer", "Sword"), player))
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.RuinsTP", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "WindtornRuins.BrokenMural", "WindtornRuins.RuinsTP", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", "WindtornRuins.RuinsTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.LowerRuins", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", "WindtornRuins.LowerRuins", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("DoubleJump", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("TripleJump", "Dash", "Hammer"), player))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("DoubleJump", player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", "WindtornRuins.BrokenMural", [], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Dash", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Dash", player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", "WindtornRuins.BrokenMural", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Sword", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Sword", player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", "WindtornRuins.BrokenMural", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Hammer", player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", "WindtornRuins.BrokenMural", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Burrow", player) and s.has("Sword", player))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", "WindtornRuins.BrokenMural", [], [], [], [[1, 'Sentry', 3]]))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Hammer"), player))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "DoubleJump"), player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", "WindtornRuins.BrokenMural", [], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Dash"), player) and s.has("Hammer", player))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Dash"), player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", "WindtornRuins.BrokenMural", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Hammer"), player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", "WindtornRuins.BrokenMural", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "Launch"), player) and s.has("WindtornRuins.HeartBarrier", player))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "Grapple"), player) and s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Glide", "DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "Grapple"), player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.Escape", "", [], [], [], [[1, 'Sentry', 5], [1, 'Shuriken', 5]]))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "Grapple"), player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.Escape", "", [30], [], [], [[1, 'Sentry', 3], [1, 'Shuriken', 3]]))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "Grapple"), player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.Escape", "", [70], [], [], [[1, 'Sentry', 2], [1, 'Shuriken', 2]]))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "Dash"), player) and s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda s: s.has_all(("Burrow", "DoubleJump", "Dash"), player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player))
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player))
    add_rule(world.get_location("WeepingRidge.ElevatorFightCompleted", player), lambda s: s.can_reach_region("WeepingRidge.Bottom") and s.has("Combat.Dangerous", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("Dash", "Hammer"), player) and cost_all(s, player, options, "WeepingRidge.Bottom", "", [], [], [[80, 'Combat', 80, 'Combat'], [50, 'Combat', 50, 'Combat']], []))
    add_rule(world.get_location("WeepingRidge.ElevatorFightCompleted", player), lambda s: s.can_reach_region("WeepingRidge.Bottom") and s.has("Sword", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "WeepingRidge.Bottom", "", [], [], [[80, 'Combat', 80, 'Combat'], [50, 'Combat', 50, 'Combat']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Dash", "Hammer"), player))
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Sword", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.Bottom", "WeepingRidge.LaunchArea", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.LaunchArea") and s.has_all(("Bash", "Dash"), player))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.LaunchArea") and s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "", [20], [], [], []))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.LaunchArea") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.LaunchArea") and s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WeepingRidge.AboveTree", [40], [], [], []))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "Dash"), player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WeepingRidge.AboveTree", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has("Sword", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("Hammer", player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WeepingRidge.AboveTree", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WillowsEnd.Entry", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 3]]))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Regenerate", "Launch", "Bash"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WillowsEnd.Entry", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Regenerate", "Bash", "DoubleJump"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WillowsEnd.Entry", [], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Glide", "Dash", "DoubleJump"), player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WeepingRidge.Bottom", [], [['Sentry', 5]], [], []))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has("Bash", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WeepingRidge.Bottom", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("WeepingRidge.SpikeClimbEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has("Launch", player))
    add_rule(world.get_location("WeepingRidge.SpikeClimbEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("WeepingRidge.SpikeClimbEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("WeepingRidge.SpikeClimbEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has_all(("Bash", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [], [['Grenade', 2]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [20], [['Grenade', 2]], [], []))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [60], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "WeepingRidge.LaunchArea", [], [], [], [[2, 20]]))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.Entry") and s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.Entry", "", [], [['Grenade', 2]], [], [[1, 'Bow', 1], [1, 'Grenade', 1]]))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.InnerTP", [40], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("WillowsEnd.PortalShortcut", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.InnerTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.InnerTP", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has("Launch", player) and s.has("Sword", player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.InnerTP", [], [], [], [[2, 40]]))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.InnerTP", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.BoulderHeartPath", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Launch", "Grapple"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeartMidPoint", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeartMidPoint", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Bash", "DoubleJump", "Grapple"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeartMidPoint", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Bash", "DoubleJump", "Grapple"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeartMidPoint", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Bash", "DoubleJump", "Grapple"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeartMidPoint", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeart", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeart", [], [['Grenade', 2]], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeart", [], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Regenerate", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Launch", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Regenerate", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WeepingRidge.LaunchArea", [], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Regenerate", "DoubleJump"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WeepingRidge.LaunchArea", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeartMidPoint", "WillowsEnd.GrappleHeart", [], [], [], [[2, 40]]))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("DoubleJump", "Glide"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeartMidPoint", "WillowsEnd.GrappleHeart", [20], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.GrappleHeartMidPoint", "WillowsEnd.GrappleHeart", [60], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeartMidPoint", "WillowsEnd.GrappleHeart", [60], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeartMidPoint", "WillowsEnd.GrappleHeart", [100], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Launch", "Glide"), player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("E.WillowsEnd.GrappleHeart", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and s.has("DoubleJump", player) and s.has("BreakCrystal", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_location("E.WillowsEnd.GrappleHeart", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WillowsEnd.PoisonfallHC", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and s.has("DoubleJump", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 4]]))
    add_rule(world.get_location("WillowsEnd.PoisonfallHC", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WillowsEnd.PoisonfallHC", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WillowsEnd.PoisonfallHC", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has("Sword", player))
    add_rule(world.get_location("WillowsEnd.PoisonfallHC", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("WillowsEnd.PoisonfallHC", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "", [], [['Spear', 1], ['Blaze', 1]], [], []))
    add_rule(world.get_location("WillowsEnd.PoisonfallHC", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and s.has("Hammer", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Launch", player) and s.has("WillowsEnd.GrappleWheelsHeart", player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("DoubleJump", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "WillowsEnd.Entry", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "WillowsEnd.Entry", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "WillowsEnd.Entry", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Dash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("DoubleJump", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Dash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "WillowsEnd.Entry", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has("Launch", player))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Grapple", "DoubleJump", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Grapple", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 40]]))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [40], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Bash", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 40]]))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [], [['Grenade', 1]], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [40], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("DoubleJump", "Glide"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [40], [], [], []))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [40], [], [], []))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [40], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.Entry", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "WillowsEnd.Entry", [40], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("WillowsEnd.PortalShortcut", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("WillowsEnd.PortalShortcut", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "WillowsEnd.InnerTP", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Bash"), player) and s.has("TripleJump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "WillowsEnd.InnerTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Bash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "WillowsEnd.InnerTP", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Bash"), player) and s.has("TripleJump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "WillowsEnd.InnerTP", [40], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Bash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "WillowsEnd.InnerTP", [40], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WillowsEnd.InnerTP", "WillowsEnd.Entry", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and s.has("DoubleJump", player))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.InnerTP", "WillowsEnd.Entry", [], [], [], [[2, 40]]))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.InnerTP", "WillowsEnd.AboveInnerTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("E.WillowsEnd.AboveInnerTP", player), lambda s: s.can_reach_region("WillowsEnd.AboveInnerTP") and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", "", [], [], [], [[1, 'Spear', 1], [1, 'Grenade', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("E.WillowsEnd.AboveInnerTP", player), lambda s: s.can_reach_region("WillowsEnd.AboveInnerTP") and s.has_any(("DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", "", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_location("E.WillowsEnd.AboveInnerTP", player), lambda s: s.can_reach_region("WillowsEnd.AboveInnerTP") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", "", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.InnerTP", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", "WillowsEnd.East", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", "WillowsEnd.East", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("DoubleJump", "Sword", "Dash"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has_any(("Glide", "DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.East", "WillowsEnd.RedirectHeartPath", [20], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.RedirectHeartPath", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath_to_WillowsEnd.East", player), lambda s: True)
    add_rule(world.get_location("WillowsEnd.RedirectEX", player), lambda s: s.can_reach_region("WillowsEnd.RedirectHeartPuzzle") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WillowsEnd.RedirectEX", player), lambda s: s.can_reach_region("WillowsEnd.RedirectHeartPuzzle") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", "", [], [], [[10, 'Wall']], []))
    add_rule(world.get_location("WillowsEnd.RedirectEX", player), lambda s: s.can_reach_region("WillowsEnd.RedirectHeartPuzzle") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", "", [], [], [[10, 'Wall']], [[2, 40]]))
    add_rule(world.get_location("WillowsEnd.RedirectEX", player), lambda s: s.can_reach_region("WillowsEnd.RedirectHeartPuzzle") and s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has("Hammer", player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", "", [], [], [[10, 'Wall']], []))
    add_rule(world.get_location("WillowsEnd.RedirectEX", player), lambda s: s.can_reach_region("WillowsEnd.RedirectHeartPuzzle") and s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", "", [], [], [[10, 'Wall']], [[1, 'Sentry', 2], [1, 'Blaze', 4]]))
    add_rule(world.get_location("WillowsEnd.RedirectEX", player), lambda s: s.can_reach_region("WillowsEnd.RedirectHeartPuzzle") and s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", "", [], [['Grenade', 1]], [[10, 'Wall']], []))
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", "WillowsEnd.RedirectHeartPath", [40], [], [], []))
    add_rule(world.get_location("E.WillowsEnd.Upper", player), lambda s: s.can_reach_region("WillowsEnd.Upper") and s.has("DoubleJump", player) and s.has("BreakCrystal", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("E.WillowsEnd.Upper", player), lambda s: s.can_reach_region("WillowsEnd.Upper") and s.has_all(("Dash", "Sword"), player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("E.WillowsEnd.Upper", player), lambda s: s.can_reach_region("WillowsEnd.Upper") and s.has("DoubleJump", player) and s.has("BreakCrystal", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "WillowsEnd.Upper", "", [], [], [[80, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.East", player), lambda s: s.has("Combat.Dangerous", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.Upper", "WillowsEnd.East", [], [], [[80, 'Combat']], []))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.East", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "WillowsEnd.Upper", "WillowsEnd.East", [], [], [[80, 'Combat']], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "WillowsEnd.Upper", "WillowsEnd.West", [90], [], [[80, 'Combat']], []))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.Upper", "WillowsEnd.West", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.Upper", "WillowsEnd.UpperHeartPath", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.West", "WillowsEnd.Upper", [], [], [[10, 'Wall']], [[1, 'Grenade', 1], [2, 40]]))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "DoubleJump", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.West", "WillowsEnd.Upper", [], [], [[10, 'Wall']], []))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and cost_all(s, player, options, "WillowsEnd.West", "WillowsEnd.Upper", [], [], [[10, 'Wall']], []))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.GlideHeartPath", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.GlideRooms", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player))
    add_rule(world.get_location("E.WillowsEnd.GlideRooms", player), lambda s: s.can_reach_region("WillowsEnd.GlideRooms") and cost_all(s, player, options, "WillowsEnd.GlideRooms", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Grenade', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WillowsEnd.WindSpinOre", player), lambda s: s.can_reach_region("WillowsEnd.GlideRooms") and s.has_all(("Launch", "DoubleJump"), player) and cost_all(s, player, options, "WillowsEnd.GlideRooms", "", [40, 80], [], [], []))
    add_rule(world.get_location("WillowsEnd.UpperLeftEX", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartPath") and s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", "", [80], [], [], []))
    add_rule(world.get_location("WillowsEnd.UpperLeftEX", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartPath") and s.has("Launch", player) and s.has_any(("Bash", "Sword"), player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", "", [40], [], [], []))
    add_rule(world.get_location("WillowsEnd.UpperLeftEX", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartPath") and s.has_all(("DoubleJump", "Grapple"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", "", [60], [], [], []))
    add_rule(world.get_location("WillowsEnd.UpperLeftEX", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartPath") and s.has_all(("Launch", "Bash"), player) and s.has("WillowsEnd.SpinPortalsHeart", player))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", "WillowsEnd.UpperHeartCheckpoint", [160], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Launch", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", "WillowsEnd.UpperHeartCheckpoint", [120], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", "WillowsEnd.UpperHeartCheckpoint", [80], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Grapple"), player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", "WillowsEnd.UpperHeartCheckpoint", [80], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Sword"), player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", "WillowsEnd.UpperHeartCheckpoint", [40], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("Glide", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", "WillowsEnd.UpperHeartCheckpoint", [40], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Grapple", "Sword"), player))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("TripleJump", "Sword"), player))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("DoubleJump", "Grapple", "Bash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", "WillowsEnd.UpperHeartCheckpoint", [100], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Launch", player) and s.has("WillowsEnd.SpinPortalsHeart", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("WillowsEnd.SpinPortalsHeart", player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", "WillowsEnd.UpperHeartCheckpoint", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WillowsEnd.UpperRightEX", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartCheckpoint") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("WillowsEnd.UpperRightEX", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartCheckpoint") and s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.UpperHeartCheckpoint", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WillowsEnd.UpperLeftEX", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartCheckpoint") and s.has_all(("Launch", "Bash"), player))


def set_kii_glitched_rules(world, player, options):
    """Kii (or hard) rules with glitches."""
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [], [], [[30, 'Shuriken']], [[1, 'Blaze', 4], [1, 'Sentry', 3]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [], [], [[30, 'Shuriken']], [[1, 'Blaze', 3], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [], [], [[30, 'Shuriken']], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [60], [], [[30, 'Shuriken']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [60], [['Grenade', 1]], [[30, 'Shuriken']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("WaterDash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [40], [], [[30, 'Shuriken']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_all(("WaterDash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [40], [['Grenade', 4]], [[30, 'Shuriken']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [], [], [[30, 'Shuriken']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [], [], [[30, 'Shuriken']], [[2, 45]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [], [['Grenade', 1]], [[30, 'Shuriken']], []))
    add_rule(world.get_location("LowerReach.TPLantern", player), lambda s: s.can_reach_region("LowerReach.SnowballEnemyPaths") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.SnowballEnemyPaths", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.TPLantern", player), lambda s: s.can_reach_region("LowerReach.Snowball") and s.has_all(("DoubleJump", "Hammer"), player) and cost_all(s, player, options, "LowerReach.Snowball", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.RolledSnowball", player), lambda s: s.can_reach_region("LowerReach.Snowball") and s.has("Bash", player) and s.has_any(("DoubleJump", "Glide", "Hammer"), player) and cost_all(s, player, options, "LowerReach.Snowball", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.RolledSnowball", player), lambda s: s.can_reach_region("LowerReach.Snowball") and s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "LowerReach.Snowball", "", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.RolledSnowball", player), lambda s: s.can_reach_region("LowerReach.Snowball") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.Snowball", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.RolledSnowball", player), lambda s: s.can_reach_region("LowerReach.Snowball") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Snowball", "", [], [['Sentry', 1]], [], [[1, 'Sentry', 2], [2, 20]]))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has("DepthsLight", player) and s.has("Sword", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "", [], [], [[60, 'Shuriken']], []))
    add_rule(world.get_location("UpperDepths.LightcatcherSeed", player), lambda s: s.can_reach_region("UpperDepths.BelowHive") and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.BelowHive", "", [], [], [[60, 'Shuriken']], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_LowerDepths.East", player), lambda s: s.has("Regenerate", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", "LowerDepths.East", [], [], [[60, 'Shuriken'], [12, 'Combat']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Hammer", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [[60, 'Shuriken']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [[60, 'Shuriken']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("DoubleJump", "Water"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [[60, 'Shuriken']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [20], [], [[60, 'Shuriken']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [20], [], [[60, 'Shuriken']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("WaterDash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.OnTopOfWheel", [100], [['Sentry', 1]], [], []))
    add_rule(world.get_location("C.PoolsApproach.OnTopOfWheel", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Launch"), player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Dash", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "DoubleJump", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "DoubleJump"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Grenade', 2]], [], []))


def set_unsafe_rules(world, player, options):
    """Unsafe rules."""
    add_rule(world.get_location("MarshSpawn.ToOpherBarrier", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has("Launch", player))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has("Grapple", player) and cost_all(s, player, options, "MarshSpawn.Main", "", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 2]]))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has("Bash", player) and s.has("HowlsDen.RainLifted", player) and s.has_any(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("MarshSpawn.ResilienceShard", player), lambda s: s.can_reach_region("MarshSpawn.BrokenBridge") and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_location("MarshSpawn.ResilienceOre", player), lambda s: s.can_reach_region("MarshSpawn.BrokenBridge") and s.has("Water", player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_location("MarshSpawn.ResilienceOre", player), lambda s: s.can_reach_region("MarshSpawn.BrokenBridge") and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.BrokenBridge", "", [40], [], [], []))
    add_rule(world.get_location("MarshSpawn.ResilienceOre", player), lambda s: s.can_reach_region("MarshSpawn.BrokenBridge") and cost_all(s, player, options, "MarshSpawn.BrokenBridge", "", [40], [], [], []))
    add_rule(world.get_location("MarshSpawn.ResilienceOre", player), lambda s: s.can_reach_region("MarshSpawn.BrokenBridge") and s.has("WaterDash", player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.BrokenBridge", "", [20], [], [], []))
    add_rule(world.get_location("MarshSpawn.ResilienceOre", player), lambda s: s.can_reach_region("MarshSpawn.BrokenBridge") and s.has("WaterDash", player) and cost_all(s, player, options, "MarshSpawn.BrokenBridge", "", [20], [], [], []))
    add_rule(world.get_location("MarshSpawn.BashEC", player), lambda s: s.can_reach_region("MarshSpawn.BrokenBridge") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("MarshSpawn.BashEC", player), lambda s: s.can_reach_region("MarshSpawn.BrokenBridge") and s.has_all(("DoubleJump", "Sword"), player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("MarshSpawn.LogBroken", player) and cost_all(s, player, options, "MarshSpawn.BrokenBridge", "MarshSpawn.OpherBarrier", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("MarshSpawn.LogBroken", player))
    add_rule(world.get_location("MarshSpawn.TokkBarrier", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Hammer"), player))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has("DoubleJump", player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has_all(("DoubleJump", "Dash", "Sword"), player))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and s.has_all(("Grapple", "Bash"), player))
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("MarshSpawn.CaveFight", player) and cost_all(s, player, options, "MarshSpawn.Cave", "MarshSpawn.PoolsBurrowsSignpost", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowArena", player), lambda s: s.can_reach_region("MarshSpawn.BurrowFightArena") and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Sand", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "", [], [], [[40, 'Combat'], [32, 'Ranged'], [20, 'Combat', 20, 'Combat'], [24, 'Combat', 24, 'Combat'], [20, 'Combat', 20, 'Combat', 20, 'Combat'], [32, 'Combat']], []))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.BurrowFightArena") and s.has_all(("Burrow", "Bash"), player))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LifepactLedge", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "WaterDash"), player) and s.has_any(("DoubleJump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "MarshSpawn.LeftSpawnSignpost", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "WaterDash"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "MarshSpawn.LeftSpawnSignpost", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and s.has_any(("DoubleJump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "MarshSpawn.LeftSpawnSignpost", [20], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "MarshSpawn.LeftSpawnSignpost", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: True)
    add_rule(world.get_location("MarshSpawn.CaveOre", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and s.has("Bash", player))
    add_rule(world.get_location("MarshSpawn.CaveOre", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and s.has("Dash", player))
    add_rule(world.get_location("MarshSpawn.CaveOre", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and s.has("Sword", player))
    add_rule(world.get_location("MarshSpawn.CaveOre", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.BeforeBurrows", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]]))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: True)
    add_rule(world.get_location("MarshSpawn.CrusherSwimEX", player), lambda s: s.can_reach_region("MarshSpawn.BeforeBurrows") and s.has("Bash", player) and s.has("Water", player))
    add_rule(world.get_location("MarshSpawn.CrusherSwimEX", player), lambda s: s.can_reach_region("MarshSpawn.BeforeBurrows") and s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "", [], [], [], [[2, 10]]))
    add_rule(world.get_location("MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.can_reach_region("MarshSpawn.BeforeBurrows") and s.has("Bash", player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "MarshSpawn.PoolsBurrowsSignpost", [], [], [], [[2, 20], [1, 'Shuriken', 2]]))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "MarshSpawn.PoolsBurrowsSignpost", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "MarshSpawn.PoolsBurrowsSignpost", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("MarshSpawn.BurrowsOpen", player), lambda s: s.can_reach_region("MarshSpawn.BurrowsEntry") and s.has("Bash", player))
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: True)
    add_rule(world.get_location("MarshSpawn.LongSwimEX", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "", [90], [], [], []))
    add_rule(world.get_location("MarshSpawn.LongSwimEX", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has("WaterDash", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "", [40], [], [], []))
    add_rule(world.get_location("MarshSpawn.LongSwimEX", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has("WaterDash", player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "", [35], [], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has_all(("Burrow", "Water"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "", [], [], [], [[1, 'Spear', 2], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "", [20], [], [], [[1, 'Spear', 2], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has_all(("Burrow", "WaterDash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "", [10], [], [], [[1, 'Spear', 2], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.PoolsPath", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("Deflector", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("Deflector", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.PoolsPath", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player) and s.has("Deflector", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.PoolsPath", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Water"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.BurrowFightArena", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.BurrowFightArena", [20], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "WaterDash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.BurrowFightArena", [10], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has("Water", player))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.BurrowFightArena", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Bash", "WaterDash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.BurrowFightArena", [10], [], [], []))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and s.has_any(("Bash", "Dash", "Sword"), player))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and s.has_any(("DoubleJump", "Glide", "Hammer"), player))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and cost_all(s, player, options, "MarshSpawn.PoolsPath", "", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2], [2, 10]]))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water", player))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", "PoolsApproach.OnTopOfWheel", [160], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", "MarshSpawn.LeftSpawnSignpost", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", "MarshSpawn.LeftSpawnSignpost", [6], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: True)
    add_rule(world.get_location("MarshSpawn.RecklessShard", player), lambda s: s.can_reach_region("MarshSpawn.HowlApproach") and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: s.has("Dash", player))
    add_rule(world.get_location("MarshSpawn.RecklessShard", player), lambda s: s.can_reach_region("MarshSpawn.MokkTheBrave") and s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "", [], [], [[10, 'Wall']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("MarshSpawn.RecklessShard", player), lambda s: s.can_reach_region("MarshSpawn.MokkTheBrave") and s.has("MarshSpawn.HowlBurnt", player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Sword", player) and s.has("MarshSpawn.HowlBurnt", player))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.HowlBurnt", player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Dash", player) and s.has("MarshSpawn.HowlBurnt", player))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "MarshSpawn.HowlApproach", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and s.has_any(("Dash", "Glide", "Hammer"), player))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "MarshSpawn.AboveHowlArena", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.AboveHowlArena") and s.has("DoubleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.AboveHowlArena") and s.has("DoubleJump", player) and cost_all(s, player, options, "MarshSpawn.AboveHowlArena", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.AboveHowlArena") and s.has_all(("Bash", "Glide", "Dash"), player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance_to_MarshSpawn.MokkTheBrave", player), lambda s: s.has("MarshSpawn.HowlBurnt", player))
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player))
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("DoubleJump", player) and s.has("Dash", player))
    add_rule(world.get_location("C.HowlsDen.UpperLoopEntrance", player), lambda s: s.can_reach_region("HowlsDen.UpperLoopEntrance") and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", "", [], [], [[12, 'Wall']], []))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", "HowlsDen.UpperLoopExit", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("HowlsDen.AboveDoorKS", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and s.has("Bash", player))
    add_rule(world.get_location("HowlsDen.AboveDoorKS", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and cost_all(s, player, options, "HowlsDen.BoneBridge", "", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("HowlsDen.AboveDoorKS", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and cost_all(s, player, options, "HowlsDen.BoneBridge", "", [10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("HowlsDen.MagnetShard", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and s.has("DoubleJump", player) and cost_all(s, player, options, "HowlsDen.BoneBridge", "", [], [], [[10, 'Wall']], []))
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.UpperLoopEntrance", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Sword", "TripleJump"), player))
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.UpperLoopEntrance", player), lambda s: s.has_all(("Bash", "DoubleJump"), player))
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "HowlsDen.BoneBridge", "HowlsDen.AboveBoneBridge", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor_to_HowlsDen.OutsideSecretRoom", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.BoneBridgeDoor", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", "HowlsDen.AboveBoneBridge", [], [['Grenade', 1]], [[16, 'Wall']], []))
    add_rule(world.get_location("HowlsDen.SecretRoomWall", player), lambda s: s.can_reach_region("HowlsDen.SecretRoom") and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "HowlsDen.SecretRoom", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("HowlsDen.SecretRoomWall", player), lambda s: s.can_reach_region("HowlsDen.SecretRoom") and cost_all(s, player, options, "HowlsDen.SecretRoom", "", [], [], [[20, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Shuriken', 0], [1, 'Sentry', 0]]))
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: True)
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom") and s.has("Bash", player))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom") and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom") and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has_any(("Bash", "Sword"), player))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has_any(("Water", "Grapple"), player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "HowlsDen.SecretRoom", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has_any(("WaterDash", "Glide"), player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "HowlsDen.SecretRoom", [10], [['Spear', 1]], [], []))
    add_rule(world.get_location("HowlsDen.AboveTPEX", player), lambda s: s.can_reach_region("HowlsDen.AboveTeleporter") and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_location("HowlsDen.LaserKS", player), lambda s: s.can_reach_region("HowlsDen.Teleporter") and s.has("Sword", player))
    add_rule(world.get_location("HowlsDen.LaserKS", player), lambda s: s.can_reach_region("HowlsDen.Teleporter") and s.has("Glide", player) and cost_all(s, player, options, "HowlsDen.Teleporter", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Bash", player))
    add_rule(world.get_location("HowlsDen.DoubleJumpEX", player), lambda s: s.can_reach_region("HowlsDen.DoubleJumpTreeLedge") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpApproach", player), lambda s: True)
    add_rule(world.get_location("HowlsDen.BoneBarrier", player), lambda s: s.can_reach_region("HowlsDen.DoubleJumpTreeArea"))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: True)
    add_rule(world.get_location("HowlsDen.CombatShrineCompleted", player), lambda s: s.can_reach_region("DenShrine") and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("Combat.Aerial", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "DenShrine", "", [], [], [[32, 'Combat'], [24, 'Combat', 24, 'Combat'], [32, 'Combat', 32, 'Combat'], [32, 'Combat'], [20, 'Combat'], [8, 'Combat', 8, 'Combat', 8, 'Combat', 8, 'Combat', 8, 'Combat', 8, 'Combat', 8, 'Combat'], [20, 'Combat', 20, 'Combat'], [24, 'Combat', 24, 'Combat'], [32, 'Combat', 32, 'Combat']], []))
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Water", "Bash"), player))
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "MarshPastOpher.MillView", "MarshPastOpher.OpherSkipBranch", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Water", "Bash"), player))
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "MarshPastOpher.OpherSkipBranch", "MarshPastOpher.PoolsPathEast", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MarshPastOpher.OpherSkipBranch", "MarshPastOpher.PoolsPathEast", [20], [], [], []))
    add_rule(world.get_location("MarshPastOpher.TrunkWall", player), lambda s: s.can_reach_region("MarshPastOpher.TrialStart"))
    add_rule(world.get_location("MarshPastOpher.SpiritTrial", player), lambda s: s.can_reach_region("MarshPastOpher.TrialStart") and s.has("Grapple", player) and s.has("MarshPastOpher.TrialActivation", player))
    add_rule(world.get_location("MarshPastOpher.TrunkWall", player), lambda s: s.can_reach_region("MarshPastOpher.UnderTrunk") and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.UnderTrunk", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("MarshPastOpher.TrunkWall", player), lambda s: s.can_reach_region("MarshPastOpher.UnderTrunk") and cost_all(s, player, options, "MarshPastOpher.UnderTrunk", "", [], [], [[20, 'Wall']], [[1, 'Blaze', 0], [1, 'Sentry', 0], [1, 'Grenade', 0]]))
    add_rule(world.get_location("MarshPastOpher.TrialLeftEX", player), lambda s: s.can_reach_region("MarshPastOpher.UnderTrunk"))
    add_rule(world.get_location("MarshPastOpher.TrialActivation", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has("Grapple", player))
    add_rule(world.get_location("MarshPastOpher.TrialEC", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and cost_all(s, player, options, "MarshPastOpher.TrialArea", "", [10], [], [], []))
    add_rule(world.get_location("MarshPastOpher.TrialEC", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and cost_all(s, player, options, "MarshPastOpher.TrialArea", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("MarshPastOpher.TrialHC", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea"))
    add_rule(world.get_location("MarshPastOpher.TrialRightEX", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has("Dash", player))
    add_rule(world.get_location("MarshPastOpher.TrialRightEX", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and cost_all(s, player, options, "MarshPastOpher.TrialArea", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has_any(("Dash", "DoubleJump"), player))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", "MarshPastOpher.UnderTrunk", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", "MarshPastOpher.UnderTrunk", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: s.has_any(("Bash", "DoubleJump", "Dash", "Glide", "Grapple", "Launch"), player))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: True)
    add_rule(world.get_location("MarshPastOpher.CombatShrineCompleted", player), lambda s: s.can_reach_region("MarshShrine") and s.has("Combat.Aerial", player) and s.has("Combat.Aerial", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "MarshShrine", "", [], [], [[20, 'Combat', 20, 'Combat'], [32, 'Combat'], [8, 'Combat', 8, 'Combat', 8, 'Combat', 8, 'Combat'], [32, 'Combat'], [20, 'Combat']], []))
    add_rule(world.get_location("MarshPastOpher.SwingPoleEX", player), lambda s: s.can_reach_region("MarshPastOpher.BowPath") and s.has("Bash", player))
    add_rule(world.get_location("MarshPastOpher.SwingPoleEX", player), lambda s: s.can_reach_region("MarshPastOpher.BowPath") and cost_all(s, player, options, "MarshPastOpher.BowPath", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: True)
    add_rule(world.get_location("MarshPastOpher.SwingPoleEX", player), lambda s: s.can_reach_region("MarshPastOpher.BowApproach"))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", "MarshPastOpher.PoolsPathEast", [], [], [], [[1, 'Bow', 2], [1, 'Spear', 2], [1, 'Grenade', 2]]))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", "MarshPastOpher.PoolsPathEast", [], [], [], [[1, 'Bow', 1], [1, 'Spear', 1], [1, 'Grenade', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: True)
    add_rule(world.get_location("MarshPastOpher.CeilingEX", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathEast") and s.has("Bash", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", "MarshPastOpher.PoolsPathMiddle", [], [], [], [[1, 'Grenade', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathMiddle") and s.has("Hammer", player))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathMiddle") and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Water", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Spear', 1]], [], [[2, 10]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Hammer", player) and s.has_any(("Bash", "DoubleJump"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathBellowOneWayWall", [10, 20], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Hammer", "Water"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathBellowOneWayWall", [20], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathEast", [5], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", "MarshPastOpher.PoolsPathWest", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", "MarshPastOpher.PoolsPathWest", [20], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", "MarshPastOpher.PoolsPathWest", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathWest", [20], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathEast", [], [['Spear', 2]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("DoubleJump", player) and s.has("Water", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathEast", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathEast", [], [['Spear', 1]], [], [[2, 10], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathEast", [10], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_any(("DoubleJump", "Hammer", "Bash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.BurrowsOpen", player))
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda s: True)
    add_rule(world.get_location("MidnightBurrows.Lever", player), lambda s: s.can_reach_region("MidnightBurrows.Central") and cost_all(s, player, options, "MidnightBurrows.Central", "", [15], [], [], []))
    add_rule(world.get_location("MidnightBurrows.Lever", player), lambda s: s.can_reach_region("MidnightBurrows.Central") and cost_all(s, player, options, "MidnightBurrows.Central", "", [], [['Shuriken', 1]], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("MidnightBurrows.DeflectorShard", player), lambda s: s.can_reach_region("MidnightBurrows.Central") and s.has("DoubleJump", player))
    add_rule(world.get_location("MidnightBurrows.DeflectorShard", player), lambda s: s.can_reach_region("MidnightBurrows.Central") and s.has_all(("Dash", "Bash"), player))
    add_rule(world.get_location("MidnightBurrows.DeflectorShard", player), lambda s: s.can_reach_region("MidnightBurrows.Central") and s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.Central", "", [15], [], [], []))
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword"), player) and cost_all(s, player, options, "MidnightBurrows.Central", "MidnightBurrows.TabletRoom", [15], [], [], []))
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("DoubleJump", player) and s.has("MidnightBurrows.Lever", player) and s.has("Sword", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("DoubleJump", player) and s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", "MidnightBurrows.BelowUpperKS", [], [], [], [[2, 15]]))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Bash", player) and s.has("MidnightBurrows.Lever", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("MidnightBurrows.Lever", player) and s.has("Bash", player))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", "MidnightBurrows.East", [], [], [], [[1, 'Sentry', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Shuriken', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("MidnightBurrows.LowerKS", player), lambda s: s.can_reach_region("MidnightBurrows.LeverRoom") and s.has("Sword", player))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "MidnightBurrows.PortalRoom", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Bash", player) and s.has("Dash", player))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "MidnightBurrows.PortalRoom", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Sword"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "MidnightBurrows.PortalRoom", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "MidnightBurrows.PortalRoom", [30], [], [], []))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", "MidnightBurrows.PortalRoom", [60], [], [], []))
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: True)
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: True)
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.Entrance") and s.has("Glide", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", "", [], [['Bow', 1], ['Blaze', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.Entrance_to_MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WestHollow.Entrance", "WestHollow.MokiByTwillen", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.HollowDrainMiddle", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestHollow.Entrance", "WestHollow.HollowDrainMiddle", [20], [], [], []))
    add_rule(world.get_location("WestHollow.UpperDrainLeverPulled", player), lambda s: s.can_reach_region("WestHollow.MokiByTwillen") and cost_all(s, player, options, "WestHollow.MokiByTwillen", "", [], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.InFrontPurpleDoor") and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", "WestHollow.MokiByTwillen", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", "WestHollow.MokiByTwillen", [10], [], [], []))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.Entrance", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.HollowDrainMiddle", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", "WestHollow.HollowDrainMiddle", [20], [], [], []))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoorEnemyPaths_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Regenerate", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoorEnemyPaths", "WestHollow.HollowDrainMiddle", [40], [], [], []))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoorEnemyPaths_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WaterDash", "Regenerate"), player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoorEnemyPaths", "WestHollow.HollowDrainMiddle", [20], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("Dash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.RockPuzzle", [], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 4], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.RockPuzzle", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.HollowDrainLower", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.HollowDrainLower", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.HollowDrainLower", [20], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has_any(("Launch", "DoubleJump", "Dash", "Sword"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.Entrance", [40], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.Entrance", [60], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("WaterDash", player) and s.has_any(("Glide", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.Entrance", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Bash", player) and s.has("WaterDash", player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.Entrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.Entrance", [], [['Grenade', 1]], [], [[2, 60]]))
    add_rule(world.get_location("E.WestHollow.RockPuzzle", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has("Magnet", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [], [], [], [[1, 'Sentry', 1], [1, 'Spear', 1], [1, 'Bow', 1], [1, 'Grenade', 1]]))
    add_rule(world.get_location("E.WestHollow.RockPuzzle", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has("Sword", player) and s.has("Magnet", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Hammer", "DoubleJump", "Dash", "Launch"), player))
    add_rule(world.get_location("E.WestHollow.RockPuzzle", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has("Sword", player) and s.has("Magnet", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [], [], [], [[1, 'Sentry', 2], [2, 20]]))
    add_rule(world.get_location("WestHollow.RockPuzzleSolved", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [], [['Bow', 2]], [], []))
    add_rule(world.get_location("WestHollow.RockPuzzleSolved", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has_all(("DoubleJump", "Sword"), player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.RockPuzzleSolved", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.RockPuzzleSolved", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.UpperTongueExtended", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.RockPuzzleEX", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [40], [], [], []))
    add_rule(world.get_location("WestHollow.RockPuzzleEX", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has("WaterDash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "", [20], [], [], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("Launch", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has("Hammer", player))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.FarLeftRoom", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.HollowDrainMiddle", [20], [], [], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("DoubleJump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.HollowDrainMiddle", [20], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("DoubleJump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueRetracted", player))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.HollowDrainMiddle", [90], [], [], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.HollowDrainMiddle", [90], [], [], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.HollowDrainMiddle", [90], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WaterDash", "Launch"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.HollowDrainMiddle", [20], [], [], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.HollowDrainMiddle", [20], [], [], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.HollowDrainMiddle", [20], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainLower", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainLower", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.HollowDrainLower", [40], [], [], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.Entrance", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Bow', 2]], [], []))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("Dash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("DoubleJump", "Hammer"), player))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("Dash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("Bash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("Bash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("Dash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [10], [], [], []))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("Dash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has_any(("Bash", "Launch", "DoubleJump"), player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has_any(("Bash", "Launch", "DoubleJump"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [], [], [[2, 50]]))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has_any(("Dash", "DoubleJump", "Glide", "Hammer"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [50], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [50], [['Bow', 1]], [], [[1, 'Shuriken', 3], [1, 'Sentry', 3]]))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WestHollow.FullyDrained", player) and s.has_any(("Dash", "DoubleJump", "Glide", "Hammer"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Bow', 1]], [], [[1, 'Shuriken', 3], [1, 'Sentry', 3]]))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("Sword", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("Sword", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [], [], [[2, 50]]))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [], [], [[2, 50]]))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WaterDash", player) and s.has_any(("Bash", "Launch", "DoubleJump"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [30], [], [], []))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WaterDash", player) and s.has_any(("Dash", "DoubleJump", "Glide", "Hammer"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [30], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [30], [['Bow', 1]], [], [[1, 'Shuriken', 3], [1, 'Sentry', 3]]))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has_all(("WaterDash", "Sword"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [30], [], [], []))
    add_rule(world.get_location("WestHollow.UpperTongueExtended", player), lambda s: s.can_reach_region("WestHollow.SubmergedPlatform") and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.LowerTongueExtended", player), lambda s: s.can_reach_region("WestHollow.SubmergedPlatform") and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("DoubleJump", player) and s.has("WestHollow.FullyDrained", player) and s.has("Sword", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("DoubleJump", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.HollowDrainMiddle", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.HollowDrainMiddle", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.HollowDrainMiddle", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Sword", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.RockPuzzle", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestHollow.LowerTongueRetracted", player), lambda s: s.can_reach_region("WestHollow.AboveJumppad") and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("DoubleJump", player) and s.has("WestHollow.FullyDrained", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and s.has_any(("Sword", "Hammer", "Dash", "Bash"), player))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", "WestHollow.SubmergedPlatform", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [2, 10]]))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Glide", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", "WestHollow.SubmergedPlatform", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("DoubleJump", player) and s.has("WestHollow.FullyDrained", player) and s.has("Hammer", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", "WestHollow.SubmergedPlatform", [10], [], [], []))
    add_rule(world.get_location("WestHollow.QuickshotShard", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.SwimEC", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and cost_all(s, player, options, "WestHollow.HollowDrainLower", "", [105], [], [], []))
    add_rule(world.get_location("WestHollow.SwimEC", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("Bash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "", [70], [], [], []))
    add_rule(world.get_location("WestHollow.SwimEC", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("WaterDash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "", [50], [], [], []))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("DoubleJump", player) and s.has("SpiritLight", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("Dash", player) and s.has("SpiritLight", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.TrialApproach", [], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 3]]))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [90], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [90], [['Bow', 1], ['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [90], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [90], [['Bow', 1], ['Shuriken', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has_any(("TripleJump", "Glide"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [90], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WaterDash", player) and s.has("Launch", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [40], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WaterDash", "Bash"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [40], [['Bow', 1], ['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WaterDash", player) and s.has("Dash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [40], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WaterDash", player) and s.has("Glide", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [40], [['Bow', 1], ['Shuriken', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [40], [['Bow', 1], ['Shuriken', 1]], [], [[1, 'Blaze', 0], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WaterDash", "DoubleJump", "Bash"), player) and s.has_any(("TripleJump", "Glide"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [40], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.RockPuzzle", [90], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has("WaterDash", player) and s.has("Launch", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.RockPuzzle", [40], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.RockPuzzle", [60], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has_any(("Bash", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: True)
    add_rule(world.get_location("WestHollow.SpiritTrial", player), lambda s: s.can_reach_region("WestHollow.TrialStart") and s.has("WestHollow.TrialActivation", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_location("WestHollow.BelowLupoEX", player), lambda s: s.can_reach_region("WestHollow.PolesPound") and s.has("DoubleJump", player))
    add_rule(world.get_location("WestHollow.BelowLupoEX", player), lambda s: s.can_reach_region("WestHollow.PolesPound") and s.has("Hammer", player))
    add_rule(world.get_location("WestHollow.BelowLupoEX", player), lambda s: s.can_reach_region("WestHollow.PolesPound") and s.has("Dash", player))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestHollow.PolesPound", "WestHollow.HollowDrainLower", [10], [], [], []))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("WaterDash", player) and s.has("Bash", player) and cost_all(s, player, options, "WestHollow.PolesPound", "WestHollow.HollowDrainLower", [10], [], [], []))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestHollow.PolesPound", "WestHollow.HollowDrainLower", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestHollow.DoorLever", player), lambda s: s.can_reach_region("WestHollow.DashApproach"))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("DoubleJump", player) and s.has("Glide", player))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WestHollow.DashApproach", "WestHollow.HollowDrainLower", [], [], [], [[2, 10], [1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestHollow.DashArea_to_WestHollow.DashCrushers", player), lambda s: True)
    add_rule(world.get_location("WestHollow.DashTree", player), lambda s: s.can_reach_region("WestHollow.DashCrushers"))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashRoomTopRight", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda s: s.can_reach_region("WestHollow.DashRoomTopRight") and s.has_any(("Bash", "DoubleJump", "Dash"), player))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda s: s.can_reach_region("WestHollow.DashRoomTopRight") and s.has("Glide", player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", "", [], [['Sentry', 2]], [[12, 'Combat']], []))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashCrushers", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has_any(("Bash", "Hammer"), player))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.AboveDashSemisolid_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Bash", player) and s.has("WestHollow.DoorLever", player))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda s: s.can_reach_region("EastHollow.Teleporter") and s.has("DoubleJump", player) and cost_all(s, player, options, "EastHollow.Teleporter", "", [], [['Sentry', 3]], [], []))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda s: s.can_reach_region("EastHollow.Teleporter") and s.has_all(("DoubleJump", "Dash"), player) and s.has("EastHollow.BeetleDefeated", player) and cost_all(s, player, options, "EastHollow.Teleporter", "", [], [['Spear', 2]], [], []))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda s: s.can_reach_region("EastHollow.Teleporter") and s.has("DoubleJump", player) and s.has("EastHollow.BeetleDefeated", player) and cost_all(s, player, options, "EastHollow.Teleporter", "", [], [['Sentry', 4]], [], []))
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("EastHollow.BeetleDefeated", player) and cost_all(s, player, options, "EastHollow.Teleporter", "EastHollow.VoiceDoorPlatform", [], [['Spear', 2]], [], []))
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("DoubleJump", player) and s.has("EastHollow.BeetleDefeated", player) and cost_all(s, player, options, "EastHollow.Teleporter", "EastHollow.VoiceDoorPlatform", [], [['Sentry', 3]], [], []))
    add_rule(world.get_location("EastHollow.BeetleDefeated", player), lambda s: s.can_reach_region("BeetleFight") and cost_all(s, player, options, "BeetleFight", "", [], [], [[250, 'Boss']], []))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda s: s.can_reach_region("EastHollow.VoiceDoorPlatform") and s.has("DoubleJump", player) and cost_all(s, player, options, "EastHollow.VoiceDoorPlatform", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda s: s.can_reach_region("EastHollow.VoiceDoorPlatform") and s.has("DoubleJump", player) and s.has("EastHollow.BeetleDefeated", player) and cost_all(s, player, options, "EastHollow.VoiceDoorPlatform", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda s: s.can_reach_region("EastHollow.VoiceDoorPlatform") and s.has("DoubleJump", player) and s.has("EastHollow.BeetleDefeated", player) and cost_all(s, player, options, "EastHollow.VoiceDoorPlatform", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastHollow.GladesApproachOre", player), lambda s: s.can_reach_region("EastHollow.MapMoki") and s.has("Hammer", player) and s.has("Deflector", player) and s.has_any(("Launch", "DoubleJump"), player))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.MapMoki", "EastHollow.OutsideGlades", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and s.has("Deflector", player))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "EastHollow.MapMoki", "EastHollow.OutsideGlades", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and cost_all(s, player, options, "EastHollow.MapMoki", "EastHollow.OutsideGlades", [10], [], [], []))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "EastHollow.MapMoki", "EastHollow.OutsideGlades", [20], [], [], []))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has_all(("Hammer", "Dash"), player) and cost_all(s, player, options, "EastHollow.MapMoki", "EastHollow.OutsideGlades", [10], [], [], []))
    add_rule(world.get_location("GladesTown.GromsWall", player), lambda s: s.can_reach_region("EastHollow.OutsideGlades") and s.has("Deflector", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("Grapple", "DoubleJump", "Sword"), player))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("DoubleJump", player) and s.has("Dash", player))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("Bash", player))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("Grapple", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [], [['Shuriken', 2]], [], []))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("EastHollow.MortarEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("EastHollow.MortarEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Grapple", "Dash"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "EastHollow.Kwolok", [10], [], [], []))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("DoubleJump", "Grapple"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "EastHollow.Kwolok", [], [['Shuriken', 3]], [], []))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("EastHollow.DepthsLever", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has("Launch", player))
    add_rule(world.get_location("EastHollow.DepthsLever", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has("Hammer", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has("Bash", player))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has("Sword", player) and s.has("Dash", player) and cost_all(s, player, options, "EastHollow.AboveBash", "", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has("Sword", player) and cost_all(s, player, options, "EastHollow.AboveBash", "", [], [['Shuriken', 1]], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "EastHollow.AboveBash", "EastHollow.AfterBeetleFight", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_location("EastHollow.BashEX", player), lambda s: s.can_reach_region("EastHollow.BashTreeCheckpoint") and s.has("DoubleJump", player) and s.has_any(("Dash", "Hammer"), player))
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player) and s.has("Deflector", player))
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has_all(("DoubleJump", "Dash", "Sword"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", "EastHollow.AboveBash", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("EastHollow.RightKwolokEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_location("EastHollow.RightKwolokEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("DoubleJump", "Sword"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_location("EastHollow.SilentSwimEC", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has("Water", player) and s.has("DoubleJump", player) and cost_all(s, player, options, "EastHollow.Kwolok", "", [10], [], [], []))
    add_rule(world.get_location("EastHollow.SilentSwimEC", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("Water", "DoubleJump", "Hammer"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "", [10], [], [], []))
    add_rule(world.get_location("EastHollow.SilentSwimEC", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("Water", "Bash"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "", [20], [], [], []))
    add_rule(world.get_location("EastHollow.KwolokSwimLeftEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("Water", "DoubleJump"), player))
    add_rule(world.get_location("EastHollow.KwolokSwimLeftEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has_all(("Water", "DoubleJump", "Sword"), player))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has("Dash", player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: True)
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Water", "Grapple"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [], [['Sentry', 3]], [], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Water", "Grapple"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [], [['Shuriken', 2]], [], [[0, [[1, 'Combat']], []], [2, 20]]))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Water", "Grapple", "DoubleJump"), player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Water", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Water", "WaterDash", "Dash"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [10], [], [], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Water", "WaterDash", "Sword"), player))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("WaterDash", "Launch"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [60, 110], [], [], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("WaterDash", "Grapple"), player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [60, 110], [], [], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("WaterDash", "Grapple"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [60, 110], [], [], [[1, 'Sentry', 3]]))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [60, 110], [], [], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("WaterDash", "Grapple", "Sword"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [60, 110, 20], [], [], []))
    add_rule(world.get_location("EastHollow.BashHC", player), lambda s: s.can_reach_region("EastHollow.AboveDepths") and s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("EastHollow.DepthsExteriorEX", player), lambda s: s.can_reach_region("EastHollow.AboveDepths") and s.has_all(("Glide", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("EastHollow.DepthsExteriorEX", player), lambda s: s.can_reach_region("EastHollow.AboveDepths") and s.has("Bash", player) and cost_all(s, player, options, "EastHollow.AboveDepths", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("DoubleJump", player) and s.has("GladesTown.ClearThorns", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_location("GladesTown.LupoSwimMiddleEX", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("Water", player))
    add_rule(world.get_location("GladesTown.LupoSwimMiddleEX", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and cost_all(s, player, options, "GladesTown.Teleporter", "", [], [], [], [[2, 60]]))
    add_rule(world.get_location("GladesTown.LupoSwimMiddleEX", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("WaterDash", player) and cost_all(s, player, options, "GladesTown.Teleporter", "", [40], [], [], []))
    add_rule(world.get_location("GladesTown.LupoSwimLeftEX", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("Bash", player) and s.has("GladesTown.ClearThorns", player) and s.has("Water", player) and cost_all(s, player, options, "GladesTown.Teleporter", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.LupoSwimLeftEX", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("Bash", player) and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.Teleporter", "", [], [['Grenade', 1]], [], [[2, 100]]))
    add_rule(world.get_location("GladesTown.LupoSwimLeftEX", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("DoubleJump", player) and s.has("GladesTown.ClearThorns", player) and s.has("Water", player))
    add_rule(world.get_location("GladesTown.LupoSwimLeftEX", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("DoubleJump", player) and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.Teleporter", "", [], [], [], [[2, 100]]))
    add_rule(world.get_location("GladesTown.LupoSwimLeftEX", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("WaterDash", player) and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.Teleporter", "", [40], [], [], []))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.Teleporter", "GladesTown.UpperWest", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("GladesTown.ClearThorns", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.Teleporter", "GladesTown.BelowBountyShard", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("TuleyShop.StickyGrass", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "GladesTown.Teleporter", "GladesTown.AboveOpher", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has("Dash", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has_all(("Dash", "Burrow"), player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoHouse", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoHouse", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "GladesTown.Teleporter", "GladesTown.LupoHouse", [80], [], [], []))
    add_rule(world.get_location("GladesTown.LowerOre", player), lambda s: s.can_reach_region("GladesTown.TwillenHome") and cost_all(s, player, options, "GladesTown.TwillenHome", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: s.has_any(("Sword", "Dash"), player))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: True)
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("Bash", player) and s.has("GladesTown.BuildHuts", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.West", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has_all(("Bash", "Hammer"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has_all(("Hammer", "Dash"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.SpringPlants", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Dash", player) and s.has("GladesTown.BuildHuts", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Sword", player) and s.has("GladesTown.BuildHuts", player))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [20], [], [[12, 'Combat', 12, 'Combat']], []))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("Dash", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_any(("Bash", "Sword"), player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [10], [], [], []))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [10], [], [], []))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and cost_all(s, player, options, "GladesTown.West", "GladesTown.UpperWest", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("DoubleJump", player) and s.has("TuleyShop.StickyGrass", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Dash"), player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_location("C.GladesTown.MotayHut", player), lambda s: s.can_reach_region("GladesTown.MotayHut") and s.has("GladesTown.BuildHuts", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.MotayHut") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.BlueMoon", player) and s.has("TripleJump", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.MotayHut") and s.has_all(("Grapple", "Bash", "Dash"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.MotayHut", "", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("C.GladesTown.UpperWest", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("GladesTown.OnwardsAndUpwards", player))
    add_rule(world.get_location("GladesTown.BraveMokiHutEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("GladesTown.OnwardsAndUpwards", player) and s.has("Sword", player))
    add_rule(world.get_location("GladesTown.BraveMokiHutEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("GladesTown.OnwardsAndUpwards", player) and cost_all(s, player, options, "GladesTown.UpperWest", "", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("GladesTown.UpperLeftEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest"))
    add_rule(world.get_location("GladesTown.AboveGromHC", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("DoubleJump", player))
    add_rule(world.get_location("GladesTown.AboveGromHC", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Bash", player) and cost_all(s, player, options, "GladesTown.UpperWest", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.AboveGromHC", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Sword", player) and cost_all(s, player, options, "GladesTown.UpperWest", "", [], [], [], [[1, 'Grenade', 1], [1, 'Shuriken', 2]]))
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.Teleporter", player), lambda s: True)
    add_rule(world.get_location("C.GladesTown.AcornMoki", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("GladesTown.CaveEntrance", player))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("Water", player) and s.has("GladesTown.CaveEntrance", player))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("Launch", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Bow', 2]], [], []))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("Bash", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Bow', 2], ['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("DoubleJump", player) and s.has("GladesTown.CaveEntrance", player) and s.has("TripleJump", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Bow', 2]], [], []))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has_all(("Water", "WaterDash"), player) and s.has("GladesTown.CaveEntrance", player) and s.has_any(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Bow', 2]], [], []))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has_all(("Water", "WaterDash"), player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Bow', 2]], [], [[2, 10]]))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("DoubleJump", player) and s.has("GladesTown.CaveEntrance", player) and s.has("TripleJump", player) and s.has("Water", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("DoubleJump", player) and s.has("GladesTown.CaveEntrance", player) and s.has("TripleJump", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Grenade', 2]], [], [[2, 10]]))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has_all(("DoubleJump", "Sword"), player) and s.has("GladesTown.CaveEntrance", player) and s.has("TripleJump", player) and s.has("Water", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has_all(("DoubleJump", "Sword"), player) and s.has("GladesTown.CaveEntrance", player) and s.has("TripleJump", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Grenade', 1]], [], [[2, 10]]))
    add_rule(world.get_location("GladesTown.AboveCaveEX", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("Dash", player))
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has("Dash", player) and s.has("GladesTown.ClearThorns", player))
    add_rule(world.get_location("GladesTown.BountyShard", player), lambda s: s.can_reach_region("GladesTown.BelowBountyShard") and s.has("DoubleJump", player))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.LeftAboveCoals") and s.has("Sword", player))
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.BelowBountyShard", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player))
    add_rule(world.get_location("C.GladesTown.AboveOpher", player), lambda s: s.can_reach_region("GladesTown.AboveOpher") and s.has("GladesTown.RoofsOverHeads", player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("TuleyShop.SpringPlants", player) and cost_all(s, player, options, "GladesTown.AboveOpher", "GladesTown.PlayfulMoki", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: s.has_any(("Sword", "Dash"), player))
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: True)
    add_rule(world.get_location("GladesTown.LupoSwimMiddleEX", player), lambda s: s.can_reach_region("GladesTown.LupoHouse") and cost_all(s, player, options, "GladesTown.LupoHouse", "", [100], [], [], []))
    add_rule(world.get_location("GladesTown.LupoSwimMiddleEX", player), lambda s: s.can_reach_region("GladesTown.LupoHouse") and s.has("WaterDash", player) and cost_all(s, player, options, "GladesTown.LupoHouse", "", [40], [], [], []))
    add_rule(world.get_entrance("GladesTown.LupoHouse_to_GladesTown.Teleporter", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.LupoHouse_to_GladesTown.Teleporter", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "GladesTown.LupoHouse", "GladesTown.Teleporter", [60], [], [], []))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has("Hammer", player) and s.has("TuleyShop.SpringPlants", player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.HoleHut", "LowerReach.VeralHome", [], [], [], [[1, 'Blaze', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 0]]))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("C.GladesTown.HoleHutEntrance", player), lambda s: s.can_reach_region("GladesTown.HoleHutEntrance") and s.has("GladesTown.RoofsOverHeads", player))
    add_rule(world.get_location("GladesTown.GromsWall", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "Launch"), player))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Dash", "Sword"), player))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("DoubleJump", player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Glide", "DoubleJump"), player))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [], [], [[1, 'Bow', 1]]))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "WaterDash"), player) and s.has("Water", player))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "WaterDash"), player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "Glide"), player) and s.has("Water", player))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [], [], [[1, 'Bow', 1]]))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("DoubleJump", player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [['Spear', 2]], [[40, 'Ranged']], []))
    add_rule(world.get_location("WestGlades.LowerPoolEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", "", [60], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestGlades.LowerPoolEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and cost_all(s, player, options, "WestGlades.PastTown", "", [60], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.Center", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has("Water", player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.Center", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.Center", [], [], [], [[0, [[40, 'Ranged']], []]]))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has_all(("Sword", "Dash"), player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("Hammer", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has_all(("Hammer", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", "GladesTown.West", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has_all(("Bash", "DoubleJump"), player))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("Grapple", player) and cost_all(s, player, options, "WestGlades.LowerPool", "", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1], [2, 20]]))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WestGlades.LowerPool", "", [], [], [], [[2, 10], [1, 'Shuriken', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has_all(("DoubleJump", "Grapple", "Hammer"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Glide"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WestGlades.LowerPool", "WestGlades.Center", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has_all(("Glide", "DoubleJump"), player) and cost_all(s, player, options, "WestGlades.Center", "", [10], [['Spear', 2]], [], []))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has_all(("DoubleJump", "Sword"), player) and cost_all(s, player, options, "WestGlades.Center", "", [10], [], [], []))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has("Bash", player) and cost_all(s, player, options, "WestGlades.Center", "", [10], [], [], []))
    add_rule(world.get_location("WestGlades.UpperPoolEX", player), lambda s: s.can_reach_region("WestGlades.Upper") and cost_all(s, player, options, "WestGlades.Upper", "", [180], [], [], []))
    add_rule(world.get_location("WestGlades.UpperPoolEX", player), lambda s: s.can_reach_region("WestGlades.Upper") and s.has("WaterDash", player) and cost_all(s, player, options, "WestGlades.Upper", "", [80], [], [], []))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Upper") and s.has("Bash", player))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Upper") and s.has("Glide", player) and cost_all(s, player, options, "WestGlades.Upper", "", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Upper") and s.has("DoubleJump", player) and cost_all(s, player, options, "WestGlades.Upper", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "DoubleJump"), player))
    add_rule(world.get_location("OuterWellspring.SwimOre", player), lambda s: s.can_reach_region("WestGlades.MillApproach") and s.has_all(("Water", "DoubleJump"), player))
    add_rule(world.get_location("OuterWellspring.SwimOre", player), lambda s: s.can_reach_region("WestGlades.MillApproach") and s.has_all(("Water", "Bash"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "WestGlades.MillApproach", "OuterWellspring.EntranceDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Water", "Launch"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Water", "Bash"), player) and s.has_any(("Hammer", "DoubleJump"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Water", "Grapple", "Sword"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Water", "WaterDash", "DoubleJump"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Water", "Sword"), player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Water", "Sword"), player) and cost_all(s, player, options, "WestGlades.MillApproach", "PoolsApproach.MillPathCheckpoint", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has_all(("Grapple", "DoubleJump"), player) and cost_all(s, player, options, "WestGlades.ShrineArea", "", [], [['Shuriken', 2]], [], []))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has_all(("Grapple", "Hammer", "Dash"), player))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has_all(("Hammer", "DoubleJump", "Glide"), player))
    add_rule(world.get_location("WestGlades.CombatShrineCompleted", player), lambda s: s.can_reach_region("GladesShrine") and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "GladesShrine", "", [], [], [[32, 'Combat', 32, 'Combat'], [24, 'Combat'], [40, 'Combat'], [40, 'Ranged', 40, 'Ranged'], [32, 'Combat', 32, 'Combat'], [24, 'Combat', 24, 'Combat'], [32, 'Combat', 32, 'Combat'], [40, 'Ranged'], [32, 'Combat']], []))
    add_rule(world.get_location("E.OuterWellspring.EntranceDoor", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has("BreakCrystal", player))
    add_rule(world.get_location("OuterWellspring.FallingWheel", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [], [], [[16, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has("Grapple", player) and s.has_any(("Dash", "Sword"), player))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has_all(("Bash", "Glide"), player))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has_all(("Bash", "DoubleJump"), player))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [10], [], [], []))
    add_rule(world.get_location("OuterWellspring.SwimEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [180], [], [], []))
    add_rule(world.get_location("OuterWellspring.SwimEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has("WaterDash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [80], [], [], []))
    add_rule(world.get_location("OuterWellspring.SwimEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [120], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.Basement", [], [['Shuriken', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Water", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.Basement", [15], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.Basement", [75], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("OuterWellspring.FallingWheel", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [15], [], [], [[1, 'Shuriken', 5], [1, 'Sentry', 5]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Dash", "Sword"), player) and s.has("OuterWellspring.FallingWheel", player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Bash", "OuterWellspring.FallingWheel"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "Glide"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("Bash", player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has("Bash", player) and s.has("OuterWellspring.LifeHarvestWallBroken", player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has("Sword", player) and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", "", [], [['Shuriken', 2]], [], []))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.Basement", "", [20], [], [], []))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and s.has_all(("Dash", "Grapple"), player) and cost_all(s, player, options, "OuterWellspring.Basement", "", [20], [], [], []))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and s.has_all(("Dash", "Grapple", "DoubleJump", "Sword"), player))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("Hammer", player))
    add_rule(world.get_location("OuterWellspring.BasementEC", player), lambda s: s.can_reach_region("OuterWellspring.Basement") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.Basement", "", [], [], [], [[1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("Bash", player))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [], [], [[0, [[12, 'Combat']], []]]))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Water", player) and s.has_any(("WaterDash", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [15], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("Bash", "Grapple"), player))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda s: s.can_reach_region("OuterWellspring.AboveEntranceDoor") and s.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.WestDoor", [], [['Shuriken', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Bash", "Dash"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.RightWallMidpoint", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [], [[3, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("DoubleJump", "Grapple"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [], [[3, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "DoubleJump"), player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Dash"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Bash", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Bash"), player) and s.has("Glide", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Grenade', 1]], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "DoubleJump"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "OuterWellspring.EastDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: True)
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has("Dash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has("DoubleJump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [], [], [[20, 'Wall']], [[1, 'Shuriken', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.EastDoor") and s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "", [15], [['Grenade', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.AboveWestDoor", [25], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.AboveWestDoor", [15], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.AboveWestDoor", [15], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.WestDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Hammer"), player))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", "OuterWellspring.TrialApproach", [10], [['Grenade', 1], ['Sentry', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: True)
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.AboveWestDoor") and s.has("Launch", player))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("Sword", "Dash"), player))
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: True)
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has_all(("Grapple", "DoubleJump"), player) and cost_all(s, player, options, "OuterWellspring.TopDoor", "", [15], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has_all(("Grapple", "DoubleJump"), player) and cost_all(s, player, options, "OuterWellspring.TopDoor", "", [], [['Shuriken', 2]], [], []))
    add_rule(world.get_location("OuterWellspring.RightWallEX", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and s.has("Grapple", player))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", "", [], [], [[20, 'Wall']], []))
    add_rule(world.get_location("OuterWellspring.RightWallEC", player), lambda s: s.can_reach_region("OuterWellspring.TrialApproach") and cost_all(s, player, options, "OuterWellspring.TrialApproach", "", [], [], [[20, 'Wall']], [[1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.AboveEntranceDoor", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialStart", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialStart", player), lambda s: True)
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: True)
    add_rule(world.get_location("InnerWellspring.ThreeWheelsEX", player), lambda s: s.can_reach_region("InnerWellspring.EntranceDoor") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("InnerWellspring.WaterSwitchEX", player), lambda s: s.can_reach_region("InnerWellspring.EntranceDoor") and s.has("WaterDash", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "", [40, 60], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "InnerWellspring.ThornShardArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "InnerWellspring.DrainRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.ThreeWheels", player))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("DoubleJump", player) and s.has("InnerWellspring.ThreeWheels", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "InnerWellspring.ShortcutLever", [30], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "InnerWellspring.ShortcutLever", [45], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "InnerWellspring.ShortcutLever", [45], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", "InnerWellspring.ShortcutLever", [60], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has_all(("Grapple", "Sword"), player))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", "", [15], [['Shuriken', 2]], [], []))
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", "InnerWellspring.ShortcutLever", [30], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ShortcutLever", player), lambda s: s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", "InnerWellspring.ShortcutLever", [45], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ShortcutLever", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ShortcutLever", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and cost_all(s, player, options, "InnerWellspring.ShortcutLever", "InnerWellspring.WestDoor", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and cost_all(s, player, options, "InnerWellspring.ShortcutLever", "InnerWellspring.WestDoor", [], [['Shuriken', 2]], [], []))
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.ThornShardArea", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("Dash", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [['Shuriken', 2]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("WaterDash", "Bash"), player) and s.has("Water", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [['Grenade', 3]], [[10, 'Wall']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("WaterDash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [['Grenade', 3]], [[10, 'Wall']], [[2, 20]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("WaterDash", "Bash"), player) and s.has("Water", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [15], [['Grenade', 2]], [[10, 'Wall']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("WaterDash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [15], [['Grenade', 2]], [[10, 'Wall']], [[2, 20]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [], [], [[1, 'Shuriken', 3], [1, 'Blaze', 5], [1, 'Flash', 3], [1, 'Sentry', 3]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainRoomCenter", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEntrance"))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "InnerWellspring.DrainAreaEX", [], [], [[12, 'Combat', 12, 'Combat']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", "InnerWellspring.DrainAreaEX", [], [['Grenade', 1], ['Shuriken', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEX") and s.has("DoubleJump", player))
    add_rule(world.get_location("InnerWellspring.DrainHC", player), lambda s: s.can_reach_region("InnerWellspring.DrainAreaEX") and s.has("WaterDash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", "", [20], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainAreaExit", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoom", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", "InnerWellspring.DrainRoom", [15], [], [], [[1, 'Blaze', 2]]))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoomTop", player), lambda s: True)
    add_rule(world.get_location("InnerWellspring.LaserOre", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoomTop") and s.has_any(("Glide", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.LaserOre", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoomTop") and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Sentry', 2], [2, 15]]))
    add_rule(world.get_location("InnerWellspring.LaserOre", player), lambda s: s.can_reach_region("InnerWellspring.DrainRoomTop") and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Grapple", player))
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", "InnerWellspring.BelowDrainLever", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.AbovePole", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", "InnerWellspring.WestDoor", [30], [], [], []))
    add_rule(world.get_location("InnerWellspring.MiddleDoorsOpen", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has_all(("Hammer", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("InnerWellspring.LupoMap", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("DoubleJump", player) and s.has("SpiritLight", player))
    add_rule(world.get_location("InnerWellspring.GrappleTreeEX", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("InnerWellspring.GrappleTreeEX", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and cost_all(s, player, options, "InnerWellspring.WestDoor", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.AboveSpinArenaEX", player), lambda s: s.can_reach_region("InnerWellspring.EastDoor") and s.has("DoubleJump", player))
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("DoubleJump", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has("TripleJump", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", "InnerWellspring.TopSecondRoom", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.SpinPuzzle") and s.has("Grapple", player))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.SpinPuzzle") and s.has("Water", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", "", [], [], [], [[1, 'Spear', 1], [2, 15]]))
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("Dash", player) and s.has("InnerWellspring.SpinPuzzleSolved", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", "InnerWellspring.PastSpinPuzzle", [15], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.EastDoor", player), lambda s: s.has("InnerWellspring.SpinningRoomOpen", player))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.PastSpinPuzzle") and s.has("Water", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", "", [], [], [], [[1, 'Spear', 1], [2, 15]]))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_any(("DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", "InnerWellspring.GrappleThroughZigZagSpikes", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzle", player), lambda s: s.has_any(("InnerWellspring.SpinPuzzleSolved", "Water"), player))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.PastSpinPuzzle", player), lambda s: True)
    add_rule(world.get_location("InnerWellspring.BlueMoonSeed", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has_any(("Dash", "DoubleJump"), player))
    add_rule(world.get_location("InnerWellspring.AboveTpEX", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has_all(("DoubleJump", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.AboveTpEX", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has_all(("Dash", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.AboveTpEX", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.Teleporter", "", [], [['Shuriken', 2]], [], []))
    add_rule(world.get_location("InnerWellspring.SwimOre", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and cost_all(s, player, options, "InnerWellspring.Teleporter", "", [160], [], [], []))
    add_rule(world.get_location("InnerWellspring.SwimOre", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has("WaterDash", player) and cost_all(s, player, options, "InnerWellspring.Teleporter", "", [60], [], [], []))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_any(("Dash", "DoubleJump"), player))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_any(("Sword", "Hammer", "Glide"), player))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: True)
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has("Launch", player))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has_all(("Grapple", "Bash", "WaterDash"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", "", [80], [], [], []))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has_all(("Grapple", "Bash", "Hammer"), player))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has_all(("Grapple", "DoubleJump"), player))
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Water", "Bash"), player))
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Water", "Sword"), player) and s.has("Deflector", player))
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.FirstMud", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: True)
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has("Glide", player))
    add_rule(world.get_location("WoodsEntry.LedgeOre", player), lambda s: s.can_reach_region("WoodsEntry.Teleporter") and s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_location("WoodsEntry.UpperKS", player), lambda s: s.can_reach_region("WoodsEntry.TwoKeystoneRoom") and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.BelowTeleporter", player), lambda s: True)
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.AfterKuMeet") and s.has_all(("Sword", "DoubleJump"), player) and s.has("Deflector", player) and s.has_any(("TripleJump", "Glide"), player))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.AfterKuMeet") and s.has_all(("DoubleJump", "Bash"), player))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has_all(("Hammer", "DoubleJump"), player))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", "WoodsMain.BelowFourKeystoneRoom", [], [], [[40, 'Ranged']], [[1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Sword", "DoubleJump"), player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and s.has("Deflector", player) and s.has_any(("TripleJump", "Glide"), player))
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", "WoodsMain.FourKeystoneRoom", [15], [], [], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.WallOreLedge", [], [], [], [[0, [[1, 'Combat', 1, 'Combat']], []], [2, 20]]))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.AfterKuMeet", [], [['Spear', 1]], [[40, 'Ranged']], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.AfterKuMeet", [], [['Shuriken', 2]], [[40, 'Ranged']], []))
    add_rule(world.get_location("WoodsMain.BelowKeystonesEX", player), lambda s: s.can_reach_region("WoodsMain.WallOreLedge") and s.has("Dash", player))
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.WallOreLedge", "WoodsMain.FourKeystoneRoom", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom"))
    add_rule(world.get_location("WoodsMain.RightKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("DoubleJump", player))
    add_rule(world.get_location("WoodsMain.UpperKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("Hammer", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [[1, 'Combat']], []))
    add_rule(world.get_location("WoodsMain.LeftKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [], [[1, 'Spear', 2], [1, 'Sentry', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [15], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WoodsMain.LowerKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [], [], [[1, 'Shuriken', 1], [2, 15]]))
    add_rule(world.get_location("WoodsMain.BelowKeystonesEX", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and s.has("DoubleJump", player))
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: True)
    add_rule(world.get_location("WoodsMain.BehindDoorRoofEX", player), lambda s: s.can_reach_region("WoodsMain.GiantSkull") and s.has_all(("Glide", "DoubleJump"), player))
    add_rule(world.get_location("WoodsMain.BehindDoorRoofEX", player), lambda s: s.can_reach_region("WoodsMain.GiantSkull") and s.has_all(("Glide", "Dash"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", "", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: True)
    add_rule(world.get_location("WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.BalloonLure") and s.has("DoubleJump", player) and s.has_any(("Dash", "TripleJump"), player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "", [], [], [[1, 'Combat']], []))
    add_rule(world.get_location("WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.BalloonLure") and s.has("Launch", player))
    add_rule(world.get_location("WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.can_reach_region("WoodsMain.BalloonLure") and s.has("Launch", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player))
    add_rule(world.get_location("WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.can_reach_region("WoodsMain.BalloonLure") and s.has_all(("DoubleJump", "Dash", "Bash"), player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("DoubleJump", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "WoodsMain.BelowHiddenOre", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("Dash", "Bash"), player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "WoodsMain.BelowHiddenOre", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("Bash", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "WoodsMain.BelowHiddenOre", [], [['Grenade', 3]], [], []))
    add_rule(world.get_location("WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "", [], [], [], [[1, 'Sentry', 1]]))
    add_rule(world.get_location("WoodsMain.HiddenOre", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and s.has("Bash", player))
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.PetrifiedHowl", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "WoodsMain.PetrifiedHowl", [30], [], [], []))
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.PetrifiedHowl", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "WoodsMain.PetrifiedHowl", [15], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.BalloonLure", player), lambda s: s.has("WoodsMain.BalloonLureBlobDestroyed", player))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.AboveHowl", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.AboveHowl", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda s: s.has_any(("Dash", "Sword"), player))
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.TrialStart", player), lambda s: True)
    add_rule(world.get_location("C.WoodsMain.TrialStart", player), lambda s: s.can_reach_region("WoodsMain.TrialStart") and s.has("WoodsMain.TrialActivation", player))
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has_all(("Hammer", "DoubleJump", "Grapple"), player))
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has_all(("Sword", "DoubleJump", "Grapple"), player))
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.AboveHowl", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WoodsMain.TrialStart", "WoodsMain.AboveHowl", [], [['Shuriken', 3]], [], []))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.MidwayTrial", "WoodsMain.TrialEnd", [30], [], [], []))
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.BeforeLog", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "WoodsMain.MidwayTrial", "WoodsMain.BeforeLog", [15], [], [], []))
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OrangeTree", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "WoodsMain.TrialEnd", "WoodsMain.OrangeTree", [], [['Shuriken', 4]], [], []))
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OrangeTree", player), lambda s: s.has_all(("Burrow", "Sword"), player))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "WoodsMain.AboveHowl", "WoodsMain.BeforeLog", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_location("WoodsMain.LogBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.BeforeLog"))
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.OrangeTree", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.BeforeLog", "WoodsMain.OrangeTree", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WoodsMain.LogBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.Teleporter") and s.has_all(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "WoodsMain.Teleporter", "", [20], [], [], []))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.Teleporter", "WoodsMain.AbovePit", [45], [], [], []))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.Teleporter", "WoodsMain.AbovePit", [15], [], [], []))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has("DoubleJump", player) and s.has("Dash", player) and cost_all(s, player, options, "WoodsMain.Teleporter", "WoodsMain.AbovePit", [45], [], [], []))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WoodsMain.Teleporter", "WoodsMain.AbovePit", [45], [], [], [[1, 'Shuriken', 2]]))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.Teleporter", "WoodsMain.AbovePit", [15], [], [], []))
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("DoubleJump", player) and s.has("WoodsMain.LogBlobDestroyed", player))
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.AbovePit", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "WoodsMain.OrangeTree", "WoodsMain.AbovePit", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("E.WoodsMain.AbovePit", player), lambda s: s.can_reach_region("WoodsMain.AbovePit") and s.has("Bash", player) and s.has("BreakCrystal", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch"), player))
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsShrine", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsShrine", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "LowerWastes.WestTP", [30], [], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "LowerWastes.WestTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Glide", "DoubleJump", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "LowerWastes.WestTP", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Bash", "DoubleJump", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "LowerWastes.WestTP", [], [['Grenade', 1], ['Shuriken', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has_all(("Dash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "WoodsMain.AbovePit", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", "WoodsMain.AbovePit", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_location("WoodsMain.CombatShrineCompleted", player), lambda s: s.can_reach_region("WoodsShrine") and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "WoodsShrine", "", [], [], [[40, 'Combat'], [24, 'Combat'], [20, 'Combat', 20, 'Combat', 20, 'Combat'], [80, 'Combat', 80, 'Combat'], [32, 'Ranged'], [1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat', 1, 'Combat'], [32, 'Combat', 32, 'Combat', 32, 'Combat', 32, 'Combat'], [32, 'Ranged']], []))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has("DoubleJump", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and s.has("TripleJump", player) and s.has("Sword", player))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has("DoubleJump", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Entry", "", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has_all(("DoubleJump", "Dash"), player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and s.has("Sword", player))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has_all(("DoubleJump", "Dash"), player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and cost_all(s, player, options, "LowerReach.Entry", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Entry", "LowerReach.AboveEntry", [20], [['Sentry', 3]], [], []))
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.Icefall", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("LowerReach.ThawBaurFurnace", player) and s.has_any(("Hammer", "Glide"), player))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Bash", player) and s.has("Glide", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [['Grenade', 1]], [], [[1, 'Spear', 2]]))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Bash", player) and s.has_any(("Sword", "Hammer", "DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has_all(("Dash", "DoubleJump"), player) and s.has_any(("Hammer", "Sword"), player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Bash", player))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has_all(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has_all(("Sword", "Hammer"), player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [20], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("DoubleJump", player) and s.has("LowerReach.ThawBaurFurnace", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("DoubleJump", player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has_all(("Dash", "Sword"), player) and s.has("LowerReach.ThawBaurFurnace", player) and s.has("Hammer", player))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has_all(("Dash", "Sword"), player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerReach.AboveBaurUpperEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerReach.AboveBaurUpperEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("DoubleJump", player) and s.has("LowerReach.ThawBaurFurnace", player) and s.has_any(("Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.AboveBaurUpperEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Bash", player) and s.has("LowerReach.ThawBaurFurnace", player))
    add_rule(world.get_location("LowerReach.AboveBaurUpperEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has_all(("Dash", "Sword"), player) and s.has("LowerReach.ThawBaurFurnace", player) and s.has("Hammer", player))
    add_rule(world.get_location("LowerReach.AboveBaurUpperEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has_all(("Dash", "Sword"), player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Icefall", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "LowerReach.CentralEnemyPaths", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Hammer", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "LowerReach.CentralEnemyPaths", [20], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Glide", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "LowerReach.CentralEnemyPaths", [], [], [], [[1, 'Spear', 1], [1, 'Sentry', 1], [1, 'Shuriken', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Dash", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "LowerReach.CentralEnemyPaths", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("DoubleJump", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.LeftFurnace", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Grapple", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Grenade', 1], ['Spear', 1]], [], []))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "Sword"), player) and s.has("LowerReach.LeftFurnace", player))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "Dash"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [[25, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 40]]))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("DoubleJump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("TripleJump", player) and s.has("Combat.Aerial", player) and s.has("Water", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("DoubleJump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("TripleJump", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [[25, 'Combat']], [[2, 20]]))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.Icefall", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [20], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Spear', 1]], [], [[1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Spear', 3]], [], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [], [[1, 'Blaze', 1], [1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Bash", player) and s.has("LowerReach.LeftFurnace", player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Grapple", "Sword"), player) and s.has("LowerReach.LeftFurnace", player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Sword", player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("Water", "Dash"), player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Sword", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Water", "WaterDash"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Hammer", player))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Water", "WaterDash"), player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("WaterDash", player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.Icefall", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("WaterDash", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [20], [], [], [[1, 'Spear', 1], [2, 20]]))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Water", "WaterDash"), player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("DoubleJump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("DoubleJump", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [20], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.AboveEntry", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.Entry", player), lambda s: s.has("Bash", player) and s.has("LowerReach.Lever", player))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.Central", "", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and cost_all(s, player, options, "LowerReach.Central", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("Dash", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.Central", "", [], [], [], [[1, 'Sentry', 1], [1, 'Blaze', 1], [1, 'Spear', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("Sword", "Dash"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("Sword", "Hammer"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("Dash", "Sword"), player) and s.has("SpiritLight", player))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("SpiritLight", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.LupoMap", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("DoubleJump", player) and s.has("SpiritLight", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Shuriken', 1]], [], []))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("DoubleJump", "Sword"), player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and cost_all(s, player, options, "LowerReach.Central", "", [], [['Grenade', 2]], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("Dash", "Glide"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has("Bash", player) and s.has("LowerReach.ThawCentralFurnace", player))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.Central") and s.has_all(("DoubleJump", "Glide"), player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has("LowerReach.Lever", player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("DoubleJump", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [['Grenade', 2]], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Dash", "Sword"), player) and s.has("LowerReach.ThawCentralFurnace", player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Dash", "Hammer"), player) and s.has("LowerReach.ThawCentralFurnace", player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has("Sword", player) and s.has("LowerReach.Lever", player))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has("Glide", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.Entry", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("Bash", player))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Sword"), player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has_all(("Bash", "Glide"), player))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("Bash", player) and s.has("LowerReach.ThawCentralFurnace", player))
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "LowerReach.BelowTokk", [40], [], [], []))
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has("Dash", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.BelowTokk", "UpperReach.KeystoneRoom", [], [], [[32, 'Combat']], [[1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.BelowTokk", "UpperReach.BurrowArea", [20], [], [], []))
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "Dash"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.BelowTokk", "UpperReach.BurrowArea", [], [['Spear', 1]], [[32, 'Combat']], []))
    add_rule(world.get_location("LowerReach.ThawCentralFurnace", player), lambda s: s.can_reach_region("LowerReach.SecondSoup") and s.has_all(("Flap", "Bash"), player))
    add_rule(world.get_location("LowerReach.WindLantern", player), lambda s: s.can_reach_region("LowerReach.SecondSoup") and s.has_all(("Flap", "Bash"), player) and s.has_any(("Dash", "Launch"), player))
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda s: s.can_reach_region("LowerReach.SecondSoup") and s.has_all(("Flap", "Bash"), player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword"), player))
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda s: s.can_reach_region("LowerReach.SecondSoup") and s.has_all(("Flap", "Bash"), player) and cost_all(s, player, options, "LowerReach.SecondSoup", "", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Dash", "Sword"), player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Burrow", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerReach.SecondSoup", "LowerReach.CentralEnemyPaths", [], [['Sentry', 4]], [], []))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("Flap", player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.SecondSoup", "LowerReach.CentralEnemyPaths", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: True)
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda s: s.can_reach_region("LowerReach.BelowLupo") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.BelowLupo", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.SecondSoup", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.WindChannel", player), lambda s: True)
    add_rule(world.get_location("LowerReach.WindBottomEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has("LowerReach.WindLantern", player))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has("Launch", player))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer", "Bash"), player) and cost_all(s, player, options, "LowerReach.WindChannel", "", [20], [], [], []))
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer", "Bash"), player) and cost_all(s, player, options, "LowerReach.WindChannel", "LowerReach.SoupMoki", [40], [], [], []))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and s.has("Sword", player))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and cost_all(s, player, options, "LowerReach.SoupMoki", "", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.SoupMoki") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.SoupMoki", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindChannel", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "LowerReach.SoupMoki", "LowerReach.EastEnemyPaths", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "LowerReach.SoupMoki", "LowerReach.EastEnemyPaths", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.PastSnowball", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.PastSnowball", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Hammer", player) and s.has("LowerReach.RolledSnowball", player))
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("LowerReach.RolledSnowball", player))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "LowerReach.IceCavern", "LowerReach.HalfwayIceCavern", [20], [], [], []))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Dash", player) and s.has("LowerReach.ThawEastFurnace", player))
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerReach.IceCavern", "LowerReach.HalfwayIceCavern", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("LowerReach.EastDoorLantern", player), lambda s: s.can_reach_region("LowerReach.HalfwayIceCavern") and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Sword", player))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("LowerReach.ThawEastFurnace", player))
    add_rule(world.get_location("LowerReach.ArenaBeaten", player), lambda s: s.can_reach_region("LowerReach.ArenaArea") and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.ArenaArea", "", [], [], [[60, 'Combat', 60, 'Combat', 60, 'Combat'], [40, 'Combat'], [24, 'Combat', 24, 'Combat']], []))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has("Sword", player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "Dash", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WindSpinners", "LowerReach.WispPathCheckpoint", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Spear', 1], [1, 'Flash', 1]]))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.WindSpinners", "LowerReach.WispPathCheckpoint", [20], [], [], []))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.WindSpinners", "LowerReach.WispPathCheckpoint", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("H.LowerReach.WispPathCheckpoint", player), lambda s: s.can_reach_region("LowerReach.WispPathCheckpoint") and s.has("DoubleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("H.LowerReach.WispPathCheckpoint", player), lambda s: s.can_reach_region("LowerReach.WispPathCheckpoint") and s.has_all(("Dash", "Hammer"), player))
    add_rule(world.get_location("E.LowerReach.WispPathCheckpoint", player), lambda s: s.can_reach_region("LowerReach.WispPathCheckpoint") and s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_location("E.LowerReach.WispPathCheckpoint", player), lambda s: s.can_reach_region("LowerReach.WispPathCheckpoint") and s.has_all(("Dash", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", "LowerReach.BridgeWispPath", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", "LowerReach.BridgeWispPath", [20], [], [], []))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.WindSpinners", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Grapple", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", "LowerReach.SnowEscape", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", "LowerReach.SnowEscape", [], [['Shuriken', 2]], [], []))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has("Glide", player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has("Glide", player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.CatalystShard", player), lambda s: s.can_reach_region("LowerReach.VeralHome") and s.has("WaterDash", player) and cost_all(s, player, options, "LowerReach.VeralHome", "", [40], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.CatalystShard", player), lambda s: s.can_reach_region("LowerReach.VeralHome") and s.has_all(("WaterDash", "Bash", "Flap"), player) and cost_all(s, player, options, "LowerReach.VeralHome", "", [40], [], [], []))
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: s.has_all(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.TownEntry", "LowerReach.TrialStart", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has_all(("Bash", "DoubleJump", "Dash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.TownEntry", "LowerReach.TrialStart", [], [['Grenade', 1]], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.TownEntry", "LowerReach.TrialStart", [20], [['Grenade', 1], ['Spear', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has_all(("Launch", "DoubleJump"), player) and s.has_any(("Dash", "TripleJump"), player))
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.TownEntry", "LowerReach.TrialStart", [20], [], [], []))
    add_rule(world.get_location("LowerReach.SpiritTrial", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("Glide", player) and s.has("LowerReach.TrialActivation", player))
    add_rule(world.get_location("LowerReach.UpperLeftKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has_all(("Launch", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.MiddleLeftKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("Launch", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.BottomLeftKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("Launch", player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerReach.BottomLeftKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Sword", "Dash", "Hammer"), player))
    add_rule(world.get_location("LowerReach.BottomLeftKS", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]]))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.TrialStart", "LowerReach.TownEntry", [20], [], [], []))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.TrialStart", "LowerReach.TownEntry", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]]))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.ArenaArea", player), lambda s: s.has("Launch", player) and s.has("LowerReach.ArenaBeaten", player))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [20], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Sentry', 2], [1, 'Flash', 2]]))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Sword"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [], [], [], [[1, 'Sentry', 2], [1, 'Flash', 2]]))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "DoubleJump"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [20], [], [], []))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "DoubleJump"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Sword"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [20], [], [], []))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [20], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Sentry', 2], [1, 'Flash', 2]]))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Sword"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [], [], [], [[1, 'Sentry', 2], [1, 'Flash', 2]]))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "DoubleJump"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [20], [], [], []))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "DoubleJump"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "Sword"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [20], [], [], []))
    add_rule(world.get_location("UpperReach.ThawFurnace", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has_all(("Flap", "Bash"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "", [], [], [], [[1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has("Dash", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_location("UpperReach.SwimEX", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has("WaterDash", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "", [40], [], [], []))
    add_rule(world.get_location("UpperReach.SwimEX", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "", [100], [], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("DoubleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupFrozen", player), lambda s: s.has("UpperReach.FreezeFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoupFrozen", [], [], [], [[1, 'Blaze', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("WaterDash", "Sword"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("Water", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("WaterDash", "Sword"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoupThawed", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("WaterDash", "Hammer"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("Water", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("WaterDash", "Hammer"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoupThawed", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("WaterDash", "Dash"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("Water", player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("WaterDash", "Dash"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.UpperSoupThawed", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("UpperReach.ThawFurnace", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer", "Glide", "Grapple"), player))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.OutsideTreeRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]]))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has("Sword", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", "UpperReach.KeystoneSnapPlantThawed", [20], [], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: True)
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneSnapPlantPaths") and s.has("Sword", player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneSnapPlantThawedPaths"))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and s.has("DoubleJump", player) and s.has_any(("Dash", "Hammer"), player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and s.has("DoubleJump", player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", "", [], [], [], [[1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and s.has("Sword", player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", "", [20, 20], [], [], []))
    add_rule(world.get_location("UpperReach.SwingPoleEX", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and s.has("Sword", player))
    add_rule(world.get_location("UpperReach.SwingPoleEX", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and cost_all(s, player, options, "UpperReach.UpperSoupPaths", "", [20], [], [], []))
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", "UpperReach.KeystoneSnapPlant", [20], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has_any(("Sword", "Hammer", "DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", "UpperReach.KeystoneSnapPlant", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperReach.SwingPoleEX", player), lambda s: s.can_reach_region("UpperReach.UpperSoupFrozenPaths"))
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozenPaths_to_UpperReach.UpperSoupThawedPaths", player), lambda s: True)
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozenPaths_to_UpperReach.UpperSoupThawedPaths", player), lambda s: s.has_all(("Flap", "Bash"), player))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupThawedPaths") and cost_all(s, player, options, "UpperReach.UpperSoupThawedPaths", "", [20], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2]]))
    add_rule(world.get_location("UpperReach.MiddleRightKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupThawedPaths") and s.has("Sword", player))
    add_rule(world.get_location("UpperReach.MiddleRightKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupThawedPaths") and cost_all(s, player, options, "UpperReach.UpperSoupThawedPaths", "", [20], [], [], []))
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("DoubleJump", "Glide"), player) and s.has("UpperReach.ThawFurnace", player))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoomLedge") and s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoomLedge") and s.has("Launch", player))
    add_rule(world.get_location("C.UpperReach.TreeRoom", player), lambda s: s.can_reach_region("UpperReach.TreeRoom"))
    add_rule(world.get_location("UpperDepths.EntrySpikesEX", player), lambda s: s.can_reach_region("UpperDepths.Entry"))
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has("Launch", player) and s.has("EastHollow.DepthsOpen", player))
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("EastHollow.DepthsOpen", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperDepths.Entry", "EastHollow.AboveDepths", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("EastHollow.DepthsOpen", player) and cost_all(s, player, options, "UpperDepths.Entry", "EastHollow.AboveDepths", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("UpperDepths.EntryRoofEX", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("Bash", player))
    add_rule(world.get_location("UpperDepths.EntryOre", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperDepths.EntryOre", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has_all(("Hammer", "DoubleJump"), player))
    add_rule(world.get_location("UpperDepths.EntryOre", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperDepths.EntryOre", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has_all(("DoubleJump", "Sword"), player) and s.has("Deflector", player))
    add_rule(world.get_location("UpperDepths.LeftEntryKS", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("Bash", player))
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.Entry", player), lambda s: s.has("Glide", player))
    add_rule(world.get_location("C.UpperDepths.FirstKSRoom", player), lambda s: s.can_reach_region("UpperDepths.FirstKSRoom"))
    add_rule(world.get_location("E.UpperDepths.FirstKSRoom", player), lambda s: s.can_reach_region("UpperDepths.FirstKSRoom") and s.has("BreakCrystal", player))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.FirstKSRoom", player), lambda s: True)
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: s.has("Bash", player) and can_keystones(s, player))
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: can_keystones(s, player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", "UpperDepths.BelowHive", [10], [], [], []))
    add_rule(world.get_location("E.UpperDepths.Central", player), lambda s: s.can_reach_region("UpperDepths.Central") and s.has("Launch", player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("UpperDepths.BossPathEX", player), lambda s: s.can_reach_region("UpperDepths.SecondKSRoom") and s.has_all(("DoubleJump", "Sword"), player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.Teleporter", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "UpperDepths.OutsideMoraFight", "UpperDepths.Teleporter", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("MoraFirstPhase_to_MoraEscape", player), lambda s: True)
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Grapple"), player))
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("UpperDepths.ForestsEyes", player), lambda s: s.can_reach_region("MoraSecondPhase") and cost_all(s, player, options, "MoraSecondPhase", "", [], [], [[165, 'Boss']], []))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("Glide", player))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.West", "", [], [['Shuriken', 2]], [], []))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has_all(("Sword", "Water"), player))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("Sword", player) and cost_all(s, player, options, "LowerDepths.West", "", [140, 20], [], [], []))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("BreakCrystal", player) and s.has("Glide", player))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("BreakCrystal", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.West", "", [], [['Shuriken', 2]], [], []))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has_all(("Sword", "Water"), player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("Sword", player) and s.has("BreakCrystal", player) and cost_all(s, player, options, "LowerDepths.West", "", [140, 20], [], [], []))
    add_rule(world.get_location("LowerDepths.SwimEC", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("WaterDash", player) and s.has("Water", player))
    add_rule(world.get_location("LowerDepths.SwimEC", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("WaterDash", player) and cost_all(s, player, options, "LowerDepths.West", "", [], [], [], [[2, 120]]))
    add_rule(world.get_location("LowerDepths.LeftEX", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has_any(("Dash", "Launch"), player))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "DoubleJump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and s.has("UpperDepths.ForestsEyes", player))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "DoubleJump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [], [[1, 'Flash', 0]]))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Bash", "Water"), player))
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda s: s.has("Dash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", "UpperDepths.LowerConnection", [20], [], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda s: s.has("DoubleJump", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", "UpperDepths.LowerConnection", [10], [], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerDepths.West", "UpperDepths.LowerConnection", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("LowerDepths.CombatShrineCompleted", player), lambda s: s.can_reach_region("DepthsShrine") and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "DepthsShrine", "", [], [], [[32, 'Ranged', 32, 'Ranged', 32, 'Ranged'], [32, 'Combat', 32, 'Combat'], [40, 'Ranged', 40, 'Ranged'], [32, 'Ranged', 32, 'Ranged'], [40, 'Ranged', 40, 'Ranged'], [32, 'Ranged'], [32, 'Combat']], []))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("Grapple", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.Central", "", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("Grapple", player) and cost_all(s, player, options, "LowerDepths.Central", "", [], [], [], [[1, 'Bow', 1]]))
    add_rule(world.get_location("LowerDepths.SpiritTrial", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has_all(("Dash", "Bash", "Grapple"), player) and s.has("LowerDepths.TrialActivation", player))
    add_rule(world.get_location("LowerDepths.SpiritTrial", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has_all(("DoubleJump", "Dash", "Bash", "Glide"), player) and s.has("LowerDepths.TrialActivation", player))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("DoubleJump", player) and s.has("DepthsLight", player) and s.has_any(("TripleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "LowerDepths.Central", "LowerDepths.East", [], [['Flash', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "LowerDepths.Central", "LowerDepths.East", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer", "DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.Central", "LowerDepths.East", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 3], [2, 30]]))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.Central", "LowerDepths.East", [], [], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Hammer", "Sword"), player))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("E.LowerDepths.East", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("DoubleJump", "Hammer"), player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("E.LowerDepths.East", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Grapple", player) and s.has("BreakCrystal", player) and s.has("UltraGrapple", player))
    add_rule(world.get_location("E.LowerDepths.East", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Sword", player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Grapple", player) and cost_all(s, player, options, "LowerDepths.East", "", [30, 30], [], [], []))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Grapple", player) and s.has("Hammer", player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Grapple", player) and cost_all(s, player, options, "LowerDepths.East", "", [], [], [], [[1, 'Sentry', 2]]))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("DoubleJump", player) and cost_all(s, player, options, "LowerDepths.East", "", [], [['Flash', 1], ['Shuriken', 4]], [], []))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("DoubleJump", "Dash"), player) and s.has("SpiritLight", player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("SpiritLight", player) and cost_all(s, player, options, "LowerDepths.East", "", [30], [['Flash', 1]], [], []))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("SpiritLight", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "", [], [['Shuriken', 3]], [], []))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("SpiritLight", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "", [30, 30], [], [], []))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("SpiritLight", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "", [30], [], [], [[1, 'Blaze', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("SpiritLight", player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has("DoubleJump", player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "Grapple", "Hammer"), player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("DoubleJump", player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and s.has("Grapple", player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("DoubleJump", player) and s.has("DepthsLight", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.BeforeTree", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has("DoubleJump", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "LowerDepths.Central", [60], [], [], []))
    add_rule(world.get_location("LowerDepths.TrialActivation", player), lambda s: s.can_reach_region("LowerDepths.BeforeTree") and s.has_all(("DoubleJump", "Dash", "Bash", "Glide"), player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_any(("Sword", "DoubleJump", "Bash"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.East", [10], [], [], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Hammer", player) and s.has_any(("Bash", "Grapple"), player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Hammer", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.East", [10], [], [], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: True)
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: True)
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], [[1, 'Sentry', 5]]))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("Dash", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], [[1, 'Shuriken', 3]]))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [30], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [30, 30], [], [[1, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_LowerDepths.BeforeTree", player), lambda s: s.has("DepthsLight", player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple"), player) and s.has("Glide", player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [], [], [], [[2, 45]]))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Water", "DoubleJump", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [15], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has_any(("Launch", "Bash"), player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Grapple", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "PoolsApproach.MillPath", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 20]]))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("Bash", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "", [160], [], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has_all(("WaterDash", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "", [140], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("Sword", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "", [], [], [], [[2, 5], [0, [[1, 'Ranged']], []]]))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("Dash", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "", [], [], [[32, 'Combat'], [1, 'Ranged']], []))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has_all(("Dash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "", [], [], [[1, 'Ranged']], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [], [], [[1, 'Ranged']], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.OnTopOfWheel", [240], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Bash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.OnTopOfWheel", [200], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("WaterDash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.OnTopOfWheel", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Launch", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [120], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [120], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("DoubleJump", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Dash", "TripleJump"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [140], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [60], [['Sentry', 3]], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [80], [['Blaze', 3]], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("WaterDash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Sword", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("WaterDash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [100], [], [], [[1, 'Blaze', 1]]))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "DoubleJump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MarshBreakableWall", [200], [], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has("Grapple", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has("Launch", player) and s.has_any(("Glide", "DoubleJump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("Launch", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [], [['Spear', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [20], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [20], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_any(("DoubleJump", "Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [60], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has("Sword", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [80], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [100], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has("WaterDash", player) and s.has("Water", player))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has("WaterDash", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [], [], [], [[2, 40]]))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has("Bash", player) and s.has("Water", player))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has("Bash", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "", [], [], [], [[2, 100]]))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.MarshBreakableWall") and s.has_all(("Water", "DoubleJump"), player) and s.has_any(("TripleJump", "Sticky"), player))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Bash", "Dash"), player) and s.has_any(("DoubleJump", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Bash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [[20, 'Wall']], [[2, 20]]))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [40], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Launch"), player))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("WaterDash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [140], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("WaterDash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [160], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", "PoolsApproach.OnTopOfWheel", [180], [], [], []))
    add_rule(world.get_location("C.PoolsApproach.OnTopOfWheel", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Water", player))
    add_rule(world.get_location("C.PoolsApproach.OnTopOfWheel", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("PoolsApproach.WheelFreed", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [], [], [[1, 'Spear', 1], [1, 'Grenade', 2]]))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Bash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [180], [], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [160], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Flap", player) and s.has("Water", player))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Flap", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [], [], [[2, 220]]))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Flap", "WaterDash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [100], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathEC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Water", player) and s.has("PoolsApproach.UnderwaterWallBroken", player))
    add_rule(world.get_location("PoolsApproach.MillPathEC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Bash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [300], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathEC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("WaterDash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [140], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "WaterDash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [60], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 3]]))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "DoubleJump", "Bash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "DoubleJump", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [20], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "WaterDash", "DoubleJump", "Grapple"), player))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "Bash", "Hammer", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "Grapple", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "Hammer"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "WaterDash", "Sword", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Grapple", "DoubleJump"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [['Flash', 2]], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [40], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Launch"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "DoubleJump"), player) and s.has_any(("WaterDash", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Grapple", "WaterDash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "Grapple", "Bash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [60], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "DoubleJump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [80], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 4], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [100], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("WaterDash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [100], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("DoubleJump", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [160], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [180], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [160], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Water", "WaterDash", "DoubleJump", "Dash", "Hammer"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has("WaterDash", player) and s.has("Water", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "EastPools.LeverRoom", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has("WaterDash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MillPath", [100], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water", "Grapple", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_MarshSpawn.PoolsPath", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "MarshSpawn.PoolsPath", [180], [], [], []))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("Bash", player))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("Sword", player))
    add_rule(world.get_location("EastPools.EntryLever", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("DoubleJump", player))
    add_rule(world.get_location("EastPools.BelowEntryLeverBubble", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("Sword", "Flap"), player))
    add_rule(world.get_location("PoolsApproach.WheelFreed", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and cost_all(s, player, options, "EastPools.LeverRoom", "", [60], [['Spear', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.WheelFreed", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [40], [['Spear', 1]], [], []))
    add_rule(world.get_location("EastPools.TwoCrushersEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("Water", player))
    add_rule(world.get_location("EastPools.TwoCrushersEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [], [], [[2, 200]]))
    add_rule(world.get_location("EastPools.TwoCrushersEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [60], [], [], []))
    add_rule(world.get_location("EastPools.RightOre", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("Grapple", "Flap"), player) and s.has_any(("Dash", "DoubleJump"), player))
    add_rule(world.get_location("EastPools.RightOre", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("EastPools.BubbleCurrentEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [60], [], [], []))
    add_rule(world.get_location("EastPools.BelowLeverEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [], [[1, 'Ranged']], []))
    add_rule(world.get_location("PoolsApproach.MarshPathCurrentEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("Bash", player) and s.has("Water", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.MarshPathCurrentEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [['Grenade', 1]], [], [[2, 140]]))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water", player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: True)
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "EastPools.LeverRoom", "PoolsApproach.OnTopOfWheel", [100], [], [], []))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("EastPools.LeverRoom_to_MarshSpawn.PoolsPath", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "EastPools.LeverRoom", "MarshSpawn.PoolsPath", [160], [], [], []))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.BehindEntryDoor") and s.has_all(("Sword", "Bash"), player) and s.has_any(("Hammer", "Grapple", "Dash"), player))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.BehindEntryDoor") and s.has_all(("DoubleJump", "Bash"), player))
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.LeverRoom", player), lambda s: s.has("EastPools.EntryLever", player))
    add_rule(world.get_location("EastPools.TokkBubbleFree", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.TokkBubble", "", [65], [], [], []))
    add_rule(world.get_location("EastPools.TokkBubbleFree", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has("WaterDash", player) and s.has("EastPools.TokkBubblePurpleWall", player) and cost_all(s, player, options, "EastPools.TokkBubble", "", [40], [], [], []))
    add_rule(world.get_location("EastPools.TokkBubbleFree", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has("EastPools.TokkBubblePurpleWall", player) and cost_all(s, player, options, "EastPools.TokkBubble", "", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1]]))
    add_rule(world.get_location("EastPools.TokkBubblePurpleWall", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has("Bash", player))
    add_rule(world.get_location("EastPools.TokkBubblePurpleWall", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "EastPools.TokkBubble", "", [125], [], [[32, 'Combat']], []))
    add_rule(world.get_location("EastPools.TokkBubblePurpleWall", player), lambda s: s.can_reach_region("EastPools.TokkBubble") and cost_all(s, player, options, "EastPools.TokkBubble", "", [130], [], [], []))
    add_rule(world.get_location("EastPools.LowerWaterDrained", player), lambda s: s.can_reach_region("EastPools.TokkBubble"))
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.LowerWaterDrained", player))
    add_rule(world.get_location("EastPools.LowerWaterDrained", player), lambda s: s.can_reach_region("EastPools.TPArea") and s.has_any(("Glide", "Sword", "Bash"), player))
    add_rule(world.get_location("EastPools.LowerWaterDrained", player), lambda s: s.can_reach_region("EastPools.TPArea") and cost_all(s, player, options, "EastPools.TPArea", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_location("EastPools.LowerWaterDrained", player), lambda s: s.can_reach_region("EastPools.TPArea") and cost_all(s, player, options, "EastPools.TPArea", "", [10], [['Blaze', 1]], [], []))
    add_rule(world.get_location("EastPools.LowerWaterDrained", player), lambda s: s.can_reach_region("EastPools.TPArea") and cost_all(s, player, options, "EastPools.TPArea", "", [], [['Spear', 1]], [], [[1, 'Blaze', 2], [1, 'Flash', 1]]))
    add_rule(world.get_location("EastPools.LowerWaterDrained", player), lambda s: s.can_reach_region("EastPools.TPArea") and cost_all(s, player, options, "EastPools.TPArea", "", [], [['Grenade', 1]], [], [[1, 'Blaze', 2], [1, 'Flash', 1]]))
    add_rule(world.get_location("EastPools.AboveDoorOre", player), lambda s: s.can_reach_region("EastPools.TPArea") and s.has_all(("Sword", "Bash"), player))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "EastPools.TPArea", "EastPools.FishingPool", [40], [], [], []))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("EastPools.ArenaWall", player), lambda s: s.can_reach_region("EastPools.Teleporter") and s.has("Water", player) and s.has("EastPools.LowerWaterDrained", player) and s.has_any(("Launch", "Dash"), player))
    add_rule(world.get_location("EastPools.ArenaWall", player), lambda s: s.can_reach_region("EastPools.Teleporter") and s.has("Bash", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", "", [300], [], [], []))
    add_rule(world.get_location("EastPools.UltraBashShard", player), lambda s: s.can_reach_region("EastPools.Teleporter") and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", "", [240], [], [], []))
    add_rule(world.get_location("EastPools.UltraBashShard", player), lambda s: s.can_reach_region("EastPools.Teleporter") and s.has("Bash", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", "", [220], [], [], []))
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.FishingPool", "EastPools.AboveFishingPool", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("WaterDash", "Hammer"), player) and s.has("Water", player))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("WaterDash", "Hammer"), player) and cost_all(s, player, options, "EastPools.FishingPool", "EastPools.AboveFishingPool", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("EastPools.AboveFishingPool") and s.has("Bash", player) and s.has("Launch", player))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("EastPools.AboveFishingPool") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", "", [], [], [], [[1, 'Grenade', 1]]))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("EastPools.AboveFishingPool") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.AboveFishingPool", "", [20], [], [], []))
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has("DoubleJump", player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", "UpperPools.DrainPuzzleExit", [20], [], [], []))
    add_rule(world.get_location("EastPools.UltraBashShard", player), lambda s: s.can_reach_region("EastPools.NextToLupoOre") and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "", [240], [], [], []))
    add_rule(world.get_location("EastPools.UltraBashShard", player), lambda s: s.can_reach_region("EastPools.NextToLupoOre") and s.has("WaterDash", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "", [180], [], [], []))
    add_rule(world.get_location("EastPools.UltraBashShard", player), lambda s: s.can_reach_region("EastPools.NextToLupoOre") and s.has("Bash", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "", [220], [], [], []))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.LowerWaterDrained", player) and s.has_any(("DoubleJump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "EastPools.Teleporter", [60], [], [], []))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "EastPools.Teleporter", [60], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.Teleporter", player), lambda s: s.has("Bash", player) and s.has("EastPools.LowerWaterDrained", player) and s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "EastPools.Teleporter", [60], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.TPArea", player), lambda s: s.has_any(("Launch", "Grapple", "Glide", "DoubleJump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "EastPools.TPArea", [120], [], [], []))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.TPArea", player), lambda s: True)
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "EastPools.WaterdashArena", [100], [], [], []))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.WaterdashArena", player), lambda s: s.has("WaterDash", player) and s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "EastPools.WaterdashArena", [40], [], [], []))
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", "EastPools.WaterdashArena", [80], [], [], []))
    add_rule(world.get_location("EastPools.LupoPurpleFloor", player), lambda s: s.can_reach_region("EastPools.LupoArea") and s.has_all(("Water", "Bash", "Dash"), player) and s.has("EastPools.LowerWaterDrained", player))
    add_rule(world.get_location("EastPools.BehindCrusherEX", player), lambda s: s.can_reach_region("EastPools.LupoArea") and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.LupoArea", "", [140], [], [], []))
    add_rule(world.get_location("EastPools.BehindCrusherEX", player), lambda s: s.can_reach_region("EastPools.LupoArea") and s.has("WaterDash", player) and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.LupoArea", "", [60], [], [], []))
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.LupoArea", "EastPools.MissilePuzzle", [180], [], [], []))
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.CentralRoom", player), lambda s: s.has("EastPools.LupoPurpleFloor", player) and s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.LupoArea", "EastPools.CentralRoom", [240], [], [], []))
    add_rule(world.get_location("EastPools.FightArenas", player), lambda s: s.can_reach_region("EastPools.WaterdashArena") and s.has("Water", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has_any(("Launch", "Dash"), player) and cost_all(s, player, options, "EastPools.WaterdashArena", "", [], [], [[32, 'Combat', 32, 'Combat', 32, 'Combat', 32, 'Combat'], [40, 'Ranged'], [20, 'Combat', 20, 'Combat']], []))
    add_rule(world.get_location("EastPools.FightArenas", player), lambda s: s.can_reach_region("EastPools.WaterdashArena") and s.has("Water", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "", [], [], [[32, 'Combat', 32, 'Combat', 32, 'Combat', 32, 'Combat'], [40, 'Ranged'], [20, 'Combat', 20, 'Combat']], [[2, 20]]))
    add_rule(world.get_location("EastPools.FightRoomHC", player), lambda s: s.can_reach_region("EastPools.WaterdashArena") and s.has_all(("WaterDash", "Hammer"), player) and s.has("EastPools.FightArenas", player))
    add_rule(world.get_location("EastPools.FightRoomHC", player), lambda s: s.can_reach_region("EastPools.WaterdashArena") and s.has("WaterDash", player) and s.has("EastPools.FightArenas", player) and s.has_any(("Dash", "Glide", "Sword"), player))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.NextToLupoOre", player), lambda s: s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "EastPools.NextToLupoOre", [100], [], [], []))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.NextToLupoOre", player), lambda s: s.has("WaterDash", player) and s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "EastPools.NextToLupoOre", [40], [], [], []))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.NextToLupoOre", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.WaterdashArena", "EastPools.NextToLupoOre", [100], [], [], []))
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.MissilePuzzle", player), lambda s: s.has("Water", player))
    add_rule(world.get_location("EastPools.CentralRoomPurpleWall", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "", [200], [], [], []))
    add_rule(world.get_location("EastPools.CentralRoomPurpleWall", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("Bash", "WaterDash"), player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "", [140], [], [], []))
    add_rule(world.get_location("EastPools.LupoPurpleFloor", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "", [300], [], [], []))
    add_rule(world.get_location("EastPools.LupoPurpleFloor", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("Bash", "WaterDash"), player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "", [200], [], [], []))
    add_rule(world.get_location("EastPools.EnergyHarvestShard", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("WaterDash", "Sword"), player) and s.has("Water", player))
    add_rule(world.get_location("EastPools.EnergyHarvestShard", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("WaterDash", "Sword"), player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("EastPools.EnergyHarvestShard", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("EastPools.EnergyHarvestShard", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has("Bash", player) and s.has("Water", player))
    add_rule(world.get_location("EastPools.EnergyHarvestShard", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "", [], [], [], [[2, 220]]))
    add_rule(world.get_location("EastPools.BehindCrusherEX", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and cost_all(s, player, options, "EastPools.MissilePuzzle", "", [220], [], [], []))
    add_rule(world.get_location("EastPools.BehindCrusherEX", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has("WaterDash", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "", [100], [], [], []))
    add_rule(world.get_location("EastPools.SpiritTrial", player), lambda s: s.can_reach_region("EastPools.MissilePuzzle") and s.has_all(("Water", "Grapple", "WaterDash"), player) and s.has("UpperPools.TrialActivation", player) and s.has("EastPools.CentralRoomPurpleWall", player) and s.has_any(("Glide", "Dash"), player))
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.WaterdashArena", player), lambda s: s.has("Water", player))
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.WaterdashArena", player), lambda s: True)
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.WaterdashArena", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "EastPools.WaterdashArena", [20], [], [], []))
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.LupoArea", player), lambda s: s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", "EastPools.LupoArea", [80], [], [], []))
    add_rule(world.get_location("EastPools.CentralRoomBubbleFree", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has_all(("Water", "Sword"), player) and s.has("Deflector", player))
    add_rule(world.get_location("EastPools.CentralRoomBubbleFree", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("Water", player) and cost_all(s, player, options, "EastPools.CentralRoom", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("EastPools.CentralRoomBubbleFree", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("Water", player) and s.has("Fracture", player) and cost_all(s, player, options, "EastPools.CentralRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("EastPools.CentralRoomBubbleFree", player))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.CentralRoom", "", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has_all(("Bash", "Sword"), player))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and cost_all(s, player, options, "EastPools.CentralRoom", "UpperPools.KeystoneRoomEntrance", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Bash", player) and s.has("EastPools.CentralRoomBubbleFree", player) and cost_all(s, player, options, "EastPools.CentralRoom", "UpperPools.KeystoneRoomEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Water", "WaterBreath", "Launch"), player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Water", "WaterBreath", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "EastPools.CentralRoom", "WestPools.Teleporter", [20], [], [], []))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.LupoArea", player), lambda s: s.has("EastPools.CentralRoomPurpleWall", player) and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.CentralRoom", "EastPools.LupoArea", [200], [], [], []))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has_all(("Water", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "", [20], [], [], []))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "", [120], [], [], []))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "", [40], [], [], []))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has("Launch", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "", [100], [], [], []))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomEntrance") and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "", [140], [], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Dash", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "UpperPools.KeystoneRoomBubbleSpawner", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_WestPools.Teleporter", player), lambda s: s.has_all(("Water", "Launch"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_WestPools.Teleporter", player), lambda s: s.has_all(("Water", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "WestPools.Teleporter", [20], [], [], []))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and can_keystones(s, player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "", [20], [], [], []))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "", [120], [], [], []))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "", [40], [], [], []))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and s.has("Launch", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "", [100], [], [], []))
    add_rule(world.get_location("UpperPools.LowerKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoomBubbleSpawner") and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "", [140], [], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Dash", player) and can_keystones(s, player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Flap", "Grapple"), player) and can_keystones(s, player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Flap", "Grapple"), player) and can_keystones(s, player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "UpperPools.RightBubbleSpamRoom", [], [], [], [[1, 'Shuriken', 3]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomEntrance", player), lambda s: can_keystones(s, player))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("WaterDash", "DoubleJump"), player) and s.has("Water", player))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has_all(("WaterDash", "DoubleJump"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("Grapple", player) and s.has("Water", player))
    add_rule(world.get_location("UpperPools.UpperRightKS", player), lambda s: s.can_reach_region("UpperPools.KeystoneRoom") and s.has("Grapple", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("WaterDash", player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [20], [], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("WaterDash", "Water"), player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("WaterDash", "Water"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", "UpperPools.BeforeKeystoneDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Dash", "Hammer", "Bash"), player))
    add_rule(world.get_location("UpperPools.TrialActivation", player), lambda s: s.can_reach_region("UpperPools.BeforeKeystoneDoor") and s.has("Dash", player))
    add_rule(world.get_location("UpperPools.UpperMidKS", player), lambda s: s.can_reach_region("UpperPools.BeforeKeystoneDoor"))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.BeforeKeystoneDoor") and s.has("DoubleJump", player) and s.has("Hammer", player))
    add_rule(world.get_location("UpperPools.UpperLeftKS", player), lambda s: s.can_reach_region("UpperPools.BeforeKeystoneDoor") and s.has("DoubleJump", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "UpperPools.RightBubbleSpamRoom", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grapple", player) and s.has("UltraGrapple", player) and s.has_any(("Sword", "Hammer", "DoubleJump", "Dash", "Bash", "Glide"), player))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grapple", player) and s.has("UltraGrapple", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "UpperPools.RightBubbleSpamRoom", [], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Glide"), player))
    add_rule(world.get_location("UpperPools.TreeRoomLeftBubbleFree", player), lambda s: s.can_reach_region("UpperPools.TreeRoomEntrance") and cost_all(s, player, options, "UpperPools.TreeRoomEntrance", "", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1], [1, 'Spear', 1]]))
    add_rule(world.get_location("UpperPools.RoofEX", player), lambda s: s.can_reach_region("UpperPools.TreeRoomEntrance") and s.has("Dash", player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player))
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has("Flap", player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player))
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has("Dash", player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player))
    add_rule(world.get_location("UpperPools.TreeRoomLeftBubbleFree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and cost_all(s, player, options, "UpperPools.TreeRoom", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperPools.TreeRoomLeftBubbleFree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", "", [20], [], [], []))
    add_rule(world.get_location("UpperPools.TreeRoomRightBubbleFree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and cost_all(s, player, options, "UpperPools.TreeRoom", "", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperPools.TreeRoomRightBubbleFree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", "", [20], [], [], []))
    add_rule(world.get_location("UpperPools.ButtonDoorAboveTree", player), lambda s: s.can_reach_region("UpperPools.TreeRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", "", [60], [], [], []))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperPools.RoofEX", player), lambda s: s.can_reach_region("UpperPools.AboveTree") and s.has_all(("DoubleJump", "Sword"), player) and cost_all(s, player, options, "UpperPools.AboveTree", "", [], [], [[1, 'Ranged']], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Water", "Grapple", "DoubleJump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Water", "Launch", "Dash"), player))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Water", "WaterDash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [40], [], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Water", "DoubleJump", "Sword"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [20], [], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [100], [], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Grapple", "DoubleJump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [100], [], [], [[1, 'Spear', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Launch", "Dash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [100], [], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has("Launch", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [120], [], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("WaterDash", "Launch"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [60], [], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("WaterDash", "Grapple"), player) and s.has_any(("DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [60], [], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("WaterDash", "Grapple"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [60], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("WaterDash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [100], [], [], []))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Grapple", "Hammer"), player))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has_all(("Grapple", "Dash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Grapple", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [80], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [20], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("UpperPools.DrainRoomPurpleWall", player) and s.has("Sword", player))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Hammer", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Bash", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleRight", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has("Bash", player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "UpperPools.DrainPuzzleExit", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_location("E.UpperPools.DrainPuzzleRight", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleRight") and s.has("UpperPools.UpperWaterDrained", player) and s.has("oki: BreakCrystal", player))
    add_rule(world.get_location("UpperPools.DrainRoomPurpleWall", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleRight") and s.has_all(("Water", "Launch"), player))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleRight") and s.has_all(("WaterDash", "Bash", "Water"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleRight") and s.has_all(("WaterDash", "Bash", "Water"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "", [], [['Grenade', 1]], [], [[1, 'Spear', 1]]))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleRight") and s.has_all(("WaterDash", "Bash"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "", [60], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleRight") and s.has_all(("WaterDash", "Bash"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "", [60], [['Grenade', 1]], [], [[1, 'Spear', 1]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("DoubleJump", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has("Water", player) and s.has("UpperPools.UpperWaterDrained", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Bash", "Launch", "Sword", "Hammer"), player))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has("Water", player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "", [], [], [], [[1, 'Shuriken', 2]]))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has("UpperPools.UpperWaterDrained", player) and s.has_any(("DoubleJump", "Dash", "Glide", "Launch", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "", [20], [], [], []))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "", [20], [], [], [[1, 'Shuriken', 2]]))
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleExit") and s.has("Bash", player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", "", [20, 20], [], [], []))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has_any(("Sword", "Hammer", "DoubleJump", "Dash", "Glide"), player))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [], [], [], [[1, 'Sentry', 2], [1, 'Shuriken', 1]]))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("Grapple", player) and s.has("UltraGrapple", player))
    add_rule(world.get_location("UpperPools.FishPoolEX", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [25], [], [], []))
    add_rule(world.get_location("UpperPools.FishPoolEX", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("Bash", player))
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("Dash", player))
    add_rule(world.get_location("UpperPools.RightBubblesEX", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("Water", player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.RightBubblesEX", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [], [['Grenade', 1]], [], [[2, 140]]))
    add_rule(world.get_location("UpperPools.RightBubblesEX", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("WaterDash", player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [80], [], [], []))
    add_rule(world.get_location("UpperPools.RightBubblesEX", player), lambda s: s.can_reach_region("UpperPools.LeftBubbleSpamRoom") and s.has_all(("Water", "Bash"), player))
    add_rule(world.get_location("UpperPools.RightBubblesEX", player), lambda s: s.can_reach_region("UpperPools.LeftBubbleSpamRoom") and s.has("Bash", player) and s.has("Launch", player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", "", [120, 140], [], [], []))
    add_rule(world.get_location("UpperPools.RightBubblesEX", player), lambda s: s.can_reach_region("UpperPools.LeftBubbleSpamRoom") and s.has_all(("Water", "DoubleJump"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("WaterDash", "Sword"), player) and s.has("Water", player))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("WaterDash", "Sword"), player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", "UpperPools.RightBubbleSpamRoom", [], [], [], [[2, 120]]))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Water", player) and s.has("Launch", player))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", "UpperPools.RightBubbleSpamRoom", [60], [], [], []))
    add_rule(world.get_location("WestPools.TpEX", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has("Bash", player) and cost_all(s, player, options, "WestPools.Teleporter", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WestPools.TpEX", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has_all(("WaterDash", "Dash", "Hammer"), player) and s.has("Water", player))
    add_rule(world.get_location("WestPools.TpEX", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has_all(("WaterDash", "Dash", "Hammer"), player) and cost_all(s, player, options, "WestPools.Teleporter", "", [], [], [], [[2, 20]]))
    add_rule(world.get_location("WestPools.TpEX", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("WestPools.TpEX", player), lambda s: s.can_reach_region("WestPools.Teleporter") and cost_all(s, player, options, "WestPools.Teleporter", "", [], [], [], [[1, 'Sentry', 2], [1, 'Blaze', 2]]))
    add_rule(world.get_location("WestPools.BurrowOre", player), lambda s: s.can_reach_region("WestPools.Teleporter") and s.has_all(("Water", "Burrow"), player) and s.has("WestPools.ForestsStrength", player))
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("Water", player))
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("Bash", player) and s.has("WestPools.ForestsStrength", player) and cost_all(s, player, options, "WestPools.Teleporter", "WestPools.LeftKwolokPlatform", [160], [], [], []))
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("Burrow", player) and s.has_any(("DoubleJump", "Launch"), player) and cost_all(s, player, options, "WestPools.Teleporter", "WestPools.LeftKwolokPlatform", [200], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("WestPools.Teleporter_to_EastPools.CentralRoom", player), lambda s: s.has_all(("Water", "WaterBreath"), player))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.Teleporter", player), lambda s: s.has("Water", player))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("WestPools.EscapeRevisitEX", player), lambda s: s.can_reach_region("WestPools.RightKwolokPlatform") and cost_all(s, player, options, "WestPools.RightKwolokPlatform", "", [80], [], [], []))
    add_rule(world.get_location("WestPools.EscapeRevisitEX", player), lambda s: s.can_reach_region("WestPools.RightKwolokPlatform") and s.has("WaterDash", player) and cost_all(s, player, options, "WestPools.RightKwolokPlatform", "", [40], [], [], []))
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player))
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("Launch", player) and s.has_any(("Water", "DoubleJump", "Dash", "Glide", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WestPools.RightKwolokPlatform", "WestPools.LeftKwolokPlatform", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]]))
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Water", player) and cost_all(s, player, options, "WestPools.RightKwolokPlatform", "UpperPools.KeystoneRoomEntrance", [], [], [[20, 'Wall']], [[1, 'Shuriken', 0], [1, 'Grenade', 0], [1, 'Bow', 0]]))
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "KwolokEscape", "KwolokFight", [160], [], [], []))
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Dash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("Water", player))
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Dash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "KwolokEscape", "KwolokFight", [], [], [], [[2, 160]]))
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("WaterDash", "Bash", "DoubleJump"), player) and s.has("Water", player) and cost_all(s, player, options, "KwolokEscape", "KwolokFight", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("WaterDash", "Bash", "DoubleJump"), player) and cost_all(s, player, options, "KwolokEscape", "KwolokFight", [], [['Grenade', 1]], [], [[2, 100]]))
    add_rule(world.get_location("WestPools.ForestsStrength", player), lambda s: s.can_reach_region("KwolokFight") and cost_all(s, player, options, "KwolokFight", "", [], [], [[250, 'Boss']], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [30], [], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and s.has("Sword", player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [], [], [], [[1, 'Sentry', 3]]))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [], [], [], [[1, 'Spear', 2], [1, 'Blaze', 2]]))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.WestTP", "LowerWastes.SunsetView", [], [], [], [[1, 'Shuriken', 3], [1, 'Sentry', 4]]))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "DoubleJump"), player) and s.has("WindtornRuins.Seir", player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerWastes.PurpleWallEX", player), lambda s: s.can_reach_region("LowerWastes.SunsetView") and s.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.WestTP", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SunsetView", "LowerWastes.WestTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.WestTP", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.SunsetView", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: True)
    add_rule(world.get_location("LowerWastes.SandPotEX", player), lambda s: s.can_reach_region("LowerWastes.SandPot") and s.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerWastes.SandPot", "LowerWastes.WoodenBridge", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 30]]))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Dash", "Burrow"), player))
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Glide", player))
    add_rule(world.get_location("LowerWastes.MuncherPitEX", player), lambda s: s.can_reach_region("LowerWastes.WoodenBridge") and s.has("Sword", player))
    add_rule(world.get_location("LowerWastes.MuncherPitEX", player), lambda s: s.can_reach_region("LowerWastes.WoodenBridge") and cost_all(s, player, options, "LowerWastes.WoodenBridge", "", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerWastes.MuncherPitEX", player), lambda s: s.can_reach_region("LowerWastes.WoodenBridge") and s.has("Dash", player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", "LowerWastes.MinesEntranceEnemyPaths", [], [], [[60, 'Combat'], [32, 'Combat']], [[1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", "LowerWastes.MinesEntranceEnemyPaths", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_location("LowerWastes.BottomRightEX", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("LowerWastes.BottomRightHC", player), lambda s: s.can_reach_region("LowerWastes.MinesEntrance") and s.has("Bash", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", "", [], [], [[60, 'Combat']], []))
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", "LowerWastes.BeforeMinesEntrance", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("LowerWastes.SandPlatformLever", player), lambda s: s.can_reach_region("LowerWastes.LeverArea"))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Dash", player) and s.has("LowerWastes.SandPlatformLever", player))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.LeverArea", "LowerWastes.LastStandArea", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("Burrow", player) and s.has("LowerWastes.SandPlatformLever", player))
    add_rule(world.get_location("LowerWastes.MuncherClimbEX", player), lambda s: s.can_reach_region("LowerWastes.MuncherClimb") and s.has_all(("Grapple", "Sword"), player))
    add_rule(world.get_location("LowerWastes.MuncherClimbEX", player), lambda s: s.can_reach_region("LowerWastes.MuncherClimb") and s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", "", [], [['Spear', 1]], [], []))
    add_rule(world.get_location("LowerWastes.MuncherClimbEX", player), lambda s: s.can_reach_region("LowerWastes.MuncherClimb") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", "", [30], [], [], []))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("Burrow", player) and s.has("LowerWastes.SandPlatformLever", player))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", "LowerWastes.SkeetoHive", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2], [2, 30]]))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", "LowerWastes.SkeetoHive", [30], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", "LowerWastes.SkeetoHive", [30], [], [], []))
    add_rule(world.get_location("LowerWastes.LastStandEX", player), lambda s: s.can_reach_region("LowerWastes.LastStandArea") and s.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.ThirstyGorlek", [30], [], [], []))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.ThirstyGorlek", [30], [], [], []))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.MuncherClimb", [30], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 3]]))
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.MuncherClimb", [60], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]]))
    add_rule(world.get_location("LowerWastes.LupoMap", player), lambda s: s.can_reach_region("LowerWastes.ThirstyGorlek") and s.has("DoubleJump", player) and s.has("SpiritLight", player) and s.has("TripleJump", player) and s.has("Sword", player))
    add_rule(world.get_location("LowerWastes.LupoMap", player), lambda s: s.can_reach_region("LowerWastes.ThirstyGorlek") and s.has("DoubleJump", player) and s.has("SpiritLight", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerWastes.ThirstyGorlek", "", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.SkeetoHive", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("LowerWastes.UpperPathHiddenEX", player), lambda s: s.can_reach_region("LowerWastes.UpperPath") and s.has("Burrow", player))
    add_rule(world.get_location("LowerWastes.EastTPOre", player), lambda s: s.can_reach_region("LowerWastes.EastTP") and s.has("Dash", player) and cost_all(s, player, options, "LowerWastes.EastTP", "", [60], [], [[20, 'Wall']], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("LowerWastes.EastTPOre", player), lambda s: s.can_reach_region("LowerWastes.EastTP") and s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.EastTP", "", [30], [], [[20, 'Wall']], []))
    add_rule(world.get_location("LowerWastes.EastTPOre", player), lambda s: s.can_reach_region("LowerWastes.EastTP") and s.has("Dash", player) and cost_all(s, player, options, "LowerWastes.EastTP", "", [30], [], [[20, 'Wall']], [[1, 'Spear', 2]]))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Burrow", player) and can_keystones(s, player))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("DoubleJump", player) and can_keystones(s, player) and s.has("TripleJump", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("DoubleJump", player) and can_keystones(s, player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [], [], [], [[2, 30]]))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Bash", "DoubleJump"), player) and can_keystones(s, player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("DoubleJump", player) and can_keystones(s, player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [30], [], [], []))
    add_rule(world.get_location("UpperWastes.LowerKS", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom"))
    add_rule(world.get_location("UpperWastes.TurmoilShard", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Burrow", "Launch"), player))
    add_rule(world.get_location("UpperWastes.TurmoilShard", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Burrow", "Bash"), player) and s.has_any(("Dash", "DoubleJump"), player))
    add_rule(world.get_location("UpperWastes.TurmoilShard", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Burrow", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [36], [], [], []))
    add_rule(world.get_location("UpperWastes.TurmoilShard", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Burrow", "DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has_any(("Hammer", "Sword"), player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [6], [], [], []))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Bash", player))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("DoubleJump", "Dash", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has("Burrow", player) and can_keystones(s, player))
    add_rule(world.get_location("UpperWastes.LedgeEC", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleLeft") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("C.UpperWastes.MissilePuzzleMiddle", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleMiddle") and s.has("Burrow", player) and s.has_any(("Dash", "Launch"), player))
    add_rule(world.get_location("UpperWastes.LeverDoor", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleMiddle") and s.has("Burrow", player) and s.has_any(("Dash", "Launch"), player))
    add_rule(world.get_location("UpperWastes.PurpleWallEX", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleMiddle") and s.has("Burrow", player))
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.RuinsApproach", player), lambda s: s.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has_all(("Burrow", "Bash"), player))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has("Burrow", player) and s.has("Sword", player))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.RuinsApproach", "", [], [], [], [[1, 'Shuriken', 3]]))
    add_rule(world.get_entrance("UpperWastes.RuinsApproach_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player))
    add_rule(world.get_location("UpperWastes.FlowersSeed", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [], [['Grenade', 1], ['Shuriken', 1]], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 30]]))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [], [['Grenade', 2]], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]]))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Dash"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [30], [], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [30], [], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "DoubleJump"), player))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "DoubleJump", "Hammer"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: True)
    add_rule(world.get_location("WindtornRuins.RuinsLever", player), lambda s: s.can_reach_region("WindtornRuins.UpperRuinsDoor") and s.has("Burrow", player) and cost_all(s, player, options, "WindtornRuins.UpperRuinsDoor", "", [], [], [], [[1, 'Sentry', 2], [1, 'Grenade', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.RuinsTP", player), lambda s: s.has("Burrow", player))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda s: s.has("Burrow", player))
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.LowerRuins", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Sword", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", "WindtornRuins.BrokenMural", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "DoubleJump"), player))
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Hammer"), player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", "WindtornRuins.BrokenMural", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "Grapple"), player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.Escape", "", [10], [], [], []))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "Grapple"), player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.Escape", "", [], [], [], [[1, 'Blaze', 5], [1, 'Flash', 5]]))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "Dash"), player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.Escape", "", [40], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1]]))
    add_rule(world.get_location("WeepingRidge.ElevatorFightCompleted", player), lambda s: s.can_reach_region("WeepingRidge.Bottom") and s.has("Sword", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "WeepingRidge.Bottom", "", [], [], [[80, 'Combat', 80, 'Combat'], [50, 'Combat', 50, 'Combat']], []))
    add_rule(world.get_location("WeepingRidge.ElevatorFightCompleted", player), lambda s: s.can_reach_region("WeepingRidge.Bottom") and s.has("Glide", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "WeepingRidge.Bottom", "", [], [], [[80, 'Combat', 80, 'Combat'], [50, 'Combat', 50, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Glide", "Sword"), player))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.LaunchArea") and s.has_all(("Bash", "Glide"), player))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.LaunchArea") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.LaunchArea") and s.has_all(("DoubleJump", "Sword"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "", [40], [['Bow', 1]], [], []))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.LaunchArea") and s.has_all(("Bash", "DoubleJump"), player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WeepingRidge.AboveTree", [40], [], [], []))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has("Dash", player) and s.has_any(("Hammer", "DoubleJump"), player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WeepingRidge.AboveTree", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has("Launch", player) and s.has("WeepingRidge.ElevatorFightCompleted", player))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WillowsEnd.Entry", [], [['Grenade', 3]], [], []))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WeepingRidge.Bottom", [], [], [], [[1, 'Shuriken', 3], [1, 'Sentry', 3]]))
    add_rule(world.get_location("WeepingRidge.PortalEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [40], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WeepingRidge.PortalEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [40, 80], [], [], []))
    add_rule(world.get_location("WeepingRidge.SpikeClimbEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [], [['Grenade', 3]], [], []))
    add_rule(world.get_location("WeepingRidge.SpikeClimbEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "Hammer"), player))
    add_rule(world.get_location("WeepingRidge.SpikeClimbEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has_all(("DoubleJump", "Hammer"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [40], [], [], []))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has("Bash", player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [40], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "WeepingRidge.LaunchArea", [40], [], [], []))
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "WeepingRidge.LaunchArea", [], [['Grenade', 2]], [], []))
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "WeepingRidge.LaunchArea", [40], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.Entry") and s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.Entry", "", [], [['Grenade', 2]], [], []))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.Entry") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.Entry", "", [20], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and s.has_any(("Dash", "WillowsEnd.PortalShortcut"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.InnerTP", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.InnerTP", [], [['Grenade', 1]], [], [[1, 'Grenade', 1], [2, 40]]))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player) and s.has("WillowsEnd.PortalShortcut", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.InnerTP", [20], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("TripleJump", player) and s.has("Dash", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.InnerTP", [20], [], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("DoubleJump", "Bash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.InnerTP", [20], [], [], [[1, 'Grenade', 1], [2, 40]]))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Bash", "Glide", "DoubleJump", "Grapple"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeartMidPoint", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Sword", "DoubleJump", "Bash"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeart", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeart", [20], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.Entry", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.Entry", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("WillowsEnd.PoisonfallHC", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and s.has("DoubleJump", player))
    add_rule(world.get_location("WillowsEnd.PoisonfallHC", player), lambda s: s.can_reach_region("WillowsEnd.GrappleHeart") and s.has("Hammer", player) and s.has("WillowsEnd.GrappleWheelsHeart", player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Glide", player) and s.has("WillowsEnd.GrappleWheelsHeart", player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "WillowsEnd.Entry", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Dash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", "WillowsEnd.Entry", [40], [], [], []))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Bash", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [40], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [40], [], [], []))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [40], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Grapple", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [], [], [], [[1, 'Spear', 2], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("WillowsEnd.PortalShortcut", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "WillowsEnd.InnerTP", [], [], [], [[1, 'Spear', 2], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Bash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "WillowsEnd.InnerTP", [], [['Grenade', 1]], [], [[1, 'Spear', 2], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Bash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "WillowsEnd.InnerTP", [40], [], [], [[1, 'Spear', 2], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "DoubleJump", "Bash"), player) and s.has("TripleJump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has_any(("Bash", "DoubleJump"), player))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.InnerTP", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Bash", "Dash"), player))
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("DoubleJump", "Sword"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Dash", player) and s.has_any(("Bash", "Sword"), player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("DoubleJump", player))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.Upper", player), lambda s: s.has("Bash", player))
    add_rule(world.get_location("E.WillowsEnd.RedirectHeartPath", player), lambda s: s.can_reach_region("WillowsEnd.RedirectHeartPath") and s.has("BreakCrystal", player))
    add_rule(world.get_location("WillowsEnd.RedirectEX", player), lambda s: s.can_reach_region("WillowsEnd.RedirectHeartPuzzle") and s.has("Launch", player))
    add_rule(world.get_location("WillowsEnd.RedirectEX", player), lambda s: s.can_reach_region("WillowsEnd.RedirectHeartPuzzle") and s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", "", [160], [['Grenade', 1]], [[10, 'Wall']], []))
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has_all(("DoubleJump", "Sword"), player))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda s: s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("DoubleJump", player) and s.has("Combat.Dangerous", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.West", "WillowsEnd.Upper", [], [], [[10, 'Wall'], [60, 'Combat']], []))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("DoubleJump", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "WillowsEnd.West", "WillowsEnd.Upper", [], [], [[10, 'Wall'], [60, 'Combat']], [[2, 40]]))
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.GlideRooms", player), lambda s: True)
    add_rule(world.get_location("WillowsEnd.WindSpinOre", player), lambda s: s.can_reach_region("WillowsEnd.GlideRooms") and s.has_all(("Launch", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("WillowsEnd.UpperLeftEX", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartPath") and s.has("Launch", player))
    add_rule(world.get_location("WillowsEnd.UpperLeftEX", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartPath") and s.has_all(("DoubleJump", "Grapple", "Bash"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Launch", player) and s.has("DoubleJump", player))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", "WillowsEnd.UpperHeartCheckpoint", [], [], [], [[2, 40]]))
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("DoubleJump", "Grapple", "Bash"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("WillowsEnd.UpperRightEX", player), lambda s: s.can_reach_region("WillowsEnd.UpperHeartCheckpoint") and s.has("DoubleJump", player))


def set_unsafe_glitched_rules(world, player, options):
    """Unsafe rules with glitches."""
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "MarshSpawn.Main", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "MarshSpawn.Main", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "MarshSpawn.Main", "", [], [['Sentry', 2]], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [2, 10]]))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has("Grapple", player))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has_all(("Grapple", "Grenade"), player))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has("Grapple", player) and cost_all(s, player, options, "MarshSpawn.Main", "", [], [['Blaze', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has("DoubleJump", player) and s.has("HammerJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("MarshSpawn.GrappleHC", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has("Flash", player))
    add_rule(world.get_location("MarshSpawn.BridgeEX", player), lambda s: s.can_reach_region("MarshSpawn.Main"))
    add_rule(world.get_location("MarshSpawn.BridgeEX", player), lambda s: s.can_reach_region("MarshSpawn.Main") and s.has("Flash", player))
    add_rule(world.get_location("MarshSpawn.BashEC", player), lambda s: s.can_reach_region("MarshSpawn.BrokenBridge") and s.has("Grenade", player))
    add_rule(world.get_location("MarshSpawn.LeverEC", player), lambda s: s.can_reach_region("MarshSpawn.CaveEntrance") and cost_all(s, player, options, "MarshSpawn.CaveEntrance", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_location("MarshSpawn.TokkBarrier", player), lambda s: s.can_reach_region("MarshSpawn.Cave") and s.has("Hammer", player))
    add_rule(world.get_location("MarshSpawn.TokkBarrier", player), lambda s: s.can_reach_region("MarshSpawn.Cave"))
    add_rule(world.get_location("MarshSpawn.CaveKS", player), lambda s: s.can_reach_region("MarshSpawn.Cave") and s.has("Glide", player))
    add_rule(world.get_location("MarshSpawn.CaveKS", player), lambda s: s.can_reach_region("MarshSpawn.Cave") and s.has("Grenade", player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "WaterDash"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "MarshSpawn.LeftSpawnSignpost", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "WaterDash"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "MarshSpawn.LeftSpawnSignpost", [10], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "MarshSpawn.LeftSpawnSignpost", [20], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "MarshSpawn.LeftSpawnSignpost", [20], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Water"), player))
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Water"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", "MarshSpawn.LeftSpawnSignpost", [], [['Blaze', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.CaveOre", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and s.has("Glide", player))
    add_rule(world.get_location("MarshSpawn.CaveOre", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "", [], [['Blaze', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.CaveOre", player), lambda s: s.can_reach_region("MarshSpawn.PoolsBurrowsSignpost") and s.has("Grenade", player))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Grenade", "DoubleJump"), player))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Grenade", "DoubleJump"), player) and s.has_any(("Bash", "Glide"), player))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Grenade", "DoubleJump"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.BeforeBurrows", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.BeforeBurrows", [30], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.BeforeBurrows", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("HammerJump", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", "MarshSpawn.BeforeBurrows", [10], [], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.can_reach_region("MarshSpawn.BeforeBurrows") and s.has("DoubleJump", player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.can_reach_region("MarshSpawn.BeforeBurrows") and s.has_all(("Grenade", "DoubleJump"), player))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", "MarshSpawn.BurrowsEntry", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Grenade", "DoubleJump"), player) and s.has_any(("TripleJump", "Bash"), player))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has_all(("Burrow", "Water"), player))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has_all(("Burrow", "Water", "Flash"), player))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "", [20], [], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has_all(("Burrow", "Flash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "", [20], [], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has_all(("Burrow", "WaterDash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "", [10], [], [], []))
    add_rule(world.get_location("MarshSpawn.BurrowOre", player), lambda s: s.can_reach_region("MarshSpawn.LeftSpawnSignpost") and s.has_all(("Burrow", "WaterDash", "Flash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("DoubleJump", player) and s.has("HammerJump", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.PoolsPath", [6], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Flash", player))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Water"), player))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Water", "Flash"), player))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.BurrowFightArena", [20], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Flash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.BurrowFightArena", [20], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "WaterDash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.BurrowFightArena", [10], [], [], []))
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "WaterDash", "Flash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", "MarshSpawn.BurrowFightArena", [10], [], [], []))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and s.has("Flash", player))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and cost_all(s, player, options, "MarshSpawn.PoolsPath", "", [], [['Blaze', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath") and cost_all(s, player, options, "MarshSpawn.PoolsPath", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.PoolsPathEX", player), lambda s: s.can_reach_region("MarshSpawn.PoolsPath"))
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: s.has("Glide", player))
    add_rule(world.get_location("MarshSpawn.RecklessShard", player), lambda s: s.can_reach_region("MarshSpawn.MokkTheBrave") and s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "", [], [['Blaze', 1]], [[10, 'Wall']], []))
    add_rule(world.get_location("MarshSpawn.RecklessShard", player), lambda s: s.can_reach_region("MarshSpawn.MokkTheBrave") and s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "", [], [], [[10, 'Wall']], []))
    add_rule(world.get_location("MarshSpawn.RecklessShard", player), lambda s: s.can_reach_region("MarshSpawn.MokkTheBrave") and s.has("MarshSpawn.HowlBurnt", player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "", [], [['Blaze', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.RecklessShard", player), lambda s: s.can_reach_region("MarshSpawn.MokkTheBrave") and s.has("MarshSpawn.HowlBurnt", player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Grenade", player) and s.has("MarshSpawn.HowlBurnt", player))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", "MarshSpawn.AboveHowlArena", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.AboveHowlArena") and s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.AboveHowlArena") and s.has("WaveDash", player))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.AboveHowlArena") and s.has("Dash", player) and cost_all(s, player, options, "MarshSpawn.AboveHowlArena", "", [], [['Blaze', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.AboveHowlArena") and s.has("Dash", player) and cost_all(s, player, options, "MarshSpawn.AboveHowlArena", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.AboveHowlArena") and cost_all(s, player, options, "MarshSpawn.AboveHowlArena", "", [], [['Blaze', 2]], [], []))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.AboveHowlArena") and cost_all(s, player, options, "MarshSpawn.AboveHowlArena", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: True)
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: s.has("Flash", player))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.FangPlatform") and s.has("HammerJump", player))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.FangPlatform") and s.has("Flash", player))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.FangPlatform") and cost_all(s, player, options, "MarshSpawn.FangPlatform", "", [], [['Blaze', 2]], [], []))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.FangPlatform") and cost_all(s, player, options, "MarshSpawn.FangPlatform", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.FangPlatform") and s.has("Grenade", player) and s.has("DoubleJump", player))
    add_rule(world.get_location("MarshSpawn.FangEC", player), lambda s: s.can_reach_region("MarshSpawn.FangPlatform") and s.has("Grenade", player) and cost_all(s, player, options, "MarshSpawn.FangPlatform", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Flash", player))
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Hammer", player))
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_HowlsDen.MidwayBottomLoop", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_HowlsDen.MidwayBottomLoop", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", "HowlsDen.UpperLoopExit", [], [['Blaze', 1]], [], []))
    add_rule(world.get_location("HowlsDen.AboveDoorKS", player), lambda s: s.can_reach_region("HowlsDen.BoneBridge") and s.has("Grenade", player))
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.UpperLoopEntrance", player), lambda s: s.has_all(("Grenade", "DoubleJump"), player))
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.UpperLoopEntrance", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.UpperLoopEntrance", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "DoubleJump"), player) and cost_all(s, player, options, "HowlsDen.BoneBridge", "HowlsDen.UpperLoopEntrance", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has_all(("Bash", "Grapple", "Grenade"), player) and s.has("HowlsDen.RainLifted", player))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.BoneBridgeDoor", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.BoneBridgeDoor", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: True)
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom"))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom") and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "", [], [['Blaze', 1]], [], []))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom") and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom") and s.has("Flash", player))
    add_rule(world.get_location("HowlsDen.LeftHC", player), lambda s: s.can_reach_region("HowlsDen.LeftSecretRoom") and s.has("Grenade", player))
    add_rule(world.get_location("HowlsDen.BoneBarrier", player), lambda s: s.can_reach_region("HowlsDen.AboveTeleporter") and cost_all(s, player, options, "HowlsDen.AboveTeleporter", "", [], [], [[100.0, 'Shuriken']], []))
    add_rule(world.get_location("HowlsDen.BoneBarrier", player), lambda s: s.can_reach_region("HowlsDen.AboveTeleporter") and s.has("Hammer", player))
    add_rule(world.get_location("HowlsDen.BoneBarrier", player), lambda s: s.can_reach_region("HowlsDen.AboveTeleporter"))
    add_rule(world.get_location("HowlsDen.LaserKS", player), lambda s: s.can_reach_region("HowlsDen.Teleporter") and s.has("Grenade", player))
    add_rule(world.get_location("HowlsDen.LaserKS", player), lambda s: s.can_reach_region("HowlsDen.Teleporter") and s.has("Glide", player))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has("Flash", player))
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: True)
    add_rule(world.get_location("HowlsDen.DoubleJumpEX", player), lambda s: s.can_reach_region("HowlsDen.DoubleJumpTreeLedge") and s.has("SwordJump", player))
    add_rule(world.get_location("HowlsDen.DoubleJumpEX", player), lambda s: s.can_reach_region("HowlsDen.DoubleJumpTreeLedge") and s.has("Grenade", player))
    add_rule(world.get_location("HowlsDen.DoubleJumpEX", player), lambda s: s.can_reach_region("HowlsDen.DoubleJumpTreeLedge") and s.has("HammerJump", player))
    add_rule(world.get_location("MidnightBurrows.HowlsDenShortcut", player), lambda s: s.can_reach_region("HowlsDen.DoubleJumpTreeArea") and cost_all(s, player, options, "HowlsDen.DoubleJumpTreeArea", "", [], [], [[20, 'Shuriken']], []))
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: True)
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Flash", player))
    add_rule(world.get_location("MarshSpawn.ToOpherBarrier", player), lambda s: s.can_reach_region("MarshPastOpher.MillView") and s.has("Hammer", player))
    add_rule(world.get_location("MarshSpawn.ToOpherBarrier", player), lambda s: s.can_reach_region("MarshPastOpher.MillView"))
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has("SwordJump", player) and cost_all(s, player, options, "MarshPastOpher.MillView", "MarshPastOpher.OpherSkipBranch", [20], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has("DoubleJump", player) and s.has("HammerJump", player))
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("HammerJump", player) and s.has("DoubleJump", player))
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("HammerJump", player) and cost_all(s, player, options, "MarshPastOpher.OpherSkipBranch", "MarshPastOpher.PoolsPathEast", [], [], [], [[2, 10]]))
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: True)
    add_rule(world.get_location("MarshPastOpher.TrunkWall", player), lambda s: s.can_reach_region("MarshPastOpher.UnderTrunk") and cost_all(s, player, options, "MarshPastOpher.UnderTrunk", "", [], [], [[40, 'Shuriken']], []))
    add_rule(world.get_location("MarshPastOpher.TrialEC", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has("Grenade", player))
    add_rule(world.get_location("MarshPastOpher.TrialRightEX", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has("Grenade", player))
    add_rule(world.get_location("MarshPastOpher.TrialRightEX", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has("Glide", player))
    add_rule(world.get_location("MarshPastOpher.TrialRightEX", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and cost_all(s, player, options, "MarshPastOpher.TrialArea", "", [], [['Blaze', 1]], [], []))
    add_rule(world.get_location("MarshPastOpher.TrialRightEX", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and cost_all(s, player, options, "MarshPastOpher.TrialArea", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("MarshPastOpher.TrialRightEX", player), lambda s: s.can_reach_region("MarshPastOpher.TrialArea") and s.has("Flash", player))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has("Flash", player))
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.OpherSkipBranch", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has("Glide", player) and s.has("WaveDash", player))
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has("DoubleJump", player) and s.has("WaveDash", player) and s.has_any(("Sword", "Hammer"), player))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: True)
    add_rule(world.get_location("MarshPastOpher.CeilingEX", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathEast") and s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("MarshPastOpher.CeilingEX", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathEast") and s.has("Grenade", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("MarshPastOpher.CeilingEX", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathEast") and s.has("Grenade", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("MarshPastOpher.PoolsPathEC", player), lambda s: s.can_reach_region("MarshPastOpher.PoolsPathMiddle"))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathOneWayWall", [], [], [[40, 'Shuriken']], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathOneWayWall", [], [], [[40, 'Shuriken']], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", "MarshPastOpher.PoolsPathOneWayWall", [], [], [[40, 'Shuriken']], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Flash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", "MarshPastOpher.PoolsPathWest", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", "MarshPastOpher.PoolsPathWest", [10], [], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("HammerJump", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Flash", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", "MarshPastOpher.PoolsPathEast", [], [['Spear', 1], ['Blaze', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathOneWayWall", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: True)
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("Water", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Sentry', 1]], [], [[2, 10]]))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", "MidnightBurrows.BelowUpperKS", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("DoubleJump", player) and s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", "MidnightBurrows.BelowUpperKS", [15], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.Entrance") and s.has("Glide", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.PurpleDoorOpen", player), lambda s: s.can_reach_region("WestHollow.Entrance") and s.has("Grenade", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", "", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WestHollow.Entrance", "WestHollow.MokiByTwillen", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "WestHollow.Entrance", "WestHollow.InFrontPurpleDoorEnemyPaths", [], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Glide", player))
    add_rule(world.get_location("WestHollow.UpperDrainLeverPulled", player), lambda s: s.can_reach_region("WestHollow.MokiByTwillen") and cost_all(s, player, options, "WestHollow.MokiByTwillen", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestHollow.UpperDrainLeverPulled", player), lambda s: s.can_reach_region("WestHollow.MokiByTwillen") and cost_all(s, player, options, "WestHollow.MokiByTwillen", "", [], [['Blaze', 1]], [], []))
    add_rule(world.get_location("WestHollow.UpperDrainLeverPulled", player), lambda s: s.can_reach_region("WestHollow.MokiByTwillen") and s.has("Flash", player))
    add_rule(world.get_location("WestHollow.UpperDrainLeverPulled", player), lambda s: s.can_reach_region("WestHollow.MokiByTwillen"))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", "WestHollow.MokiByTwillen", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Flash", player))
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.RockPuzzle", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.RockPuzzle", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("Flash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.Entrance", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Grenade", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Flash", player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.Entrance", [40], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.Entrance", [60], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", "WestHollow.Entrance", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Grenade", player) and s.has("WaterDash", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("WaterDash", player))
    add_rule(world.get_location("E.WestHollow.RockPuzzle", player), lambda s: s.can_reach_region("WestHollow.RockPuzzle") and s.has("Sword", player) and s.has("Magnet", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("Grenade", player) and s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.FarLeftRoom", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.FarLeftRoom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("Flash", player) and s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player))
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", "WestHollow.FarLeftRoom", [], [['Bow', 1]], [], []))
    add_rule(world.get_location("WestHollow.FullyDrained", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("Bash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("['Hammer', 'Sentry']", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [['Sentry', 1]], [], [[2, 50]]))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("HammerJump", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("HammerJump", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [], [], [[2, 50]]))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("Grenade", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("Grenade", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [], [], [], [[2, 50]]))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has_all(("WaterDash", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [30], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has("WaterDash", player) and s.has("HammerJump", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [30], [], [], []))
    add_rule(world.get_location("WestHollow.FarLeftEX", player), lambda s: s.can_reach_region("WestHollow.FarLeftRoom") and s.has_all(("WaterDash", "Grenade"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", "", [30], [], [], []))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Glide", "DoubleJump"), player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("HammerJump", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Flash", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.HollowDrainMiddle", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.HollowDrainMiddle", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Glide", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("Flash", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", "WestHollow.RockPuzzle", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("Glide", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("Grenade", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Glide", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Grenade", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Grenade", player) and s.has("WestHollow.FullyDrained", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", "WestHollow.SubmergedPlatform", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("HammerJump", player))
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("DoubleJump", "Glide"), player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", "WestHollow.SubmergedPlatform", [10], [], [], []))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("DoubleJump", player) and s.has("SpiritLight", player))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("Dash", player) and s.has("SpiritLight", player))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("SpiritLight", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "", [], [['Blaze', 1]], [], []))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("SpiritLight", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("Flash", player) and s.has("SpiritLight", player))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("Glide", player) and s.has("SpiritLight", player))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("Grenade", player) and s.has("SpiritLight", player))
    add_rule(world.get_location("WestHollow.LupoMap", player), lambda s: s.can_reach_region("WestHollow.HollowDrainLower") and s.has("SpiritLight", player) and s.has("HammerJump", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.TrialApproach", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.TrialApproach", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("Flash", player) and s.has("WestHollow.FullyDrained", player))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("HammerJump", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [90], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [90], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [90], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [90], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Flash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [90], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WaterDash", player) and s.has("HammerJump", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [40], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WaterDash", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [40], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WaterDash", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [40], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WaterDash", "Grenade"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [40], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [40], [['Bow', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WaterDash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [40], [['Blaze', 4]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("WaterDash", "Flash"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.HollowDrainMiddle", [40], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has("Dash", player) and s.has("HammerJump", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.RockPuzzle", [90], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has_all(("Dash", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.RockPuzzle", [90], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has_all(("Dash", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.RockPuzzle", [90], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has("WaterDash", player) and s.has("HammerJump", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.RockPuzzle", [40], [], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has_all(("WaterDash", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.RockPuzzle", [40], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has_all(("WaterDash", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", "WestHollow.RockPuzzle", [40], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: True)
    add_rule(world.get_location("WestHollow.BelowLupoEX", player), lambda s: s.can_reach_region("WestHollow.PolesPound") and s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WestHollow.PolesPound", "", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Flash", player))
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashArea", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WestHollow.DashCrushers", "WestHollow.DashArea", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashArea", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashArea", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Flash", player))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda s: s.can_reach_region("WestHollow.DashRoomTopRight") and cost_all(s, player, options, "WestHollow.DashRoomTopRight", "", [], [['Blaze', 1]], [], []))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda s: s.can_reach_region("WestHollow.DashRoomTopRight") and cost_all(s, player, options, "WestHollow.DashRoomTopRight", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestHollow.DashRightEX", player), lambda s: s.can_reach_region("WestHollow.DashRoomTopRight") and s.has("Flash", player))
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: True)
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Flash", player))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda s: s.can_reach_region("EastHollow.Teleporter") and s.has("HammerJump", player))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda s: s.can_reach_region("EastHollow.Teleporter") and s.has("Grenade", player))
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("DoubleJump", player) and s.has("WaveDash", player))
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("SwordJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("HammerJump", player))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda s: s.can_reach_region("EastHollow.VoiceDoorPlatform") and s.has("SwordJump", player))
    add_rule(world.get_location("EastHollow.HornBeetleFightEX", player), lambda s: s.can_reach_region("EastHollow.VoiceDoorPlatform") and s.has("Grenade", player))
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("HammerJump", player))
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_location("GladesTown.GromsWall", player), lambda s: s.can_reach_region("EastHollow.OutsideGlades") and cost_all(s, player, options, "EastHollow.OutsideGlades", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("GladesTown.GromsWall", player), lambda s: s.can_reach_region("EastHollow.OutsideGlades") and cost_all(s, player, options, "EastHollow.OutsideGlades", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("DoubleJump", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastHollow.SpikeLanternEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("HammerJump", player))
    add_rule(world.get_location("EastHollow.SecretRoofEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("DoubleJump", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastHollow.MortarEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("SwordJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("EastHollow.MortarEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and s.has("Grapple", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("EastHollow.MortarEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [], [['Sentry', 3]], [], []))
    add_rule(world.get_location("EastHollow.MortarEX", player), lambda s: s.can_reach_region("EastHollow.AfterBeetleFight") and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "", [], [['Sentry', 4]], [], []))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("SwordJump", player))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "EastHollow.Kwolok", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", "EastHollow.Kwolok", [], [['Sentry', 3]], [], []))
    add_rule(world.get_location("EastHollow.DepthsLever", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "EastHollow.AboveBash", "", [], [['Sentry', 1]], [[32, 'Combat']], []))
    add_rule(world.get_location("EastHollow.DepthsLever", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "EastHollow.AboveBash", "", [], [['Grenade', 1]], [[32, 'Combat']], []))
    add_rule(world.get_location("EastHollow.BashEC", player), lambda s: s.can_reach_region("EastHollow.AboveBash") and s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "EastHollow.AboveBash", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastHollow.BashEX", player), lambda s: s.can_reach_region("EastHollow.BashTreeCheckpoint") and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastHollow.SilentSwimEC", player), lambda s: s.can_reach_region("EastHollow.Kwolok") and s.has("Water", player) and cost_all(s, player, options, "EastHollow.Kwolok", "", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Water", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("WaterDash", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "EastHollow.Kwolok", "WoodsEntry.ShriekMeet", [60, 110], [['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.ArcingShard", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("Grenade", player) and s.has("GladesTown.ClearThorns", player))
    add_rule(world.get_location("GladesTown.LupoSwimLeftEX", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("Grenade", player) and s.has("GladesTown.ClearThorns", player) and s.has("Water", player))
    add_rule(world.get_location("GladesTown.LupoSwimLeftEX", player), lambda s: s.can_reach_region("GladesTown.Teleporter") and s.has("Grenade", player) and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.Teleporter", "", [], [], [], [[2, 100]]))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: True)
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has("Grenade", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "GladesTown.Teleporter", "GladesTown.BelowBountyShard", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has("WaveDash", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has_all(("Dash", "Glide"), player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has("Grenade", player) and s.has("GladesTown.TuleySpawned", player))
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has("Glide", player) and s.has("GladesTown.TuleySpawned", player))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and cost_all(s, player, options, "GladesTown.West", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.West") and s.has_all(("DoubleJump", "Glide"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Grenade", player) and s.has("GladesTown.BuildHuts", player))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "GladesTown.West", "WestGlades.PastTown", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.MotayHut") and s.has("Grenade", player) and s.has("TuleyShop.StickyGrass", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.MotayHut") and s.has("Grenade", player) and s.has("GladesTown.BuildHuts", player))
    add_rule(world.get_location("GladesTown.UpperOre", player), lambda s: s.can_reach_region("GladesTown.MotayHut") and s.has_all(("Grapple", "Bash", "Dash"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.MotayHut", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has("Grenade", player) and s.has("GladesTown.BuildHuts", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Dash"), player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.MotayHut", "GladesTown.UpperWest", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.BraveMokiHutEX", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and s.has("Grenade", player) and s.has("GladesTown.OnwardsAndUpwards", player))
    add_rule(world.get_location("GladesTown.AboveGromHC", player), lambda s: s.can_reach_region("GladesTown.UpperWest") and cost_all(s, player, options, "GladesTown.UpperWest", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("Grenade", player) and s.has("GladesTown.CaveEntrance", player))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Bow', 2], ['Sentry', 1]], [], []))
    add_rule(world.get_location("GladesTown.AcornQI", player), lambda s: s.can_reach_region("GladesTown.AcornMoki") and s.has("Grenade", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", "", [], [['Bow', 2]], [], []))
    add_rule(world.get_location("GladesTown.BountyShard", player), lambda s: s.can_reach_region("GladesTown.BelowBountyShard") and s.has("Grenade", player))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.LeftAboveCoals") and s.has("Grenade", player))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.LeftAboveCoals") and s.has("Glide", player))
    add_rule(world.get_location("GladesTown.UpdraftCeilingEX", player), lambda s: s.can_reach_region("GladesTown.LeftAboveCoals") and s.has("TuleyShop.SpringPlants", player))
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.BelowBountyShard", player), lambda s: s.has("TuleyShop.SpringPlants", player) and s.has("WaveDash", player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("SwordJump", player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("Grenade", player) and s.has("TuleyShop.SpringPlants", player))
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.HoleHutEntrance", player), lambda s: s.has("Grenade", player) and s.has("GladesTown.RoofsOverHeads", player))
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("Grenade", player))
    add_rule(world.get_location("WestGlades.GrappleEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "Glide"), player))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Bash", "Glide"), player))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [['Sentry', 1]], [[40, 'Ranged']], []))
    add_rule(world.get_location("WestGlades.AbovePlantEX", player), lambda s: s.can_reach_region("WestGlades.PastTown") and s.has_all(("Glide", "DoubleJump"), player) and cost_all(s, player, options, "WestGlades.PastTown", "", [], [], [[40, 'Ranged']], []))
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.Center", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WestGlades.PastTown", "WestGlades.Center", [20], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WestGlades.PastTown", "GladesTown.West", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has_all(("Bash", "Glide", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "WestGlades.LowerPool", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("Grenade", player) and cost_all(s, player, options, "WestGlades.LowerPool", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("Grenade", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and s.has("Grenade", player) and cost_all(s, player, options, "WestGlades.LowerPool", "", [], [], [], [[2, 10]]))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.LowerPool") and cost_all(s, player, options, "WestGlades.LowerPool", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WestGlades.LowerPool", "WestGlades.Center", [20], [['Sentry', 2]], [], []))
    add_rule(world.get_location("WestGlades.LeftOre", player), lambda s: s.can_reach_region("WestGlades.Center") and s.has_all(("Glide", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "WestGlades.Center", "", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Center") and cost_all(s, player, options, "WestGlades.Center", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestGlades.RightOre", player), lambda s: s.can_reach_region("WestGlades.Upper") and s.has("Glide", player))
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_location("OuterWellspring.SwimOre", player), lambda s: s.can_reach_region("WestGlades.MillApproach") and s.has_all(("Water", "Glide"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WestGlades.MillApproach", "WestGlades.ShrineArea", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WestGlades.MillApproach", "WestGlades.ShrineArea", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has_all(("Grenade", "DoubleJump"), player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: True)
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Flash", player))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "WestGlades.MillApproach", "WestGlades.Upper", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Shuriken', 1]]))
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Grenade", "Hammer"), player))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has_all(("Grapple", "Glide"), player))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has("Glide", player))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has_all(("Grenade", "DoubleJump"), player))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has("Grenade", player) and s.has_any(("Dash", "Glide"), player))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has("HammerJump", player))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and cost_all(s, player, options, "WestGlades.ShrineArea", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and cost_all(s, player, options, "WestGlades.ShrineArea", "", [], [['Blaze', 2]], [], []))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has("Flash", player))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has_all(("Hammer", "DoubleJump"), player) and cost_all(s, player, options, "WestGlades.ShrineArea", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WestGlades.ShrineHC", player), lambda s: s.can_reach_region("WestGlades.ShrineArea") and s.has_all(("Hammer", "DoubleJump"), player) and cost_all(s, player, options, "WestGlades.ShrineArea", "", [], [['Blaze', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has_all(("Grenade", "DoubleJump"), player))
    add_rule(world.get_location("OuterWellspring.EntranceRoofEX", player), lambda s: s.can_reach_region("OuterWellspring.EntranceDoor") and s.has_all(("Grenade", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash"), player))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [15], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [], [['Sentry', 2]], [], [[2, 15]]))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Glide", player) and s.has("OuterWellspring.FallingWheel", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", "OuterWellspring.AboveEntranceDoor", [10], [], [], []))
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Grenade", "DoubleJump"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestWallBroken", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", "", [], [], [[125.0, 'Shuriken']], []))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has("SwordJump", player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has("HammerJump", player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has("GlideHammerJump", player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has("Flash", player))
    add_rule(world.get_location("OuterWellspring.LifeHarvestShard", player), lambda s: s.can_reach_region("OuterWellspring.LifeHarvestEntry") and s.has("Grenade", player))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Water", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [15], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Water", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", "OuterWellspring.EntranceDoor", [], [['Sentry', 1]], [], [[2, 60]]))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("DoubleJump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.EastDoor", [15], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.EastDoor", [], [['Grenade', 1], ['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Glide", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", "OuterWellspring.EastDoor", [], [['Grenade', 1], ['Sentry', 2]], [], []))
    add_rule(world.get_location("OuterWellspring.HiddenHC", player), lambda s: s.can_reach_region("OuterWellspring.WestDoor") and s.has_all(("Bash", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", "", [], [['Grenade', 1], ['Sentry', 1]], [], []))
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Glide", player))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and cost_all(s, player, options, "OuterWellspring.TopDoor", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has("Grenade", player))
    add_rule(world.get_location("OuterWellspring.UltraGrappleShard", player), lambda s: s.can_reach_region("OuterWellspring.TopDoor") and s.has("Grenade", player) and s.has_any(("DoubleJump", "Dash"), player))
    add_rule(world.get_location("InnerWellspring.ThreeWheelsEX", player), lambda s: s.can_reach_region("InnerWellspring.EntranceDoor") and s.has("Grenade", player))
    add_rule(world.get_location("InnerWellspring.ThornEX", player), lambda s: s.can_reach_region("InnerWellspring.ThornShardArea") and s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", "", [15], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [], [], [[20, 'Shuriken']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [15], [], [[20, 'Shuriken']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", "InnerWellspring.DrainAreaExit", [], [['Grenade', 2]], [[20, 'Shuriken']], []))
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Water", "WaterDash", "Glide"), player))
    add_rule(world.get_location("InnerWellspring.DrainLever", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has("Grenade", player))
    add_rule(world.get_location("InnerWellspring.LeverEC", player), lambda s: s.can_reach_region("InnerWellspring.BelowDrainLever") and s.has("Grenade", player))
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: True)
    add_rule(world.get_location("InnerWellspring.MiddleDoorsOpen", player), lambda s: s.can_reach_region("InnerWellspring.WestDoor") and cost_all(s, player, options, "InnerWellspring.WestDoor", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.SpinPuzzle") and s.has("Water", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.SpinPuzzleSolved", player), lambda s: s.can_reach_region("InnerWellspring.PastSpinPuzzle") and s.has("Water", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("InnerWellspring.BlueMoonSeed", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has("Flash", player))
    add_rule(world.get_location("InnerWellspring.AboveTpEX", player), lambda s: s.can_reach_region("InnerWellspring.Teleporter") and s.has("Flash", player))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has("Flash", player))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_any(("Sword", "Hammer", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.Teleporter", "InnerWellspring.EscapeSequence", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_any(("Sword", "Hammer", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.Teleporter", "InnerWellspring.EscapeSequence", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: True)
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has("Grenade", player))
    add_rule(world.get_location("InnerWellspring.WaterEscape", player), lambda s: s.can_reach_region("InnerWellspring.EscapeSequence") and s.has("Flash", player))
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_EastHollow.Kwolok", player), lambda s: s.has("Water", player) and cost_all(s, player, options, "WoodsEntry.ShriekMeet", "EastHollow.Kwolok", [], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_EastHollow.Kwolok", player), lambda s: s.has("Water", player) and cost_all(s, player, options, "WoodsEntry.ShriekMeet", "EastHollow.Kwolok", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_all(("DoubleJump", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", "WoodsMain.WallOreLedge", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WoodsMain.UpperKS", player), lambda s: s.can_reach_region("WoodsMain.FourKeystoneRoom") and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", "", [], [['Sentry', 1]], [[3, 'Wall']], []))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("DoubleJump", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "WoodsMain.BelowHiddenOre", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("WoodsMain.BalloonLureBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", "WoodsMain.BelowHiddenOre", [], [['Sentry', 3]], [], []))
    add_rule(world.get_location("WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "", [], [], [[6, 'Shuriken']], []))
    add_rule(world.get_location("WoodsMain.HiddenOre", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WoodsMain.HiddenOre", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("WoodsMain.HiddenOre", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "", [], [['Sentry', 1], ['Blaze', 1]], [], []))
    add_rule(world.get_location("WoodsMain.HiddenOre", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WoodsMain.HiddenOre", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and s.has("['Hammer', 'Sentry']", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WoodsMain.HiddenOre", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "", [], [['Sentry', 1]], [], [[1, 'Shuriken', 1], [2, 15]]))
    add_rule(world.get_location("WoodsMain.HiddenOre", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and s.has("SwordJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "", [15], [], [], []))
    add_rule(world.get_location("WoodsMain.HiddenOre", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and s.has_all(("DoubleJump", "Grenade"), player))
    add_rule(world.get_location("WoodsMain.HiddenOre", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", "", [], [['Blaze', 6]], [], []))
    add_rule(world.get_location("WoodsMain.HiddenOre", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and s.has("Flash", player))
    add_rule(world.get_location("WoodsMain.HiddenOre", player), lambda s: s.can_reach_region("WoodsMain.BelowHiddenOre") and s.has("HammerJump", player))
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: True)
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.OrangeTree", player), lambda s: True)
    add_rule(world.get_location("WoodsMain.LogBlobDestroyed", player), lambda s: s.can_reach_region("WoodsMain.Teleporter") and cost_all(s, player, options, "WoodsMain.Teleporter", "", [], [], [[6, 'Shuriken']], []))
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("DoubleJump", "Grenade"), player))
    add_rule(world.get_location("LowerReach.BelowBaurEX", player), lambda s: s.can_reach_region("LowerReach.Entry") and s.has("Grenade", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player))
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has("HammerJump", player) and cost_all(s, player, options, "LowerReach.Entry", "LowerReach.AboveEntry", [20], [], [], []))
    add_rule(world.get_location("LowerReach.Lever", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.AboveBaurLowerEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("DoubleJump", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.AboveBaurUpperEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("LowerReach.ThawBaurFurnace", player) and s.has("DoubleJump", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.AboveBaurUpperEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [['Sentry', 2]], [], [[2, 20]]))
    add_rule(world.get_location("LowerReach.AboveBaurUpperEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("['Sword', 'Sentry']", player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.AboveBaurUpperEX", player), lambda s: s.can_reach_region("LowerReach.AboveEntry") and s.has("Dash", player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("DoubleJump", "Glide"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("TripleJump", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("['Sword', 'Sentry']", "DoubleJump"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Sentry', 1]], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.IcefallOre", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("['Hammer', 'Sentry']", "DoubleJump", "Dash"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Sentry', 1]], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("['Sword', 'Sentry']", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Sentry', 1]], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has("Glide", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has_any(("Dash", "DoubleJump"), player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Sentry', 1]], [[25, 'Combat']], []))
    add_rule(world.get_location("LowerReach.IcefallEX", player), lambda s: s.can_reach_region("LowerReach.Icefall") and s.has_all(("Dash", "DoubleJump"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", "", [], [['Sentry', 1]], [[25, 'Combat']], []))
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", "LowerReach.OutsideTPRoom", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.AboveDoorEX", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom"))
    add_rule(world.get_location("LowerReach.TPLeftEX", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("Grenade", player))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and cost_all(s, player, options, "LowerReach.OutsideTPRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("HammerJump", player))
    add_rule(world.get_location("LowerReach.HiddenOre", player), lambda s: s.can_reach_region("LowerReach.OutsideTPRoom") and s.has("GlideHammerJump", player))
    add_rule(world.get_location("LowerReach.BelowLupoEX", player), lambda s: s.can_reach_region("LowerReach.BelowLupo") and cost_all(s, player, options, "LowerReach.BelowLupo", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.WindLantern", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has_any(("DoubleJump", "Bash", "Hammer"), player) and cost_all(s, player, options, "LowerReach.WindChannel", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and cost_all(s, player, options, "LowerReach.WindChannel", "", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.WindChannel", "", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and cost_all(s, player, options, "LowerReach.WindChannel", "", [20, 20], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has("HammerJump", player))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has_all(("Grenade", "DoubleJump"), player))
    add_rule(world.get_location("LowerReach.WindHiddenEX", player), lambda s: s.can_reach_region("LowerReach.WindChannel") and s.has("Grenade", player) and cost_all(s, player, options, "LowerReach.WindChannel", "", [20, 20], [], [], []))
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("HammerJump", player))
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has_all(("Grenade", "DoubleJump"), player))
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "LowerReach.WindChannel", "LowerReach.SoupMoki", [20, 20, 20], [], [], []))
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: True)
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("SwordJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: True)
    add_rule(world.get_location("LowerReach.TPLantern", player), lambda s: s.can_reach_region("LowerReach.Snowball") and s.has_all(("DoubleJump", "Sword"), player) and cost_all(s, player, options, "LowerReach.Snowball", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.RolledSnowball", player), lambda s: s.can_reach_region("LowerReach.Snowball") and cost_all(s, player, options, "LowerReach.Snowball", "", [20], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.RolledSnowball", player), lambda s: s.can_reach_region("LowerReach.Snowball") and s.has("DoubleJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.Snowball", "", [], [['Sentry', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1]]))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and s.has_all(("['Sword', 'Sentry']", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.PastSnowball", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.PastSnowball", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and cost_all(s, player, options, "LowerReach.PastSnowball", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and s.has_all(("Grenade", "DoubleJump"), player))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and s.has("HammerJump", player))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and cost_all(s, player, options, "LowerReach.PastSnowball", "", [], [['Blaze', 6]], [], []))
    add_rule(world.get_location("LowerReach.RoofLeftEX", player), lambda s: s.can_reach_region("LowerReach.PastSnowball") and s.has("Flash", player))
    add_rule(world.get_location("LowerReach.RoofRightEX", player), lambda s: s.can_reach_region("LowerReach.IceCavern") and s.has("HammerJump", player))
    add_rule(world.get_location("LowerReach.EastDoorLantern", player), lambda s: s.can_reach_region("LowerReach.HalfwayIceCavern") and s.has("Dash", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "", [], [['Grenade', 1], ['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.EastDoorLantern", player), lambda s: s.can_reach_region("LowerReach.HalfwayIceCavern") and s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", "", [], [['Sentry', 3]], [], []))
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("['Sword', 'Sentry']", "DoubleJump"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("TripleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("DoubleJump", "Glide", "Dash"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", "LowerReach.ArenaArea", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("LowerReach.EastDoorLantern", player) and s.has("HammerJump", player))
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("SwordJump", player))
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.WindSpinners", player), lambda s: s.has("Flash", player) and s.has("LowerReach.ArenaBeaten", player))
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Flash", player))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", "LowerReach.BridgeWispPath", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']"), player) and s.has_any(("Glide", "DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", "LowerReach.BridgeWispPath", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Flash", player))
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Flash", player))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has("Dash", player) and s.has("Grapple", player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [['Sentry', 3]], [], []))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has("Dash", player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [['Sentry', 3]], [], [[2, 20]]))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has("Dash", player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [['Sentry', 4]], [], []))
    add_rule(world.get_location("LowerReach.ForestsMemory", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has("Flash", player))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has_all(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has("Dash", player) and s.has("Grapple", player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [['Sentry', 3]], [], []))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has("Dash", player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [['Sentry', 3]], [], [[2, 20]]))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has("Dash", player) and cost_all(s, player, options, "LowerReach.SnowEscape", "", [], [['Sentry', 4]], [], []))
    add_rule(world.get_location("LowerReach.BearSneezed", player), lambda s: s.can_reach_region("LowerReach.SnowEscape") and s.has("Flash", player))
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: s.has("Grenade", player) and s.has_any(("DoubleJump", "Dash", "Sword", "Hammer"), player))
    add_rule(world.get_location("LowerReach.TrialEX", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has_all(("Grenade", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.TrialEX", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("DoubleJump", player) and s.has("HammerJump", player) and s.has("TripleJump", player) and cost_all(s, player, options, "LowerReach.TrialStart", "", [20], [], [], []))
    add_rule(world.get_location("LowerReach.TrialEX", player), lambda s: s.can_reach_region("LowerReach.TrialStart") and s.has("Flash", player))
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.ArenaArea", player), lambda s: s.has("Flash", player) and s.has("LowerReach.ArenaBeaten", player))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has("Burrow", player) and s.has("Glide", player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has("Burrow", player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [], [['Sentry', 1]], [], [[2, 20]]))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "['Sword', 'Sentry']", "Dash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperReach.LifeForceEX", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "['Hammer', 'Sentry']", "Dash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has("Burrow", player) and s.has("Glide", player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has("Burrow", player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [], [['Sentry', 1]], [], [[2, 20]]))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "['Sword', 'Sentry']", "Dash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperReach.LifeForceShard", player), lambda s: s.can_reach_region("UpperReach.BurrowArea") and s.has_all(("Burrow", "['Hammer', 'Sentry']", "Dash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", "", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperReach.LowerKS", player), lambda s: s.can_reach_region("UpperReach.KeystoneRoom") and cost_all(s, player, options, "UpperReach.KeystoneRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: True)
    add_rule(world.get_location("UpperReach.UpperKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupPaths") and s.has("['Sword', 'Sentry']", player) and s.has_any(("DoubleJump", "Hammer"), player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", "", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", "UpperReach.KeystoneSnapPlant", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperReach.UpperKS", player), lambda s: s.can_reach_region("UpperReach.UpperSoupFrozenPaths") and s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "UpperReach.UpperSoupFrozenPaths", "", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperReach.TreeOre", player), lambda s: s.can_reach_region("UpperReach.TreeRoomLedge") and s.has_any(("DoubleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has("DoubleJump", player) and s.has("EastHollow.DepthsOpen", player) and cost_all(s, player, options, "UpperDepths.Entry", "EastHollow.AboveDepths", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("UpperDepths.EntryRoofEX", player), lambda s: s.can_reach_region("UpperDepths.FirstFirefly") and s.has("Glide", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", "", [30], [['Sentry', 1]], [[32, 'Ranged']], []))
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_LowerDepths.East", player), lambda s: True)
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has("Flash", player))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West"))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("HammerJump", player))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and cost_all(s, player, options, "LowerDepths.West", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and cost_all(s, player, options, "LowerDepths.West", "", [], [['Blaze', 2]], [], []))
    add_rule(world.get_location("H.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("Flash", player))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("BreakCrystal", player))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("BreakCrystal", player) and s.has("HammerJump", player))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("BreakCrystal", player) and cost_all(s, player, options, "LowerDepths.West", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("BreakCrystal", player) and cost_all(s, player, options, "LowerDepths.West", "", [], [['Blaze', 2]], [], []))
    add_rule(world.get_location("E.LowerDepths.West", player), lambda s: s.can_reach_region("LowerDepths.West") and s.has("Flash", player) and s.has("BreakCrystal", player))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: True)
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [[40, 'Shuriken']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [['Shuriken', 2]], [[40, 'Shuriken']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("HammerJump", player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [[40, 'Shuriken']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Sword", "Water"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [[40, 'Shuriken']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [140], [], [[40, 'Shuriken']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: True)
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: True)
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Flash", player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [[40, 'Shuriken']], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "Glide"), player) and s.has("UpperDepths.ForestsEyes", player))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "Glide"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [], [[1, 'Flash', 0]]))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "Glide"), player) and s.has_any(("DoubleJump", "Dash"), player) and s.has("UpperDepths.ForestsEyes", player))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "Glide"), player) and s.has_any(("DoubleJump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [], [[1, 'Flash', 0]]))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Water", player) and s.has("HammerJump", player) and s.has("UpperDepths.ForestsEyes", player))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Water", player) and s.has("HammerJump", player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [], [[1, 'Flash', 0]]))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Water", player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Water", player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [['Sentry', 1]], [], [[1, 'Flash', 0]]))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "Flash"), player) and s.has("UpperDepths.ForestsEyes", player))
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Water", "Flash"), player) and cost_all(s, player, options, "LowerDepths.West", "DepthsShrine", [], [], [], [[1, 'Flash', 0]]))
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Dash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: True)
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Glide", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [10], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Glide", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerDepths.West", "LowerDepths.Central", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("HammerJump", player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("HammerJump", player))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("Grapple", player) and s.has("DepthsLight", player))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("Grenade", player) and s.has("DepthsLight", player))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and cost_all(s, player, options, "LowerDepths.Central", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has("HammerJump", player))
    add_rule(world.get_location("LowerDepths.RaceStartHC", player), lambda s: s.can_reach_region("LowerDepths.Central") and s.has_all(("DoubleJump", "Glide"), player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "Grenade"), player))
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("HammerJump", player))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has("DepthsLight", player))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has("Glide", player) and s.has("DepthsLight", player))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has("DepthsLight", player) and s.has("HammerJump", player))
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has("Launch", player))
    add_rule(world.get_location("E.LowerDepths.East", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Grenade", player) and s.has("BreakCrystal", player))
    add_rule(world.get_location("E.LowerDepths.East", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("BreakCrystal", player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("DoubleJump", "Glide"), player) and s.has("DepthsLight", player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("DepthsLight", player) and s.has("HammerJump", player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("Grenade", "Glide"), player) and s.has("DepthsLight", player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Glide", player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_any(("DoubleJump", "Grapple"), player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Flash", player))
    add_rule(world.get_location("LowerDepths.SpiritSurgeShard", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("Bash", "Grapple", "Grenade"), player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("SpiritLight", player) and s.has_any(("DepthsLight", "DoubleJump"), player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("Bash", "Grenade"), player) and s.has("SpiritLight", player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has_all(("DoubleJump", "Grenade"), player) and s.has("SpiritLight", player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("Glide", player) and s.has("SpiritLight", player))
    add_rule(world.get_location("LowerDepths.LupoMap", player), lambda s: s.can_reach_region("LowerDepths.East") and s.has("SpiritLight", player) and s.has("WaveDash", player))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [['Sentry', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [['Sentry', 1]], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has("DepthsLight", player) and s.has("HammerJump", player) and cost_all(s, player, options, "LowerDepths.East", "UpperDepths.SecondKSRoom", [], [], [[20, 'Wall']], []))
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Bash", player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Grenade", player) and s.has("DoubleJump", player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.East", [], [], [], [[2, 20]]))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("DoubleJump", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.East", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: True)
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: True)
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: True)
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has("Bash", player) and s.has_any(("DoubleJump", "Dash", "Grapple", "Glide"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", "LowerDepths.TreeArea", [], [], [[1, 'Wall']], []))
    add_rule(world.get_location("LowerDepths.RightEX", player), lambda s: s.can_reach_region("LowerDepths.TreeArea") and cost_all(s, player, options, "LowerDepths.TreeArea", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has("Water", player) and s.has("SwordJump", player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", "WestGlades.MillApproach", [15], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has("Water", player) and s.has("HammerJump", player))
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("DoubleJump", player) and s.has("HammerJump", player) and s.has_any(("Dash", "TripleJump"), player))
    add_rule(world.get_location("PoolsApproach.MillPathEX", player), lambda s: s.can_reach_region("PoolsApproach.MillPath") and s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Grenade", "Grapple"), player) and s.has("Combat.Dangerous", player) and s.has_any(("Sword", "Hammer", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [], [], [[32, 'Combat']], []))
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Grenade", "Grapple"), player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "PoolsApproach.MillPath", "PoolsApproach.MillPathCheckpoint", [], [], [[32, 'Combat']], [[2, 20]]))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Water", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.UnderwaterWallBroken", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [['Grenade', 1]], [], [[2, 180]]))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Glide", player) and s.has_any(("DoubleJump", "Sword", "Hammer"), player))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Glide", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]]))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("SwordJump", player))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("HammerJump", player))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has("Grenade", player))
    add_rule(world.get_location("PoolsApproach.AboveWheelEX", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "DoubleJump"), player) and s.has("HammerJump", player) and s.has_any(("Dash", "TripleJump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "", [20], [], [], []))
    add_rule(world.get_location("PoolsApproach.MillPathHC", player), lambda s: s.can_reach_region("PoolsApproach.OnTopOfWheel") and s.has_all(("Water", "DoubleJump"), player) and s.has("HammerJump", player) and s.has_any(("Grapple", "Glide"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "DoubleJump"), player) and s.has("HammerJump", player) and s.has_any(("Dash", "TripleJump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", "PoolsApproach.MarshBreakableWall", [20], [], [], []))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water", "DoubleJump"), player) and s.has("HammerJump", player) and s.has_any(("Grapple", "Glide"), player))
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Water", "DoubleJump"), player) and s.has("TripleJump", player) and s.has("HammerJump", player))
    add_rule(world.get_location("EastPools.BelowLeverEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and s.has("DoubleJump", player) and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastPools.BelowLeverEX", player), lambda s: s.can_reach_region("EastPools.LeverRoom") and cost_all(s, player, options, "EastPools.LeverRoom", "", [], [['Sentry', 1]], [], [[2, 20]]))
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: True)
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: True)
    add_rule(world.get_location("EastPools.PurpleWallHC", player), lambda s: s.can_reach_region("EastPools.AboveFishingPool") and s.has("Bash", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("EastPools.GrassSeed", player), lambda s: s.can_reach_region("EastPools.CentralRoom") and cost_all(s, player, options, "EastPools.CentralRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("EastPools.CentralRoomBubbleFree", player) and cost_all(s, player, options, "EastPools.CentralRoom", "UpperPools.KeystoneRoomEntrance", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Grenade", player) and s.has("EastPools.CentralRoomBubbleFree", player) and s.has_any(("DoubleJump", "Glide"), player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("EastPools.CentralRoomBubbleFree", player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: True)
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Water", "WaterBreath", "DoubleJump", "Grenade"), player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Water", "WaterBreath", "DoubleJump"), player) and s.has("HammerJump", player))
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Water", "WaterBreath"), player) and s.has("SwordJump", player) and cost_all(s, player, options, "EastPools.CentralRoom", "WestPools.Teleporter", [20], [], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_WestPools.Teleporter", player), lambda s: s.has_all(("Water", "DoubleJump", "Grenade"), player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_WestPools.Teleporter", player), lambda s: s.has_all(("Water", "DoubleJump"), player) and s.has("HammerJump", player))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_WestPools.Teleporter", player), lambda s: s.has("Water", player) and s.has("SwordJump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "WestPools.Teleporter", [20], [], [], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("Water", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", "WestPools.RightKwolokPlatform", [20, 20, 20], [], [[40, 'Shuriken']], []))
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Flap", "['Sword', 'Sentry']"), player) and can_keystones(s, player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", "UpperPools.BeforeKeystoneDoor", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "UpperPools.RightBubbleSpamRoom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grapple", player) and s.has("UltraGrapple", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "UpperPools.RightBubbleSpamRoom", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grapple", player) and s.has("UltraGrapple", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "UpperPools.RightBubbleSpamRoom", [], [['Spear', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Grapple", "Flash"), player) and s.has("UltraGrapple", player))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grapple", player) and s.has("UltraGrapple", player))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "UpperPools.RightBubbleSpamRoom", [], [['Blaze', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "UpperPools.RightBubbleSpamRoom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Grenade", "Flash"), player))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grenade", player) and s.has_any(("Hammer", "DoubleJump", "Dash"), player))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", "UpperPools.RightBubbleSpamRoom", [], [], [], [[1, 'Shuriken', 1], [2, 20]]))
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("HammerJump", player))
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("UpperPools.ButtonDoorAboveTree", player) and cost_all(s, player, options, "UpperPools.TreeRoom", "UpperPools.DrainPuzzleEntrance", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("UpperPools.WaterfallEC", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleEntrance") and s.has("['Hammer', 'Sentry']", player) and s.has("Grapple", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Glide", player) and s.has("UpperPools.DrainRoomPurpleWall", player))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleRight") and s.has_all(("WaterDash", "Bash", "Water", "Glide"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.UpperWaterDrained", player), lambda s: s.can_reach_region("UpperPools.DrainPuzzleRight") and s.has_all(("WaterDash", "Bash", "Glide"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "", [60], [['Grenade', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], []))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [], [['Blaze', 1]], [], []))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("Grenade", player))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("Flash", player))
    add_rule(world.get_location("UpperPools.BubbleSpamLever", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom"))
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has_all(("DoubleJump", "Glide"), player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("DoubleJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has_all(("DoubleJump", "Glide"), player))
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", "", [], [['Blaze', 2]], [], []))
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("Flash", player))
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("Grenade", player))
    add_rule(world.get_location("UpperPools.FishPoolOre", player), lambda s: s.can_reach_region("UpperPools.RightBubbleSpamRoom") and s.has("HammerJump", player))
    add_rule(world.get_location("UpperPools.RightBubblesEX", player), lambda s: s.can_reach_region("UpperPools.LeftBubbleSpamRoom") and s.has_all(("Bash", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", "", [120, 140], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", "UpperPools.RightBubbleSpamRoom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", "UpperPools.RightBubbleSpamRoom", [60], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("DoubleJump", player) and s.has("HammerJump", player))
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and s.has("HammerJump", player))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "['Hammer', 'Sentry']", "DoubleJump", "Dash", "Hammer"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "DoubleJump"), player) and s.has("WindtornRuins.Seir", player) and s.has_any(("TripleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has("Burrow", player) and s.has("WindtornRuins.Seir", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WestTP", "WeepingRidge.Bottom", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has_all(("Grenade", "DoubleJump"), player))
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.LeverArea", player), lambda s: s.has("Glide", player))
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: True)
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has_all(("DoubleJump", "Glide"), player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", "LowerWastes.MuncherClimb", [30], [], [], []))
    add_rule(world.get_location("LowerWastes.LupoMap", player), lambda s: s.can_reach_region("LowerWastes.ThirstyGorlek") and s.has("SpiritLight", player) and cost_all(s, player, options, "LowerWastes.ThirstyGorlek", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("LowerWastes.LupoMap", player), lambda s: s.can_reach_region("LowerWastes.ThirstyGorlek") and s.has("Grenade", player) and s.has("SpiritLight", player))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("Bash", player) and can_keystones(s, player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperWastes.KeystoneDoor", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Bash", "DoubleJump"), player) and can_keystones(s, player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperWastes.TurmoilShard", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has_all(("Burrow", "DoubleJump", "Bash"), player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", "", [30], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperWastes.KSDoorEX", player), lambda s: s.can_reach_region("UpperWastes.KeystoneRoom") and s.has("SwordJump", player) and s.has("TripleJump", player))
    add_rule(world.get_location("UpperWastes.LedgeEC", player), lambda s: s.can_reach_region("UpperWastes.MissilePuzzleLeft") and cost_all(s, player, options, "UpperWastes.MissilePuzzleLeft", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperWastes.RoofEX", player), lambda s: s.can_reach_region("UpperWastes.RuinsApproach") and s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.RuinsApproach", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("UpperWastes.FlowersSeed", player), lambda s: s.can_reach_region("UpperWastes.NorthTP") and s.has("DoubleJump", player) and cost_all(s, player, options, "UpperWastes.NorthTP", "", [30], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "DoubleJump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", "UpperWastes.OutsideRuins", [30], [['Sentry', 2]], [], []))
    add_rule(world.get_location("WindtornRuins.HeartBarrier", player), lambda s: s.can_reach_region("WindtornRuins.FallenPillar") and cost_all(s, player, options, "WindtornRuins.FallenPillar", "", [], [], [[32, 'Shuriken']], []))
    add_rule(world.get_location("WindtornRuins.HeartBarrier", player), lambda s: s.can_reach_region("WindtornRuins.FallenPillar") and cost_all(s, player, options, "WindtornRuins.FallenPillar", "", [], [], [[100.0, 'Shuriken']], []))
    add_rule(world.get_location("WindtornRuins.Seir", player), lambda s: s.can_reach_region("WindtornRuins.Escape") and s.has_all(("Burrow", "Flash"), player) and s.has("WindtornRuins.HeartBarrier", player))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.LaunchArea") and s.has("DoubleJump", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "", [40], [['Bow', 1], ['Sentry', 2]], [], []))
    add_rule(world.get_location("WeepingRidge.Ore", player), lambda s: s.can_reach_region("WeepingRidge.LaunchArea") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash", "Glide"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has_all(("DoubleJump", "Dash"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has("TripleJump", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", "WillowsEnd.Entry", [], [['Sentry', 3]], [], []))
    add_rule(world.get_location("WeepingRidge.PortalEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [40], [['Sentry', 2]], [], []))
    add_rule(world.get_location("WeepingRidge.SpikeClimbEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has("DoubleJump", player) and s.has_any(("Bash", "Sword"), player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [], [['Sentry', 3]], [], []))
    add_rule(world.get_location("WeepingRidge.SpikeClimbEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has("DoubleJump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [], [['Sentry', 3]], [], [[2, 40]]))
    add_rule(world.get_location("WeepingRidge.SpikeClimbEX", player), lambda s: s.can_reach_region("WeepingRidge.AboveTree") and s.has_all(("DoubleJump", "Dash"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("WillowsEnd.GrappleWheelsHeart", player), lambda s: s.can_reach_region("WillowsEnd.Entry") and s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.Entry", "", [], [], [[60, 'Shuriken']], []))
    add_rule(world.get_location("WillowsEnd.EntryEX", player), lambda s: s.can_reach_region("WillowsEnd.Entry") and s.has("Dash", player) and s.has("SwordJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Glide", "DoubleJump", "Grapple"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeartMidPoint", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Dash"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeart", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("DoubleJump", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeart", [], [['Sentry', 2]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("['Sword', 'Sentry']", "DoubleJump"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeart", [], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("DoubleJump", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", "WillowsEnd.GrappleHeart", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("DoubleJump", player) and s.has("HammerJump", player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("DoubleJump", "Grenade"), player))
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.Entry", player), lambda s: s.has_all(("DoubleJump", "Grenade"), player))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("Grapple", "DoubleJump"), player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("['Sword', 'Sentry']", "Grapple", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [], [['Sentry', 1]], [], []))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has("DoubleJump", player) and s.has_any(("TripleJump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("['Sword', 'Sentry']", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [], [['Sentry', 2]], [], []))
    add_rule(world.get_location("WillowsEnd.SpikesOre", player), lambda s: s.can_reach_region("WillowsEnd.BoulderHeartPath") and s.has_all(("['Hammer', 'Sentry']", "DoubleJump", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", "", [], [['Sentry', 3]], [], []))
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WillowsEnd.InnerTP", "WillowsEnd.AboveInnerTP", [40], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.Upper", player), lambda s: s.has_all(("['Sword', 'Sentry']", "DoubleJump"), player) and s.has("TripleJump", player) and cost_all(s, player, options, "WillowsEnd.East", "WillowsEnd.Upper", [20], [['Sentry', 1]], [], []))
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath_to_WillowsEnd.East", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: s.has("SwordJump", player) and s.has("TripleJump", player))
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda s: True)
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: True)
